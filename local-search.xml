<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>jdbc</title>
    <link href="/2022/09/29/jdbc/"/>
    <url>/2022/09/29/jdbc/</url>
    
    <content type="html"><![CDATA[<p>JDBC核心技术</p><p>讲师：宋红康</p><p>微博：尚硅谷-宋红康</p><hr><h2 id="第1章：JDBC概述"><a href="#第1章：JDBC概述" class="headerlink" title="第1章：JDBC概述"></a>第1章：JDBC概述</h2><h3 id="1-1-数据的持久化"><a href="#1-1-数据的持久化" class="headerlink" title="1.1 数据的持久化"></a>1.1 数据的持久化</h3><ul><li><p>持久化(persistence)：<strong>把数据保存到可掉电式存储设备中以供之后使用</strong>。大多数情况下，特别是企业级应用，<strong>数据持久化意味着将内存中的数据保存到硬盘</strong>上加以”固化”<strong>，而持久化的实现过程大多通过各种关系数据库来完成</strong>。</p></li><li><p>持久化的主要应用是将内存中的数据存储在关系型数据库中，当然也可以存储在磁盘文件、XML数据文件中。</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209292333466.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220819084137619"></p></li></ul><p><strong>用数据库存储大量数据，方便快捷高效</strong></p><h3 id="1-2-Java中的数据存储技术"><a href="#1-2-Java中的数据存储技术" class="headerlink" title="1.2 Java中的数据存储技术"></a>1.2 Java中的数据存储技术</h3><ul><li><p>在Java中，数据库存取技术可分为如下几类：</p><ul><li><p><strong>JDBC</strong>直接访问数据库</p></li><li><p>JDO (Java Data Object )技术</p></li><li><p><strong>第三方O&#x2F;R工具</strong>，如Hibernate, Mybatis 等</p></li></ul></li><li><p>JDBC是java访问数据库的基石，JDO、Hibernate、MyBatis等只是更好的封装了JDBC。</p></li></ul><h3 id="1-3-JDBC介绍"><a href="#1-3-JDBC介绍" class="headerlink" title="1.3 JDBC介绍"></a>1.3 JDBC介绍</h3><ul><li>JDBC(Java Database Connectivity)是一个<strong>独立于特定数据库管理系统、通用的SQL数据库存取和操作的公共接口</strong>（一组API），定义了用来访问数据库的标准Java类库，（<strong>java.sql,javax.sql</strong>）使用这些类库可以以一种<strong>标准</strong>的方法、方便地访问数据库资源。</li><li>JDBC为访问不同的数据库提供了一种<strong>统一的途径</strong>，为开发者屏蔽了一些细节问题。</li><li>JDBC的目标是使Java程序员使用JDBC可以连接任何<strong>提供了JDBC驱动程序</strong>的数据库系统，这样就使得程序员无需对特定的数据库系统的特点有过多的了解，从而大大简化和加快了开发过程。</li><li>如果没有JDBC，那么Java程序访问数据库时是这样的：</li></ul><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209292333467.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220819085809577"></p><ul><li>有了JDBC，Java程序访问数据库时是这样的：</li></ul><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209292333468.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220819085953175"></p><ul><li>总结如下：</li><li><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209292333469.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220819090031861"></li><li></li></ul><h3 id="1-4-JDBC体系结构"><a href="#1-4-JDBC体系结构" class="headerlink" title="1.4 JDBC体系结构"></a>1.4 JDBC体系结构</h3><ul><li>JDBC接口（API）包括两个层次：<ul><li><strong>面向应用的API</strong>：Java API，抽象接口，供应用程序开发人员使用（连接数据库，执行SQL语句，获得结果）。</li><li><strong>面向数据库的API</strong>：Java Driver API，供开发商开发数据库驱动程序用。</li></ul></li></ul><blockquote><p><strong>JDBC是sun公司提供一套用于数据库操作的接口，java程序员只需要面向这套接口编程即可。</strong></p><p><strong>不同的数据库厂商，需要针对这套接口，提供不同实现。不同的实现的集合，即为不同数据库的驱动。————面向接口编程</strong></p></blockquote><h3 id="1-5-JDBC程序编写步骤"><a href="#1-5-JDBC程序编写步骤" class="headerlink" title="1.5 JDBC程序编写步骤"></a>1.5 JDBC程序编写步骤</h3><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209292333470.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220819091302175"></p><blockquote><p>补充：ODBC(<strong>Open Database Connectivity</strong>，开放式数据库连接)，是微软在Windows平台下推出的。使用者在程序中只需要调用ODBC API，由 ODBC 驱动程序将调用转换成为对特定的数据库的调用请求。</p></blockquote><h2 id="第2章：获取数据库连接"><a href="#第2章：获取数据库连接" class="headerlink" title="第2章：获取数据库连接"></a>第2章：获取数据库连接</h2><h3 id="2-1-要素一：Driver接口实现类"><a href="#2-1-要素一：Driver接口实现类" class="headerlink" title="2.1 要素一：Driver接口实现类"></a>2.1 要素一：Driver接口实现类</h3><h4 id="2-1-1-Driver接口介绍"><a href="#2-1-1-Driver接口介绍" class="headerlink" title="2.1.1 Driver接口介绍"></a>2.1.1 Driver接口介绍</h4><ul><li><p>java.sql.Driver 接口是所有 JDBC 驱动程序需要实现的接口。这个接口是提供给数据库厂商使用的，不同数据库厂商提供不同的实现。</p></li><li><p>在程序中不需要直接去访问实现了 Driver 接口的类，而是由驱动程序管理器类(java.sql.DriverManager)去调用这些Driver实现。</p><ul><li>Oracle的驱动：<strong>oracle.jdbc.driver.OracleDriver</strong></li><li>mySql的驱动： <strong>com.mysql.jdbc.Driver</strong></li></ul><p><strong>导入这些驱动的方法在csdn的收藏里有</strong></p></li></ul><h4 id="2-1-2-加载与注册JDBC驱动"><a href="#2-1-2-加载与注册JDBC驱动" class="headerlink" title="2.1.2 加载与注册JDBC驱动"></a>2.1.2 加载与注册JDBC驱动</h4><ul><li><p>加载驱动：加载 JDBC 驱动需调用 Class 类的静态方法 forName()，向其传递要加载的 JDBC 驱动的类名</p><ul><li><strong>Class.forName(“com.mysql.jdbc.Driver”);</strong></li></ul></li><li><p>注册驱动：DriverManager 类是驱动程序管理器类，负责管理驱动程序</p><ul><li><p><strong>使用DriverManager.registerDriver(com.mysql.jdbc.Driver)来注册驱动</strong></p></li><li><p>通常不用显式调用 DriverManager 类的 registerDriver() 方法来注册驱动程序类的实例，因为 Driver 接口的驱动程序类<strong>都</strong>包含了静态代码块，在这个静态代码块中，会调用 DriverManager.registerDriver() 方法来注册自身的一个实例。下图是MySQL的Driver实现类的源码：</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209292333471.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220819105337489"></p></li></ul></li></ul><h3 id="2-2-要素二：URL"><a href="#2-2-要素二：URL" class="headerlink" title="2.2 要素二：URL"></a>2.2 要素二：URL</h3><ul><li><p>JDBC URL 用于标识一个被注册的驱动程序，驱动程序管理器通过这个 URL 选择正确的驱动程序，从而建立到数据库的连接。</p></li><li><p>JDBC URL的标准由三部分组成，各部分间用冒号分隔。 </p><ul><li><strong>jdbc:子协议:子名称</strong></li><li><strong>协议</strong>：JDBC URL中的协议总是jdbc </li><li><strong>子协议</strong>：子协议用于标识一个数据库驱动程序</li><li><strong>子名称</strong>：一种标识数据库的方法。子名称可以依不同的子协议而变化，用子名称的目的是为了<strong>定位数据库</strong>提供足够的信息。包含<strong>主机名</strong>(对应服务端的ip地址)<strong>，端口号，数据库名</strong></li></ul></li><li><p>举例：</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209292333472.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220819092814330"></p></li><li><p><strong>几种常用数据库的 JDBC URL</strong></p><ul><li><p>MySQL的连接URL编写方式：</p><ul><li>jdbc:mysql:&#x2F;&#x2F;主机名称:mysql服务端口号&#x2F;数据库名称?参数&#x3D;值&amp;参数&#x3D;值</li><li>jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;atguigu</li><li>jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;atguigu**?useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf8**（如果JDBC程序与服务器端的字符集不一致，会导致乱码，那么可以通过参数指定服务器端的字符集）</li><li>jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;atguigu?user&#x3D;root&amp;password&#x3D;123456</li></ul></li><li><p>Oracle 9i的连接URL编写方式：</p><ul><li>jdbc:oracle:thin:@主机名称:oracle服务端口号:数据库名称</li><li>jdbc:oracle:thin:@localhost:1521:atguigu</li></ul></li><li><p>SQLServer的连接URL编写方式：</p><ul><li><p>jdbc:sqlserver:&#x2F;&#x2F;主机名称:sqlserver服务端口号:DatabaseName&#x3D;数据库名称</p></li><li><p>jdbc:sqlserver:&#x2F;&#x2F;localhost:1433:DatabaseName&#x3D;atguigu</p></li></ul></li></ul></li></ul><h3 id="2-3-要素三：用户名和密码"><a href="#2-3-要素三：用户名和密码" class="headerlink" title="2.3 要素三：用户名和密码"></a>2.3 要素三：用户名和密码</h3><ul><li>user,password可以用“属性名&#x3D;属性值”方式告诉数据库</li><li>可以调用 DriverManager 类的 getConnection() 方法建立到数据库的连接</li></ul><h3 id="2-4-数据库连接方式举例"><a href="#2-4-数据库连接方式举例" class="headerlink" title="2.4 数据库连接方式举例"></a>2.4 数据库连接方式举例</h3><h4 id="2-4-1-连接方式一"><a href="#2-4-1-连接方式一" class="headerlink" title="2.4.1 连接方式一"></a>2.4.1 连接方式一</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testConnection1</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-keyword">try</span> &#123;<br>           <span class="hljs-comment">//1.提供java.sql.Driver接口实现类的对象</span><br>           <span class="hljs-type">Driver</span> <span class="hljs-variable">driver</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>           driver = <span class="hljs-keyword">new</span> <span class="hljs-title class_">com</span>.mysql.jdbc.Driver();<br><br>           <span class="hljs-comment">//2.提供url，指明具体操作的数据</span><br>           <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>;<br><br>           <span class="hljs-comment">//3.提供Properties的对象，指明用户名和密码</span><br>           <span class="hljs-type">Properties</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>           info.setProperty(<span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>);<br>           info.setProperty(<span class="hljs-string">&quot;password&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>);<br><br>           <span class="hljs-comment">//4.调用driver的connect()，获取连接</span><br>           <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> driver.connect(url, info);<br>           System.out.println(conn);<br>       &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>           e.printStackTrace();<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><blockquote><p>说明：上述代码中显式出现了第三方数据库的API</p></blockquote><h4 id="Class-forName的介绍"><a href="#Class-forName的介绍" class="headerlink" title="Class.forName的介绍"></a>Class.forName的介绍</h4><p>Class</p><h4 id=""><a href="#" class="headerlink" title=""></a><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209292333473.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220819150414821"></h4><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209292333474.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220819150426084"></p><h4 id="类加载的形式"><a href="#类加载的形式" class="headerlink" title="类加载的形式"></a>类加载的形式</h4><p>常见类加载的方式</p><p><strong>执行一个类自己的main方法这个类也会被加载</strong></p><p>1 类名.Class<br>2 new 对象<br>3  Class.forName(“类的全路径”) ps(有个点注意一下)<br>在执行的时候加上以下一句<a href="https://so.csdn.net/so/search?q=JVM&spm=1001.2101.3001.7020">JVM</a>的运行参数，可以观看类加载过程<br>-XX:+TraceClassLoading<br>例，用idea就这样添加<br>来吧，小伙子们，上代码~</p><p>第一种形式，类名.Class<br>class ClassTest{<br>  static {<br>    System.out.println(“执行了静态代码块”);<br>  }<br>}<br>public class ClassLoderTest {<br>  public static void main(String[] args) throws ClassNotFoundException {<br>    Class&lt;?&gt; aClass2 &#x3D; ClassTest.class;<br>  }<br>}</p><p>运行结果如下</p><p>ClassTest 这个类有被加载器加载，但是并没有输出语句，所以并没有被执行。</p><p>第二种形式， new 对象<br>new 一个对象，以及利用这个对象调用成员变量方法等，就不在一一赘述。</p><p>class ClassTest{<br>  static {<br>    System.out.println(“执行了静态代码块”);<br>  }<br>}<br>public class ClassLoderTest {<br>  public static void main(String[] args) throws ClassNotFoundException {<br>    new ClassTest();<br>  }<br>}</p><p>运行结果如下</p><p>ClassTest 这个 类有被加载，并且静态块语句有被输出，所以，这种方式会执行静态代码块。</p><p>第三种形式 ，Class.forName(“类的全路径”)<br>class ClassTest{<br>  static {<br>    System.out.println(“执行了静态代码块”);<br>  }<br>}<br>public class ClassLoderTest {<br>  public static void main(String[] args) throws ClassNotFoundException {<br>   Class&lt;?&gt; aClass3 &#x3D; Class.forName(“com.management.JavassistTest.ClassTest”);<br>  }<br>}</p><p>运行结果如下</p><p>ClassTest 这个 类有被加载，并且静态块语句有被输出，所以，这种方式会执行静态代码块。</p><p>第三种形式的特殊用法<br>但是第三种的形式有另一种方式使得它不执行。如下：</p><p>class ClassTest{<br>  static {<br>    System.out.println(“执行了静态代码块”);<br>  }<br>}<br>public class ClassLoderTest {<br>  public static void main(String[] args) throws ClassNotFoundException {<br>  Class&lt;?&gt; aClass3 &#x3D; Class.forName(“com.management.JavassistTest.ClassTest”,<br>        false,&#x2F;&#x2F;true的时候会执行<br>        ClassLoader.getSystemClassLoader());<br>  }<br>}</p><h4 id="2-4-2-连接方式二"><a href="#2-4-2-连接方式二" class="headerlink" title="2.4.2 连接方式二"></a>2.4.2 连接方式二</h4><p>方式二，对方式一的迭代：在如下的程序中不出现第三方的api，使得程序具有更好的可移植性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testConnection2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">//1.获取Driver实现类对象，使用反射</span><br>    <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>     Driver driver= (Driver) clazz.newInstance();<br>     <span class="hljs-comment">//2.提供要链接的数据库</span><br>    String url=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>;<br>    <span class="hljs-comment">//3.提供连接需要的用户名和密码</span><br>    Properties info=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>    info.setProperty(<span class="hljs-string">&quot;user&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>);<br>    info.setProperty(<span class="hljs-string">&quot;password&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>);<br><br>    <span class="hljs-comment">//4.获取连接</span><br>    <span class="hljs-type">Connection</span> <span class="hljs-variable">connect</span> <span class="hljs-operator">=</span> driver.connect(url, info);<br>    System.out.println(connect);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>说明：相较于方式一，这里使用反射实例化Driver，不在代码中体现第三方数据库的API。体现了面向接口编程思想。</p></blockquote><h4 id="2-4-3-连接方式三"><a href="#2-4-3-连接方式三" class="headerlink" title="2.4.3 连接方式三"></a>2.4.3 连接方式三</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testConnection3</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-keyword">try</span> &#123;<br>           <span class="hljs-comment">//1.数据库连接的4个基本要素：</span><br>           <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>;<br>           <span class="hljs-type">String</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br>           <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br>           <span class="hljs-type">String</span> <span class="hljs-variable">driverName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>;<br><br>           <span class="hljs-comment">//2.实例化Driver</span><br>           <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(driverName);<br>           <span class="hljs-type">Driver</span> <span class="hljs-variable">driver</span> <span class="hljs-operator">=</span> (Driver) clazz.newInstance();<br>           <span class="hljs-comment">//3.注册驱动</span><br>           DriverManager.registerDriver(driver);<br>           <span class="hljs-comment">//4.获取连接</span><br>           <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, user, password);<br>           System.out.println(conn);<br>       &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>           e.printStackTrace();<br>       &#125;<br><br>   &#125;<br></code></pre></td></tr></table></figure><blockquote><p>说明：使用DriverManager实现数据库的连接。体会获取连接必要的4个基本要素。</p></blockquote><h4 id="2-4-4-连接方式四"><a href="#2-4-4-连接方式四" class="headerlink" title="2.4.4 连接方式四"></a>2.4.4 连接方式四</h4><p>但这个地方最好不要用这个，mysql好使可能其他的就不好使了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testConnection4</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-keyword">try</span> &#123;<br>           <span class="hljs-comment">//1.数据库连接的4个基本要素：</span><br>           <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>;<br>           <span class="hljs-type">String</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br>           <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br>           <span class="hljs-type">String</span> <span class="hljs-variable">driverName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>;<br><br>           <span class="hljs-comment">//下面这一步是把com.mysql.jdbc.Driver类加载到内存中，一加载就执行静态代码块，进行了注册驱动和实例化</span><br>           <span class="hljs-comment">//2.加载驱动 （①实例化Driver ②注册驱动）</span><br>           Class.forName(driverName);<br><br><br>           <span class="hljs-comment">//Driver driver = (Driver) clazz.newInstance();</span><br>           <span class="hljs-comment">//3.注册驱动</span><br>           <span class="hljs-comment">//DriverManager.registerDriver(driver);</span><br>           <span class="hljs-comment">/*</span><br><span class="hljs-comment">           可以注释掉上述代码的原因，是因为在mysql的Driver类中声明有：</span><br><span class="hljs-comment">           Driver类中的静态代码块</span><br><span class="hljs-comment">           static &#123;</span><br><span class="hljs-comment">               try &#123;</span><br><span class="hljs-comment">                   DriverManager.registerDriver(new Driver());</span><br><span class="hljs-comment">               &#125; catch (SQLException var1) &#123;</span><br><span class="hljs-comment">                   throw new RuntimeException(&quot;Can&#x27;t register driver!&quot;);</span><br><span class="hljs-comment">               &#125;</span><br><span class="hljs-comment">           &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">            */</span><br><br><br>           <span class="hljs-comment">//3.获取连接</span><br>           <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, user, password);<br>           System.out.println(conn);<br>       &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>           e.printStackTrace();<br>       &#125;<br><br>   &#125;<br></code></pre></td></tr></table></figure><blockquote><p>说明：不必显式的注册驱动了。因为在DriverManager的源码中已经存在静态代码块，实现了驱动的注册。</p><p>当类加载的时候会执行静态代码块</p></blockquote><h4 id="2-4-5-连接方式五-最终版"><a href="#2-4-5-连接方式五-最终版" class="headerlink" title="2.4.5 连接方式五(最终版)"></a>2.4.5 连接方式五(最终版)</h4><p>将数据库连接需要的四个基本信息声明在配置文件中，通过读取配置文件的格式，获取连接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.Driver;<br><span class="hljs-keyword">import</span> java.sql.DriverManager;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        testConnection5();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testConnection5</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//1.加载配置文件</span><br>        InputStream is=JDBCUtils.class.getClassLoader().getResourceAsStream(<span class="hljs-string">&quot;jdbc.properties&quot;</span>);<br>            <span class="hljs-type">Properties</span> <span class="hljs-variable">pros</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>            pros.load(is);<br><br>            <span class="hljs-comment">//2.读取配置信息</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> pros.getProperty(<span class="hljs-string">&quot;user&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> pros.getProperty(<span class="hljs-string">&quot;password&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> pros.getProperty(<span class="hljs-string">&quot;url&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">driverClass</span> <span class="hljs-operator">=</span> pros.getProperty(<span class="hljs-string">&quot;driverClass&quot;</span>);<br><br>            <span class="hljs-comment">//3.加载驱动</span><br>            Class.forName(driverClass);<br><br>            <span class="hljs-comment">//4.获取连接</span><br>            <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, user, password);<br>            <span class="hljs-keyword">return</span> conn;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>其中，配置文件声明在工程的src目录下：【jdbc.properties】</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">user</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">password</span>=<span class="hljs-string">abc123</span><br><span class="hljs-attr">url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/test</span><br><span class="hljs-attr">driverClass</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br></code></pre></td></tr></table></figure><blockquote><p>说明：使用配置文件的方式保存配置信息，在代码中加载配置文件</p><p><strong>使用配置文件的好处：</strong></p><p>①实现了代码和数据的分离，如果需要修改配置信息，直接在配置文件中修改，不需要深入代码<br>②如果修改了配置信息，省去重新编译的过程也就是避免程序重新打包。</p></blockquote><h2 id="第3章：使用PreparedStatement实现CRUD操作"><a href="#第3章：使用PreparedStatement实现CRUD操作" class="headerlink" title="第3章：使用PreparedStatement实现CRUD操作"></a>第3章：使用PreparedStatement实现CRUD操作</h2><p><strong>crud就是增删改查</strong></p><p>PreparedStatement是Statement的子接口</p><h3 id="3-1-操作和访问数据库"><a href="#3-1-操作和访问数据库" class="headerlink" title="3.1 操作和访问数据库"></a>3.1 操作和访问数据库</h3><ul><li><p>数据库连接被用于向数据库服务器发送命令和 SQL 语句，并接受数据库服务器返回的结果。其实一个数据库连接就是一个Socket连接。</p></li><li><p>在 java.sql 包中有 3 个接口分别定义了对数据库的调用的不同方式：</p><ul><li>Statement：用于执行静态 SQL 语句并返回它所生成结果的对象。 </li><li>PrepatedStatement：SQL 语句被预编译并存储在此对象中，可以使用此对象多次高效地执行该语句。</li><li>CallableStatement：用于执行 SQL 存储过程</li></ul><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209292333476.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220819155350686"></p></li></ul><h3 id="3-2-使用Statement操作数据表的弊端"><a href="#3-2-使用Statement操作数据表的弊端" class="headerlink" title="3.2 使用Statement操作数据表的弊端"></a>3.2 使用Statement操作数据表的弊端</h3><ul><li><p>通过调用 Connection 对象的 createStatement() 方法创建该对象。该对象用于执行静态的 SQL 语句，并且返回执行结果。</p></li><li><p>Statement 接口中定义了下列方法用于执行 SQL 语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-type">int</span> excuteUpdate(String <span class="hljs-keyword">sql</span>)：执行更新操作<span class="hljs-keyword">INSERT</span>、<span class="hljs-keyword">UPDATE</span>、<span class="hljs-keyword">DELETE</span><br>ResultSet executeQuery(String <span class="hljs-keyword">sql</span>)：执行查询操作<span class="hljs-keyword">SELECT</span><br></code></pre></td></tr></table></figure></li><li><p>但是使用Statement操作数据表存在弊端：</p><ul><li><strong>问题一：存在拼串操作，繁琐</strong></li><li><strong>问题二：存在SQL注入问题</strong></li></ul></li><li><p>SQL 注入是利用某些系统没有对用户输入的数据进行充分的检查，而在用户输入数据中注入非法的 SQL 语句段或命令(如：SELECT user, password FROM user_table WHERE user&#x3D;’a’ OR 1 &#x3D; ‘ AND password &#x3D; ‘ OR ‘1’ &#x3D; ‘1’) ，从而利用系统的 SQL 引擎完成恶意行为的做法。</p></li><li><p>对于 Java 而言，要防范 SQL 注入，只要用 PreparedStatement(从Statement扩展而来) 取代 Statement 就可以了。</p></li><li><p>代码演示：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StatementTest</span> &#123;<br><br><span class="hljs-comment">// 使用Statement的弊端：需要拼写sql语句，并且存在SQL注入的问题</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testLogin</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">Scanner</span> <span class="hljs-variable">scan</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>System.out.print(<span class="hljs-string">&quot;用户名：&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">userName</span> <span class="hljs-operator">=</span> scan.nextLine();<br>System.out.print(<span class="hljs-string">&quot;密   码：&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> scan.nextLine();<br><br><span class="hljs-comment">// SELECT user,password FROM user_table WHERE USER = &#x27;1&#x27; or &#x27; AND PASSWORD = &#x27;=&#x27;1&#x27; or &#x27;1&#x27; = &#x27;1&#x27;;</span><br>        <span class="hljs-comment">//上面这个是一个sql注入的语句让AND条件失效，or满足一个即可执行，最后一个恒能执行</span><br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SELECT user,password FROM user_table WHERE user = &#x27;&quot;</span> + userName + <span class="hljs-string">&quot;&#x27; AND password = &#x27;&quot;</span> + password+ <span class="hljs-string">&quot;&#x27;&quot;</span>;<br><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> get(sql, User.class);<br><span class="hljs-keyword">if</span> (user != <span class="hljs-literal">null</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;登陆成功!&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;用户名或密码错误！&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 使用Statement实现对数据表的查询操作</span><br><span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">get</span><span class="hljs-params">(String sql, Class&lt;T&gt; clazz)</span> &#123;<br><span class="hljs-type">T</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">Statement</span> <span class="hljs-variable">st</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">// 1.加载配置文件</span><br><span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> StatementTest.class.getClassLoader().getResourceAsStream(<span class="hljs-string">&quot;jdbc.properties&quot;</span>);<br><span class="hljs-type">Properties</span> <span class="hljs-variable">pros</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>pros.load(is);<br><br><span class="hljs-comment">// 2.读取配置信息</span><br><span class="hljs-type">String</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> pros.getProperty(<span class="hljs-string">&quot;user&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> pros.getProperty(<span class="hljs-string">&quot;password&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> pros.getProperty(<span class="hljs-string">&quot;url&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">driverClass</span> <span class="hljs-operator">=</span> pros.getProperty(<span class="hljs-string">&quot;driverClass&quot;</span>);<br><br><span class="hljs-comment">// 3.加载驱动</span><br>Class.forName(driverClass);<br><br><span class="hljs-comment">// 4.获取连接</span><br>conn = DriverManager.getConnection(url, user, password);<br><br>st = conn.createStatement();<br><br>rs = st.executeQuery(sql);<br><br><span class="hljs-comment">// 获取结果集的元数据</span><br><span class="hljs-type">ResultSetMetaData</span> <span class="hljs-variable">rsmd</span> <span class="hljs-operator">=</span> rs.getMetaData();<br><br><span class="hljs-comment">// 获取结果集的列数</span><br><span class="hljs-type">int</span> <span class="hljs-variable">columnCount</span> <span class="hljs-operator">=</span> rsmd.getColumnCount();<br><br><span class="hljs-keyword">if</span> (rs.next()) &#123;<br><br>t = clazz.newInstance();<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; columnCount; i++) &#123;<br><span class="hljs-comment">// //1. 获取列的名称</span><br><span class="hljs-comment">// String columnName = rsmd.getColumnName(i+1);</span><br><br><span class="hljs-comment">// 1. 获取列的别名</span><br><span class="hljs-type">String</span> <span class="hljs-variable">columnName</span> <span class="hljs-operator">=</span> rsmd.getColumnLabel(i + <span class="hljs-number">1</span>);<br><br><span class="hljs-comment">// 2. 根据列名获取对应数据表中的数据</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">columnVal</span> <span class="hljs-operator">=</span> rs.getObject(columnName);<br><br><span class="hljs-comment">// 3. 将数据表中得到的数据，封装进对象</span><br><span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(columnName);<br>field.setAccessible(<span class="hljs-literal">true</span>);<br>field.set(t, columnVal);<br>&#125;<br><span class="hljs-keyword">return</span> t;<br>&#125;<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br><span class="hljs-comment">// 关闭资源</span><br><span class="hljs-keyword">if</span> (rs != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>rs.close();<br>&#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (st != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>st.close();<br>&#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (conn != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>conn.close();<br>&#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>User类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu2.statement.crud;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> String user;<br>    <span class="hljs-keyword">private</span> String password;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(String user, String password)</span> &#123;<br>        <span class="hljs-built_in">this</span>.user = user;<br>        <span class="hljs-built_in">this</span>.password = password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User [user=&quot;</span> + <span class="hljs-built_in">this</span>.user + <span class="hljs-string">&quot;, password=&quot;</span> + <span class="hljs-built_in">this</span>.password + <span class="hljs-string">&quot;]&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUser</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.user;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUser</span><span class="hljs-params">(String user)</span> &#123;<br>        <span class="hljs-built_in">this</span>.user = user;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPassword</span><span class="hljs-params">(String password)</span> &#123;<br>        <span class="hljs-built_in">this</span>.password = password;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>综上：</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209292333477.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220819160348767"></p><h3 id="3-3-PreparedStatement的使用"><a href="#3-3-PreparedStatement的使用" class="headerlink" title="3.3 PreparedStatement的使用"></a>3.3 PreparedStatement的使用</h3><h4 id="3-3-1-PreparedStatement介绍"><a href="#3-3-1-PreparedStatement介绍" class="headerlink" title="3.3.1 PreparedStatement介绍"></a>3.3.1 PreparedStatement介绍</h4><ul><li><p>可以通过调用 Connection 对象的 <strong>preparedStatement(String sql)</strong> 方法获取 PreparedStatement 对象</p></li><li><p><strong>PreparedStatement 接口是 Statement 的子接口，它表示一条预编译过的 SQL 语句</strong></p></li><li><p>PreparedStatement 对象所代表的 SQL 语句中的参数用问号(?)来表示，调用 PreparedStatement 对象的 setXxx() 方法来设置这些参数. setXxx() 方法有两个参数，第一个参数是要设置的 SQL 语句中的参数的索引(从 1 开始)，第二个是设置的 SQL 语句中的参数的值</p></li></ul><h4 id="3-3-2-PreparedStatement-vs-Statement"><a href="#3-3-2-PreparedStatement-vs-Statement" class="headerlink" title="3.3.2 PreparedStatement vs Statement"></a>3.3.2 PreparedStatement vs Statement</h4><ul><li><p>代码的可读性和可维护性。</p></li><li><p><strong>PreparedStatement 能最大可能提高性能：</strong></p><ul><li>DBServer会对<strong>预编译</strong>语句提供性能优化。因为预编译语句有可能被重复调用，所以<u>语句在被DBServer的编译器编译后的执行代码被缓存下来，那么下次调用时只要是相同的预编译语句就不需要编译，只要将参数直接传入编译过的语句执行代码中就会得到执行。</u></li><li>在statement语句中,即使是相同操作但因为数据内容不一样,所以整个语句本身不能匹配,没有缓存语句的意义.事实是没有数据库会对普通语句编译后的执行代码缓存。这样<u>每执行一次都要对传入的语句编译一次。</u></li><li>(语法检查，语义检查，翻译成二进制命令，缓存)</li></ul></li><li><p>PreparedStatement 可以防止 SQL 注入</p></li></ul><h4 id="3-3-3-Java与SQL对应数据类型转换表"><a href="#3-3-3-Java与SQL对应数据类型转换表" class="headerlink" title="3.3.3 Java与SQL对应数据类型转换表"></a>3.3.3 Java与SQL对应数据类型转换表</h4><table><thead><tr><th>Java类型</th><th>SQL类型</th></tr></thead><tbody><tr><td>boolean</td><td>BIT</td></tr><tr><td>byte</td><td>TINYINT</td></tr><tr><td>short</td><td>SMALLINT</td></tr><tr><td>int</td><td>INTEGER</td></tr><tr><td>long</td><td>BIGINT</td></tr><tr><td>String</td><td>CHAR,VARCHAR,LONGVARCHAR</td></tr><tr><td>byte   array</td><td>BINARY  ,    VAR BINARY</td></tr><tr><td>java.sql.Date</td><td>DATE</td></tr><tr><td>java.sql.Time</td><td>TIME</td></tr><tr><td>java.sql.Timestamp</td><td>TIMESTAMP</td></tr></tbody></table><h4 id="获取连接和关闭资源很常用所以进行封装"><a href="#获取连接和关闭资源很常用所以进行封装" class="headerlink" title="获取连接和关闭资源很常用所以进行封装"></a>获取连接和关闭资源很常用所以进行封装</h4><p>   InputStream is&#x3D;JDBCUtils.class.getClassLoader().getResourceAsStream(“jdbc.properties”);</p><p>这个方法是用来锁定src目录下的内容        如果jdbc.properties在基础目录下，参数就应该变为    基础&#x2F;jdbc.properties   </p><p>在idea java中路径都是使用&#x2F;  做斜杠，只有用到io用到整个windows系统的绝对路径时用\斜杠来表示路径，而此时也不要用相对路径了，直接用绝对路径</p><p>在idea中文件中相对路径都用&#x2F;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> 基础;<br><br><span class="hljs-keyword">import</span> org.apache.commons.dbutils.DbUtils;<br><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSource;<br><br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.sql.*;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDBCUtils</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    封装的是获取连接的操作</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title function_">getConnection</span><span class="hljs-params">()</span>  <span class="hljs-keyword">throws</span> Exception&#123;<br>            <span class="hljs-comment">//1.加载配置文件</span><br>        InputStream is=JDBCUtils.class.getClassLoader().getResourceAsStream(<span class="hljs-string">&quot;jdbc.properties&quot;</span>);<br>            <span class="hljs-type">Properties</span> <span class="hljs-variable">pros</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>            pros.load(is);<br><br>            <span class="hljs-comment">//2.读取配置信息</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> pros.getProperty(<span class="hljs-string">&quot;user&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> pros.getProperty(<span class="hljs-string">&quot;password&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> pros.getProperty(<span class="hljs-string">&quot;url&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">driverClass</span> <span class="hljs-operator">=</span> pros.getProperty(<span class="hljs-string">&quot;driverClass&quot;</span>);<br><br>            <span class="hljs-comment">//3.加载驱动</span><br>            Class.forName(driverClass);<br><br>            <span class="hljs-comment">//4.获取连接</span><br>            <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, user, password);<br>            <span class="hljs-keyword">return</span> conn;<br>        &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    封装的是关闭资源的操作</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">closeResource</span><span class="hljs-params">(Connection conn, Statement ps)</span>&#123;<br>        <span class="hljs-comment">//这个地方就不仅仅一定是mysql了所以用Statement</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (ps != <span class="hljs-literal">null</span>) &#123;<br>                ps.close();<br>            &#125;<br><br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>           e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span>(conn!=<span class="hljs-literal">null</span>) &#123;<br>                conn.close();<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    封装的是查询时关闭资源的操作</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">closeResource</span><span class="hljs-params">(Connection conn, Statement ps,ResultSet rs)</span>&#123;<br>        <span class="hljs-comment">//这个地方就不仅仅一定是mysql了所以用Statement</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (ps != <span class="hljs-literal">null</span>) &#123;<br>                ps.close();<br>            &#125;<br><br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span>(conn!=<span class="hljs-literal">null</span>) &#123;<br>                conn.close();<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (rs != <span class="hljs-literal">null</span>) &#123;<br>                rs.close();<br>            &#125;<br><br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">//用DBUtils关闭资源</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">closeResource1</span><span class="hljs-params">(Connection conn,Statement ps,ResultSet rs)</span>&#123;<br>        DbUtils.closeQuietly(conn);<br>        DbUtils.closeQuietly(ps);<br>        DbUtils.closeQuietly(rs);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> DruidDataSource dataSource;<br>    <span class="hljs-comment">/*static &#123;</span><br><span class="hljs-comment">        try&#123;</span><br><span class="hljs-comment">            Properties properties=new Properties();</span><br><span class="hljs-comment">            //奇怪的是这个地方不能用绝对路径</span><br><span class="hljs-comment">            InputStream inputStream=JDBCUtils.class.getClassLoader().getResourceAsStream(&quot;druid.properties&quot;);</span><br><span class="hljs-comment">            properties.load(inputStream);</span><br><span class="hljs-comment">            dataSource= (DruidDataSource) DruidDataSourceFactory.createDataSource(properties);</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        catch(Exception e)&#123;</span><br><span class="hljs-comment">            e.printStackTrace();</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">    &#125;*/</span><br><br>    <span class="hljs-comment">//获取数据库连接池中的连接，如果返回null就是获取失败，有值就是获取成功</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title function_">getConnection3</span><span class="hljs-params">()</span>&#123;<br>        Connection conn=<span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            conn=dataSource.getConnection();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> conn;<br>    &#125;<br><br><br><br><br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="3-3-4-使用PreparedStatement实现增、删、改操作"><a href="#3-3-4-使用PreparedStatement实现增、删、改操作" class="headerlink" title="3.3.4 使用PreparedStatement实现增、删、改操作"></a>3.3.4 使用PreparedStatement实现增、删、改操作</h4><p>更新数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.sql.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConnectionTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testupdate</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//获取数据库连接</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> JDBCUtils.getConnection();<br>        <span class="hljs-comment">//预编译sql语句，返回PreparedStarement实例</span><br>        String sql=<span class="hljs-string">&quot;update customers set name= ? where id = ?&quot;</span>;<br>        PreparedStatement ps=conn.prepareStatement(sql);<br>        <span class="hljs-comment">//填充占位符</span><br>        ps.setString(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;莫扎特&quot;</span>);<br>        ps.setInt(<span class="hljs-number">2</span>,<span class="hljs-number">18</span>);<br>        <span class="hljs-comment">//执行</span><br>        ps.execute();<br>        <span class="hljs-comment">//资源的关闭</span><br>        JDBCUtils.closeResource(conn,ps);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>增加数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//向customers表中添加一条记录</span><br><span class="hljs-comment">//没用自己封装的方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testInsert</span><span class="hljs-params">()</span>  &#123;<br>    Connection conn=<span class="hljs-literal">null</span>;<br>    PreparedStatement ps=<span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">//一.获取连接</span><br>    <span class="hljs-comment">//1.加载配置文件</span><br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> ClassLoader.getSystemClassLoader().getResourceAsStream(<span class="hljs-string">&quot;jdbc.properties&quot;</span>);<br>    <span class="hljs-type">Properties</span> <span class="hljs-variable">pros</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>    pros.load(is);<br><br>    <span class="hljs-comment">//2.读取配置信息</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> pros.getProperty(<span class="hljs-string">&quot;user&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> pros.getProperty(<span class="hljs-string">&quot;password&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> pros.getProperty(<span class="hljs-string">&quot;url&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">driverClass</span> <span class="hljs-operator">=</span> pros.getProperty(<span class="hljs-string">&quot;driverClass&quot;</span>);<br><br>    <span class="hljs-comment">//3.加载驱动</span><br>    Class.forName(driverClass);<br><br>    <span class="hljs-comment">//4.获取连接</span><br> conn = DriverManager.getConnection(url, user, password);<br>    System.out.println(conn);<br><br>    <span class="hljs-comment">//5.预编译sql语句，返回PreparedStatement的实例</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;insert into customers(name,email,birth)values(?,?,?)&quot;</span>;<span class="hljs-comment">//?占位符</span><br>     ps = conn.prepareStatement(sql);<br>    <span class="hljs-comment">//6.填充占位符,第一个参数索引是从1开始的</span><br>    ps.setString(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;哪吒&quot;</span>);<br>    ps.setString(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;nezha&quot;</span>);<br>    ps.setDate(<span class="hljs-number">3</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-number">32235235325L</span>));<br><br>    <span class="hljs-comment">//7.执行操作</span><br>    ps.execute();<br><br>&#125;<br><span class="hljs-keyword">catch</span>(Exception e)&#123;<br>    e.printStackTrace();<br><br>    &#125;<br><span class="hljs-keyword">finally</span> &#123;<br>    <span class="hljs-comment">//8.关闭资源</span><br>    <span class="hljs-keyword">try</span> &#123;<br>         <span class="hljs-keyword">if</span> (ps != <span class="hljs-literal">null</span>) &#123;<br>            ps.close();<br>        &#125;<br><br>    &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>    &#125;<br>    <span class="hljs-keyword">try</span> &#123;<br>        conn.close();<br>    &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>    &#125;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//增删改通用方法</span><br><span class="hljs-comment">//用到了自己封装的方法</span><br><span class="hljs-comment">//通用的增、删、改操作（体现一：增、删、改 ； 体现二：针对于不同的表）</span><br><span class="hljs-comment">//可变形参args的个数应该和sql语句中的占位符数量相等</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(String sql,Object ... args)</span>&#123;<br><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">//1.获取数据库的连接</span><br>conn = JDBCUtils.getConnection();<br><br><span class="hljs-comment">//2.获取PreparedStatement的实例 (或：预编译sql语句)</span><br>ps = conn.prepareStatement(sql);<br><span class="hljs-comment">//3.填充占位符</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; args.length;i++)&#123;<br>ps.setObject(i + <span class="hljs-number">1</span>, args[i]);<br>&#125;<br><br><span class="hljs-comment">//4.执行sql语句</span><br>ps.execute();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br><br>e.printStackTrace();<br>&#125;<span class="hljs-keyword">finally</span>&#123;<br><span class="hljs-comment">//5.关闭资源</span><br>JDBCUtils.closeResource(conn, ps);<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>增删改通用方法的测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    String sql=<span class="hljs-string">&quot;update `order` set order_name = ? where order_id=?&quot;</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        update(sql,<span class="hljs-string">&quot;DD&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-3-5-使用PreparedStatement实现查询操作"><a href="#3-3-5-使用PreparedStatement实现查询操作" class="headerlink" title="3.3.5 使用PreparedStatement实现查询操作"></a>3.3.5 使用PreparedStatement实现查询操作</h4><p>更复杂，因为查询之后会返回一个结果集</p><p><strong>第一种</strong></p><p><strong>这个是针对customers表中的一种操作，并不是通用customers表的通用操作</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testQuery1</span><span class="hljs-params">()</span> &#123;<br>    Connection conn=<span class="hljs-literal">null</span>;<br>    ResultSet resultSet=<span class="hljs-literal">null</span>;<br>    PreparedStatement ps=<span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        conn = JDBCUtils.getConnection();<br>        <span class="hljs-comment">//预编译sql语句</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select id,name,email,birth from customers where id=?&quot;</span>;<br>        ps = conn.prepareStatement(sql);<br>        <span class="hljs-comment">//写满填充符</span><br>        ps.setObject(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br>        <br><br>        <span class="hljs-comment">//执行,并返回结果集</span><br>        resultSet = ps.executeQuery();<br><br>        <span class="hljs-comment">//处理结果集</span><br>        <span class="hljs-keyword">if</span> (resultSet.next()) &#123;<span class="hljs-comment">//判断结果集的下一条是否有数据，如果有数据返回true，并指针下移</span><br>            <span class="hljs-comment">//获取当前这条数据的各个字段的值</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> resultSet.getInt(<span class="hljs-number">1</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> resultSet.getString(<span class="hljs-number">2</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">email</span> <span class="hljs-operator">=</span> resultSet.getString(<span class="hljs-number">3</span>);<span class="hljs-comment">//获得当前这条的第三个字段</span><br>            <span class="hljs-type">Date</span> <span class="hljs-variable">birth</span> <span class="hljs-operator">=</span> resultSet.getDate(<span class="hljs-number">4</span>);<br><br>            <span class="hljs-comment">//方式一</span><br>            System.out.println(<span class="hljs-string">&quot;id=&quot;</span> + id + <span class="hljs-string">&quot;,name=&quot;</span> + name + <span class="hljs-string">&quot;,email=&quot;</span> + email + <span class="hljs-string">&quot;,birth&quot;</span> + birth);<br><br>            <span class="hljs-comment">//方式二</span><br>            Object[] data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;id, name, email, birth&#125;;<br>            System.out.println(Arrays.toString(data));<br>            <span class="hljs-comment">//方式三</span><br>            <span class="hljs-type">Customer</span> <span class="hljs-variable">customer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Customer</span>(id, name, email, birth);<br>            System.out.println(customer);<br><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">catch</span>(Exception e)&#123;<br>        e.printStackTrace();<br>    &#125;<span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-comment">//关闭资源</span><br>        JDBCUtils.closeResource(conn, ps, resultSet);<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>这种根据数据库设计的类就是JavaBean类</p><p>Customer类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Customer</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    ORM编程思想</span><br><span class="hljs-comment">    一个数据表对应一个java类</span><br><span class="hljs-comment">    表中的一条记录对应java类的一个对象</span><br><span class="hljs-comment">    表中的一个字段对应java类的一个属性</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Customer</span><span class="hljs-params">(<span class="hljs-type">int</span> id, String name, String email, Date birth)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.email = email;<br>        <span class="hljs-built_in">this</span>.birth = birth;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br><br><br><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getEmail</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> email;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setEmail</span><span class="hljs-params">(String email)</span> &#123;<br>        <span class="hljs-built_in">this</span>.email = email;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Date <span class="hljs-title function_">getBirth</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> birth;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBirth</span><span class="hljs-params">(Date birth)</span> &#123;<br>        <span class="hljs-built_in">this</span>.birth = birth;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> String email;<br>    <span class="hljs-keyword">private</span> Date birth;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Customer&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, email=&#x27;&quot;</span> + email + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, birth=&quot;</span> + birth +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>第二种</strong></p><p><strong>针对customers表的一个通用操作</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Customer  <span class="hljs-title function_">queryForCustomers</span><span class="hljs-params">(String sql,Object...args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    Connection conn=<span class="hljs-literal">null</span>;<br>    PreparedStatement ps=<span class="hljs-literal">null</span>;<br>    ResultSet rs=<span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>       conn = JDBCUtils.getConnection();<br><br>        ps = conn.prepareStatement(sql);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; args.length; i++) &#123;<br>            ps.setObject(i + <span class="hljs-number">1</span>, args[i]);<br>        &#125;<br>        rs = ps.executeQuery();<br>        <span class="hljs-comment">//获取结果集的元数据</span><br>        <span class="hljs-type">ResultSetMetaData</span> <span class="hljs-variable">rsmd</span> <span class="hljs-operator">=</span> rs.getMetaData();<br>        <span class="hljs-comment">//得到结果集的列数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">columnCount</span> <span class="hljs-operator">=</span> rsmd.getColumnCount();<br>        <span class="hljs-keyword">if</span> (rs.next()) &#123;<span class="hljs-comment">//判断结果集是否还有下一行</span><br>            <span class="hljs-type">Customer</span> <span class="hljs-variable">cust</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Customer</span>();<br>            <span class="hljs-comment">//处理结果集一行数据中的每一个列</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; columnCount; i++) &#123;<br>                <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> rs.getObject(i + <span class="hljs-number">1</span>);<br><br>                <span class="hljs-comment">//获取每个列的列名</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">columnName</span> <span class="hljs-operator">=</span> rsmd.getColumnName(i + <span class="hljs-number">1</span>);<br><br>                <span class="hljs-comment">//给cust对象指定的columnName属性，赋值为value，通过反射</span><br>                <span class="hljs-comment">//获得的是Customer的columnName代指这个属性</span><br>                <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> Customer.class.getDeclaredField(columnName);<br>                field.setAccessible(<span class="hljs-literal">true</span>);<span class="hljs-comment">//让这个属性可以被访问</span><br>                field.set(cust, value);<br><br>            &#125;<br>            <span class="hljs-keyword">return</span> cust;<br>        &#125;<br>    &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>e.printStackTrace();<br>&#125;<span class="hljs-keyword">finally</span> &#123;<br>        JDBCUtils.closeResource(conn,ps,rs);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>这个地方如果字段名和Customer类中的属性名不一致将字段名起别名这样结果集就的字段名就和属性名一致了</p><p>用order表做例子</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">String sql=&quot;<span class="hljs-keyword">select</span> order_id orderId,order_name orderName,order_date orderDate <span class="hljs-keyword">from</span> <span class="hljs-symbol">`order`</span> <span class="hljs-keyword">where</span> id=?<span class="hljs-string">&quot;;</span><br></code></pre></td></tr></table></figure><p>这样就将order_id字段起别名为orderId</p><p>同时要将getColumnName()换成getColumnLabel()获取列的别名      getColumnName()不推荐使用</p><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    String sql=<span class="hljs-string">&quot;select id,name,birth,email from customers where id = ?&quot;</span>;<br>    Customer customer=queryForCustomers(sql,<span class="hljs-number">13</span>);<br>    System.out.println(customer);<br>    String sql1=<span class="hljs-string">&quot;select name,email from customers where name=?&quot;</span>;<br>    Customer customer1=queryForCustomers(sql1,<span class="hljs-string">&quot;周杰伦&quot;</span>);<br>    System.out.println(customer1);<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>第三种</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 通用的针对于不同表的查询:返回表中的一条记录</span><br><span class="hljs-comment">//这是一个泛型方法</span><br><span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">getInstance</span><span class="hljs-params">(Class&lt;T&gt; clazz, String sql, Object... args)</span> &#123;<br><br><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">// 1.获取数据库连接</span><br>conn = JDBCUtils.getConnection();<br><br><span class="hljs-comment">// 2.预编译sql语句，得到PreparedStatement对象</span><br>ps = conn.prepareStatement(sql);<br><br><span class="hljs-comment">// 3.填充占位符</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; args.length; i++) &#123;<br>ps.setObject(i + <span class="hljs-number">1</span>, args[i]);<br>&#125;<br><br><span class="hljs-comment">// 4.执行executeQuery(),得到结果集：ResultSet</span><br>rs = ps.executeQuery();<br><br><span class="hljs-comment">// 5.得到结果集的元数据：ResultSetMetaData</span><br><span class="hljs-type">ResultSetMetaData</span> <span class="hljs-variable">rsmd</span> <span class="hljs-operator">=</span> rs.getMetaData();<br><br><span class="hljs-comment">// 6.1通过ResultSetMetaData得到columnCount(列数),columnLabel(列标签)；通过ResultSet得到列值</span><br><span class="hljs-type">int</span> <span class="hljs-variable">columnCount</span> <span class="hljs-operator">=</span> rsmd.getColumnCount();<br><span class="hljs-keyword">if</span> (rs.next()) &#123;<span class="hljs-comment">//判断结果集的下一条是否有数据，如果有数据返回true，并指针下移</span><br>                            <span class="hljs-comment">//如果返回false指针不会下移</span><br><span class="hljs-type">T</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> clazz.newInstance();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; columnCount; i++) &#123;<span class="hljs-comment">// 遍历每一个列</span><br><br><span class="hljs-comment">// 获取列值</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">columnVal</span> <span class="hljs-operator">=</span> rs.getObject(i + <span class="hljs-number">1</span>);<br><span class="hljs-comment">// 获取列的别名:列的别名，使用类的属性名充当</span><br><span class="hljs-type">String</span> <span class="hljs-variable">columnLabel</span> <span class="hljs-operator">=</span> rsmd.getColumnLabel(i + <span class="hljs-number">1</span>);<br><span class="hljs-comment">// 6.2使用反射，给对象的相应属性赋值</span><br><span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(columnLabel);<br>field.setAccessible(<span class="hljs-literal">true</span>);<br>field.set(t, columnVal);<br><br>&#125;<br><br><span class="hljs-keyword">return</span> t;<br><br>&#125;<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br><br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br><span class="hljs-comment">// 7.关闭资源</span><br>JDBCUtils.closeResource(conn, ps, rs);<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>说明：使用PreparedStatement实现的查询操作可以替换Statement实现的查询操作，解决Statement拼串和SQL注入问题。</p></blockquote><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    String sql=<span class="hljs-string">&quot;select id,name,email from customers where id=?&quot;</span>;<br>    <span class="hljs-type">Customer</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> getInstance(Customer.class, sql, <span class="hljs-number">12</span>);<br>    System.out.println(instance);<br>&#125;<br></code></pre></td></tr></table></figure><p>第四种情况</p><p>当结果集有多行的时候使用集合来存储</p><p>这个不是查询好多次，是一次查询出来很多的时候用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>&lt;T&gt; List&lt;T&gt; <span class="hljs-title function_">getInstance</span><span class="hljs-params">(Class&lt;T&gt; clazz, String sql, Object...args)</span>&#123;<br>    Connection conn=<span class="hljs-literal">null</span>;<br>    PreparedStatement ps=<span class="hljs-literal">null</span>;<br>    ResultSet rs=<span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        conn = JDBCUtils.getConnection();<br><br>        ps = conn.prepareStatement(sql);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; args.length; i++) &#123;<br>            ps.setObject(i + <span class="hljs-number">1</span>, args[i]);<br>        &#125;<br>        rs = ps.executeQuery();<br>        <span class="hljs-comment">//获取结果集的元数据</span><br>        <span class="hljs-type">ResultSetMetaData</span> <span class="hljs-variable">rsmd</span> <span class="hljs-operator">=</span> rs.getMetaData();<br>        <span class="hljs-comment">//得到结果集的列数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">columnCount</span> <span class="hljs-operator">=</span> rsmd.getColumnCount();<br>        <span class="hljs-comment">//创建集合</span><br>        ArrayList&lt;T&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;T&gt;();<br>        <span class="hljs-keyword">while</span> (rs.next()) &#123;<span class="hljs-comment">//判断结果集是否还有下一行</span><br>            <span class="hljs-type">T</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> clazz.newInstance();<br>            <span class="hljs-comment">//处理结果集一行数据中的每一个列</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; columnCount; i++) &#123;<br>                <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> rs.getObject(i + <span class="hljs-number">1</span>);<br><br>                <span class="hljs-comment">//获取每个列的列名</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">columnName</span> <span class="hljs-operator">=</span> rsmd.getColumnName(i + <span class="hljs-number">1</span>);<br><br>                <span class="hljs-comment">//给t对象指定的columnName属性，赋值为value，通过反射</span><br>                <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(columnName);<br>                field.setAccessible(<span class="hljs-literal">true</span>);<span class="hljs-comment">//让这个属性可以被访问</span><br>                field.set(t, value);<br><br>            &#125;<br>            list.add(t);<br>        &#125;<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>        e.printStackTrace();<br>    &#125;<span class="hljs-keyword">finally</span> &#123;<br>        JDBCUtils.closeResource(conn,ps,rs);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    String sql=<span class="hljs-string">&quot;select id,name,email from customers where id&lt;?&quot;</span>;<br>    List&lt;Customer&gt; instance = getInstance(Customer.class, sql, <span class="hljs-number">12</span>);<br>    <span class="hljs-keyword">for</span> (Customer customer : instance) &#123;<br>        System.out.println(customer);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>PreparedStatement防止了sql注入</strong></p><p>主要是对sql语句进行了预编译，and关系就是and关系不可能再变成是or关系</p><p>其他好处：1.PreparedStatement操作Blob数据，而Statement做不到</p><p>​                    2.PreparedStatement可以实现更高效的批量操作</p><h3 id="3-4-ResultSet与ResultSetMetaData"><a href="#3-4-ResultSet与ResultSetMetaData" class="headerlink" title="3.4 ResultSet与ResultSetMetaData"></a>3.4 ResultSet与ResultSetMetaData</h3><h4 id="3-4-1-ResultSet"><a href="#3-4-1-ResultSet" class="headerlink" title="3.4.1 ResultSet"></a>3.4.1 ResultSet</h4><ul><li><p>查询需要调用PreparedStatement 的 executeQuery() 方法，查询结果是一个ResultSet 对象</p></li><li><p>ResultSet 对象以逻辑表格的形式封装了执行数据库操作的结果集，ResultSet 接口由数据库厂商提供实现</p></li><li><p>ResultSet 返回的实际上就是一张数据表。有一个指针指向数据表的第一条记录的前面。</p></li><li><p>ResultSet 对象维护了一个指向当前数据行的<strong>游标</strong>，初始的时候，游标在第一行之前，可以通过 ResultSet 对象的 next() 方法移动到下一行。调用 next()方法检测下一行是否有效。若有效，该方法返回 true，且指针下移。相当于Iterator对象的 hasNext() 和 next() 方法的结合体。</p></li><li><p>当指针指向一行时, 可以通过调用 getXxx(int index) 或 getXxx(int columnName) 获取每一列的值。</p><ul><li>例如: getInt(1), getString(“name”)</li><li><strong>注意：Java与数据库交互涉及到的相关Java API中的索引都从1开始。</strong></li></ul></li><li><p>ResultSet 接口的常用方法：</p><ul><li><p>boolean next()</p></li><li><p>getString()</p></li><li><p>…</p></li></ul><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209292333478.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220925141547617"></p></li></ul><h4 id="3-4-2-ResultSetMetaData"><a href="#3-4-2-ResultSetMetaData" class="headerlink" title="3.4.2 ResultSetMetaData"></a>3.4.2 ResultSetMetaData</h4><ul><li><p>可用于获取关于 ResultSet 对象中列的类型和属性信息的对象</p></li><li><p>ResultSetMetaData meta &#x3D; rs.getMetaData();</p><ul><li><p><strong>getColumnName</strong>(int column)：获取指定列的名称</p></li><li><p><strong>getColumnLabel</strong>(int column)：获取指定列的别名</p></li><li><p><strong>getColumnCount</strong>()：返回当前 ResultSet 对象中的列数。 </p></li><li><p>getColumnTypeName(int column)：检索指定列的数据库特定的类型名称。 </p></li><li><p>getColumnDisplaySize(int column)：指示指定列的最大标准宽度，以字符为单位。 </p></li><li><p><strong>isNullable</strong>(int column)：指示指定列中的值是否可以为 null。 </p></li><li><p>isAutoIncrement(int column)：指示是否自动为指定列进行编号，这样这些列仍然是只读的。</p></li></ul></li></ul><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209292333479.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220925141618319"></p><p><strong>问题1：得到结果集后, 如何知道该结果集中有哪些列 ？ 列名是什么？</strong></p><p>​     需要使用一个描述 ResultSet 的对象， 即 ResultSetMetaData</p><p><strong>问题2：关于ResultSetMetaData</strong></p><ol><li><strong>如何获取 ResultSetMetaData</strong>： 调用 ResultSet 的 getMetaData() 方法即可</li><li><strong>获取 ResultSet 中有多少列</strong>：调用 ResultSetMetaData 的 getColumnCount() 方法</li><li><strong>获取 ResultSet 每一列的列的别名是什么</strong>：调用 ResultSetMetaData 的getColumnLabel() 方法</li></ol><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209292333480.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220925141644205"></p><h3 id="3-5-资源的释放"><a href="#3-5-资源的释放" class="headerlink" title="3.5 资源的释放"></a>3.5 资源的释放</h3><ul><li>释放ResultSet, Statement,Connection。</li><li>数据库连接（Connection）是非常稀有的资源，用完后必须马上释放，如果Connection不能及时正确的关闭将导致系统宕机。Connection的使用原则是<strong>尽量晚创建，尽量早的释放。</strong></li><li>可以在finally中关闭，保证及时其他代码出现异常，资源也一定能被关闭。</li></ul><h3 id="3-6-JDBC-API小结"><a href="#3-6-JDBC-API小结" class="headerlink" title="3.6 JDBC API小结"></a>3.6 JDBC API小结</h3><ul><li><p>两种思想</p><ul><li><p>面向接口编程的思想</p></li><li><p>ORM思想(object relational mapping)</p><ul><li>一个数据表对应一个java类</li><li>表中的一条记录对应java类的一个对象</li><li>表中的一个字段对应java类的一个属性</li></ul></li></ul><blockquote><p>sql是需要结合列名和表的属性名来写。注意起别名。</p></blockquote></li><li><p>两种技术</p><ul><li>JDBC结果集的元数据：ResultSetMetaData<ul><li>获取列数：getColumnCount()</li><li>获取列的别名：getColumnLabel()</li></ul></li><li>通过反射，创建指定类的对象，获取指定的属性并赋值</li></ul></li></ul><hr><h2 id="章节练习"><a href="#章节练习" class="headerlink" title="章节练习"></a>章节练习</h2><p><strong>练习题1：从控制台向数据库的表customers中插入一条数据，表结构如下：</strong></p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209292333481.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220820105818249"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConnectionTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入用户名&quot;</span>);<br>        String name=scanner.next();<br>        System.out.println(<span class="hljs-string">&quot;请输入邮箱&quot;</span>);<br>        String email=scanner.next();<br>        System.out.println(<span class="hljs-string">&quot;请输入生日&quot;</span>);<br>        String birthday=scanner.next();<span class="hljs-comment">//可以用字符串但是格式一定要正确</span><br>        String sql=<span class="hljs-string">&quot;insert into customers(name,email,birth)values(?,?,?)&quot;</span>;<br>        <span class="hljs-type">int</span> insertCount=update(sql,name,email,birthday);<br>        <span class="hljs-keyword">if</span>(insertCount&gt;<span class="hljs-number">0</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;添加成功&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;添加失败&quot;</span>);<br>        &#125;<br><br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>  <span class="hljs-title function_">update</span><span class="hljs-params">(String sql,Object...args)</span>&#123;<br>        Connection conn=<span class="hljs-literal">null</span>;<br>        PreparedStatement ps=<span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span>&#123;<br>            conn=JDBCUtils.getConnection();<br>            ps=conn.prepareStatement(sql);<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;args.length;i++)&#123;<br>                ps.setObject(i+<span class="hljs-number">1</span>,args[i]);<br>            &#125;<br><br>            <span class="hljs-comment">//如果执行的是查询操作有返回结果，则此方法返回true</span><br>            <span class="hljs-comment">//如果执行的是增删改操作，没有返回结果，则此方法返回false</span><br>            <span class="hljs-comment">//方式一</span><br>            <span class="hljs-comment">//return ps.execute();</span><br><br>            <span class="hljs-comment">//方式二</span><br>            <span class="hljs-keyword">return</span> ps.executeUpdate();<span class="hljs-comment">//返回的是影响的行数,增删改都可以是这个，同时也可以执行sql语句</span><br>        &#125;<br>        <span class="hljs-keyword">catch</span>(Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">finally</span>&#123;<br>            JDBCUtils.closeResource(conn,ps);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>    &#125;<br><br><span class="hljs-comment">//这种id是递增的可以默认不添加也会自增一个，也可以指定id但不能够指定与原表中重复的id，</span><br></code></pre></td></tr></table></figure><p><strong>练习题2：创立数据库表 examstudent，表结构如下：</strong></p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209292333482.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220820105849575"></p><p>向数据表中添加如下数据：</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209292333483.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220820105915103"></p><p><strong>代码实现1：插入一个新的student 信息</strong></p><p>请输入考生的详细信息</p><p>Type:<br>IDCard:<br>ExamCard:<br>StudentName:<br>Location:<br>Grade:</p><p>信息录入成功!</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">update</span><span class="hljs-params">(String sql,Object ... args)</span>&#123;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//1.获取数据库的连接</span><br>            conn = JDBCUtils.getConnection();<br><br>            <span class="hljs-comment">//2.获取PreparedStatement的实例 (或：预编译sql语句)</span><br>            ps = conn.prepareStatement(sql);<br>            <span class="hljs-comment">//3.填充占位符</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; args.length;i++)&#123;<br>                ps.setObject(i + <span class="hljs-number">1</span>, args[i]);<br>            &#125;<br><br>         <span class="hljs-keyword">return</span> ps.executeUpdate();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br><br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span>&#123;<br>            <span class="hljs-comment">//5.关闭资源</span><br>            JDBCUtils.closeResource(conn, ps);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-comment">//问题一，向examstudent表中添加一条记录</span><br>        Scanner in=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.print(<span class="hljs-string">&quot;四级/六级:&quot;</span>);<br>        <span class="hljs-type">int</span> type=in.nextInt();<br>        System.out.println(<span class="hljs-string">&quot;身份证号&quot;</span>);<br>        String IDCard=in.next();<br>        System.out.println(<span class="hljs-string">&quot;准考证号&quot;</span>);<br>        String examCard=in.next();<br>        System.out.print(<span class="hljs-string">&quot;学生姓名：&quot;</span>);<br>        String studentName=in.next();<br>        System.out.println(<span class="hljs-string">&quot;所在城市&quot;</span>);<br>        String location=in.next();<br>        System.out.println(<span class="hljs-string">&quot;考试成绩&quot;</span>);<br>        <span class="hljs-type">int</span> grade=in.nextInt();<br>        String sql=<span class="hljs-string">&quot;insert into examstudent(Type,IDCard,ExamCard,StudentName,Location,Grade)values(?,?,?,?,?,?)&quot;</span>;<br>       <span class="hljs-type">int</span> insertCount=update(sql,type,IDCard,examCard,studentName,location,grade);<br>        <span class="hljs-keyword">if</span>(insertCount&gt;<span class="hljs-number">0</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;添加成功&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;添加失败&quot;</span>);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>代码实现2：在 eclipse中建立 java 程序：输入身份证号或准考证号可以查询到学生的基本信息。结果如下：</strong></p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209292333484.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220820110002448"></p><p><strong>代码实现3：完成学生信息的删除功能</strong></p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209292333485.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220820110018711"></p><h2 id="第4章-操作BLOB类型字段"><a href="#第4章-操作BLOB类型字段" class="headerlink" title="第4章 操作BLOB类型字段"></a>第4章 操作BLOB类型字段</h2><h3 id="4-1-MySQL-BLOB类型"><a href="#4-1-MySQL-BLOB类型" class="headerlink" title="4.1 MySQL BLOB类型"></a>4.1 MySQL BLOB类型</h3><ul><li><p>MySQL中，BLOB是一个二进制大型对象，是一个可以存储大量数据的容器，它能容纳不同大小的数据。</p></li><li><p>插入BLOB类型的数据必须使用PreparedStatement，因为BLOB类型的数据无法使用字符串拼接写的。</p></li><li><p>MySQL的四种BLOB类型(除了在存储的最大信息量上不同外，他们是等同的)</p></li></ul><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209292333486.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220907141223071"></p><ul><li>实际使用中根据需要存入的数据大小定义不同的BLOB类型。</li><li>需要注意的是：如果存储的文件过大，数据库的性能会下降。</li><li>如果在指定了相关的Blob类型以后，还报错：xxx too large，那么在mysql的安装目录下，找my.ini文件加上如下的配置参数： <strong>max_allowed_packet&#x3D;16M</strong>。同时注意：修改了my.ini文件之后，需要重新启动mysql服务。</li></ul><h3 id="4-2-向数据表中插入大数据类型"><a href="#4-2-向数据表中插入大数据类型" class="headerlink" title="4.2 向数据表中插入大数据类型"></a>4.2 向数据表中插入大数据类型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取连接</span><br><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> JDBCUtils.getConnection();<br><br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;insert into customers(name,email,birth,photo)values(?,?,?,?)&quot;</span>;<br><span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> conn.prepareStatement(sql);<br><br><span class="hljs-comment">// 填充占位符</span><br>ps.setString(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;徐海强&quot;</span>);<br>ps.setString(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;xhq@126.com&quot;</span>);<br>ps.setDate(<span class="hljs-number">3</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.util.Date().getTime()));<br><span class="hljs-comment">// 操作Blob类型的变量</span><br><span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;xhq.png&quot;</span>);<br>ps.setBlob(<span class="hljs-number">4</span>, fis);<br><span class="hljs-comment">//执行</span><br>ps.execute();<br><br>fis.close();<br>JDBCUtils.closeResource(conn, ps);<br><br></code></pre></td></tr></table></figure><h3 id="4-3-修改数据表中的Blob类型字段"><a href="#4-3-修改数据表中的Blob类型字段" class="headerlink" title="4.3 修改数据表中的Blob类型字段"></a>4.3 修改数据表中的Blob类型字段</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> JDBCUtils.getConnection();<br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update customers set photo = ? where id = ?&quot;</span>;<br><span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> conn.prepareStatement(sql);<br><br><span class="hljs-comment">// 填充占位符</span><br><span class="hljs-comment">// 操作Blob类型的变量</span><br><span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;coffee.png&quot;</span>);<br>ps.setBlob(<span class="hljs-number">1</span>, fis);<br>ps.setInt(<span class="hljs-number">2</span>, <span class="hljs-number">25</span>);<br><br>ps.execute();<br><br>fis.close();<br>JDBCUtils.closeResource(conn, ps);<br></code></pre></td></tr></table></figure><h3 id="4-4-从数据表中读取大数据类型"><a href="#4-4-从数据表中读取大数据类型" class="headerlink" title="4.4 从数据表中读取大数据类型"></a>4.4 从数据表中读取大数据类型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.mysql.jdbc.JDBC4PreparedStatement;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.sql.*;<br><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>      testQueryBlob();<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span>  <span class="hljs-title function_">testQueryBlob</span><span class="hljs-params">()</span>  &#123;<br>        Connection conn=<span class="hljs-literal">null</span>;<br>        PreparedStatement ps=<span class="hljs-literal">null</span>;<br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>             conn = JDBCUtils.getConnection();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select id,name,email,birth,photo from customers where id=?&quot;</span>;<br><br>            ps = conn.prepareStatement(sql);<br>            ps.setInt(<span class="hljs-number">1</span>, <span class="hljs-number">27</span>);<br>            <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> ps.executeQuery();<br><br>            <span class="hljs-keyword">if</span> (rs.next()) &#123;<br><br>           <span class="hljs-comment">/*</span><br><span class="hljs-comment">           方式一</span><br><span class="hljs-comment">           int id=rs.getInt(1);</span><br><span class="hljs-comment">            String name=rs.getString(2);</span><br><span class="hljs-comment">            String email=rs.getString(3);</span><br><span class="hljs-comment">            Date date=rs.getDate(4);</span><br><span class="hljs-comment">            */</span><br><br>                <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> rs.getInt(<span class="hljs-string">&quot;id&quot;</span>);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> rs.getString(<span class="hljs-string">&quot;name&quot;</span>);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">email</span> <span class="hljs-operator">=</span> rs.getString(<span class="hljs-string">&quot;email&quot;</span>);<br>                <span class="hljs-type">Date</span> <span class="hljs-variable">birth</span> <span class="hljs-operator">=</span> rs.getDate(<span class="hljs-string">&quot;birth&quot;</span>);<br>                <span class="hljs-type">Customer</span> <span class="hljs-variable">cust</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Customer</span>(id, name, email, birth);<br>                System.out.println(cust);<br><br>                <span class="hljs-comment">//将Blob类型的字段下载下来，以文件的方式保存在本地</span><br>                <span class="hljs-type">Blob</span> <span class="hljs-variable">photo</span> <span class="hljs-operator">=</span> rs.getBlob(<span class="hljs-string">&quot;photo&quot;</span>);<br>                is = photo.getBinaryStream();<br>                fos = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;D:\\同步空间\\新建文件夹\\java\\zz.jpg&quot;</span>);<br>                <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>                <span class="hljs-type">int</span> len;<br>                <span class="hljs-keyword">while</span> ((len = is.read(buffer)) != -<span class="hljs-number">1</span>) &#123;<br>                    fos.write(buffer, <span class="hljs-number">0</span>, len);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">catch</span>(Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span>(is!=<span class="hljs-literal">null</span>) &#123;<br>                    is.close();<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span>(fos!=<span class="hljs-literal">null</span>) &#123;<br>                    fos.close();<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>            JDBCUtils.closeResource(conn, ps);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="第5章-批量插入"><a href="#第5章-批量插入" class="headerlink" title="第5章 批量插入"></a>第5章 批量插入</h2><h3 id="5-1-批量执行SQL语句"><a href="#5-1-批量执行SQL语句" class="headerlink" title="5.1 批量执行SQL语句"></a>5.1 批量执行SQL语句</h3><p>当需要成批插入或者更新记录时，可以采用Java的批量<strong>更新</strong>机制，这一机制允许多条语句一次性提交给数据库批量处理。通常情况下比单独提交处理更有效率</p><p>JDBC的批量处理语句包括下面三个方法：</p><ul><li><strong>addBatch(String)：添加需要批量处理的SQL语句或是参数；</strong></li><li><strong>executeBatch()：执行批量处理语句；</strong></li><li><strong>clearBatch():清空缓存的数据</strong></li></ul><p>通常我们会遇到两种批量执行SQL语句的情况：</p><ul><li>多条SQL语句的批量处理；</li><li>一个SQL语句的批量传参；</li></ul><h3 id="5-2-高效的批量插入"><a href="#5-2-高效的批量插入" class="headerlink" title="5.2 高效的批量插入"></a>5.2 高效的批量插入</h3><p>举例：向数据表中插入20000条数据</p><ul><li>数据库中提供一个goods表。创建如下：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> goods(<br>id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY AUTO_INCREMENT,<br>NAME <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>)<br>);<br></code></pre></td></tr></table></figure><h4 id="5-2-1-实现层次一：使用Statement"><a href="#5-2-1-实现层次一：使用Statement" class="headerlink" title="5.2.1 实现层次一：使用Statement"></a>5.2.1 实现层次一：使用Statement</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> JDBCUtils.getConnection();<br><span class="hljs-type">Statement</span> <span class="hljs-variable">st</span> <span class="hljs-operator">=</span> conn.createStatement();<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">20000</span>;i++)&#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;insert into goods(name) values(&#x27;name_&#x27; + &quot;</span>+ i +<span class="hljs-string">&quot;)&quot;</span>;<br>st.executeUpdate(sql);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-2-2-实现层次二：使用PreparedStatement"><a href="#5-2-2-实现层次二：使用PreparedStatement" class="headerlink" title="5.2.2 实现层次二：使用PreparedStatement"></a>5.2.2 实现层次二：使用PreparedStatement</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.mysql.jdbc.JDBC4PreparedStatement;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.sql.*;<br><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>      testInsearch();<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span>  <span class="hljs-title function_">testInsearch</span><span class="hljs-params">()</span>  &#123;<br>        Connection conn=<span class="hljs-literal">null</span>;<br>        PreparedStatement ps=<span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>            conn = JDBCUtils.getConnection();<br>        String sql=<span class="hljs-string">&quot;insert into goods(name)value(?)&quot;</span>;<span class="hljs-comment">//预编译sql语句，缓存下来之后每次只需要该改变占位符的值，</span><br>       ps=conn.prepareStatement(sql);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">20000</span>;i++) &#123;<br>        ps.setObject(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;name_&quot;</span>+i);<br>        ps.execute();<br>        &#125;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;花费的时间&quot;</span>+(end-start));<br>        &#125;<br>        <span class="hljs-keyword">catch</span>(Exception e)&#123;<br>            e.printStackTrace();<br><br>        &#125;<br>        <span class="hljs-keyword">finally</span>&#123;<br>            JDBCUtils.closeResource(conn,ps);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-2-3-实现层次三"><a href="#5-2-3-实现层次三" class="headerlink" title="5.2.3 实现层次三"></a>5.2.3 实现层次三</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 修改1： 使用 addBatch() / executeBatch() / clearBatch()</span><br><span class="hljs-comment"> * 修改2：mysql服务器默认是关闭批处理的，我们需要通过一个参数，让mysql开启批处理的支持。</span><br><span class="hljs-comment"> *  ?rewriteBatchedStatements=true 写在配置文件的url后面</span><br><span class="hljs-comment"> * 修改3：使用更新的mysql 驱动：mysql-connector-java-5.1.37-bin.jar</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> com.mysql.jdbc.JDBC4PreparedStatement;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.sql.*;<br><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>      testInsearch();<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span>  <span class="hljs-title function_">testInsearch</span><span class="hljs-params">()</span>  &#123;<br>        Connection conn=<span class="hljs-literal">null</span>;<br>        PreparedStatement ps=<span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>            conn = JDBCUtils.getConnection();<br>            String sql=<span class="hljs-string">&quot;insert into goods(name)value(?)&quot;</span>;<span class="hljs-comment">//预编译sql语句，缓存下来之后每次只需要该改变占位符的值，</span><br>            ps=conn.prepareStatement(sql);<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">20000</span>;i++) &#123;<br>            ps.setObject(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;name_&quot;</span>+i);<br>            <span class="hljs-comment">//1.攒sql</span><br>                ps.addBatch();<br><br>                <span class="hljs-keyword">if</span>(i%<span class="hljs-number">500</span>==<span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-comment">//2.执行batch,每五百次执行一次</span><br>                    ps.executeBatch();<br><br>                    <span class="hljs-comment">//3.清空batch</span><br>                    ps.clearBatch();<br>                &#125;<br>           &#125;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>             System.out.println(<span class="hljs-string">&quot;花费的时间&quot;</span>+(end-start));<br>        &#125;<br>        <span class="hljs-keyword">catch</span>(Exception e)&#123;<br>            e.printStackTrace();<br><br>        &#125;<br>        <span class="hljs-keyword">finally</span>&#123;<br>            JDBCUtils.closeResource(conn,ps);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-2-4-实现层次四"><a href="#5-2-4-实现层次四" class="headerlink" title="5.2.4 实现层次四"></a>5.2.4 实现层次四</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 层次四：在层次三的基础上操作</span><br><span class="hljs-comment">* 使用Connection 的 setAutoCommit(false)  /  commit()</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">import</span> com.mysql.jdbc.JDBC4PreparedStatement;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.sql.*;<br><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>      testInsearch();<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span>  <span class="hljs-title function_">testInsearch</span><span class="hljs-params">()</span>  &#123;<br>        Connection conn=<span class="hljs-literal">null</span>;<br>        PreparedStatement ps=<span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>            conn = JDBCUtils.getConnection();<br>            <br>            <span class="hljs-comment">//设置不允许自动提交数据</span><br>            conn.setAutoCommit(<span class="hljs-literal">false</span>);<span class="hljs-comment">//就是那些数据不是立马提交的</span><br>            <br>            String sql=<span class="hljs-string">&quot;insert into goods(name)value(?)&quot;</span>;<span class="hljs-comment">//预编译sql语句，缓存下来之后每次只需要该改变占位符的值，</span><br>            ps=conn.prepareStatement(sql);<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">20000</span>;i++) &#123;<br>            ps.setObject(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;name_&quot;</span>+i);<br>            <span class="hljs-comment">//1.攒sql</span><br>                ps.addBatch();<br><br>                <span class="hljs-keyword">if</span>(i%<span class="hljs-number">500</span>==<span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-comment">//2.执行batch,每五百次执行一次</span><br>                    ps.executeBatch();<br><br>                    <span class="hljs-comment">//3.清空batch</span><br>                    ps.clearBatch();<br>                &#125;<br>           &#125;<br>            <br>            <span class="hljs-comment">//提交数据</span><br>            conn.commit();<span class="hljs-comment">//统一提交所有的数据</span><br>            <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>             System.out.println(<span class="hljs-string">&quot;花费的时间&quot;</span>+(end-start));<br>        &#125;<br>        <span class="hljs-keyword">catch</span>(Exception e)&#123;<br>            e.printStackTrace();<br><br>        &#125;<br>        <span class="hljs-keyword">finally</span>&#123;<br>            JDBCUtils.closeResource(conn,ps);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="第6章：-数据库事务"><a href="#第6章：-数据库事务" class="headerlink" title="第6章： 数据库事务"></a>第6章： 数据库事务</h2><h3 id="6-1-数据库事务介绍"><a href="#6-1-数据库事务介绍" class="headerlink" title="6.1 数据库事务介绍"></a>6.1 数据库事务介绍</h3><ul><li><p><strong>事务：一组逻辑操作单元,使数据从一种状态变换到另一种状态。(一个或多个DML操作)</strong></p></li><li><p><strong>事务处理（事务操作）：</strong>保证所有事务都作为一个工作单元来执行，即使出现了故障，都不能改变这种执行方式。当在一个事务中执行多个操作时，要么所有的事务都**被提交(commit)<strong>，那么这些修改就永久地保存下来；要么数据库管理系统将放弃所作的所有修改，整个事务</strong>回滚(rollback)**到最初状态。</p></li><li><p>为确保数据库中数据的<strong>一致性</strong>，数据的操纵应当是离散的成组的逻辑单元：当它全部完成时，数据的一致性可以保持，而当这个单元中的一部分操作失败，整个事务应全部视为错误，所有从起始点以后的操作应全部回退到开始状态。</p></li></ul><h3 id="6-2-JDBC事务处理"><a href="#6-2-JDBC事务处理" class="headerlink" title="6.2 JDBC事务处理"></a>6.2 JDBC事务处理</h3><ul><li><p>数据一旦提交，就不可回滚。</p></li><li><p>数据什么时候意味着提交？</p><ul><li><strong>当一个连接对象被创建时，默认情况下是自动提交事务</strong>：每次执行一个 SQL 语句时，如果执行成功，就会向数据库自动提交，而不能回滚。</li><li><strong>关闭数据库连接，数据就会自动的提交。</strong>如果多个操作，每个操作使用的是自己单独的连接，则无法保证事务。即同一个事务的多个操作必须在同一个连接下。</li></ul></li><li><p><strong>JDBC程序中为了让多个 SQL 语句作为一个事务执行：</strong></p><ul><li>调用 Connection 对象的 <strong>setAutoCommit(false);</strong> 以取消自动提交事务</li><li>在所有的 SQL 语句都成功执行后，调用 <strong>commit();</strong> 方法提交事务</li><li>在出现异常时，调用 <strong>rollback();</strong> 方法回滚事务</li></ul><blockquote><p>若此时 Connection 没有被关闭，还可能被重复使用，则需要恢复其自动提交状态 setAutoCommit(true)。尤其是在使用数据库连接池技术时，执行close()方法前，建议恢复自动提交状态。</p></blockquote></li></ul><p>【案例：用户AA向用户BB转账100】</p><p>AA的账户余额减100，BB的账户余额加100</p><p>同时要保证这两个操作要么都进行，要么都不进行</p><p><strong>错误案例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.PreparedStatement;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span>&#123;<br>        String sql1=<span class="hljs-string">&quot;update user_table set balance=balance-100 where user = ?&quot;</span>;<br>update(sql1,<span class="hljs-string">&quot;AA&quot;</span>);<br><span class="hljs-comment">//模拟网络异常</span><br>        System.out.println(<span class="hljs-number">10</span>/<span class="hljs-number">0</span>);<span class="hljs-comment">//这个地方出现了异常的话只有AA的钱减100，BB不会增加</span><br>        String sql2=<span class="hljs-string">&quot;update user_table set balance=balance+100 where user = ?&quot;</span>;<br>    update(sql2,<span class="hljs-string">&quot;BB&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;转账成功&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//update  version1.0</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">update</span><span class="hljs-params">(String sql, Object... args)</span> &#123;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            conn = JDBCUtils.getConnection();<br>            ps = conn.prepareStatement(sql);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; args.length; i++) &#123;<br>                ps.setObject(i + <span class="hljs-number">1</span>, args[i]);<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> ps.executeUpdate();<span class="hljs-comment">//返回的是影响的行数,增删改都可以是这个，同时也可以执行sql语句</span><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            JDBCUtils.closeResource(conn, ps);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>正确的方法</p><p>原理：1.数据一旦提交，就不可回滚</p><p>​          哪些操作会导致数据的自动提交</p><p>1.DDL操作一旦执行，都会自动提交</p><p>2.DML默认情况下，一旦执行，就会自动提交，我们可以通过set autocommit&#x3D;false的方式取消DML操作的自动提交</p><p>3.默认在关闭连接的时候，会自动提交数据</p><p>正确案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.PreparedStatement;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            conn = JDBCUtils.getConnection();<br>            System.out.println(conn.getAutoCommit());<br>            <span class="hljs-comment">//取消数据的自动提交</span><br>            conn.setAutoCommit(<span class="hljs-literal">false</span>);<span class="hljs-comment">//让他不能自动提交</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">sql1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update user_table set balance=balance-100 where user = ?&quot;</span>;<br>            update(conn, sql1, <span class="hljs-string">&quot;AA&quot;</span>);<br><span class="hljs-comment">//模拟网络异常</span><br>            System.out.println(<span class="hljs-number">10</span> / <span class="hljs-number">0</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">sql2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update user_table set balance=balance+100 where user = ?&quot;</span>;<br>            update(conn, sql2, <span class="hljs-string">&quot;BB&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;转账成功&quot;</span>);<br><br>            <span class="hljs-comment">//提交数据</span><br>            conn.commit();<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">try</span> &#123;<br>                conn.rollback();<span class="hljs-comment">//回滚数据，保证了如果有异常两个都不执行成功</span><br>            &#125; <span class="hljs-keyword">catch</span> (SQLException ex) &#123;<br>                ex.printStackTrace();<br>            &#125;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>             conn.setAutoCommit(<span class="hljs-literal">true</span>);<br>            JDBCUtils.closeResource(conn, <span class="hljs-literal">null</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//update  version2.0</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Connection conn,String sql, Object... args)</span> &#123;<span class="hljs-comment">//conn作为参数是因为要让几次操作都用一个连接</span><br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            ps = conn.prepareStatement(sql);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; args.length; i++) &#123;<br>                ps.setObject(i + <span class="hljs-number">1</span>, args[i]);<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> ps.executeUpdate();<span class="hljs-comment">//返回的是影响的行数,增删改都可以是这个，同时也可以执行sql语句</span><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br><br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            JDBCUtils.closeResource(<span class="hljs-literal">null</span>, ps);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-3-事务的ACID属性"><a href="#6-3-事务的ACID属性" class="headerlink" title="6.3 事务的ACID属性"></a>6.3 事务的ACID属性</h3><ol><li><p><strong>原子性（Atomicity）</strong><br>原子性是指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。 </p></li><li><p><strong>一致性（Consistency）</strong><br>事务必须使数据库从一个一致性状态变换到另外一个一致性状态。</p></li><li><p><strong>隔离性（Isolation）</strong><br>事务的隔离性是指一个事务的执行不能被其他事务干扰，即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。</p></li><li><p><strong>持久性（Durability）</strong><br>持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来的其他操作和数据库故障不应该对其有任何影响。</p></li></ol><h4 id="6-3-1-数据库的并发问题"><a href="#6-3-1-数据库的并发问题" class="headerlink" title="6.3.1 数据库的并发问题"></a>6.3.1 数据库的并发问题</h4><ul><li><p>对于同时运行的多个事务, 当这些事务访问数据库中相同的数据时, 如果没有采取必要的隔离机制, 就会导致各种并发问题:</p><ul><li><strong>脏读</strong>: 对于两个事务 T1, T2, T1 读取了已经被 T2 更新但还<strong>没有被提交</strong>的字段。之后, 若 T2 回滚, T1读取的内容就是临时且无效的。</li><li><strong>不可重复读</strong>: 对于两个事务T1, T2, T1 读取了一个字段, 然后 T2 <strong>更新</strong>了该字段。之后, T1再次读取同一个字段, 值就不同了。</li><li><strong>幻读</strong>: 对于两个事务T1, T2, T1 从一个表中读取了一个字段, 然后 T2 在该表中<strong>插入</strong>了一些新的行。之后, 如果 T1 再次读取同一个表, 就会多出几行。</li></ul></li><li><p><strong>数据库事务的隔离性</strong>: 数据库系统必须具有隔离并发运行各个事务的能力, 使它们不会相互影响, 避免各种并发问题。</p></li><li><p>一个事务与其他事务隔离的程度称为隔离级别。数据库规定了多种事务隔离级别, 不同隔离级别对应不同的干扰程度, <strong>隔离级别越高, 数据一致性就越好, 但并发性越弱。</strong></p></li></ul><h4 id="6-3-2-四种隔离级别"><a href="#6-3-2-四种隔离级别" class="headerlink" title="6.3.2 四种隔离级别"></a>6.3.2 四种隔离级别</h4><ul><li><p>数据库提供的4种事务隔离级别：</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209292333487.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220907200518961"></p></li><li><p>Oracle 支持的 2 种事务隔离级别：<strong>READ COMMITED</strong>, SERIALIZABLE。 Oracle 默认的事务隔离级别为: <strong>READ COMMITED</strong> 。</p></li><li><p>Mysql 支持 4 种事务隔离级别。Mysql 默认的事务隔离级别为: <strong>REPEATABLE READ。</strong></p></li></ul><h4 id="6-3-3-在MySql中设置隔离级别"><a href="#6-3-3-在MySql中设置隔离级别" class="headerlink" title="6.3.3 在MySql中设置隔离级别"></a>6.3.3 在MySql中设置隔离级别</h4><ul><li><p>每启动一个 mysql 程序, 就会获得一个单独的数据库连接. 每个数据库连接都有一个全局变量 @@tx_isolation, 表示当前的事务隔离级别。</p></li><li><p>查看当前的隔离级别: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT @@tx_isolation;<br></code></pre></td></tr></table></figure></li><li><p>设置当前 mySQL 连接的隔离级别:  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">set  transaction isolation level read committed;<br></code></pre></td></tr></table></figure></li><li><p>设置数据库系统的全局的隔离级别:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">set global transaction isolation level read committed;<br></code></pre></td></tr></table></figure></li><li><p>补充操作：</p><ul><li><p>创建mysql数据库用户：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create user tom identified by &#x27;abc123&#x27;;<br></code></pre></td></tr></table></figure></li><li><p>授予权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#授予通过网络方式登录的tom用户，对所有库所有表的全部权限，密码设为abc123.<br>grant all privileges on *.* to tom@&#x27;%&#x27;  identified by &#x27;abc123&#x27;; <br><br> #给tom用户使用本地命令行方式，授予atguigudb这个库下的所有表的插删改查的权限。<br>grant select,insert,delete,update on atguigudb.* to tom@localhost identified by &#x27;abc123&#x27;; <br><br></code></pre></td></tr></table></figure></li></ul></li></ul><p>设置隔离级别演示</p><p>（有报错）</p><p>防止脏读</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> jdk.nashorn.internal.scripts.JD;<br><span class="hljs-keyword">import</span> src.User;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.sql.*;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        testTranscationSelect();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">testTranscationSelect</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Connection conn= JDBCUtils.getConnection();<br>        <span class="hljs-comment">//获得当前的隔离级别</span><br>        System.out.println(conn.getTransactionIsolation());<br><br>        <span class="hljs-comment">//设计数据库的隔离级别</span><br>        conn.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);<br>        <span class="hljs-comment">//取消自动提交</span><br>        conn.setAutoCommit(<span class="hljs-literal">false</span>);<br><br>        String sql=<span class="hljs-string">&quot;select user,password,balance from user_table where user=?&quot;</span>;<br>        Main main=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Main</span>();<br>        User user=main.getInstance(conn, User.class,sql,<span class="hljs-string">&quot;CC&quot;</span>);<br><br>        System.out.println(user);<br>    &#125;<br>    <span class="hljs-keyword">public</span>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testTranscationUpdate</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Connection conn= JDBCUtils.getConnection();<br>        <span class="hljs-comment">//取消自动提交</span><br>        conn.setAutoCommit(<span class="hljs-literal">false</span>);<br>        String sql=<span class="hljs-string">&quot;update user_table set balance=? where user=?&quot;</span>;<br>        update(conn,sql,<span class="hljs-number">5000</span>,<span class="hljs-string">&quot;CC&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//考虑上事务的查询</span><br>    <span class="hljs-keyword">public</span>  &lt;T&gt; T <span class="hljs-title function_">getInstance</span><span class="hljs-params">(Connection conn,Class&lt;T&gt; clazz, String sql, Object... args)</span> &#123;<br><br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br><br>            <span class="hljs-comment">// 2.预编译sql语句，得到PreparedStatement对象</span><br>            ps = conn.prepareStatement(sql);<br><br>            <span class="hljs-comment">// 3.填充占位符</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; args.length; i++) &#123;<br>                ps.setObject(i + <span class="hljs-number">1</span>, args[i]);<br>            &#125;<br><br>            <span class="hljs-comment">// 4.执行executeQuery(),得到结果集：ResultSet</span><br>            rs = ps.executeQuery();<br><br>            <span class="hljs-comment">// 5.得到结果集的元数据：ResultSetMetaData</span><br>            <span class="hljs-type">ResultSetMetaData</span> <span class="hljs-variable">rsmd</span> <span class="hljs-operator">=</span> rs.getMetaData();<br><br>            <span class="hljs-comment">// 6.1通过ResultSetMetaData得到columnCount(列数),columnLabel(列标签)；通过ResultSet得到列值</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">columnCount</span> <span class="hljs-operator">=</span> rsmd.getColumnCount();<br>            <span class="hljs-keyword">if</span> (rs.next()) &#123;<span class="hljs-comment">//判断结果集的下一条是否有数据，如果有数据返回true，并指针下移</span><br>                <span class="hljs-comment">//如果返回false指针不会下移</span><br>                <span class="hljs-type">T</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> clazz.newInstance();<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; columnCount; i++) &#123;<span class="hljs-comment">// 遍历每一个列</span><br><br>                    <span class="hljs-comment">// 获取列值</span><br>                    <span class="hljs-type">Object</span> <span class="hljs-variable">columnVal</span> <span class="hljs-operator">=</span> rs.getObject(i + <span class="hljs-number">1</span>);<br>                    <span class="hljs-comment">// 获取列的别名:列的别名，使用类的属性名充当</span><br>                    <span class="hljs-type">String</span> <span class="hljs-variable">columnLabel</span> <span class="hljs-operator">=</span> rsmd.getColumnLabel(i + <span class="hljs-number">1</span>);<br>                    <span class="hljs-comment">// 6.2使用反射，给对象的相应属性赋值</span><br>                    <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(columnLabel);<br>                    field.setAccessible(<span class="hljs-literal">true</span>);<br>                    field.set(t, columnVal);<br><br>                &#125;<br><br>                <span class="hljs-keyword">return</span> t;<br><br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br><br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">// 7.关闭资源</span><br>            JDBCUtils.closeResource(<span class="hljs-literal">null</span>, ps, rs);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Connection conn,String sql, Object... args)</span> &#123;<span class="hljs-comment">//conn作为参数是因为要让几次操作都用一个连接</span><br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            ps = conn.prepareStatement(sql);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; args.length; i++) &#123;<br>                ps.setObject(i + <span class="hljs-number">1</span>, args[i]);<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> ps.executeUpdate();<span class="hljs-comment">//返回的是影响的行数,增删改都可以是这个，同时也可以执行sql语句</span><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br><br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            JDBCUtils.closeResource(<span class="hljs-literal">null</span>, ps);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="-1"><a href="#-1" class="headerlink" title=""></a></h2><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>这是关于增删改查询的几种方法，是在外面用conn</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">import java.lang.reflect.Field;<br>import java.sql.Connection;<br>import java.sql.PreparedStatement;<br>import java.sql.ResultSet;<br>import java.sql.ResultSetMetaData;<br>import java.util.ArrayList;<br>import java.util.List;<br><br>public <span class="hljs-keyword">class</span> BaseDao &#123;<br><span class="hljs-comment">//增删改通用方法</span><br>    public static <span class="hljs-built_in">int</span> update(Connection conn, String sql, Object... args) &#123;<span class="hljs-comment">//conn作为参数是因为要让几次操作都用一个连接</span><br>        PreparedStatement ps = null;<br>        <span class="hljs-keyword">try</span> &#123;<br>            ps = conn.prepare<span class="hljs-constructor">Statement(<span class="hljs-params">sql</span>)</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; args.length; i++) &#123;<br>                ps.set<span class="hljs-constructor">Object(<span class="hljs-params">i</span> + 1, <span class="hljs-params">args</span>[<span class="hljs-params">i</span>])</span>;<br>            &#125;<br><br>            return ps.execute<span class="hljs-constructor">Update()</span>;<span class="hljs-comment">//返回的是影响的行数,增删改都可以是这个，同时也可以执行sql语句</span><br>        &#125; catch (Exception e) &#123;<br>            e.print<span class="hljs-constructor">StackTrace()</span>;<br><br>        &#125; finally &#123;<br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JDBCUtils</span>.</span></span>close<span class="hljs-constructor">Resource(<span class="hljs-params">null</span>, <span class="hljs-params">ps</span>)</span>;<br>        &#125;<br>        return <span class="hljs-number">0</span>;<br><br>    &#125;<br>    <br>    <span class="hljs-comment">//查询返回一条数据的方法</span><br>    <span class="hljs-comment">//version2.0</span><br>    public  &lt;T&gt; T get<span class="hljs-constructor">Instance(Connection <span class="hljs-params">conn</span>,Class&lt;T&gt; <span class="hljs-params">clazz</span>, String <span class="hljs-params">sql</span>, Object<span class="hljs-operator">...</span> <span class="hljs-params">args</span>)</span> &#123;<br><br>        PreparedStatement ps = null;<br>        ResultSet rs = null;<br>        <span class="hljs-keyword">try</span> &#123;<br><br>            <span class="hljs-comment">// 2.预编译sql语句，得到PreparedStatement对象</span><br>            ps = conn.prepare<span class="hljs-constructor">Statement(<span class="hljs-params">sql</span>)</span>;<br><br>            <span class="hljs-comment">// 3.填充占位符</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; args.length; i++) &#123;<br>                ps.set<span class="hljs-constructor">Object(<span class="hljs-params">i</span> + 1, <span class="hljs-params">args</span>[<span class="hljs-params">i</span>])</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// 4.执行executeQuery(),得到结果集：ResultSet</span><br>            rs = ps.execute<span class="hljs-constructor">Query()</span>;<br><br>            <span class="hljs-comment">// 5.得到结果集的元数据：ResultSetMetaData</span><br>            ResultSetMetaData rsmd = rs.get<span class="hljs-constructor">MetaData()</span>;<br><br>            <span class="hljs-comment">// 6.1通过ResultSetMetaData得到columnCount(列数),columnLabel(列标签)；通过ResultSet得到列值</span><br>            <span class="hljs-built_in">int</span> columnCount = rsmd.get<span class="hljs-constructor">ColumnCount()</span>;<br>            <span class="hljs-keyword">if</span> (rs.next<span class="hljs-literal">()</span>) &#123;<span class="hljs-comment">//判断结果集的下一条是否有数据，如果有数据返回true，并指针下移</span><br>                <span class="hljs-comment">//如果返回false指针不会下移</span><br>                T t = clazz.<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance()</span>;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; columnCount; i++) &#123;<span class="hljs-comment">// 遍历每一个列</span><br><br>                    <span class="hljs-comment">// 获取列值</span><br>                    Object columnVal = rs.get<span class="hljs-constructor">Object(<span class="hljs-params">i</span> + 1)</span>;<br>                    <span class="hljs-comment">// 获取列的别名:列的别名，使用类的属性名充当</span><br>                    String columnLabel = rsmd.get<span class="hljs-constructor">ColumnLabel(<span class="hljs-params">i</span> + 1)</span>;<br>                    <span class="hljs-comment">// 6.2使用反射，给对象的相应属性赋值</span><br>                    Field field = clazz.get<span class="hljs-constructor">DeclaredField(<span class="hljs-params">columnLabel</span>)</span>;<br>                    field.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;<br>                    field.set(t, columnVal);<br><br>                &#125;<br><br>                return t;<br><br>            &#125;<br>        &#125; catch (Exception e) &#123;<br><br>            e.print<span class="hljs-constructor">StackTrace()</span>;<br>        &#125; finally &#123;<br>            <span class="hljs-comment">// 7.关闭资源</span><br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JDBCUtils</span>.</span></span>close<span class="hljs-constructor">Resource(<span class="hljs-params">null</span>, <span class="hljs-params">ps</span>, <span class="hljs-params">rs</span>)</span>;<br>        &#125;<br><br>        return null;<br><br>    &#125;<br>    <br>    <span class="hljs-comment">//查询返回多条数据的方法</span><br>    <span class="hljs-comment">//version2.0</span><br>    public &lt;T&gt; List&lt;T&gt; get<span class="hljs-constructor">ForList(Connection <span class="hljs-params">conn</span>,Class&lt;T&gt; <span class="hljs-params">clazz</span>, String <span class="hljs-params">sql</span>, Object<span class="hljs-operator">...</span><span class="hljs-params">args</span>)</span>&#123;<br>        PreparedStatement ps=null;<br>        ResultSet rs=null;<br>        <span class="hljs-keyword">try</span> &#123;<br>            conn = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JDBCUtils</span>.</span></span>get<span class="hljs-constructor">Connection()</span>;<br><br>            ps = conn.prepare<span class="hljs-constructor">Statement(<span class="hljs-params">sql</span>)</span>;<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; args.length; i++) &#123;<br>                ps.set<span class="hljs-constructor">Object(<span class="hljs-params">i</span> + 1, <span class="hljs-params">args</span>[<span class="hljs-params">i</span>])</span>;<br>            &#125;<br>            rs = ps.execute<span class="hljs-constructor">Query()</span>;<br>            <span class="hljs-comment">//获取结果集的元数据</span><br>            ResultSetMetaData rsmd = rs.get<span class="hljs-constructor">MetaData()</span>;<br>            <span class="hljs-comment">//得到结果集的列数</span><br>            <span class="hljs-built_in">int</span> columnCount = rsmd.get<span class="hljs-constructor">ColumnCount()</span>;<br>            <span class="hljs-comment">//创建集合</span><br>            ArrayList&lt;T&gt; <span class="hljs-built_in">list</span> = <span class="hljs-keyword">new</span> ArrayList&lt;T&gt;<span class="hljs-literal">()</span>;<br>            <span class="hljs-keyword">while</span> (rs.next<span class="hljs-literal">()</span>) &#123;<span class="hljs-comment">//判断结果集是否还有下一行</span><br>                T t = clazz.<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance()</span>;<br>                <span class="hljs-comment">//处理结果集一行数据中的每一个列</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; columnCount; i++) &#123;<br>                    Object value = rs.get<span class="hljs-constructor">Object(<span class="hljs-params">i</span> + 1)</span>;<br><br>                    <span class="hljs-comment">//获取每个列的列名</span><br>                    String columnName = rsmd.get<span class="hljs-constructor">ColumnName(<span class="hljs-params">i</span> + 1)</span>;<br><br>                    <span class="hljs-comment">//给t对象指定的columnName属性，赋值为value，通过反射</span><br>                    Field field = clazz.get<span class="hljs-constructor">DeclaredField(<span class="hljs-params">columnName</span>)</span>;<br>                    field.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;<span class="hljs-comment">//让这个属性可以被访问</span><br>                    field.set(t, value);<br><br>                &#125;<br>                <span class="hljs-built_in">list</span>.add(t);<br>            &#125;<br>            return <span class="hljs-built_in">list</span>;<br>        &#125;catch(Exception e)&#123;<br>            e.print<span class="hljs-constructor">StackTrace()</span>;<br>        &#125;finally &#123;<br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JDBCUtils</span>.</span></span>close<span class="hljs-constructor">Resource(<span class="hljs-params">null</span>,<span class="hljs-params">ps</span>,<span class="hljs-params">rs</span>)</span>;<br>        &#125;<br>        return null;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h1 id="DAO类"><a href="#DAO类" class="headerlink" title="DAO类"></a>DAO类</h1><h2 id="BaseDAO这是一个封装的所有的查询和增删改的方法的类"><a href="#BaseDAO这是一个封装的所有的查询和增删改的方法的类" class="headerlink" title="BaseDAO这是一个封装的所有的查询和增删改的方法的类"></a>BaseDAO这是一个封装的所有的查询和增删改的方法的类</h2><p>用作抽象类，提供方法</p><p><strong>封装了针对数据表的通用操作，具体表具体实现</strong></p><p>BaseDao.class</p><p>封装起来，用来给具体的数据表处理类来做父类</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">import java.lang.reflect.Field;<br>import java.sql.*;<br>import java.util.ArrayList;<br>import java.util.List;<br><br>public abstract <span class="hljs-keyword">class</span> BaseDao &#123;<br>    public static void main(String<span class="hljs-literal">[]</span> args) throws Exception &#123;<br><br><br>    &#125;<br><br>    public static <span class="hljs-built_in">int</span> update(Connection conn, String sql, Object... args) &#123;<span class="hljs-comment">//conn作为参数是因为要让几次操作都用一个连接</span><br>        PreparedStatement ps = null;<br>        <span class="hljs-keyword">try</span> &#123;<br>            ps = conn.prepare<span class="hljs-constructor">Statement(<span class="hljs-params">sql</span>)</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; args.length; i++) &#123;<br>                ps.set<span class="hljs-constructor">Object(<span class="hljs-params">i</span> + 1, <span class="hljs-params">args</span>[<span class="hljs-params">i</span>])</span>;<br>            &#125;<br><br>            return ps.execute<span class="hljs-constructor">Update()</span>;<span class="hljs-comment">//返回的是影响的行数,增删改都可以是这个，同时也可以执行sql语句</span><br>        &#125; catch (Exception e) &#123;<br>            e.print<span class="hljs-constructor">StackTrace()</span>;<br><br>        &#125; finally &#123;<br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JDBCUtils</span>.</span></span>close<span class="hljs-constructor">Resource(<span class="hljs-params">null</span>, <span class="hljs-params">ps</span>)</span>;<br>        &#125;<br>        return <span class="hljs-number">0</span>;<br><br>    &#125;<br><br>    <span class="hljs-comment">//version2.0</span><br>    public &lt;T&gt; T get<span class="hljs-constructor">Instance(Connection <span class="hljs-params">conn</span>, Class&lt;T&gt; <span class="hljs-params">clazz</span>, String <span class="hljs-params">sql</span>, Object<span class="hljs-operator">...</span> <span class="hljs-params">args</span>)</span> &#123;<br><br>        PreparedStatement ps = null;<br>        ResultSet rs = null;<br>        <span class="hljs-keyword">try</span> &#123;<br><br>            <span class="hljs-comment">// 2.预编译sql语句，得到PreparedStatement对象</span><br>            ps = conn.prepare<span class="hljs-constructor">Statement(<span class="hljs-params">sql</span>)</span>;<br><br>            <span class="hljs-comment">// 3.填充占位符</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; args.length; i++) &#123;<br>                ps.set<span class="hljs-constructor">Object(<span class="hljs-params">i</span> + 1, <span class="hljs-params">args</span>[<span class="hljs-params">i</span>])</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// 4.执行executeQuery(),得到结果集：ResultSet</span><br>            rs = ps.execute<span class="hljs-constructor">Query()</span>;<br><br>            <span class="hljs-comment">// 5.得到结果集的元数据：ResultSetMetaData</span><br>            ResultSetMetaData rsmd = rs.get<span class="hljs-constructor">MetaData()</span>;<br><br>            <span class="hljs-comment">// 6.1通过ResultSetMetaData得到columnCount(列数),columnLabel(列标签)；通过ResultSet得到列值</span><br>            <span class="hljs-built_in">int</span> columnCount = rsmd.get<span class="hljs-constructor">ColumnCount()</span>;<br>            <span class="hljs-keyword">if</span> (rs.next<span class="hljs-literal">()</span>) &#123;<span class="hljs-comment">//判断结果集的下一条是否有数据，如果有数据返回true，并指针下移</span><br>                <span class="hljs-comment">//如果返回false指针不会下移</span><br>                T t = clazz.<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance()</span>;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; columnCount; i++) &#123;<span class="hljs-comment">// 遍历每一个列</span><br><br>                    <span class="hljs-comment">// 获取列值</span><br>                    Object columnVal = rs.get<span class="hljs-constructor">Object(<span class="hljs-params">i</span> + 1)</span>;<br>                    <span class="hljs-comment">// 获取列的别名:列的别名，使用类的属性名充当</span><br>                    String columnLabel = rsmd.get<span class="hljs-constructor">ColumnLabel(<span class="hljs-params">i</span> + 1)</span>;<br>                    <span class="hljs-comment">// 6.2使用反射，给对象的相应属性赋值</span><br>                    Field field = clazz.get<span class="hljs-constructor">DeclaredField(<span class="hljs-params">columnLabel</span>)</span>;<br>                    field.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;<br>                    field.set(t, columnVal);<br><br>                &#125;<br><br>                return t;<br><br>            &#125;<br>        &#125; catch (Exception e) &#123;<br><br>            e.print<span class="hljs-constructor">StackTrace()</span>;<br>        &#125; finally &#123;<br>            <span class="hljs-comment">// 7.关闭资源</span><br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JDBCUtils</span>.</span></span>close<span class="hljs-constructor">Resource(<span class="hljs-params">null</span>, <span class="hljs-params">ps</span>, <span class="hljs-params">rs</span>)</span>;<br>        &#125;<br><br>        return null;<br><br>    &#125;<br><br>    <span class="hljs-comment">//version2.0</span><br>    public &lt;T&gt; List&lt;T&gt; get<span class="hljs-constructor">ForList(Connection <span class="hljs-params">conn</span>, Class&lt;T&gt; <span class="hljs-params">clazz</span>, String <span class="hljs-params">sql</span>, Object<span class="hljs-operator">...</span> <span class="hljs-params">args</span>)</span> &#123;<br>        PreparedStatement ps = null;<br>        ResultSet rs = null;<br>        <span class="hljs-keyword">try</span> &#123;<br>            conn = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JDBCUtils</span>.</span></span>get<span class="hljs-constructor">Connection()</span>;<br><br>            ps = conn.prepare<span class="hljs-constructor">Statement(<span class="hljs-params">sql</span>)</span>;<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; args.length; i++) &#123;<br>                ps.set<span class="hljs-constructor">Object(<span class="hljs-params">i</span> + 1, <span class="hljs-params">args</span>[<span class="hljs-params">i</span>])</span>;<br>            &#125;<br>            rs = ps.execute<span class="hljs-constructor">Query()</span>;<br>            <span class="hljs-comment">//获取结果集的元数据</span><br>            ResultSetMetaData rsmd = rs.get<span class="hljs-constructor">MetaData()</span>;<br>            <span class="hljs-comment">//得到结果集的列数</span><br>            <span class="hljs-built_in">int</span> columnCount = rsmd.get<span class="hljs-constructor">ColumnCount()</span>;<br>            <span class="hljs-comment">//创建集合</span><br>            ArrayList&lt;T&gt; <span class="hljs-built_in">list</span> = <span class="hljs-keyword">new</span> ArrayList&lt;T&gt;<span class="hljs-literal">()</span>;<br>            <span class="hljs-keyword">while</span> (rs.next<span class="hljs-literal">()</span>) &#123;<span class="hljs-comment">//判断结果集是否还有下一行</span><br>                T t = clazz.<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance()</span>;<br>                <span class="hljs-comment">//处理结果集一行数据中的每一个列</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; columnCount; i++) &#123;<br>                    Object value = rs.get<span class="hljs-constructor">Object(<span class="hljs-params">i</span> + 1)</span>;<br><br>                    <span class="hljs-comment">//获取每个列的列名</span><br>                    String columnName = rsmd.get<span class="hljs-constructor">ColumnName(<span class="hljs-params">i</span> + 1)</span>;<br><br>                    <span class="hljs-comment">//给t对象指定的columnName属性，赋值为value，通过反射</span><br>                    Field field = clazz.get<span class="hljs-constructor">DeclaredField(<span class="hljs-params">columnName</span>)</span>;<br>                    field.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;<span class="hljs-comment">//让这个属性可以被访问</span><br>                    field.set(t, value);<br><br>                &#125;<br>                <span class="hljs-built_in">list</span>.add(t);<br>            &#125;<br>            return <span class="hljs-built_in">list</span>;<br>        &#125; catch (Exception e) &#123;<br>            e.print<span class="hljs-constructor">StackTrace()</span>;<br>        &#125; finally &#123;<br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JDBCUtils</span>.</span></span>close<span class="hljs-constructor">Resource(<span class="hljs-params">null</span>, <span class="hljs-params">ps</span>, <span class="hljs-params">rs</span>)</span>;<br>        &#125;<br>        return null;<br>    &#125;<br><br>    <span class="hljs-comment">//用于查询一些特殊值的通用方法，就只有一行一列的时候一般用这个</span><br>    public &lt;E&gt; E get<span class="hljs-constructor">Value(Connection <span class="hljs-params">conn</span>, String <span class="hljs-params">sql</span>, Object<span class="hljs-operator">...</span> <span class="hljs-params">args</span>)</span> &#123;<br>        PreparedStatement ps = null;<br>        ResultSet rs = null;<br>        <span class="hljs-keyword">try</span> &#123;<br>            ps = conn.prepare<span class="hljs-constructor">Statement(<span class="hljs-params">sql</span>)</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; args.length; i++) &#123;<br>                ps.set<span class="hljs-constructor">Object(<span class="hljs-params">i</span> + 1, <span class="hljs-params">args</span>[<span class="hljs-params">i</span>])</span>;<br><br>            &#125;<br>            rs = ps.execute<span class="hljs-constructor">Query()</span>;<br>            <span class="hljs-keyword">if</span> (rs.next<span class="hljs-literal">()</span>) &#123;<br>                return (E) rs.get<span class="hljs-constructor">Object(1)</span>;<br>            &#125;<br><br>        &#125; catch (Exception e) &#123;<br>            e.print<span class="hljs-constructor">StackTrace()</span>;<br>        &#125;<br>        finally&#123;<br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JDBCUtils</span>.</span></span>close<span class="hljs-constructor">Resource(<span class="hljs-params">null</span>, <span class="hljs-params">ps</span>, <span class="hljs-params">rs</span>)</span>;<br>        &#125;<br><br>return null;<br> &#125;<br></code></pre></td></tr></table></figure><h3 id="CustomerDAO"><a href="#CustomerDAO" class="headerlink" title="CustomerDAO"></a>CustomerDAO</h3><p>针对Customer接口来设计一个API</p><p>具体的类实现的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.sql.Date;<br><br><span class="hljs-comment">//此接口用于规范针对于customers表的常用操作</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">CustomerDAO</span> &#123;<br>    <span class="hljs-comment">//将cust对象添加到数据库中</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(Connection conn, Customer cust)</span>;<br><br>    <span class="hljs-comment">//针对指定的id，删除表中的一条记录</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteById</span><span class="hljs-params">(Connection conn,<span class="hljs-type">int</span> id)</span>;<br><br>    <span class="hljs-comment">//针对内存中的cust对象，去修改数据表中的指定的记录</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Connection conn,Customer cust)</span>;<br><br>    <span class="hljs-comment">//针对指定的id查询得到对应的Customer对象</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">getCustomerById</span><span class="hljs-params">(Connection conn,<span class="hljs-type">int</span> id)</span>;<br><br>    <span class="hljs-comment">//查询表中的所有记录构成的集合</span><br>    List&lt;Customer&gt; <span class="hljs-title function_">getAll</span><span class="hljs-params">(Connection conn)</span>;<br><br>    <span class="hljs-comment">//返回数据表中数据的条目数</span><br>    Long <span class="hljs-title function_">getCount</span><span class="hljs-params">(Connection conn)</span>;<br><br>    <span class="hljs-comment">//返回数据表中最大的生日</span><br>    Date <span class="hljs-title function_">getMaxBirth</span><span class="hljs-params">(Connection conn)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="CustomerDAOImpl"><a href="#CustomerDAOImpl" class="headerlink" title="CustomerDAOImpl"></a>CustomerDAOImpl</h3><hr><p>针对一个表具体的类，继承了上面的类，实现了上面的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.Date;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomerDAOImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseDao</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">CustomerDAO</span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(Connection conn, Customer cust)</span> &#123;<br>        String sql=<span class="hljs-string">&quot;insert into customers(name,email,birth)values(?,?,?)&quot;</span>;<br><br>        update(conn,sql,cust.getName(),cust.getEmail(),cust.getBirth());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteById</span><span class="hljs-params">(Connection conn, <span class="hljs-type">int</span> id)</span> &#123;<br>        String sql=<span class="hljs-string">&quot;delete from customers where id=?&quot;</span>;<br>update(conn,sql,id);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Connection conn, Customer cust)</span> &#123;<br>         String sql=<span class="hljs-string">&quot;update customers set name=?,email=?,birth=? where id=?&quot;</span>;<br>         update(conn,sql,cust.getName(),cust.getEmail(),cust.getBirth(),cust.getBirth());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Customer <span class="hljs-title function_">getCustomerById</span><span class="hljs-params">(Connection conn, <span class="hljs-type">int</span> id)</span> &#123;<br>        String sql=<span class="hljs-string">&quot;select id,name,email,birth from customers where id=?&quot;</span>;<br>        Customer customer=getInstance(conn,Customer.class,sql,id);<br>        <span class="hljs-keyword">return</span> customer;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;Customer&gt; <span class="hljs-title function_">getAll</span><span class="hljs-params">(Connection conn)</span> &#123;<br>       String sql=<span class="hljs-string">&quot;select id,name,email,birth from customers&quot;</span>;<br>       List&lt;Customer&gt; list=getForList(conn,Customer.class,sql);<br>       <span class="hljs-keyword">return</span> list;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Long <span class="hljs-title function_">getCount</span><span class="hljs-params">(Connection conn)</span> &#123;<br>        String sql=<span class="hljs-string">&quot;select count(*) from customers&quot;</span>;<br>        <span class="hljs-keyword">return</span> getValue(conn,sql);<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Date <span class="hljs-title function_">getMaxBirth</span><span class="hljs-params">(Connection conn)</span> &#123;<br>        String sql=<span class="hljs-string">&quot;select max(birth) from customers&quot;</span>;<br>        <span class="hljs-keyword">return</span> getValue(conn,sql);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>升级后的DAO在IDEA优化文件夹中写好了,报错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> 优化;<br><br><span class="hljs-keyword">import</span> 基础.BaseDao;<br><span class="hljs-keyword">import</span> 基础.Customer;<br><span class="hljs-keyword">import</span> 基础.CustomerDAO;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.ParameterizedType;<br><span class="hljs-keyword">import</span> java.lang.reflect.Type;<br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.Date;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomerDAOImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseDao</span>&lt;Customer&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">CustomerDAO</span> &#123;<br><br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(Connection conn, Customer cust)</span> &#123;<br>        String sql=<span class="hljs-string">&quot;insert into customers(name,email,birth)values(?,?,?)&quot;</span>;<br><br>        update(conn,sql,cust.getName(),cust.getEmail(),cust.getBirth());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteById</span><span class="hljs-params">(Connection conn, <span class="hljs-type">int</span> id)</span> &#123;<br>        String sql=<span class="hljs-string">&quot;delete from customers where id=?&quot;</span>;<br>update(conn,sql,id);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Connection conn, Customer cust)</span> &#123;<br>         String sql=<span class="hljs-string">&quot;update customers set name=?,email=?,birth=? where id=?&quot;</span>;<br>         update(conn,sql,cust.getName(),cust.getEmail(),cust.getBirth(),cust.getBirth());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Customer <span class="hljs-title function_">getCustomerById</span><span class="hljs-params">(Connection conn, <span class="hljs-type">int</span> id)</span> &#123;<br>        String sql=<span class="hljs-string">&quot;select id,name,email,birth from customers where id=?&quot;</span>;<br>        Customer customer=  getInstance(conn,sql,id);<br>        <span class="hljs-keyword">return</span> customer;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;Customer&gt; <span class="hljs-title function_">getAll</span><span class="hljs-params">(Connection conn)</span> &#123;<br>       String sql=<span class="hljs-string">&quot;select id,name,email,birth from customers&quot;</span>;<br>       List&lt;Customer&gt; list=  getForList(conn,sql);<br>       <span class="hljs-keyword">return</span> list;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Long <span class="hljs-title function_">getCount</span><span class="hljs-params">(Connection conn)</span> &#123;<br>        String sql=<span class="hljs-string">&quot;select count(*) from customers&quot;</span>;<br>        <span class="hljs-keyword">return</span> getValue(conn,sql);<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Date <span class="hljs-title function_">getMaxBirth</span><span class="hljs-params">(Connection conn)</span> &#123;<br>        String sql=<span class="hljs-string">&quot;select max(birth) from customers&quot;</span>;<br>        <span class="hljs-keyword">return</span> getValue(conn,sql);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>DAO：Data Access Object访问数据信息的类和接口，包括了对数据的CRUD（Create、Retrival、Update、Delete），而不包含任何业务相关的信息。有时也称作：BaseDAO</li><li>作用：为了实现功能的模块化，更有利于代码的维护和升级。</li><li>下面是尚硅谷JavaWeb阶段书城项目中DAO使用的体现：</li></ul><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209292333488.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220908164528686"></p><ul><li><p>层次结构：</p></li><li><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209292333489.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220908164602534"></p></li><li></li></ul><h3 id="【BaseDAO-java】"><a href="#【BaseDAO-java】" class="headerlink" title="【BaseDAO.java】"></a>【BaseDAO.java】</h3><p>下面是用的那个DBUtils来操作的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.bookstore.dao;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.ParameterizedType;<br><span class="hljs-keyword">import</span> java.lang.reflect.Type;<br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">import</span> org.apache.commons.dbutils.QueryRunner;<br><span class="hljs-keyword">import</span> org.apache.commons.dbutils.handlers.BeanHandler;<br><span class="hljs-keyword">import</span> org.apache.commons.dbutils.handlers.BeanListHandler;<br><span class="hljs-keyword">import</span> org.apache.commons.dbutils.handlers.ScalarHandler;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 定义一个用来被继承的对数据库进行基本操作的Dao</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> HanYanBing</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;T&gt;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseDao</span>&lt;T&gt; &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">QueryRunner</span> <span class="hljs-variable">queryRunner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryRunner</span>();<br><span class="hljs-comment">// 定义一个变量来接收泛型的类型</span><br><span class="hljs-keyword">private</span> Class&lt;T&gt; type;<br><br><span class="hljs-comment">// 获取T的Class对象，获取泛型的类型，泛型是在被子类继承时才确定</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">BaseDao</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// 获取子类的类型</span><br><span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getClass();<br><span class="hljs-comment">// 获取父类的类型</span><br><span class="hljs-comment">// getGenericSuperclass()用来获取当前类的父类的类型</span><br><span class="hljs-comment">// ParameterizedType表示的是带泛型的类型</span><br><span class="hljs-type">ParameterizedType</span> <span class="hljs-variable">parameterizedType</span> <span class="hljs-operator">=</span> (ParameterizedType) clazz.getGenericSuperclass();<br><span class="hljs-comment">// 获取具体的泛型类型 getActualTypeArguments获取具体的泛型的类型</span><br><span class="hljs-comment">// 这个方法会返回一个Type的数组</span><br>Type[] types = parameterizedType.getActualTypeArguments();<br><span class="hljs-comment">// 获取具体的泛型的类型·</span><br><span class="hljs-built_in">this</span>.type = (Class&lt;T&gt;) types[<span class="hljs-number">0</span>];<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 通用的增删改操作</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> sql</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> params</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Connection conn,String sql, Object... params)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">try</span> &#123;<br>count = queryRunner.update(conn, sql, params);<br>&#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>e.printStackTrace();<br>&#125; <br><span class="hljs-keyword">return</span> count;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取一个对象</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> sql</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> params</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> T <span class="hljs-title function_">getBean</span><span class="hljs-params">(Connection conn,String sql, Object... params)</span> &#123;<br><span class="hljs-type">T</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>t = queryRunner.query(conn, sql, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanHandler</span>&lt;T&gt;(type), params);<br>&#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>e.printStackTrace();<br>&#125; <br><span class="hljs-keyword">return</span> t;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取所有对象</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> sql</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> params</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> List&lt;T&gt; <span class="hljs-title function_">getBeanList</span><span class="hljs-params">(Connection conn,String sql, Object... params)</span> &#123;<br>List&lt;T&gt; list = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>list = queryRunner.query(conn, sql, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanListHandler</span>&lt;T&gt;(type), params);<br>&#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>e.printStackTrace();<br>&#125; <br><span class="hljs-keyword">return</span> list;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取一个但一值得方法，专门用来执行像 select count(*)...这样的sql语句</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> sql</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> params</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getValue</span><span class="hljs-params">(Connection conn,String sql, Object... params)</span> &#123;<br><span class="hljs-type">Object</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">// 调用queryRunner的query方法获取一个单一的值</span><br>count = queryRunner.query(conn, sql, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ScalarHandler</span>&lt;&gt;(), params);<br>&#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>e.printStackTrace();<br>&#125; <br><span class="hljs-keyword">return</span> count;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="【BookDAO-java】"><a href="#【BookDAO-java】" class="headerlink" title="【BookDAO.java】"></a>【BookDAO.java】</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.bookstore.dao;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">import</span> com.atguigu.bookstore.beans.Book;<br><span class="hljs-keyword">import</span> com.atguigu.bookstore.beans.Page;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BookDao</span> &#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 从数据库中查询出所有的记录</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br>List&lt;Book&gt; <span class="hljs-title function_">getBooks</span><span class="hljs-params">(Connection conn)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 向数据库中插入一条记录</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> book</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">saveBook</span><span class="hljs-params">(Connection conn,Book book)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 从数据库中根据图书的id删除一条记录</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> bookId</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteBookById</span><span class="hljs-params">(Connection conn,String bookId)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据图书的id从数据库中查询出一条记录</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> bookId</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br>Book <span class="hljs-title function_">getBookById</span><span class="hljs-params">(Connection conn,String bookId)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据图书的id从数据库中更新一条记录</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> book</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">updateBook</span><span class="hljs-params">(Connection conn,Book book)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取带分页的图书信息</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> page：是只包含了用户输入的pageNo属性的page对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 返回的Page对象是包含了所有属性的Page对象</span><br><span class="hljs-comment"> */</span><br>Page&lt;Book&gt; <span class="hljs-title function_">getPageBooks</span><span class="hljs-params">(Connection conn,Page&lt;Book&gt; page)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取带分页和价格范围的图书信息</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> page：是只包含了用户输入的pageNo属性的page对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 返回的Page对象是包含了所有属性的Page对象</span><br><span class="hljs-comment"> */</span><br>Page&lt;Book&gt; <span class="hljs-title function_">getPageBooksByPrice</span><span class="hljs-params">(Connection conn,Page&lt;Book&gt; page, <span class="hljs-type">double</span> minPrice, <span class="hljs-type">double</span> maxPrice)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="【UserDAO-java】"><a href="#【UserDAO-java】" class="headerlink" title="【UserDAO.java】"></a>【UserDAO.java】</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.bookstore.dao;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><br><span class="hljs-keyword">import</span> com.atguigu.bookstore.beans.User;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserDao</span> &#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据User对象中的用户名和密码从数据库中获取一条记录</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> user</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> User 数据库中有记录 null 数据库中无此记录</span><br><span class="hljs-comment"> */</span><br>User <span class="hljs-title function_">getUser</span><span class="hljs-params">(Connection conn,User user)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据User对象中的用户名从数据库中获取一条记录</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> user</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> true 数据库中有记录 false 数据库中无此记录</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">checkUsername</span><span class="hljs-params">(Connection conn,User user)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 向数据库中插入User对象</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> user</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">saveUser</span><span class="hljs-params">(Connection conn,User user)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="【BookDaoImpl-java】"><a href="#【BookDaoImpl-java】" class="headerlink" title="【BookDaoImpl.java】"></a>【BookDaoImpl.java】</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.bookstore.dao.impl;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">import</span> com.atguigu.bookstore.beans.Book;<br><span class="hljs-keyword">import</span> com.atguigu.bookstore.beans.Page;<br><span class="hljs-keyword">import</span> com.atguigu.bookstore.dao.BaseDao;<br><span class="hljs-keyword">import</span> com.atguigu.bookstore.dao.BookDao;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseDao</span>&lt;Book&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookDao</span> &#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;Book&gt; <span class="hljs-title function_">getBooks</span><span class="hljs-params">(Connection conn)</span> &#123;<br><span class="hljs-comment">// 调用BaseDao中得到一个List的方法</span><br>List&lt;Book&gt; beanList = <span class="hljs-literal">null</span>;<br><span class="hljs-comment">// 写sql语句</span><br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select id,title,author,price,sales,stock,img_path imgPath from books&quot;</span>;<br>beanList = getBeanList(conn,sql);<br><span class="hljs-keyword">return</span> beanList;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveBook</span><span class="hljs-params">(Connection conn,Book book)</span> &#123;<br><span class="hljs-comment">// 写sql语句</span><br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;insert into books(title,author,price,sales,stock,img_path) values(?,?,?,?,?,?)&quot;</span>;<br><span class="hljs-comment">// 调用BaseDao中通用的增删改的方法</span><br>update(conn,sql, book.getTitle(), book.getAuthor(), book.getPrice(), book.getSales(), book.getStock(),book.getImgPath());<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteBookById</span><span class="hljs-params">(Connection conn,String bookId)</span> &#123;<br><span class="hljs-comment">// 写sql语句</span><br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;DELETE FROM books WHERE id = ?&quot;</span>;<br><span class="hljs-comment">// 调用BaseDao中通用增删改的方法</span><br>update(conn,sql, bookId);<br><br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Book <span class="hljs-title function_">getBookById</span><span class="hljs-params">(Connection conn,String bookId)</span> &#123;<br><span class="hljs-comment">// 调用BaseDao中获取一个对象的方法</span><br><span class="hljs-type">Book</span> <span class="hljs-variable">book</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-comment">// 写sql语句</span><br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select id,title,author,price,sales,stock,img_path imgPath from books where id = ?&quot;</span>;<br>book = getBean(conn,sql, bookId);<br><span class="hljs-keyword">return</span> book;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateBook</span><span class="hljs-params">(Connection conn,Book book)</span> &#123;<br><span class="hljs-comment">// 写sql语句</span><br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update books set title = ? , author = ? , price = ? , sales = ? , stock = ? where id = ?&quot;</span>;<br><span class="hljs-comment">// 调用BaseDao中通用的增删改的方法</span><br>update(conn,sql, book.getTitle(), book.getAuthor(), book.getPrice(), book.getSales(), book.getStock(), book.getId());<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Page&lt;Book&gt; <span class="hljs-title function_">getPageBooks</span><span class="hljs-params">(Connection conn,Page&lt;Book&gt; page)</span> &#123;<br><span class="hljs-comment">// 获取数据库中图书的总记录数</span><br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select count(*) from books&quot;</span>;<br><span class="hljs-comment">// 调用BaseDao中获取一个单一值的方法</span><br><span class="hljs-type">long</span> <span class="hljs-variable">totalRecord</span> <span class="hljs-operator">=</span> (<span class="hljs-type">long</span>) getValue(conn,sql);<br><span class="hljs-comment">// 将总记录数设置都page对象中</span><br>page.setTotalRecord((<span class="hljs-type">int</span>) totalRecord);<br><br><span class="hljs-comment">// 获取当前页中的记录存放的List</span><br><span class="hljs-type">String</span> <span class="hljs-variable">sql2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select id,title,author,price,sales,stock,img_path imgPath from books limit ?,?&quot;</span>;<br><span class="hljs-comment">// 调用BaseDao中获取一个集合的方法</span><br>List&lt;Book&gt; beanList = getBeanList(conn,sql2, (page.getPageNo() - <span class="hljs-number">1</span>) * Page.PAGE_SIZE, Page.PAGE_SIZE);<br><span class="hljs-comment">// 将这个List设置到page对象中</span><br>page.setList(beanList);<br><span class="hljs-keyword">return</span> page;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Page&lt;Book&gt; <span class="hljs-title function_">getPageBooksByPrice</span><span class="hljs-params">(Connection conn,Page&lt;Book&gt; page, <span class="hljs-type">double</span> minPrice, <span class="hljs-type">double</span> maxPrice)</span> &#123;<br><span class="hljs-comment">// 获取数据库中图书的总记录数</span><br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select count(*) from books where price between ? and ?&quot;</span>;<br><span class="hljs-comment">// 调用BaseDao中获取一个单一值的方法</span><br><span class="hljs-type">long</span> <span class="hljs-variable">totalRecord</span> <span class="hljs-operator">=</span> (<span class="hljs-type">long</span>) getValue(conn,sql,minPrice,maxPrice);<br><span class="hljs-comment">// 将总记录数设置都page对象中</span><br>page.setTotalRecord((<span class="hljs-type">int</span>) totalRecord);<br><br><span class="hljs-comment">// 获取当前页中的记录存放的List</span><br><span class="hljs-type">String</span> <span class="hljs-variable">sql2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select id,title,author,price,sales,stock,img_path imgPath from books where price between ? and ? limit ?,?&quot;</span>;<br><span class="hljs-comment">// 调用BaseDao中获取一个集合的方法</span><br>List&lt;Book&gt; beanList = getBeanList(conn,sql2, minPrice , maxPrice , (page.getPageNo() - <span class="hljs-number">1</span>) * Page.PAGE_SIZE, Page.PAGE_SIZE);<br><span class="hljs-comment">// 将这个List设置到page对象中</span><br>page.setList(beanList);<br><br><span class="hljs-keyword">return</span> page;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="【UserDaoImpl-java】"><a href="#【UserDaoImpl-java】" class="headerlink" title="【UserDaoImpl.java】"></a>【UserDaoImpl.java】</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.bookstore.dao.impl;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><br><span class="hljs-keyword">import</span> com.atguigu.bookstore.beans.User;<br><span class="hljs-keyword">import</span> com.atguigu.bookstore.dao.BaseDao;<br><span class="hljs-keyword">import</span> com.atguigu.bookstore.dao.UserDao;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseDao</span>&lt;User&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span> &#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">getUser</span><span class="hljs-params">(Connection conn,User user)</span> &#123;<br><span class="hljs-comment">// 调用BaseDao中获取一个对象的方法</span><br><span class="hljs-type">User</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-comment">// 写sql语句</span><br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select id,username,password,email from users where username = ? and password = ?&quot;</span>;<br>bean = getBean(conn,sql, user.getUsername(), user.getPassword());<br><span class="hljs-keyword">return</span> bean;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">checkUsername</span><span class="hljs-params">(Connection conn,User user)</span> &#123;<br><span class="hljs-comment">// 调用BaseDao中获取一个对象的方法</span><br><span class="hljs-type">User</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-comment">// 写sql语句</span><br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select id,username,password,email from users where username = ?&quot;</span>;<br>bean = getBean(conn,sql, user.getUsername());<br><span class="hljs-keyword">return</span> bean != <span class="hljs-literal">null</span>;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveUser</span><span class="hljs-params">(Connection conn,User user)</span> &#123;<br><span class="hljs-comment">//写sql语句</span><br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;insert into users(username,password,email) values(?,?,?)&quot;</span>;<br><span class="hljs-comment">//调用BaseDao中通用的增删改的方法</span><br>update(conn,sql, user.getUsername(),user.getPassword(),user.getEmail());<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="【Book-java】"><a href="#【Book-java】" class="headerlink" title="【Book.java】"></a>【Book.java】</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.bookstore.beans;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 图书类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> songhongkang</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span> &#123;<br><br><span class="hljs-keyword">private</span> Integer id;<br><span class="hljs-keyword">private</span> String title; <span class="hljs-comment">// 书名</span><br><span class="hljs-keyword">private</span> String author; <span class="hljs-comment">// 作者</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">double</span> price; <span class="hljs-comment">// 价格</span><br><span class="hljs-keyword">private</span> Integer sales; <span class="hljs-comment">// 销量</span><br><span class="hljs-keyword">private</span> Integer stock; <span class="hljs-comment">// 库存</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">imgPath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;static/img/default.jpg&quot;</span>; <span class="hljs-comment">// 封面图片的路径</span><br><span class="hljs-comment">//构造器，get()，set()，toString()方法略</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="【Page-java】"><a href="#【Page-java】" class="headerlink" title="【Page.java】"></a>【Page.java】</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.bookstore.beans;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 页码类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> songhongkang</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Page</span>&lt;T&gt; &#123;<br><br><span class="hljs-keyword">private</span> List&lt;T&gt; list; <span class="hljs-comment">// 每页查到的记录存放的集合</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">PAGE_SIZE</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>; <span class="hljs-comment">// 每页显示的记录数</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> pageNo; <span class="hljs-comment">// 当前页</span><br><span class="hljs-comment">//private int totalPageNo; // 总页数，通过计算得到</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> totalRecord; <span class="hljs-comment">// 总记录数，通过查询数据库得到</span><br><br></code></pre></td></tr></table></figure><h3 id="【User-java】"><a href="#【User-java】" class="headerlink" title="【User.java】"></a>【User.java】</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.bookstore.beans;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用户类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> songhongkang</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br><br><span class="hljs-keyword">private</span> Integer id;<br><span class="hljs-keyword">private</span> String username;<br><span class="hljs-keyword">private</span> String password;<br><span class="hljs-keyword">private</span> String email;<br><br></code></pre></td></tr></table></figure><h2 id="第8章：数据库连接池"><a href="#第8章：数据库连接池" class="headerlink" title="第8章：数据库连接池"></a>第8章：数据库连接池</h2><h3 id="8-1-JDBC数据库连接池的必要性"><a href="#8-1-JDBC数据库连接池的必要性" class="headerlink" title="8.1 JDBC数据库连接池的必要性"></a>8.1 JDBC数据库连接池的必要性</h3><ul><li><p>在使用开发基于数据库的web程序时，传统的模式基本是按以下步骤：　　</p><ul><li><strong>在主程序（如servlet、beans）中建立数据库连接</strong></li><li><strong>进行sql操作</strong></li><li><strong>断开数据库连接</strong></li></ul></li><li><p>这种模式开发，存在的问题:</p><ul><li>普通的JDBC数据库连接使用 DriverManager 来获取，每次向数据库建立连接的时候都要将 Connection 加载到内存中，再验证用户名和密码(得花费0.05s～1s的时间)。需要数据库连接的时候，就向数据库要求一个，执行完成后再断开连接。这样的方式将会消耗大量的资源和时间。<strong>数据库的连接资源并没有得到很好的重复利用。</strong>若同时有几百人甚至几千人在线，频繁的进行数据库连接操作将占用很多的系统资源，严重的甚至会造成服务器的崩溃。</li><li><strong>对于每一次数据库连接，使用完后都得断开。</strong>否则，如果程序出现异常而未能关闭，将会导致数据库系统中的内存泄漏，最终将导致重启数据库。（回忆：何为Java的内存泄漏？）</li><li><strong>这种开发不能控制被创建的连接对象数</strong>，系统资源会被毫无顾及的分配出去，如连接过多，也可能导致内存泄漏，服务器崩溃。</li></ul></li></ul><h3 id="8-2-数据库连接池技术"><a href="#8-2-数据库连接池技术" class="headerlink" title="8.2 数据库连接池技术"></a>8.2 数据库连接池技术</h3><ul><li><p>为解决传统开发中的数据库连接问题，可以采用数据库连接池技术。</p></li><li><p><strong>数据库连接池的基本思想</strong>：就是为数据库连接建立一个“缓冲池”。预先在缓冲池中放入一定数量的连接，当需要建立数据库连接时，只需从“缓冲池”中取出一个，使用完毕之后再放回去。</p></li><li><p><strong>数据库连接池</strong>负责分配、管理和释放数据库连接，它<strong>允许应用程序重复使用一个现有的数据库连接，而不是重新建立一个</strong>。</p></li><li><p>数据库连接池在初始化时将创建一定数量的数据库连接放到连接池中，这些数据库连接的数量是由<strong>最小数据库连接数来设定</strong>的。无论这些数据库连接是否被使用，连接池都将一直保证至少拥有这么多的连接数量。连接池的<strong>最大数据库连接数量</strong>限定了这个连接池能占有的最大连接数，当应用程序向连接池请求的连接数超过最大连接数量时，这些请求将被加入到等待队列中。</p></li></ul><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209292333490.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220908195042211"></p><ul><li><strong>工作原理：</strong></li></ul><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209292333491.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220908195123348"></p><ul><li><p><strong>数据库连接池技术的优点</strong></p><p><strong>1. 资源重用</strong></p><p>由于数据库连接得以重用，避免了频繁创建，释放连接引起的大量性能开销。在减少系统消耗的基础上，另一方面也增加了系统运行环境的平稳性。</p><p><strong>2. 更快的系统反应速度</strong></p><p>数据库连接池在初始化过程中，往往已经创建了若干数据库连接置于连接池中备用。此时连接的初始化工作均已完成。对于业务请求处理而言，直接利用现有可用连接，避免了数据库连接初始化和释放过程的时间开销，从而减少了系统的响应时间</p><p><strong>3. 新的资源分配手段</strong></p><p>对于多应用共享同一数据库的系统而言，可在应用层通过数据库连接池的配置，实现某一应用最大可用数据库连接数的限制，避免某一应用独占所有的数据库资源</p><p><strong>4. 统一的连接管理，避免数据库连接泄漏</strong></p><p>在较为完善的数据库连接池实现中，可根据预先的占用超时设定，强制回收被占用连接，从而避免了常规数据库连接操作中可能出现的资源泄露</p></li></ul><h3 id="8-3-多种开源的数据库连接池"><a href="#8-3-多种开源的数据库连接池" class="headerlink" title="8.3 多种开源的数据库连接池"></a>8.3 多种开源的数据库连接池</h3><ul><li>JDBC 的数据库连接池使用 javax.sql.DataSource 来表示，DataSource 只是一个接口，该接口通常由服务器(Weblogic, WebSphere, Tomcat)提供实现，也有一些开源组织提供实现：<ul><li><strong>DBCP</strong> 是Apache提供的数据库连接池。tomcat 服务器自带dbcp数据库连接池。<strong>速度相对c3p0较快</strong>，但因自身存在BUG，Hibernate3已不再提供支持。</li><li><strong>C3P0</strong> 是一个开源组织提供的一个数据库连接池，<strong>速度相对较慢，稳定性还可以。</strong>hibernate官方推荐使用</li><li><strong>Proxool</strong> 是sourceforge下的一个开源项目数据库连接池，有监控连接池状态的功能，<strong>稳定性较c3p0差一点</strong></li><li><strong>BoneCP</strong> 是一个开源组织提供的数据库连接池，速度快</li><li><strong>Druid</strong> 是阿里提供的数据库连接池，据说是集DBCP 、C3P0 、Proxool 优点于一身的数据库连接池，但是速度不确定是否有BoneCP快</li></ul></li><li>DataSource 通常被称为数据源，它包含连接池和连接池管理两个部分，习惯上也经常把 DataSource 称为连接池</li><li><strong>DataSource用来取代DriverManager来获取Connection，获取速度快，同时可以大幅度提高数据库访问速度。</strong></li><li>特别注意：<ul><li>数据源和数据库连接不同，数据源无需创建多个，它是产生数据库连接的工厂，因此<strong>整个应用只需要一个数据源即可。</strong></li><li>当数据库访问结束后，程序还是像以前一样关闭数据库连接：conn.close(); 但conn.close()并没有关闭数据库的物理连接，它仅仅把数据库连接释放，归还给了数据库连接池。</li></ul></li></ul><h4 id="8-3-1-C3P0数据库连接池"><a href="#8-3-1-C3P0数据库连接池" class="headerlink" title="8.3.1 C3P0数据库连接池"></a>8.3.1 C3P0数据库连接池</h4><ul><li>获取连接方式一</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//使用C3P0数据库连接池的方式，获取数据库的连接：不推荐</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title function_">getConnection1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><span class="hljs-type">ComboPooledDataSource</span> <span class="hljs-variable">cpds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ComboPooledDataSource</span>();<br>cpds.setDriverClass(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>); <br>cpds.setJdbcUrl(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>);<br>cpds.setUser(<span class="hljs-string">&quot;root&quot;</span>);<br>cpds.setPassword(<span class="hljs-string">&quot;abc123&quot;</span>);<br><br><span class="hljs-comment">//cpds.setMaxPoolSize(100);</span><br><br><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> cpds.getConnection();<br><span class="hljs-keyword">return</span> conn;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>获取连接方式二</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//使用C3P0数据库连接池的配置文件方式，获取数据库的连接：推荐</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">DataSource</span> <span class="hljs-variable">cpds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ComboPooledDataSource</span>(<span class="hljs-string">&quot;helloc3p0&quot;</span>);<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title function_">getConnection2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException&#123;<br><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> cpds.getConnection();<br><span class="hljs-keyword">return</span> conn;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中，src下的配置文件为：【c3p0-config.xml】</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">c3p0-config</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">named-config</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;helloc3p0&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 获取连接的4个基本信息 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span>root<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span>abc123<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jdbcUrl&quot;</span>&gt;</span>jdbc:mysql:///test<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClass&quot;</span>&gt;</span>com.mysql.jdbc.Driver<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 涉及到数据库连接池的管理的相关属性的设置 --&gt;</span><br><span class="hljs-comment">&lt;!-- 若数据库中连接数不足时, 一次向数据库服务器申请多少个连接 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;acquireIncrement&quot;</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 初始化数据库连接池时连接的数量 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;initialPoolSize&quot;</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 数据库连接池中的最小的数据库连接数 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;minPoolSize&quot;</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 数据库连接池中的最大的数据库连接数 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxPoolSize&quot;</span>&gt;</span>10<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-comment">&lt;!-- C3P0 数据库连接池可以维护的 Statement 的个数 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxStatements&quot;</span>&gt;</span>20<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 每个连接同时可以使用的 Statement 对象的个数 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxStatementsPerConnection&quot;</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">named-config</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">c3p0-config</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="8-3-2-DBCP数据库连接池"><a href="#8-3-2-DBCP数据库连接池" class="headerlink" title="8.3.2 DBCP数据库连接池"></a>8.3.2 DBCP数据库连接池</h4><ul><li>DBCP 是 Apache 软件基金组织下的开源连接池实现，该连接池依赖该组织下的另一个开源系统：Common-pool。如需使用该连接池实现，应在系统中增加如下两个 jar 文件：<ul><li>Commons-dbcp.jar：连接池的实现</li><li>Commons-pool.jar：连接池实现的依赖库</li></ul></li><li><strong>Tomcat 的连接池正是采用该连接池来实现的。</strong>该数据库连接池既可以与应用服务器整合使用，也可由应用程序独立使用。</li><li>数据源和数据库连接不同，数据源无需创建多个，它是产生数据库连接的工厂，因此整个应用只需要一个数据源即可。</li><li>当数据库访问结束后，程序还是像以前一样关闭数据库连接：conn.close(); 但上面的代码并没有关闭数据库的物理连接，它仅仅把数据库连接释放，归还给了数据库连接池。</li><li>配置属性说明</li></ul><table><thead><tr><th>属性</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>initialSize</td><td>0</td><td>连接池启动时创建的初始化连接数量</td></tr><tr><td>maxActive</td><td>8</td><td>连接池中可同时连接的最大的连接数</td></tr><tr><td>maxIdle</td><td>8</td><td>连接池中最大的空闲的连接数，超过的空闲连接将被释放，如果设置为负数表示不限制</td></tr><tr><td>minIdle</td><td>0</td><td>连接池中最小的空闲的连接数，低于这个数量会被创建新的连接。该参数越接近maxIdle，性能越好，因为连接的创建和销毁，都是需要消耗资源的；但是不能太大。</td></tr><tr><td>maxWait</td><td>无限制</td><td>最大等待时间，当没有可用连接时，连接池等待连接释放的最大时间，超过该时间限制会抛出异常，如果设置-1表示无限等待</td></tr><tr><td>poolPreparedStatements</td><td>false</td><td>开启池的Statement是否prepared</td></tr><tr><td>maxOpenPreparedStatements</td><td>无限制</td><td>开启池的prepared 后的同时最大连接数</td></tr><tr><td>minEvictableIdleTimeMillis</td><td></td><td>连接池中连接，在时间段内一直空闲， 被逐出连接池的时间</td></tr><tr><td>removeAbandonedTimeout</td><td>300</td><td>超过时间限制，回收没有用(废弃)的连接</td></tr><tr><td>removeAbandoned</td><td>false</td><td>超过removeAbandonedTimeout时间后，是否进 行没用连接（废弃）的回收</td></tr></tbody></table><ul><li>获取连接方式一：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title function_">getConnection3</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-type">BasicDataSource</span> <span class="hljs-variable">source</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BasicDataSource</span>();<br><br>source.setDriverClassName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>source.setUrl(<span class="hljs-string">&quot;jdbc:mysql:///test&quot;</span>);<br>source.setUsername(<span class="hljs-string">&quot;root&quot;</span>);<br>source.setPassword(<span class="hljs-string">&quot;abc123&quot;</span>);<br><br><span class="hljs-comment">//</span><br>source.setInitialSize(<span class="hljs-number">10</span>);<br><br><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> source.getConnection();<br><span class="hljs-keyword">return</span> conn;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>获取连接方式二：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//使用dbcp数据库连接池的配置文件方式，获取数据库的连接：推荐</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">DataSource</span> <span class="hljs-variable">source</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">static</span>&#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">Properties</span> <span class="hljs-variable">pros</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br><br><span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> DBCPTest.class.getClassLoader().getResourceAsStream(<span class="hljs-string">&quot;dbcp.properties&quot;</span>);<br><br>pros.load(is);<br><span class="hljs-comment">//根据提供的BasicDataSourceFactory创建对应的DataSource对象</span><br>source = BasicDataSourceFactory.createDataSource(pros);<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125;<br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title function_">getConnection4</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> source.getConnection();<br><br><span class="hljs-keyword">return</span> conn;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中，src下的配置文件为：【dbcp.properties】</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">driverClassName</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-attr">url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/test?rewriteBatchedStatements=true&amp;useServerPrepStmts=false</span><br><span class="hljs-attr">username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">password</span>=<span class="hljs-string">abc123</span><br><br><span class="hljs-attr">initialSize</span>=<span class="hljs-string">10</span><br><span class="hljs-comment">#...</span><br></code></pre></td></tr></table></figure><h4 id="8-3-3-Druid（德鲁伊）数据库连接池（报错了）"><a href="#8-3-3-Druid（德鲁伊）数据库连接池（报错了）" class="headerlink" title="8.3.3 Druid（德鲁伊）数据库连接池（报错了）"></a>8.3.3 Druid（德鲁伊）数据库连接池（报错了）</h4><p>Druid是阿里巴巴开源平台上一个数据库连接池实现，它结合了C3P0、DBCP、Proxool等DB池的优点，同时加入了日志监控，可以很好的监控DB池连接和SQL的执行情况，可以说是针对监控而生的DB连接池，<strong>可以说是目前最好的连接池之一。</strong></p><p>这个是放在JDBCUtils文件里的，<strong>这一块的静态代码块有问题</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> DataSource source1=<span class="hljs-literal">null</span>;<br><span class="hljs-keyword">static</span>&#123;<br>    <span class="hljs-keyword">try</span>&#123;<br>        Properties pros=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        InputStream is= <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D:\\IDEAjava工程\\JDBC\\src\\基础\\druid.properties&quot;</span>);<br>        pros.load(is);<br>        source1= DruidDataSourceFactory.createDataSource(pros);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title function_">getConnection3</span><span class="hljs-params">()</span><span class="hljs-keyword">throws</span> Exception&#123;<br>    Connection conn=source1.getConnection();<br>    <span class="hljs-keyword">return</span> conn;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DruidTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>) &#123;<br>        <span class="hljs-title class_">CustomerDAOImpl</span> dao=<span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomerDAOImpl</span>();<br>        <span class="hljs-title class_">Connection</span> conn=<span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span>&#123;<br>            conn=<span class="hljs-title class_">JDBCUtils</span>.<span class="hljs-title function_">getConnection3</span>();<br>            <span class="hljs-title class_">Customer</span> cust=dao.<span class="hljs-title function_">getCustomerById</span>(conn,<span class="hljs-number">3</span>);<br>            <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(cust);<br>        &#125;<br>        <span class="hljs-keyword">catch</span>(<span class="hljs-title class_">Exception</span> e)&#123;<br>            e.<span class="hljs-title function_">printStackTrace</span>();<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中，src下的配置文件为：【druid.properties】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">url=jdbc:mysql:<span class="hljs-comment">//localhost:3306/test?rewriteBatchedStatements=true</span><br>username=root<br>password=root<br>driverClassName=com.mysql.jdbc.Driver<br><br>initialSize=<span class="hljs-number">10</span><br>maxActive=<span class="hljs-number">20</span><br>maxWait=<span class="hljs-number">1000</span><br>filters=wall<br></code></pre></td></tr></table></figure><ul><li>详细配置参数：</li></ul><table><thead><tr><th><strong>配置</strong></th><th><strong>缺省</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>name</td><td></td><td>配置这个属性的意义在于，如果存在多个数据源，监控的时候可以通过名字来区分开来。   如果没有配置，将会生成一个名字，格式是：”DataSource-” +   System.identityHashCode(this)</td></tr><tr><td>url</td><td></td><td>连接数据库的url，不同数据库不一样。例如：mysql :   jdbc:mysql:&#x2F;&#x2F;10.20.153.104:3306&#x2F;druid2      oracle :   jdbc:oracle:thin:@10.20.149.85:1521:ocnauto</td></tr><tr><td>username</td><td></td><td>连接数据库的用户名</td></tr><tr><td>password</td><td></td><td>连接数据库的密码。如果你不希望密码直接写在配置文件中，可以使用ConfigFilter。详细看这里：<a href="https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter">https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter</a></td></tr><tr><td>driverClassName</td><td></td><td>根据url自动识别   这一项可配可不配，如果不配置druid会根据url自动识别dbType，然后选择相应的driverClassName(建议配置下)</td></tr><tr><td>initialSize</td><td>0</td><td>初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时</td></tr><tr><td>maxActive</td><td>8</td><td>最大连接池数量</td></tr><tr><td>maxIdle</td><td>8</td><td>已经不再使用，配置了也没效果</td></tr><tr><td>minIdle</td><td></td><td>最小连接池数量</td></tr><tr><td>maxWait</td><td></td><td>获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。</td></tr><tr><td>poolPreparedStatements</td><td>false</td><td>是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。</td></tr><tr><td>maxOpenPreparedStatements</td><td>-1</td><td>要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100</td></tr><tr><td>validationQuery</td><td></td><td>用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。</td></tr><tr><td>testOnBorrow</td><td>true</td><td>申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</td></tr><tr><td>testOnReturn</td><td>false</td><td>归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能</td></tr><tr><td>testWhileIdle</td><td>false</td><td>建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。</td></tr><tr><td>timeBetweenEvictionRunsMillis</td><td></td><td>有两个含义： 1)Destroy线程会检测连接的间隔时间2)testWhileIdle的判断依据，详细看testWhileIdle属性的说明</td></tr><tr><td>numTestsPerEvictionRun</td><td></td><td>不再使用，一个DruidDataSource只支持一个EvictionRun</td></tr><tr><td>minEvictableIdleTimeMillis</td><td></td><td></td></tr><tr><td>connectionInitSqls</td><td></td><td>物理连接初始化的时候执行的sql</td></tr><tr><td>exceptionSorter</td><td></td><td>根据dbType自动识别   当数据库抛出一些不可恢复的异常时，抛弃连接</td></tr><tr><td>filters</td><td></td><td>属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：   监控统计用的filter:stat日志用的filter:log4j防御sql注入的filter:wall</td></tr><tr><td>proxyFilters</td><td></td><td>类型是List，如果同时配置了filters和proxyFilters，是组合关系，并非替换关系</td></tr></tbody></table><h2 id="第9章：Apache-DBUtils实现CRUD操作"><a href="#第9章：Apache-DBUtils实现CRUD操作" class="headerlink" title="第9章：Apache-DBUtils实现CRUD操作"></a>第9章：Apache-DBUtils实现CRUD操作</h2><h3 id="9-1-Apache-DBUtils简介"><a href="#9-1-Apache-DBUtils简介" class="headerlink" title="9.1 Apache-DBUtils简介"></a>9.1 Apache-DBUtils简介</h3><ul><li><p>commons-dbutils 是 Apache 组织提供的一个开源 JDBC工具类库，它是对JDBC的简单封装，学习成本极低，并且使用dbutils能极大简化jdbc编码的工作量，同时也不会影响程序的性能。</p></li><li><p>API介绍：</p><ul><li>org.apache.commons.dbutils.QueryRunner</li><li>org.apache.commons.dbutils.ResultSetHandler</li><li>工具类：org.apache.commons.dbutils.DbUtils</li></ul></li><li><p>API包说明：</p></li></ul><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209292333492.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220909094242478"></p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209292333493.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220909094259484"></p><h3 id="9-2-主要API的使用"><a href="#9-2-主要API的使用" class="headerlink" title="9.2 主要API的使用"></a>9.2 主要API的使用</h3><h4 id="9-2-1-DbUtils"><a href="#9-2-1-DbUtils" class="headerlink" title="9.2.1 DbUtils"></a>9.2.1 DbUtils</h4><ul><li>DbUtils ：提供如关闭连接、装载JDBC驱动程序等常规工作的工具类，里面的所有方法都是静态的。主要方法如下：<ul><li><strong>public static void close(…) throws java.sql.SQLException</strong>：　DbUtils类提供了三个重载的关闭方法。这些方法检查所提供的参数是不是NULL，如果不是的话，它们就关闭Connection、Statement和ResultSet。</li><li>public static void closeQuietly(…): 这一类方法不仅能在Connection、Statement和ResultSet为NULL情况下避免关闭，还能隐藏一些在程序中抛出的SQLEeception。</li><li>public static void commitAndClose(Connection conn)throws SQLException： 用来提交连接的事务，然后关闭连接</li><li>public static void commitAndCloseQuietly(Connection conn)： 用来提交连接，然后关闭连接，并且在关闭连接时不抛出SQL异常。 </li><li>public static void rollback(Connection conn)throws SQLException：允许conn为null，因为方法内部做了判断</li><li>public static void rollbackAndClose(Connection conn)throws SQLException</li><li>rollbackAndCloseQuietly(Connection)</li><li>public static boolean loadDriver(java.lang.String driverClassName)：这一方装载并注册JDBC驱动程序，如果成功就返回true。使用该方法，你不需要捕捉这个异常ClassNotFoundException。</li></ul></li></ul><h4 id="9-2-2-QueryRunner类"><a href="#9-2-2-QueryRunner类" class="headerlink" title="9.2.2 QueryRunner类"></a>9.2.2 QueryRunner类</h4><ul><li><strong>该类简单化了SQL查询，它与ResultSetHandler组合在一起使用可以完成大部分的数据库操作，能够大大减少编码量。</strong></li><li>QueryRunner类提供了两个构造器：<ul><li>默认的构造器</li><li>需要一个 javax.sql.DataSource 来作参数的构造器</li></ul></li><li>QueryRunner类的主要方法：<ul><li><strong>更新</strong><ul><li>public int update(Connection conn, String sql, Object… params) throws SQLException:用来执行一个更新（插入、更新或删除）操作。</li><li>……</li></ul></li><li><strong>插入</strong><ul><li>public <T> T insert(Connection conn,String sql,ResultSetHandler<T> rsh, Object… params) throws SQLException：只支持INSERT语句，其中 rsh - The handler used to create the result object from the ResultSet of auto-generated keys.  返回值: An object generated by the handler.即自动生成的键值</li><li>….</li></ul></li><li><strong>批处理</strong><ul><li>public int[] batch(Connection conn,String sql,Object[][] params)throws SQLException： INSERT, UPDATE, or DELETE语句</li><li>public <T> T insertBatch(Connection conn,String sql,ResultSetHandler<T> rsh,Object[][] params)throws SQLException：只支持INSERT语句</li><li>…..</li></ul></li><li><strong>查询</strong><ul><li>public Object query(Connection conn, String sql, ResultSetHandler rsh,Object… params) throws SQLException：执行一个查询操作，在这个查询中，对象数组中的每个元素值被用来作为查询语句的置换参数。该方法会自行处理 PreparedStatement 和 ResultSet 的创建和关闭。</li><li>……</li></ul></li></ul></li><li>update方法测试</li><li>update方法能执行delete  update  insert语句</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//添加数据</span><br><span class="hljs-keyword">import</span> org.apache.commons.dbutils.QueryRunner;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DbUtilsTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>DbUtilsTest list=<span class="hljs-keyword">new</span> <span class="hljs-title class_">DbUtilsTest</span>();<br>list.testInsert();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testInsert</span><span class="hljs-params">()</span>  &#123;<br>        <span class="hljs-type">QueryRunner</span> <span class="hljs-variable">runner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryRunner</span>();<br>        Connection conn= <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            conn = JDBCUtils.getConnection();<br><br>            <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;insert into customers(name,email,birth)values(?,?,?)&quot;</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">insertCount</span> <span class="hljs-operator">=</span> runner.update(conn, sql, <span class="hljs-string">&quot;易烊千玺&quot;</span>, <span class="hljs-string">&quot;3241525035@qq.com&quot;</span>, <span class="hljs-string">&quot;1997-09-08&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;添加了&quot;</span> + insertCount + <span class="hljs-string">&quot;记录&quot;</span>);<br><br>        &#125;<br>        <span class="hljs-keyword">catch</span>(Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">finally</span>&#123;<br>            JDBCUtils.closeResource(conn,<span class="hljs-literal">null</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 测试删除</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDelete</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-type">QueryRunner</span> <span class="hljs-variable">runner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryRunner</span>();<br><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> JDBCUtils.getConnection();<br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;delete from customers where id &lt; ?&quot;</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> runner.update(conn, sql,<span class="hljs-number">3</span>);<br><br>System.out.println(<span class="hljs-string">&quot;删除了&quot;</span> + count + <span class="hljs-string">&quot;条记录&quot;</span>);<br><br>JDBCUtils.closeResource(conn, <span class="hljs-literal">null</span>);<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="9-2-3-ResultSetHandler接口及实现类"><a href="#9-2-3-ResultSetHandler接口及实现类" class="headerlink" title="9.2.3 ResultSetHandler接口及实现类"></a>9.2.3 ResultSetHandler接口及实现类</h4><ul><li><p>该接口用于处理 java.sql.ResultSet，将数据按要求转换为另一种形式。</p></li><li><p>ResultSetHandler 接口提供了一个单独的方法：Object handle (java.sql.ResultSet .rs)。</p></li><li><p>接口的主要实现类：</p><ul><li><p>ArrayHandler：把结果集中的第一行数据转成对象数组。</p></li><li><p>ArrayListHandler：把结果集中的每一行数据都转成一个数组，再存放到List中。</p></li><li><p><strong>BeanHandler：</strong>将结果集中的第一行数据封装到一个对应的JavaBean实例中。</p></li><li><p><strong>BeanListHandler：</strong>将结果集中的每一行数据都封装到一个对应的JavaBean实例中，存放到List里。</p></li><li><p>ColumnListHandler：将结果集中某一列的数据存放到List中。</p></li><li><p>KeyedHandler(name)：将结果集中的每一行数据都封装到一个Map里，再把这些map再存到一个map里，其key为指定的key。</p></li><li><p><strong>MapHandler：</strong>将结果集中的第一行数据封装到一个Map里，key是列名，value就是对应的值。</p></li><li><p><strong>MapListHandler：</strong>将结果集中的每一行数据都封装到一个Map里，然后再存放到List</p></li><li><p><strong>ScalarHandler：</strong>查询单个值对象</p></li></ul></li><li><p>测试</p><p>BeanHandler是ResultSetHandler接口的实现类</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 测试查询:查询一条记录</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 使用ResultSetHandler的实现类：BeanHandler</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testQueryInstance</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><span class="hljs-type">QueryRunner</span> <span class="hljs-variable">runner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryRunner</span>();<br><br><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> JDBCUtils.getConnection();<br><br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select id,name,email,birth from customers where id = ?&quot;</span>;<br><br><span class="hljs-comment">//</span><br>BeanHandler&lt;Customer&gt; handler = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanHandler</span>&lt;&gt;(Customer.class);<br><span class="hljs-type">Customer</span> <span class="hljs-variable">customer</span> <span class="hljs-operator">=</span> runner.query(conn, sql, handler, <span class="hljs-number">23</span>);<br>System.out.println(customer);<br>JDBCUtils.closeResource(conn, <span class="hljs-literal">null</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 测试查询:查询多条记录构成的集合</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 使用ResultSetHandler的实现类：BeanListHandler，用于封装表中的多条记录构成的集合</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testQueryList</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><span class="hljs-type">QueryRunner</span> <span class="hljs-variable">runner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryRunner</span>();<br><br><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> JDBCUtils.getConnection();<br><br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select id,name,email,birth from customers where id &lt; ?&quot;</span>;<br><br><span class="hljs-comment">//</span><br>BeanListHandler&lt;Customer&gt; handler = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanListHandler</span>&lt;&gt;(Customer.class);<br>List&lt;Customer&gt; list = runner.query(conn, sql, handler, <span class="hljs-number">23</span>);<br>list.forEach(System.out::println);<br>JDBCUtils.closeResource(conn, <span class="hljs-literal">null</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 自定义ResultSetHandler的实现类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testQueryInstance1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><span class="hljs-type">QueryRunner</span> <span class="hljs-variable">runner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryRunner</span>();<br><br><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> JDBCUtils.getConnection();<br><br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select id,name,email,birth from customers where id = ?&quot;</span>;<br><br>ResultSetHandler&lt;Customer&gt; handler = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultSetHandler</span>&lt;Customer&gt;() &#123;<span class="hljs-comment">//这个地方必须要写后面那个Customer</span><br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Customer <span class="hljs-title function_">handle</span><span class="hljs-params">(ResultSet rs)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>System.out.println(<span class="hljs-string">&quot;handle&quot;</span>);<br><span class="hljs-comment">//return new Customer(1,&quot;Tom&quot;,&quot;tom@126.com&quot;,new Date(123323432L));</span><br><br><span class="hljs-keyword">if</span>(rs.next())&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> rs.getInt(<span class="hljs-string">&quot;id&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> rs.getString(<span class="hljs-string">&quot;name&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">email</span> <span class="hljs-operator">=</span> rs.getString(<span class="hljs-string">&quot;email&quot;</span>);<br><span class="hljs-type">Date</span> <span class="hljs-variable">birth</span> <span class="hljs-operator">=</span> rs.getDate(<span class="hljs-string">&quot;birth&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Customer</span>(id, name, email, birth);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br><br>&#125;<br>&#125;;<br><br><span class="hljs-type">Customer</span> <span class="hljs-variable">customer</span> <span class="hljs-operator">=</span> runner.query(conn, sql, handler, <span class="hljs-number">23</span>);<br><br>System.out.println(customer);<br><br>JDBCUtils.closeResource(conn, <span class="hljs-literal">null</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 如何查询类似于最大的，最小的，平均的，总和，个数相关的数据，</span><br><span class="hljs-comment"> * 使用ScalarHandler</span><br><span class="hljs-comment"> 这个就是用来返回一些特殊的熟知的和那个BASEDAO中的getValue方法有些类似</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testQueryValue</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><span class="hljs-type">QueryRunner</span> <span class="hljs-variable">runner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryRunner</span>();<br><br><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> JDBCUtils.getConnection();<br><br><span class="hljs-comment">//测试一：</span><br><span class="hljs-comment">//String sql = &quot;select count(*) from customers where id &lt; ?&quot;;</span><br><span class="hljs-comment">//ScalarHandler handler = new ScalarHandler();</span><br><span class="hljs-comment">//long count = (long) runner.query(conn, sql, handler, 20);</span><br><span class="hljs-comment">//System.out.println(count);</span><br><br><span class="hljs-comment">//测试二：</span><br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select max(birth) from customers&quot;</span>;<br><span class="hljs-type">ScalarHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ScalarHandler</span>();<br><span class="hljs-type">Date</span> <span class="hljs-variable">birth</span> <span class="hljs-operator">=</span> (Date) runner.query(conn, sql, handler);<br>System.out.println(birth);<br><br>JDBCUtils.closeResource(conn, <span class="hljs-literal">null</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs processing">用MapHandler这个实现类，返回的是一个<span class="hljs-built_in">map</span>形式的对象<br>将字段及相应字段的值作为<span class="hljs-built_in">map</span>的<span class="hljs-built_in">key</span>和value<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testQuery</span>() <span class="hljs-keyword">throws</span> SQLException &#123;<br>    QueryRunner runner = <span class="hljs-keyword">new </span><span class="hljs-class title_">QueryRunner</span>();<br>    Connection conn=JDBCUtils.<span class="hljs-property">getConnection</span>();<br>    <span class="hljs-built_in">String</span> sql=<span class="hljs-string">&quot;select id,name,email,birth from customers where id&lt;?&quot;</span>;<br>    MapHandler handler=<span class="hljs-keyword">new </span><span class="hljs-class title_">MapHandler</span>();<br>    Map&lt;<span class="hljs-built_in">String</span>,<span class="hljs-built_in">Object</span>&gt; <span class="hljs-built_in">map</span>=runner.<span class="hljs-property">query</span>(conn,sql,handler,<span class="hljs-number">23</span>);<br>    System.<span class="hljs-property">out</span>.<span class="hljs-property">println</span>(<span class="hljs-built_in">map</span>);<br><br>&#125;<br><span class="hljs-comment">//    &#123;name=汪峰, birth=2010-02-02, id=1, email=wf@126.com&#125;结果</span><br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">打印多个Map，对应表中的多条记录<br><br><span class="hljs-built_in">public</span> <span class="hljs-type">void</span> testQueryList() throws <span class="hljs-keyword">Exception</span>&#123;<br>    QueryRunner runner = <span class="hljs-built_in">new</span> QueryRunner();<br><br>    <span class="hljs-keyword">Connection</span> conn = JDBCUtils.getConnection();<br><br>    String <span class="hljs-keyword">sql</span> = &quot;select id,name,email,birth from customers where id &lt; ?&quot;;<br><br>    //<br>    MapListHandler <span class="hljs-keyword">handler</span> = <span class="hljs-built_in">new</span> MapListHandler();<br>    List&lt;Map&lt;String,<span class="hljs-keyword">Object</span>&gt;&gt; list = runner.query(conn, <span class="hljs-keyword">sql</span>, <span class="hljs-keyword">handler</span>, <span class="hljs-number">23</span>);<br>    list.<span class="hljs-keyword">forEach</span>(<span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>::println);<br><br>    JDBCUtils.closeResource(conn, <span class="hljs-keyword">null</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>关闭连接，可以放在JDBCUtils类中当作关闭方法</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//用DBUtils关闭资源</span><br>public static void close<span class="hljs-constructor">Resource1(Connection <span class="hljs-params">conn</span>,Statement <span class="hljs-params">ps</span>,ResultSet <span class="hljs-params">rs</span>)</span>&#123;<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DbUtils</span>.</span></span>close<span class="hljs-constructor">Quietly(<span class="hljs-params">conn</span>)</span>;<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DbUtils</span>.</span></span>close<span class="hljs-constructor">Quietly(<span class="hljs-params">ps</span>)</span>;<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DbUtils</span>.</span></span>close<span class="hljs-constructor">Quietly(<span class="hljs-params">rs</span>)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>用</p><h4 id="自己用DBUtils实现的BaseDao"><a href="#自己用DBUtils实现的BaseDao" class="headerlink" title="自己用DBUtils实现的BaseDao"></a>自己用DBUtils实现的BaseDao</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.dao.impl;<br><br><span class="hljs-keyword">import</span> com.atguigu.utils.JdbcUtils;<br><span class="hljs-keyword">import</span> org.apache.commons.dbutils.QueryRunner;<br><span class="hljs-keyword">import</span> org.apache.commons.dbutils.handlers.BeanHandler;<br><span class="hljs-keyword">import</span> org.apache.commons.dbutils.handlers.BeanListHandler;<br><span class="hljs-keyword">import</span> org.apache.commons.dbutils.handlers.ScalarHandler;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseDao</span> &#123;<br>    <span class="hljs-comment">//使用DbUtils操作数据库</span><br><span class="hljs-keyword">private</span> QueryRunner queryRunner=<span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryRunner</span>();<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">update()方法用来执行：insert  update  delete语句</span><br><span class="hljs-comment">如果返回-1说明执行失败，  否则返回其他表示影响的行数</span><br><span class="hljs-comment"> */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">update</span><span class="hljs-params">(String sql,Object...args)</span>&#123;<br>        Connection conn= JdbcUtils.getConnection();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> queryRunner.update(conn, sql, args);<br>        &#125;<br>        <span class="hljs-keyword">catch</span>(Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    查询返回一个javaBean的sql语句   type为返回对象类型，args是sql对应的参数值，sql是执行的sql语句  &lt;T&gt;返回的类型和泛型</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">queryForOne</span><span class="hljs-params">(Class&lt;T&gt; type,String sql,Object...args)</span> &#123;<br>        Connection con=JdbcUtils.getConnection();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> queryRunner.query(con,sql,<span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanHandler</span>&lt;T&gt;(type),args);<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">finally</span>&#123;<br>            JdbcUtils.close(con);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> &lt;T&gt; List&lt;T&gt; <span class="hljs-title function_">queryForList</span><span class="hljs-params">(Class&lt;T&gt; type,String sql,Object...args)</span>&#123;<br>        Connection con=JdbcUtils.getConnection();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> queryRunner.query(con,sql,<span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanListHandler</span>&lt;T&gt;(type),args);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>        e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">queryForSingleValue</span><span class="hljs-params">(String sql,Object...args)</span>&#123;<br>        Connection conn=JdbcUtils.getConnection();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> queryRunner.query(conn, sql,<span class="hljs-keyword">new</span> <span class="hljs-title class_">ScalarHandler</span>(), args);<br>        &#125;<br>        <span class="hljs-keyword">catch</span>(Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="JDBC总结"><a href="#JDBC总结" class="headerlink" title="JDBC总结"></a>JDBC总结</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java">总结<br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testUpdateWithTx</span><span class="hljs-params">()</span> &#123;<br><br><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">//1.获取连接的操作（</span><br><span class="hljs-comment">//① 手写的连接：JDBCUtils.getConnection();</span><br><span class="hljs-comment">//② 使用数据库连接池：C3P0;DBCP;Druid</span><br><span class="hljs-comment">//2.对数据表进行一系列CRUD操作</span><br><span class="hljs-comment">//① 使用PreparedStatement实现通用的增删改、查询操作（version 1.0 \ version 2.0)</span><br><span class="hljs-comment">//version2.0的增删改public void update(Connection conn,String sql,Object ... args)&#123;&#125;</span><br><span class="hljs-comment">//version2.0的查询 public &lt;T&gt; T getInstance(Connection conn,Class&lt;T&gt; clazz,String sql,Object ... args)&#123;&#125;</span><br><span class="hljs-comment">//② 使用dbutils提供的jar包中提供的QueryRunner类</span><br><br><span class="hljs-comment">//提交数据</span><br>conn.commit();<br><br><br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br><br><br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">//回滚数据</span><br>conn.rollback();<br>&#125; <span class="hljs-keyword">catch</span> (SQLException e1) &#123;<br>e1.printStackTrace();<br>&#125;<br><br>&#125;<span class="hljs-keyword">finally</span>&#123;<br><span class="hljs-comment">//3.关闭连接等操作</span><br><span class="hljs-comment">//① JDBCUtils.closeResource();</span><br><span class="hljs-comment">//② 使用dbutils提供的jar包中提供的DbUtils类提供了关闭的相关操作</span><br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>mybatis</title>
    <link href="/2022/09/29/mybatis/"/>
    <url>/2022/09/29/mybatis/</url>
    
    <content type="html"><![CDATA[<h1 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h1><p>JDBC代码冗长，维护不易，所以有了mybatis去封装了JDBC的框架</p><p>特点：sql和java分开，功能边界清晰</p><h2 id="搭建mybatis"><a href="#搭建mybatis" class="headerlink" title="搭建mybatis"></a>搭建mybatis</h2><p>IDE：idea  2019.2</p><p>构建工具：maven 3.5.4</p><p>mysql版本：Mysql 8</p><p>MyBatis版本:Mybatis 3.5.7</p><p>MySQL 5版本使用jdbc5驱动，驱动类使用：com.mysql.jdbc.Driver </p><p>MySQL 8版本使用jdbc8驱动，驱动类使用：com.mysql.cj.jdbc.Driver</p><p>2、连接地址url</p><p> MySQL 5版本的url： jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;ssm </p><p>MySQL 8版本的url： jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;ssm?serverTimezone&#x3D;UTC</p><h3 id="创建Maven工程"><a href="#创建Maven工程" class="headerlink" title="创建Maven工程"></a>创建Maven工程</h3><p>创建Maven工程的时候</p><p><img src="D:\img\image-20221014210209152.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221014210209152"></p><p>第二个就是那个模块的名字</p><p>其他的可以在maven.pdf中看到</p><p>然后在pom.xml中加入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependencies&gt;<br>    &lt;!-- Mybatis核心 --&gt;<br>    &lt;dependency&gt;<br>        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;<br>        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;<br>        &lt;version&gt;<span class="hljs-number">3.5</span><span class="hljs-number">.7</span>&lt;/version&gt;<br>    &lt;/dependency&gt;<br>    &lt;!-- junit测试 --&gt;<br>    &lt;dependency&gt;<br>        &lt;groupId&gt;junit&lt;/groupId&gt;<br>        &lt;artifactId&gt;junit&lt;/artifactId&gt;<br>        &lt;version&gt;<span class="hljs-number">4.12</span>&lt;/version&gt;<br>        &lt;scope&gt;test&lt;/scope&gt;<br>    &lt;/dependency&gt;<br>    &lt;!-- MySQL驱动 --&gt;<br>    &lt;dependency&gt;<br>        &lt;groupId&gt;mysql&lt;/groupId&gt;<br>        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;<br>        &lt;version&gt;<span class="hljs-number">8.0</span><span class="hljs-number">.16</span>&lt;/version&gt;<br>    &lt;/dependency&gt;<br>&lt;/dependencies&gt;<br></code></pre></td></tr></table></figure><p>**创建一个t_user表 **</p><p><strong>创建一个这个表对应的对象</strong>   User</p><h3 id="创建Mybatis的核心配置文件"><a href="#创建Mybatis的核心配置文件" class="headerlink" title="创建Mybatis的核心配置文件"></a>创建Mybatis的核心配置文件</h3><p>习惯上命名为mybatis-config.xml，这个是自己命名的，不一定非要是这个</p><p>这个核心配置文件是用来连接数据库的和Mybatis的全局信息</p><p>放在resoures文件夹中，resources文件夹就是存放配置文件的</p><p>文件内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br>        <span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta">                <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">                <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--设置连接数据库的环境--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--驱动--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-comment">&lt;!--url--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/ssm?</span></span><br><span class="hljs-string"><span class="hljs-tag">serverTimezone=UTC&quot;</span>/&gt;</span><br>                <span class="hljs-comment">&lt;!--数据库的用户名和密码--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--引入映射文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mappers/UserMapper.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="创建Mapper接口和映射文件"><a href="#创建Mapper接口和映射文件" class="headerlink" title="创建Mapper接口和映射文件"></a>创建Mapper接口和映射文件</h3><p>Mapper接口其实就是以前的dao，但dao有接口还有实现类，Mapper接口不需要我们提供实现类</p><p>当我们调用Mapper接口的一个方法，就会直接对应一个sql语句来执行</p><p>在mapper包里创建UserMapper</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">package</span> com.atguigu.mybatis.mapper;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">insertUser</span><span class="hljs-params">()</span></span>;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>1、映射文件的命名规则：</p><p> 表所对应的实体类的类名+Mapper.xml </p><p>例如：表t_user，映射的实体类为User，所对应的映射文件为UserMapper.xml</p><p>用处：Mybatis映射文件就是针对一个mapper接口中的方法的实现，也就是sql语句的编写，进行一个javabean类和数据库中一个表中数据的交互</p><p><strong>把UserMapper.xml映射文件放在resources下的mappers下</strong></p><p><strong>mapper接口的全类名和映射文件的命名空间（namespace）保持一致</strong> </p><p><strong>mapper接口中方法的方法名和映射文件中编写SQL的标签的id属性保持一致</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--这个namespace要和Mapper接口的全类名相同--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.atguigu.mybatis.mapper.UserMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--insert标签说明是插入语句，id要和mapper接口中对应的方法名字相同--&gt;</span><br>    <span class="hljs-comment">&lt;!--int insertUser();--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertUser&quot;</span>&gt;</span><br>insert into t_user values(null,&#x27;admin&#x27;,&#x27;123456&#x27;,23,&#x27;男&#x27;,&#x27;12345@qq.com&#x27;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在mybatis-config.xml中引入映射文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--引入映射文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--相对路径，这个配置文件和mappers在同一文件夹下--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mappers/UserMapper.xml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="测试添加用户功能"><a href="#测试添加用户功能" class="headerlink" title="测试添加用户功能"></a>测试添加用户功能</h3><p>mybatis-config.xml中引入映射文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--引入映射文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--相对路径，这个配置文件和mappers在同一文件夹下--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;mappers/UserMapper.xml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><p>test 下的java包中的com.atguigu.mybatis.test包下的MyBatisTest文件，用来测试的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.mybatis.test;<br><br><span class="hljs-keyword">import</span> com.atguigu.mybatis.mapper.UserMapper;<br><span class="hljs-keyword">import</span> com.atguigu.mybatis.pojo.User;<br><span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.net.URL;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBatisTest</span> &#123;<br><span class="hljs-meta">@Test</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testInsert</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">//获取核心配置文件的输入流</span><br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis-config.xml&quot;</span>);<br> <span class="hljs-comment">//获取SalSessionFactoryBuilder对象</span><br>    <span class="hljs-type">SqlSessionFactoryBuilder</span> <span class="hljs-variable">sqlSessionFactoryBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>();<br><br>    <span class="hljs-comment">//获取SqlSessionFactory对象</span><br>    <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> sqlSessionFactoryBuilder.build(is);<br><br>    <span class="hljs-comment">//获取sql的会话对象SqlSession,是Mybatis提供的操作数据库的对象</span><br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br><br>    <span class="hljs-comment">//获取UserMapper的代理实现类对象</span><br>    <span class="hljs-type">UserMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br>    <span class="hljs-comment">//调用Mapper接口中的方法，实现添加用户信息的功能</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> mapper.insertUser();<br>    <span class="hljs-comment">//提交事务</span><br>    sqlSession.commit();<br>    System.out.println(<span class="hljs-string">&quot;结果+&quot;</span>+result);<br>    <span class="hljs-comment">//关闭sqlSession对象</span><br>    sqlSession.close();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Resources.getResourceAsStream(“mybatis-config.xml”);这个方法的参数路径直接映射到resources目录下</p><p>其实也是加载之后java和reources都在classes路径下</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210211457905.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221021145723861"></p><p>所以Resources.getResourceAsStream(“mybatis-config.xml”);是定位到target&#x2F;classes文件下</p><h3 id="优化功能"><a href="#优化功能" class="headerlink" title="优化功能"></a>优化功能</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.mybatis.test;<br><br><span class="hljs-keyword">import</span> com.atguigu.mybatis.mapper.UserMapper;<br><span class="hljs-keyword">import</span> com.atguigu.mybatis.pojo.User;<br><span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.net.URL;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBatisTest</span> &#123;<br><span class="hljs-meta">@Test</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testInsert</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">//获取核心配置文件的输入流</span><br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis-config.xml&quot;</span>);<br> <span class="hljs-comment">//获取SalSessionFactoryBuilder对象</span><br>    <span class="hljs-type">SqlSessionFactoryBuilder</span> <span class="hljs-variable">sqlSessionFactoryBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>();<br><br>    <span class="hljs-comment">//获取SqlSessionFactory对象</span><br>    <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> sqlSessionFactoryBuilder.build(is);<br><br>    <span class="hljs-comment">//获取sql的会话对象SqlSession,是Mybatis提供的操作数据库的对象</span><br> <span class="hljs-comment">//布尔类型参数如果为true就是自动提交，如果不写true就不会自动提交事务</span><br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession(<span class="hljs-literal">true</span>);<br><br>    <span class="hljs-comment">//获取UserMapper的代理实现类对象</span><br> <span class="hljs-type">UserMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br> <span class="hljs-comment">//调用Mapper接口中的方法，实现添加用户信息的功能</span><br> <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> mapper.insertUser();<br><br> <span class="hljs-comment">/*//提供sql的唯一标识找到sql并执行，唯一标识是namespace.(sql的id)</span><br><span class="hljs-comment"> //执行insert的sql语句</span><br><span class="hljs-comment"> //根据UserMapper的全类名找到UserMapper根据insertUser方法名找到对应的sql语句</span><br><span class="hljs-comment"> int result = sqlSession.insert(&quot;com.atguigu.mybatis.mapper.UserMapper.insertUser&quot;);</span><br><span class="hljs-comment">*/</span><br> <span class="hljs-comment">//提交事务</span><br><br> <span class="hljs-comment">//sqlSession.commit();</span><br>    System.out.println(<span class="hljs-string">&quot;结果+&quot;</span>+result);<br>    <span class="hljs-comment">//关闭sqlSession对象</span><br>    sqlSession.close();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>加入log4j日志功能</p><p>在pom.xml中加上依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- log4j日志 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>加入log4j.xml配置文件在resources文件夹下</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="language-xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">log4j</span>:configuration <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;log4j.dtd&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">log4j:configuration</span> <span class="hljs-attr">xmlns:log4j</span>=<span class="hljs-string">&quot;http://jakarta.apache.org/log4j/&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;STDOUT&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.apache.log4j.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Encoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">layout</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ConversionPattern&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;%-5p %d</span></span></span><span class="hljs-template-variable">&#123;MM-dd HH:mm:ss,SSS&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string"></span></span></span><br><span class="hljs-string"><span class="hljs-tag"><span class="language-xml">%m (%F:%L) \n&quot;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">layout</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;java.sql&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">level</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;debug&quot;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">logger</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;org.apache.ibatis&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">level</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;info&quot;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">logger</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">level</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;debug&quot;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">log4j:configuration</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>效果就是</p><p>执行代码的时候，能看到影响的行数，传递的参数，执行的sql语句</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">DEBUG</span> <span class="hljs-number">10</span>-<span class="hljs-number">16</span> <span class="hljs-number">13</span>:<span class="hljs-number">54</span>:<span class="hljs-number">41</span>,<span class="hljs-number">170</span> ==&gt;  Preparing: insert into t_user values(null,&#x27;admin&#x27;,&#x27;<span class="hljs-number">123456</span>&#x27;,<span class="hljs-number">23</span>,&#x27;男&#x27;,&#x27;<span class="hljs-number">12345</span>@qq.com&#x27;); (BaseJdbcLogger.java:<span class="hljs-number">137</span>) <br><span class="hljs-attribute">DEBUG</span> <span class="hljs-number">10</span>-<span class="hljs-number">16</span> <span class="hljs-number">13</span>:<span class="hljs-number">54</span>:<span class="hljs-number">41</span>,<span class="hljs-number">193</span> ==&gt; Parameters:  (BaseJdbcLogger.java:<span class="hljs-number">137</span>) <br><span class="hljs-attribute">DEBUG</span> <span class="hljs-number">10</span>-<span class="hljs-number">16</span> <span class="hljs-number">13</span>:<span class="hljs-number">54</span>:<span class="hljs-number">41</span>,<span class="hljs-number">281</span> &lt;==    Updates: <span class="hljs-number">1</span> (BaseJdbcLogger.java:<span class="hljs-number">137</span>) <br></code></pre></td></tr></table></figure><p>日志的级别</p><p> FATAL(致命)&gt;ERROR(错误)&gt;WARN(警告)&gt;INFO(信息)&gt;DEBUG(调试) </p><p>从左到右打印的内容越来越详细</p><p>你选择了一个日志的级别，那么之后就可以打印出大于等于这个日志级别的日志</p><h3 id="mybatis的增删改"><a href="#mybatis的增删改" class="headerlink" title="mybatis的增删改"></a>mybatis的增删改</h3><p>先封装了获取sqlSession会话的方法</p><p>utils包下的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.mybatis.utils;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SqlSessionUtil</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession <span class="hljs-title function_">getSqlSession</span><span class="hljs-params">()</span>&#123;<br>        SqlSession sqlSession=<span class="hljs-literal">null</span>;<br>        <span class="hljs-comment">//获取核心配置文件的输入流</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis-config.xml&quot;</span>);<br>            <span class="hljs-comment">//获取SalSessionFactoryBuilder对象</span><br>            <span class="hljs-type">SqlSessionFactoryBuilder</span> <span class="hljs-variable">sqlSessionFactoryBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>();<br><br>            <span class="hljs-comment">//获取SqlSessionFactory对象</span><br>            <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> sqlSessionFactoryBuilder.build(is);<br><br>            <span class="hljs-comment">//获取sql的会话对象SqlSession,是Mybatis提供的操作数据库的对象</span><br>            <span class="hljs-comment">//布尔类型参数如果为true就是自动提交，如果不写true就不会自动提交事务</span><br>             sqlSession = sqlSessionFactory.openSession(<span class="hljs-literal">true</span>);<br>               <span class="hljs-keyword">return</span> sqlSession;<br><br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> sqlSession;<br><br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>UserMapper接口</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package com.atguigu.mybatis.mapper;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加用户信息</span><br><span class="hljs-comment">     * @return</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">insertUser</span>()</span>;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    修改用户信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">updateUser</span>()</span>;<br><br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    删除用户信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">deleteUser</span>()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>UserMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--这个namespace要和Mapper接口的全类名相同--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.atguigu.mybatis.mapper.UserMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--insert标签说明是插入语句，id要和mapper接口中对应的方法名字相同--&gt;</span><br>    <span class="hljs-comment">&lt;!--int insertUser();--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertUser&quot;</span>&gt;</span><br>insert into t_user values(null,&#x27;admin&#x27;,&#x27;123456&#x27;,23,&#x27;男&#x27;,&#x27;12345@qq.com&#x27;);<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateUser&quot;</span>&gt;</span><br><br>        update t_user set username=&#x27;root&#x27; ,password=&#x27;123&#x27; where id=3<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteUser&quot;</span>&gt;</span><br>        delete  from t_user where id=3<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p>MyBatisTest</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.mybatis.test;<br><br><span class="hljs-keyword">import</span> com.atguigu.mybatis.mapper.UserMapper;<br><span class="hljs-keyword">import</span> com.atguigu.mybatis.pojo.User;<br><span class="hljs-keyword">import</span> com.atguigu.mybatis.utils.SqlSessionUtil;<br><span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.net.URL;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBatisTest</span> &#123;<br><span class="hljs-meta">@Test</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testInsert</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">//获取核心配置文件的输入流</span><br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis-config.xml&quot;</span>);<br> <span class="hljs-comment">//获取SalSessionFactoryBuilder对象</span><br>    <span class="hljs-type">SqlSessionFactoryBuilder</span> <span class="hljs-variable">sqlSessionFactoryBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>();<br><br>    <span class="hljs-comment">//获取SqlSessionFactory对象</span><br>    <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> sqlSessionFactoryBuilder.build(is);<br><br>    <span class="hljs-comment">//获取sql的会话对象SqlSession,是Mybatis提供的操作数据库的对象</span><br> <span class="hljs-comment">//布尔类型参数如果为true就是自动提交，如果不写true就不会自动提交事务</span><br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession(<span class="hljs-literal">true</span>);<br><br>    <span class="hljs-comment">//获取UserMapper的代理实现类对象</span><br> <span class="hljs-type">UserMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br> <span class="hljs-comment">//调用Mapper接口中的方法，实现添加用户信息的功能</span><br> <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> mapper.insertUser();<br><br> <span class="hljs-comment">/*//提供sql的唯一标识找到sql并执行，唯一标识是namespace.(sql的id)</span><br><span class="hljs-comment"> //执行insert的sql语句</span><br><span class="hljs-comment"> //根据UserMapper的全类名找到UserMapper根据insertUser方法名找到对应的sql语句</span><br><span class="hljs-comment"> int result = sqlSession.insert(&quot;com.atguigu.mybatis.mapper.UserMapper.insertUser&quot;);</span><br><span class="hljs-comment">*/</span><br> <span class="hljs-comment">//提交事务</span><br><br> <span class="hljs-comment">//sqlSession.commit();</span><br>    System.out.println(<span class="hljs-string">&quot;结果+&quot;</span>+result);<br>    <span class="hljs-comment">//关闭sqlSession对象</span><br>    sqlSession.close();<br>&#125;<br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testUpdate</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.getSqlSession();<br>    <span class="hljs-type">UserMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br>    mapper.updateUser();<br>    sqlSession.close();<br> &#125;<br> <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDelete</span><span class="hljs-params">()</span>&#123;<br>     <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.getSqlSession();<br>     <span class="hljs-type">UserMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br>     mapper.deleteUser();<br>     sqlSession.close();<br>&#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="测试查询功能"><a href="#测试查询功能" class="headerlink" title="测试查询功能"></a>测试查询功能</h3><p>UserMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--resultType 设置结果类型，即查询的数据要转换为的java类型--&gt;</span><br><span class="hljs-comment">&lt;!--resultMap是自定义映射，处理多对一或一对多的映射关系--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.atguigu.mybatis.pojo.User&quot;</span>&gt;</span><br>    select *from t_user where id=1;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getAllUser&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.atguigu.mybatis.pojo.User&quot;</span>&gt;</span><br><br>    select *from t_user<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>UserMapper 接口</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">/*</span><br><span class="hljs-comment">根据id查询用户信息</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function">User <span class="hljs-title">getUserById</span>()</span>;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">查询所有的用户信息</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function">List&lt;User&gt; <span class="hljs-title">getAllUser</span>()</span>;<br></code></pre></td></tr></table></figure><p>注意： 1、查询的标签select必须设置属性resultType或resultMap，用于设置实体类和数据库表的映射关系 </p><p>resultType：自动映射，用于属性名和表中字段名一致的情况 </p><p>resultMap：自定义映射，用于一对多或多对一或字段名和属性名不一致的情况</p><p>测试</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@Test<br>    public void test<span class="hljs-constructor">GetUserById()</span>&#123;<br>    SqlSession sqlSession = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SqlSessionUtil</span>.</span></span>get<span class="hljs-constructor">SqlSession()</span>;<br>    UserMapper mapper = sqlSession.get<span class="hljs-constructor">Mapper(UserMapper.<span class="hljs-params">class</span>)</span>;<br>    User userById = mapper.get<span class="hljs-constructor">UserById()</span>;<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(userById);<br><br>&#125;<br><br>@Test<br>public void test<span class="hljs-constructor">GetAllUser()</span>&#123;<br>    SqlSession sqlSession = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SqlSessionUtil</span>.</span></span>get<span class="hljs-constructor">SqlSession()</span>;<br>    UserMapper mapper = sqlSession.get<span class="hljs-constructor">Mapper(UserMapper.<span class="hljs-params">class</span>)</span>;<br>    List&lt;User&gt; allUser = mapper.get<span class="hljs-constructor">AllUser()</span>;<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(allUser);<br><br>&#125; <br></code></pre></td></tr></table></figure><h3 id="mybatis的核心配置文件environments"><a href="#mybatis的核心配置文件environments" class="headerlink" title="mybatis的核心配置文件environments"></a>mybatis的核心配置文件environments</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br>        <span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta">                <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">                <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    environments :配置连接数据库的环境</span><br><span class="hljs-comment">    default:设置默认使用的环境的id</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    --&gt;</span><br><br>    <span class="hljs-comment">&lt;!--设置连接数据库的环境--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        environment:设置一个具体的连接数据库的环境</span><br><span class="hljs-comment">        id:设置环境的唯一标识，不能重复</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">            </span><br><span class="hljs-comment">            设置事务管理器       属性：type：设置事务管理的方式</span><br><span class="hljs-comment">           type=&quot;JDBC/MANAGED&quot;</span><br><span class="hljs-comment">           JDBC:标识使用JDBC原生的事务管理方式，手动提交事务回滚事务，也可以自动提交事务</span><br><span class="hljs-comment">           MANAGED:被管理的，例如spring</span><br><span class="hljs-comment">            --&gt;</span><br>            <br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <br>            <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">            dataSource:设置数据源</span><br><span class="hljs-comment">            属性：</span><br><span class="hljs-comment">            type：设置数据源的类型</span><br><span class="hljs-comment">            type=&quot;POOLED/UNPOOLED/JNDI&quot;</span><br><span class="hljs-comment">            POOLED:表示使用数据库连接池</span><br><span class="hljs-comment">            UNPOOLED:表示不使用数据库连接池</span><br><span class="hljs-comment">            JNDI:表示使用上下文中的数据源</span><br><span class="hljs-comment">            --&gt;</span><br>            <br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--驱动--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-comment">&lt;!--url--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/ssm?</span></span><br><span class="hljs-string"><span class="hljs-tag">serverTimezone=UTC&quot;</span>/&gt;</span><br>                <span class="hljs-comment">&lt;!--数据库的用户名和密码--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--引入映射文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--相对路径，这个配置文件和mappers在同一文件夹下--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;mappers/UserMapper.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="properties存储连接数据库的信息"><a href="#properties存储连接数据库的信息" class="headerlink" title="properties存储连接数据库的信息"></a>properties存储连接数据库的信息</h3><p>这是resources下的jdbc.properties</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">jdbc.driver</span>=com.mysql.cj.jdbc.Driver<br><span class="hljs-attr">jdbc.url</span>=jdbc:mysql://localhost:<span class="hljs-number">3306</span>/ssm?serverTimezone=UTC<br><span class="hljs-attr">jdbc.username</span>=root<br><span class="hljs-attr">jdbc.password</span>=root<br></code></pre></td></tr></table></figure><p>mybatis-config.xml</p><pre><code class="hljs">&lt;!--引入properties文件，此后就可以在当前文件中使用$&#123;key&#125;的方式来访问value--&gt;&lt;properties resource=&quot;jdbc.properties&quot;/&gt;</code></pre><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="language-xml">             <span class="hljs-comment">&lt;!--驱动--&gt;</span></span><br><span class="language-xml">             <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;jdbc.driver&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span></span><br><span class="language-xml">             <span class="hljs-comment">&lt;!--url--&gt;</span></span><br><span class="language-xml">             <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;jdbc.url&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span></span><br><span class="language-xml">             <span class="hljs-comment">&lt;!--数据库的用户名和密码--&gt;</span></span><br><span class="language-xml">             <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;jdbc.username&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span></span><br><span class="language-xml">             <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;jdbc.password&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span></span><br></code></pre></td></tr></table></figure><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="language-xml">        <span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span></span><br><span class="hljs-meta"><span class="language-xml">                <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="hljs-meta"><span class="language-xml">                <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!--引入properties文件，此后就可以在当前文件中使用$</span></span><span class="hljs-template-variable">&#123;key&#125;</span><span class="language-xml"><span class="hljs-comment">的方式来访问value--&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;jdbc.properties&quot;</span>/&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!--</span></span><br><span class="hljs-comment"><span class="language-xml">    environments :配置连接数据库的环境</span></span><br><span class="hljs-comment"><span class="language-xml">    default:设置默认使用的环境的id</span></span><br><span class="hljs-comment"><span class="language-xml"></span></span><br><span class="hljs-comment"><span class="language-xml">    --&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!--设置连接数据库的环境--&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">        <span class="hljs-comment">&lt;!--</span></span><br><span class="hljs-comment"><span class="language-xml">        environment:设置一个具体的连接数据库的环境</span></span><br><span class="hljs-comment"><span class="language-xml">        id:设置环境的唯一标识，不能重复</span></span><br><span class="hljs-comment"><span class="language-xml">        --&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-comment">&lt;!--</span></span><br><span class="hljs-comment"><span class="language-xml"></span></span><br><span class="hljs-comment"><span class="language-xml">            设置事务管理器       属性：type：设置事务管理的方式</span></span><br><span class="hljs-comment"><span class="language-xml">           type=&quot;JDBC/MANAGED&quot;</span></span><br><span class="hljs-comment"><span class="language-xml">           JDBC:标识使用JDBC原生的事务管理方式，手动提交事务回滚事务，也可以自动提交事务</span></span><br><span class="hljs-comment"><span class="language-xml">           MANAGED:被管理的，例如spring</span></span><br><span class="hljs-comment"><span class="language-xml">            --&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">            <span class="hljs-comment">&lt;!--</span></span><br><span class="hljs-comment"><span class="language-xml">            dataSource:设置数据源</span></span><br><span class="hljs-comment"><span class="language-xml">            属性：</span></span><br><span class="hljs-comment"><span class="language-xml">            type：设置数据源的类型</span></span><br><span class="hljs-comment"><span class="language-xml">            type=&quot;POOLED/UNPOOLED/JNDI&quot;</span></span><br><span class="hljs-comment"><span class="language-xml">            POOLED:表示使用数据库连接池</span></span><br><span class="hljs-comment"><span class="language-xml">            UNPOOLED:表示不使用数据库连接池</span></span><br><span class="hljs-comment"><span class="language-xml">            JNDI:表示使用上下文中的数据源</span></span><br><span class="hljs-comment"><span class="language-xml">            --&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-comment">&lt;!--驱动--&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;jdbc.driver&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span></span><br><span class="language-xml">                <span class="hljs-comment">&lt;!--url--&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;jdbc.url&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span></span><br><span class="language-xml">                <span class="hljs-comment">&lt;!--数据库的用户名和密码--&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;jdbc.username&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;jdbc.password&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!--引入映射文件--&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-comment">&lt;!--相对路径，这个配置文件和mappers在同一文件夹下--&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;mappers/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="核心配置文件之typeAliases"><a href="#核心配置文件之typeAliases" class="headerlink" title="核心配置文件之typeAliases"></a>核心配置文件之typeAliases</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">  typeAliases :设置类型别名，即为某个具体的类型设置一个别名</span><br><span class="hljs-comment">  在Mybatis的范围中，就可以使用别名表示一个具体的类型</span><br><span class="hljs-comment">  --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">      type:设置需要起别名的类型</span><br><span class="hljs-comment">      alias:设置某个类型的别名</span><br><span class="hljs-comment">      --&gt;</span><br>      <span class="hljs-comment">&lt;!--&lt;typeAlias type=&quot;com.atguigu.mybatis.pojo.User&quot; alias=&quot;abc&quot;&gt;&lt;/typeAlias&gt;--&gt;</span><br>      <span class="hljs-comment">&lt;!--只设置一个type属性，就会有一个默认的别名，就是他的类名，也就是User--&gt;</span><br>      <span class="hljs-comment">&lt;!--  &lt;typeAlias type=&quot;com.atguigu.mybatis.pojo.User&quot;&gt;&lt;/typeAlias&gt;--&gt;</span><br>      <span class="hljs-comment">&lt;!--通过包来设置类型别名，指定包下的所有的类型全部用有默认的别名。--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.atguigu.mybatis.pojo&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br><br><br></code></pre></td></tr></table></figure><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span> ?&gt;</span></span><br><span class="language-xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span></span><br><span class="hljs-meta"><span class="language-xml">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="hljs-meta"><span class="language-xml">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!--</span></span><br><span class="hljs-comment"><span class="language-xml">    mybatis中的核心配置文件中的标签必须要按照指定的顺序配置</span></span><br><span class="hljs-comment"><span class="language-xml">   properties?,settings?,typeAliases?,typeHandlers?,</span></span><br><span class="hljs-comment"><span class="language-xml">    objectFactory?,objectWrapperFactory?,reflectorFactory?,</span></span><br><span class="hljs-comment"><span class="language-xml">    plugins?,environments?,databaseIdProvider?,mappers?</span></span><br><span class="hljs-comment"><span class="language-xml">    --&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!--引入properties文件，此后就可以在当前文件中使用$</span></span><span class="hljs-template-variable">&#123;key&#125;</span><span class="language-xml"><span class="hljs-comment">的方式来访问value--&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;jdbc.properties&quot;</span>/&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!--</span></span><br><span class="hljs-comment"><span class="language-xml">    typeAliases :设置类型别名，即为某个具体的类型设置一个别名</span></span><br><span class="hljs-comment"><span class="language-xml">    在Mybatis的范围中，就可以使用别名表示一个具体的类型</span></span><br><span class="hljs-comment"><span class="language-xml">    --&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-comment">&lt;!--</span></span><br><span class="hljs-comment"><span class="language-xml">        type:设置需要起别名的类型</span></span><br><span class="hljs-comment"><span class="language-xml">        alias:设置某个类型的别名</span></span><br><span class="hljs-comment"><span class="language-xml">        --&gt;</span></span><br><span class="language-xml">        <span class="hljs-comment">&lt;!--&lt;typeAlias type=&quot;com.atguigu.mybatis.pojo.User&quot; alias=&quot;abc&quot;&gt;&lt;/typeAlias&gt;--&gt;</span></span><br><span class="language-xml">        <span class="hljs-comment">&lt;!--只设置一个type属性，就会有一个默认的别名，就是他的类名，也就是User--&gt;</span></span><br><span class="language-xml">        <span class="hljs-comment">&lt;!--  &lt;typeAlias type=&quot;com.atguigu.mybatis.pojo.User&quot;&gt;&lt;/typeAlias&gt;--&gt;</span></span><br><span class="language-xml">        <span class="hljs-comment">&lt;!--通过包来设置类型别名，指定包下的所有的类型全部用有默认的别名。--&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.atguigu.mybatis.pojo&quot;</span>/&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!--</span></span><br><span class="hljs-comment"><span class="language-xml">    environments :配置连接数据库的环境</span></span><br><span class="hljs-comment"><span class="language-xml">    default:设置默认使用的环境的id</span></span><br><span class="hljs-comment"><span class="language-xml"></span></span><br><span class="hljs-comment"><span class="language-xml">    --&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!--设置连接数据库的环境--&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">        <span class="hljs-comment">&lt;!--</span></span><br><span class="hljs-comment"><span class="language-xml">        environment:设置一个具体的连接数据库的环境</span></span><br><span class="hljs-comment"><span class="language-xml">        id:设置环境的唯一标识，不能重复</span></span><br><span class="hljs-comment"><span class="language-xml">        --&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-comment">&lt;!--</span></span><br><span class="hljs-comment"><span class="language-xml"></span></span><br><span class="hljs-comment"><span class="language-xml">            设置事务管理器       属性：type：设置事务管理的方式</span></span><br><span class="hljs-comment"><span class="language-xml">           type=&quot;JDBC/MANAGED&quot;</span></span><br><span class="hljs-comment"><span class="language-xml">           JDBC:标识使用JDBC原生的事务管理方式，手动提交事务回滚事务，也可以自动提交事务</span></span><br><span class="hljs-comment"><span class="language-xml">           MANAGED:被管理的，例如spring</span></span><br><span class="hljs-comment"><span class="language-xml">            --&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">            <span class="hljs-comment">&lt;!--</span></span><br><span class="hljs-comment"><span class="language-xml">            dataSource:设置数据源</span></span><br><span class="hljs-comment"><span class="language-xml">            属性：</span></span><br><span class="hljs-comment"><span class="language-xml">            type：设置数据源的类型</span></span><br><span class="hljs-comment"><span class="language-xml">            type=&quot;POOLED/UNPOOLED/JNDI&quot;</span></span><br><span class="hljs-comment"><span class="language-xml">            POOLED:表示使用数据库连接池</span></span><br><span class="hljs-comment"><span class="language-xml">            UNPOOLED:表示不使用数据库连接池</span></span><br><span class="hljs-comment"><span class="language-xml">            JNDI:表示使用上下文中的数据源</span></span><br><span class="hljs-comment"><span class="language-xml">            --&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-comment">&lt;!--驱动--&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;jdbc.driver&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span></span><br><span class="language-xml">                <span class="hljs-comment">&lt;!--url--&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;jdbc.url&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span></span><br><span class="language-xml">                <span class="hljs-comment">&lt;!--数据库的用户名和密码--&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;jdbc.username&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;jdbc.password&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!--引入映射文件--&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-comment">&lt;!--</span></span><br><span class="hljs-comment"><span class="language-xml">以包的方式引入映射文件，但是必须满足两个条件</span></span><br><span class="hljs-comment"><span class="language-xml">1.mapper接口和映射文件所在的包名字必须一致</span></span><br><span class="hljs-comment"><span class="language-xml">2.mapper接口的名字和映射文件的名字必须一致</span></span><br><span class="hljs-comment"><span class="language-xml"></span></span><br><span class="hljs-comment"><span class="language-xml">--&gt;</span></span><br><span class="language-xml">        <span class="hljs-comment">&lt;!--相对路径，这个配置文件和mappers在同一文件夹下--&gt;</span></span><br><span class="language-xml">       <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.atguigu.mybatis.mapper&quot;</span>/&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="核心配置文件中的mappers"><a href="#核心配置文件中的mappers" class="headerlink" title="核心配置文件中的mappers"></a>核心配置文件中的mappers</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-comment">&lt;!--引入映射文件--&gt;</span><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">以包的方式引入映射文件，但是必须满足两个条件</span><br><span class="hljs-comment">1.mapper接口和映射文件所在的包名字必须一致</span><br><span class="hljs-comment">2.mapper接口的名字和映射文件的名字必须一致</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">--&gt;</span><br>        <span class="hljs-comment">&lt;!--相对路径，这个配置文件和mappers在同一文件夹下--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.atguigu.mybatis.mapper&quot;</span>/&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在目录中创建包，用new directory的时候，要实现目录层级的变化要用&#x2F;来分割</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210161751547.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221016175144172"></p><p>java下和resources下的com.atguigu.mybatis.mapper包最终都会加载到同一个包中</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210161752990.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221016175235963"></p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210161752362.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221016175252711"></p><h3 id="创建核心配置文件和映射文件的模板"><a href="#创建核心配置文件和映射文件的模板" class="headerlink" title="创建核心配置文件和映射文件的模板"></a>创建核心配置文件和映射文件的模板</h3><p>这个就是创建一个模板，然后右键之后可以生成这个模板文件</p><p>mybatis-config.xml文件的模板</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span> ?&gt;</span></span><br><span class="language-xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span></span><br><span class="hljs-meta"><span class="language-xml">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="hljs-meta"><span class="language-xml">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!--</span></span><br><span class="hljs-comment"><span class="language-xml">    mybatis中的核心配置文件中的标签必须要按照指定的顺序配置</span></span><br><span class="hljs-comment"><span class="language-xml">   properties?,settings?,typeAliases?,typeHandlers?,</span></span><br><span class="hljs-comment"><span class="language-xml">    objectFactory?,objectWrapperFactory?,reflectorFactory?,</span></span><br><span class="hljs-comment"><span class="language-xml">    plugins?,environments?,databaseIdProvider?,mappers?</span></span><br><span class="hljs-comment"><span class="language-xml">    --&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;jdbc.properties&quot;</span>/&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span>/&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span></span><br><span class="language-xml">         </span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-comment">&lt;!--驱动--&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;jdbc.driver&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span></span><br><span class="language-xml">                <span class="hljs-comment">&lt;!--url--&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;jdbc.url&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span></span><br><span class="language-xml">                <span class="hljs-comment">&lt;!--数据库的用户名和密码--&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;jdbc.username&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;jdbc.password&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.atguigu.mybatis.mapper&quot;</span>/&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210161754256.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221016175436893"></p><p>映射文件模板的创建</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="用模板搭建mybatis框架"><a href="#用模板搭建mybatis框架" class="headerlink" title="用模板搭建mybatis框架"></a>用模板搭建mybatis框架</h3><p>就是又创建了一个mybatis项目</p><h2 id="Mybatis获取参数值的两种方式"><a href="#Mybatis获取参数值的两种方式" class="headerlink" title="Mybatis获取参数值的两种方式"></a>Mybatis获取参数值的两种方式</h2><p>MyBatis获取参数值的两种方式：${}和#{}</p><p>${}的本质就是字符串拼接，#{}的本质就是占位符赋值</p><p>${}使用字符串拼接的方式拼接sql，若为字符串类型或日期类型的字段进行赋值时，需要手动加单引号；但是#{}使用占位符赋值的方式拼接sql，此时为字符串类型或日期类型的字段进行赋值时，可以自动添加单引号</p><h3 id="获取单个字面量类型的参数"><a href="#获取单个字面量类型的参数" class="headerlink" title="获取单个字面量类型的参数"></a>获取单个字面量类型的参数</h3><p>若mapper接口中的方法参数为单个的字面量类型 </p><p>此时可以使用${}和#{}以任意的名称获取参数的值，注意${}需要手动加单引号</p><p>UserMapper接口</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">package</span> com.atguigu.mybatis.mapper;<br><br><span class="hljs-keyword">import</span> com.atguigu.mybatis.pojo.User;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> </span>&#123;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    根据用户名查询用户信息</span><br><span class="hljs-comment">     */</span><br>    User getUserByUsername(<span class="hljs-keyword">String</span> username);<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>UserMapper.xml</p><p>#{}或者${}大括号里面其实都是任意的，但最后是和函数的参数名字相同</p><p>${}要加单引号  ‘${}’</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">   <span class="hljs-comment">&lt;!-- User getUserByUsername(String username);--&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserByUsername&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.atguigu.mybatis.pojo.User&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-comment">&lt;!--获取getUserByUsername的参数--&gt;</span></span><br><span class="language-xml">        <span class="hljs-comment">&lt;!--select *from t_user where username=#</span></span><span class="hljs-template-variable">&#123;username&#125;</span><span class="language-xml"><span class="hljs-comment">--&gt;</span></span><br><span class="language-xml">        select * from t_user where username=&#x27;$</span><span class="hljs-template-variable">&#123;username&#125;</span><span class="language-xml">&#x27;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> ParameterTest &#123;<br>@Test<br>    <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> testGetUserByUsername()&#123;<br>    SqlSession sqlSession = SqlSessionUtil.getSqlSession();<br>    UserMapper mapper = sqlSession.getMapper(UserMapper.<span class="hljs-keyword">class</span>);<br>    <span class="hljs-keyword">User</span> <span class="hljs-keyword">admin</span> = mapper.getUserByUsername(&quot;admin&quot;);<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">admin</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="获取多个字面量类型的参数"><a href="#获取多个字面量类型的参数" class="headerlink" title="获取多个字面量类型的参数"></a>获取多个字面量类型的参数</h3><p>若mapper接口中的方法参数为多个时 此时MyBatis会自动将这些参数放在一个map集合中，以arg0,arg1…为键，以参数为值；</p><p>以 param1,param2…为键，以参数为值；</p><p>因此只需要通过${}和#{}访问map集合的键就可以获取相对应的值，注意${}需要手动加单引号</p><p>UserMapper接口</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">/*<br>验证登录<br> */<br><span class="hljs-keyword">User</span> <span class="hljs-title">checklogin</span>(<span class="hljs-keyword">String</span> username,<span class="hljs-keyword">String</span> password);<br></code></pre></td></tr></table></figure><p>UserMapper.xml</p><p>arg0或者param1表示第一个参数，arg1和param2表示第二个参数，接下来以此类推就可以</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    User checklogin(String username,String password);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checklogin&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.atguigu.mybatis.pojo.User&quot;</span>&gt;</span><br>   <span class="hljs-comment">&lt;!-- select * from t_user where username=#&#123;arg0&#125; and password=#&#123;arg1&#125;--&gt;</span><br>   select *from t_user where username=#&#123;param1&#125; and password=#&#123;param2&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testCheckLogin</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.getSqlSession();<br>        <span class="hljs-type">UserMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br>        <span class="hljs-type">User</span> <span class="hljs-variable">admin</span> <span class="hljs-operator">=</span> mapper.checklogin(<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>);<br><br>        System.out.println(admin);<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="获取map集合类型的参数"><a href="#获取map集合类型的参数" class="headerlink" title="获取map集合类型的参数"></a>获取map集合类型的参数</h3><p>若mapper接口中的方法需要的参数为多个时，此时可以手动创建map集合，将这些数据放在 map中 </p><p>只需要通过${}和#{}访问map集合的键就可以获取相对应的值，注意${}需要手动加单引号</p><p>UserMapper</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-comment">/*</span><br><span class="hljs-comment">以map集合作为参数的验证登录</span><br><span class="hljs-comment"> */</span><br>User checkloginByMap(<span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>,<span class="hljs-built_in">Object</span>&gt; <span class="hljs-keyword">map</span>);<br></code></pre></td></tr></table></figure><p>UserMapper.xml</p><p>#{username}和#{password}大括号中的内容都是map对象中的key</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--User checkloginByMap(Map&lt;String,Object&gt; map);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checkloginByMap&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.atguigu.mybatis.pojo.User&quot;</span>&gt;</span><br>    select *from t_user where username=#&#123;username&#125; and password=#&#123;password&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>test</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testCheckLoginByMap</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.getSqlSession();<br>    <span class="hljs-type">UserMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br>    Map&lt;String,Object&gt; map=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    map.put(<span class="hljs-string">&quot;username&quot;</span>,<span class="hljs-string">&quot;admin&quot;</span>);<br>    map.put(<span class="hljs-string">&quot;password&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>);<br>    <span class="hljs-type">User</span> <span class="hljs-variable">admin</span> <span class="hljs-operator">=</span> mapper.checkloginByMap(map);<br><br>    System.out.println(admin);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="获取实体类类型的参数"><a href="#获取实体类类型的参数" class="headerlink" title="获取实体类类型的参数"></a>获取实体类类型的参数</h3><p>若mapper接口中的方法参数为实体类对象时 </p><p>此时可以使用${}和#{}，通过访问实体类对象中的属性名获取属性值，注意${}需要手动加单引号</p><p>Usermapper</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-comment">/*</span><br><span class="hljs-comment">添加用户信息的功能</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> insertUser(<span class="hljs-keyword">User</span> <span class="hljs-keyword">user</span>);<br></code></pre></td></tr></table></figure><p>Usermapper.xml</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-comment">&lt;!--    void insertUser(User user);--&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertUser&quot;</span>&gt;</span></span><br><span class="language-xml">    insert into t_user values(null,#</span><span class="hljs-template-variable">&#123;username&#125;</span><span class="language-xml">,#</span><span class="hljs-template-variable">&#123;password&#125;</span><span class="language-xml">,#</span><span class="hljs-template-variable">&#123;age&#125;</span><span class="language-xml">,#</span><span class="hljs-template-variable">&#123;gender&#125;</span><span class="language-xml">,#</span><span class="hljs-template-variable">&#123;email&#125;</span><span class="language-xml">)</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>通过属性名获取属性值，是和成员变量没有关系的，是和get和set方法有关的，只有这个属性有get方法才能够这样来获取</p><p>测试：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">@Test<br><br><span class="hljs-built_in">public</span> <span class="hljs-type">void</span> testInsertUser()&#123;<br>    SqlSession sqlSession = SqlSessionUtil.getSqlSession();<br>    UserMapper mapper = sqlSession.getMapper(UserMapper.<span class="hljs-keyword">class</span>);<br>    <span class="hljs-keyword">User</span> <span class="hljs-keyword">user</span>=<span class="hljs-built_in">new</span> <span class="hljs-keyword">User</span>(<span class="hljs-keyword">null</span>,&quot;root&quot;,&quot;123456&quot;,<span class="hljs-number">22</span>,&quot;女&quot;,&quot;342qq.com&quot;);<br>    <span class="hljs-type">int</span> i = mapper.insertUser(<span class="hljs-keyword">user</span>);<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(i);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="使用-Param标识参数"><a href="#使用-Param标识参数" class="headerlink" title="使用@Param标识参数"></a>使用@Param标识参数</h3><p>可以通过@Param注解标识mapper接口中的方法参数 </p><p>此时，会将这些参数放在map集合中，以@Param注解的value属性值为键，以参数为值；</p><p>或者也可以 param1,param2…为键，以参数为值；只需要通过${}和#{}访问map集合的键就可以获取相对应 的值， </p><p>注意${}需要手动加单引号</p><p>@Param(“username”)给注解类的value参数赋值</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 验证登录（使用@param注解）</span><br><span class="hljs-comment"> * @param username</span><br><span class="hljs-comment"> * @param password</span><br><span class="hljs-comment"> * @return</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//@Param中不是键值对，就是默认给注解类的value属性赋值</span><br><span class="hljs-selector-tag">User</span> <span class="hljs-selector-tag">checkLoginByParam</span>(<span class="hljs-variable">@Param</span>(<span class="hljs-string">&quot;username&quot;</span>) String username, <span class="hljs-variable">@Param</span>(<span class="hljs-string">&quot;password&quot;</span>) String password);<br></code></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>将这些获取参数值就分为两种</p><p>当参数类型是实体类对象的时候通过属性值获取</p><p>当参数类型是其他的时候，通过@Param标记来获取</p><p>@Param也可以获取list类型集合，或者Map类型集合</p><p><strong>获取Map类型时可以通过  参数名.key来获取value值</strong></p><p><strong>list类型集合，可以通过遍历foreach来访问其中的每一个元素</strong> ，如果元素是一个对象就得用对象名.属性名访问属性值</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-comment">&lt;!--    void insertMoreEmp(List&lt;Emp&gt; emps);--&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertMoreEmp&quot;</span>&gt;</span></span><br><span class="language-xml">    insert into t_emp values</span><br><span class="language-xml">    <span class="hljs-comment">&lt;!--separator是每一次循环之间的分隔符的设置--&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;emps&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;emp&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span></span><br><span class="language-xml">          (null,#</span><span class="hljs-template-variable">&#123;emp.empName&#125;</span><span class="language-xml">,#</span><span class="hljs-template-variable">&#123;emp.age&#125;</span><span class="language-xml">,#</span><span class="hljs-template-variable">&#123;emp.gender&#125;</span><span class="language-xml">,null)</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>而且在sql语句中使用参数需要加#{}或者${}，在标签中使用参数不需要，直接用就可以</p><h2 id="Mybatis的查询功能"><a href="#Mybatis的查询功能" class="headerlink" title="Mybatis的查询功能"></a>Mybatis的查询功能</h2><p>创建SelectMapperl.xml和SelectMapper接口 和selectMapperTest</p><h3 id="查询返回一个实体类对象或list集合"><a href="#查询返回一个实体类对象或list集合" class="headerlink" title="查询返回一个实体类对象或list集合"></a>查询返回一个实体类对象或list集合</h3><p>当查询的数据为多条时，不能使用实体类作为返回值，否则会抛出异常TooManyResultsException</p><p>但是若查询的数据只有一条，可以使用实体类或集合作为返回值</p><p>SelectMapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-comment">/*</span><br><span class="hljs-comment"> 根据id查询用户信息</span><br><span class="hljs-comment">  */</span><br>    User <span class="hljs-title function_">getUserbyId</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;id&quot;)</span> Integer id)</span>;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">查询所有的用户信息</span><br><span class="hljs-comment"> */</span><br>List&lt;User&gt; <span class="hljs-title function_">getAllUser</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><p>SelectMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--User getUserbyId(@Param(&quot;id&quot;) Integer id);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserbyId&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>    select *from t_user where id=#&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--List&lt;User&gt; getAllUser();--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getAllUser&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>    select *from t_user<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>SelectMapperTest</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetUserById</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.getSqlSession();<br>    <span class="hljs-type">SelectMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(SelectMapper.class);<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> mapper.getUserbyId(<span class="hljs-number">9</span>);<br>    System.out.println(user);<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetAllUser</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.getSqlSession();<br>    <span class="hljs-type">SelectMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(SelectMapper.class);<br>    List&lt;User&gt; list = mapper.getAllUser();<br>    list.forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="查询单行单列的数据"><a href="#查询单行单列的数据" class="headerlink" title="查询单行单列的数据"></a>查询单行单列的数据</h3><p>SelectMapper接口</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">/*</span><br><span class="hljs-comment">查询用户的总数量</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function">Integer <span class="hljs-title">getCount</span>()</span>;<br></code></pre></td></tr></table></figure><p>SelectMapper.xml</p><p>mybatis中为java中常用的类型设置了类型别名<br>类名:别名<br>Integer:Integer ,int<br>int :_int,_integer<br>Map:map<br>String:string</p><p>有一个规律就是原本类名是小写字母开头的，别名是前面加一个_</p><p>原本类名是大写字母开头的，别名是第一个字母变为小写字母</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-comment">&lt;!--Integer getCount();--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getCount&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;integer&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">mybatis中为java中常用的类型设置了类型别名</span><br><span class="hljs-comment">类名:别名</span><br><span class="hljs-comment">Integer:Integer ,int</span><br><span class="hljs-comment">int :_int,_integer</span><br><span class="hljs-comment">Map:map</span><br><span class="hljs-comment">String:string</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">--&gt;</span><br>        select count(*) from t_user<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>test</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@Test<br>public void test<span class="hljs-constructor">GetCount()</span>&#123;<br>    SqlSession sqlSession = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SqlSessionUtil</span>.</span></span>get<span class="hljs-constructor">SqlSession()</span>;<br>    SelectMapper mapper = sqlSession.get<span class="hljs-constructor">Mapper(SelectMapper.<span class="hljs-params">class</span>)</span>;<br>    Integer count=mapper.get<span class="hljs-constructor">Count()</span>;<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(count);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="查询一条数据为map集合"><a href="#查询一条数据为map集合" class="headerlink" title="查询一条数据为map集合"></a>查询一条数据为map集合</h3><p>查询出来的数据用map保存时   以字段名为键以字段值为值，以及如果哪个字段的值为null,它是不会放在map集合中的</p><p>用类保存的时候，必须保证字段名和类中的属性名相一致，但用map保存不需要</p><p>SelectMapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">根据id查询用户信息然后为一个map集合</span><br><span class="hljs-comment"> */</span><br>Map&lt;String,Object&gt; <span class="hljs-title function_">getUserByIdToMap</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;id&quot;)</span> Integer id)</span>;<br></code></pre></td></tr></table></figure><p>SelectMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Map&lt;String,Object&gt; getUserByIdToMap(@Param(&quot;id&quot;) Integer id);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserByIdToMap&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span><br>    select *from t_user where id=#&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>test</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetUserByIdToMap</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.getSqlSession();<br>    <span class="hljs-type">SelectMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(SelectMapper.class);<br>    Map&lt;String, Object&gt; userByIdToMap = mapper.getUserByIdToMap(<span class="hljs-number">9</span>);<br>    System.out.println(userByIdToMap);<br>    <span class="hljs-comment">//&#123;password=123456, gender=男, id=9, age=23, email=123@qq.com, username=admin&#125;</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="查询多条数据为map集合"><a href="#查询多条数据为map集合" class="headerlink" title="查询多条数据为map集合"></a>查询多条数据为map集合</h3><p>方法一：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">将表中的数据以<span class="hljs-built_in">map</span>集合的方式查询，一条数据对应一个<span class="hljs-built_in">map</span>；若有多条数据，就会产生多个<span class="hljs-built_in">map</span>集合，此 时可以将这些<span class="hljs-built_in">map</span>放在一个list集合中获取<br></code></pre></td></tr></table></figure><p>SelectMapper</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">List&lt;<span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>,<span class="hljs-built_in">Object</span>&gt;&gt; getAllUserToMap();<br></code></pre></td></tr></table></figure><p>SelectMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Map&lt;String,Object&gt; getAllUserToMap();--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getAllUserToMap&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span><br>    select *from t_user;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>test</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetAllUserToMap</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.getSqlSession();<br>    <span class="hljs-type">SelectMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(SelectMapper.class);<br>    List&lt;Map&lt;String, Object&gt;&gt; userByIdToMap = mapper.getAllUserToMap();<br>    System.out.println(userByIdToMap);<br>&#125;<br></code></pre></td></tr></table></figure><p>方法二</p><p>将表中的数据以map集合的方式查询，一条数据对应一个map；若有多条数据，就会产生多个map集合，并 且最终要以一个map的方式返回数据，此时需要通过@MapKey注解设置map集合的键，值是每条数据所对应的 map集合</p><p>SelectMapper</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dart">    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    查询所有用户信息在一个map中</span><br><span class="hljs-comment">     */</span><br>     <span class="hljs-comment">//最后的大map集合是以id为键，一个map为值</span><br><span class="hljs-meta">@MapKey</span>(<span class="hljs-string">&quot;id&quot;</span>)<br><span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>,<span class="hljs-built_in">Object</span>&gt; getAllUserToMap();<br></code></pre></td></tr></table></figure><p>SelectMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Map&lt;String,Object&gt; getAllUserToMap();--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getAllUserToMap&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span><br>    select *from t_user;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>test</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">testGetAllUserToMap</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title class_">SqlSession</span> sqlSession = <span class="hljs-title class_">SqlSessionUtil</span>.<span class="hljs-title function_">getSqlSession</span>();<br>    <span class="hljs-title class_">SelectMapper</span> mapper = sqlSession.<span class="hljs-title function_">getMapper</span>(<span class="hljs-title class_">SelectMapper</span>.<span class="hljs-property">class</span>);<br>    <span class="hljs-title class_">Map</span>&lt;<span class="hljs-title class_">String</span>,<span class="hljs-title class_">Object</span>&gt; userByIdToMap = mapper.<span class="hljs-title function_">getAllUserToMap</span>();<br>    <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(userByIdToMap);<br>&#125;<br></code></pre></td></tr></table></figure><p>结果   这是以id为键的大集合</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&#123;<br>9=&#123;<span class="hljs-attribute">password</span>=123456, <span class="hljs-attribute">gender</span>=男, <span class="hljs-attribute">id</span>=9, <span class="hljs-attribute">age</span>=23, <span class="hljs-attribute">email</span>=123@qq.com, <span class="hljs-attribute">username</span>=admin&#125;, <br>10=&#123;<span class="hljs-attribute">password</span>=123456, <span class="hljs-attribute">gender</span>=女, <span class="hljs-attribute">id</span>=10, <span class="hljs-attribute">age</span>=22, <span class="hljs-attribute">email</span>=342qq.com, <span class="hljs-attribute">username</span>=root&#125;, <br>11=&#123;<span class="hljs-attribute">password</span>=123456, <span class="hljs-attribute">gender</span>=女, <span class="hljs-attribute">id</span>=11, <span class="hljs-attribute">age</span>=22, <span class="hljs-attribute">email</span>=342qq.com, <span class="hljs-attribute">username</span>=root&#125;, <br>12=&#123;<span class="hljs-attribute">password</span>=123456, <span class="hljs-attribute">gender</span>=女, <span class="hljs-attribute">id</span>=12, <span class="hljs-attribute">age</span>=22, <span class="hljs-attribute">email</span>=342qq.com, <span class="hljs-attribute">username</span>=root&#125;, <br>13=&#123;<span class="hljs-attribute">password</span>=123456, <span class="hljs-attribute">gender</span>=女, <span class="hljs-attribute">id</span>=13, <span class="hljs-attribute">age</span>=22, <span class="hljs-attribute">email</span>=342qq.com, <span class="hljs-attribute">username</span>=root&#125;, <br>14=&#123;<span class="hljs-attribute">password</span>=123456, <span class="hljs-attribute">gender</span>=女, <span class="hljs-attribute">id</span>=14, <span class="hljs-attribute">age</span>=22, <span class="hljs-attribute">email</span>=342qq.com, <span class="hljs-attribute">username</span>=root&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Mybatis特殊sql"><a href="#Mybatis特殊sql" class="headerlink" title="Mybatis特殊sql"></a>Mybatis特殊sql</h2><h3 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h3><p>新建specailSQLMapper   和specialSQLMapper.xml</p><p>specailSQLMapper</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">/*</span><br><span class="hljs-comment">通过用户名模糊查询用户信息</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function">List&lt;User&gt; <span class="hljs-title">getUserByLike</span><span class="hljs-params">(@Param(<span class="hljs-string">&quot;mohu&quot;</span>) <span class="hljs-type">String</span> mohu)</span></span>;<br></code></pre></td></tr></table></figure><p>specialSQLMapper.xml</p><p>‘%#{mohu}%’不行，#{}的原理是占位符，这样的话占位符在字符串中就失去意义了</p><p>‘%${mohu}%’可以，因为${mohu}是字符串拼接原理，所以就没问题</p><p>下面三种方法都可以</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-comment">&lt;!--    List&lt;User&gt; getUserByLike(@Param(&quot;mohu&quot;) String mohu);--&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserByLike&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!--select * from t_user where username like &#x27;%$</span></span><span class="hljs-template-variable">&#123;mohu&#125;</span><span class="language-xml"><span class="hljs-comment">%&#x27;--&gt;</span></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!--这个可以大概率是因为先用#</span></span><span class="hljs-template-variable">&#123;mohu&#125;</span><span class="language-xml"><span class="hljs-comment">得到值再拼接字符串--&gt;</span></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!--select * from t_user where username like concat(&#x27;%&#x27;,#</span></span><span class="hljs-template-variable">&#123;mohu&#125;</span><span class="language-xml"><span class="hljs-comment">,&#x27;%&#x27;);--&gt;</span></span><br><span class="language-xml">    select *from t_user where username like &quot;%&quot;#</span><span class="hljs-template-variable">&#123;mohu&#125;</span><span class="language-xml">&quot;%&quot;</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpecialSQLMapperTest</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetUserByLike</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.getSqlSession();<br>        <span class="hljs-type">SpecialSQLMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(SpecialSQLMapper.class);<br>        List&lt;User&gt; list = mapper.getUserByLike(<span class="hljs-string">&quot;a&quot;</span>);<br>             list.forEach(System.out::println);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a>批量删除</h3><p>SpecialSQLMapper</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">/*</span><br><span class="hljs-comment">批量删除</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">deleteMoreUser</span><span class="hljs-params">(<span class="hljs-type">String</span> ids)</span></span>;<br></code></pre></td></tr></table></figure><p>SpecialSQLMapper.xml</p><p>这个地方不能用#{ids}因为这个自动给参数加上单引号</p><p>sql语句就是：delete from t_user where id in(‘9,10’);  所以是不对的</p><p>用${ids}就不会自动加上单引号</p><p>sql语句就是：delete from t_user where id in(9,10);这个是正确的</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-comment">&lt;!--    void deleteMoreUser(String ids);--&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteMoreUser&quot;</span>&gt;</span></span><br><span class="language-xml">    delete from t_user where id in($</span><span class="hljs-template-variable">&#123;ids&#125;</span><span class="language-xml">);</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>SpecialSQLMapperTest</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDeleteMoreUser</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.getSqlSession();<br>    <span class="hljs-type">SpecialSQLMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(SpecialSQLMapper.class);<br>    mapper.deleteMoreUser(<span class="hljs-string">&quot;9,10&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="动态设置表名"><a href="#动态设置表名" class="headerlink" title="动态设置表名"></a>动态设置表名</h3><p>SpecialSQLMapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">动态设置表名，查询当前用户信息</span><br><span class="hljs-comment"> */</span><br>List&lt;User&gt; <span class="hljs-title function_">getUserList</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;tableName&quot;)</span> String tableName)</span>;<br></code></pre></td></tr></table></figure><p>SpecialSQLMapper.xml</p><p>这里不能使用#{}因为这个会给语句加上单引号</p><p>  select *from ‘tableName’</p><p>用${}就是</p><p>  select *from tableName这就是正确的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    List&lt;User&gt; getUserList(@Param(&quot;tableName&quot;) String tableName);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserList&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>    select *from $&#123;tableName&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>test</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetUserList</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.getSqlSession();<br>    <span class="hljs-type">SpecialSQLMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(SpecialSQLMapper.class);<br>    List&lt;User&gt; t_user = mapper.getUserList(<span class="hljs-string">&quot;t_user&quot;</span>);<br>    t_user.forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="添加功能获取自增的主键（报错）"><a href="#添加功能获取自增的主键（报错）" class="headerlink" title="添加功能获取自增的主键（报错）"></a>添加功能获取自增的主键（报错）</h3><p>场景模拟： t_clazz(clazz_id,clazz_name) </p><p>​                    t_student(student_id,student_name,clazz_id) </p><p>​                   1、添加班级信息 </p><p>​                   2、获取新添加的班级的id </p><p>​                   3、为班级分配学生，即将某学的班级id修改为新添加的班级的id</p><p>SpecialSQLMatter</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-comment">/*</span><br><span class="hljs-comment">添加用户信息，并获取自增的主键</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">void</span> insertUser(<span class="hljs-keyword">User</span> <span class="hljs-keyword">user</span>);<br></code></pre></td></tr></table></figure><p>SpecialSQLMatter.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    void insertUser(User user);--&gt;</span><br><span class="hljs-comment">&lt;!--userGeneratedKeys是指是否获取主键，keyProperty是指将主键获取后赋给传递参数那个对象的哪个属性--&gt;</span><br><span class="hljs-comment">&lt;!--因为增删改查sql方法默认都是返回数字的，所以不能用方法返回值作为获取id的值--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertUser&quot;</span> <span class="hljs-attr">userGeneratedKeys</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><br>    insert into t_user values(null,#&#123;username&#125;,#&#123;password&#125;,#&#123;age&#125;,#&#123;gender&#125;,#&#123;email&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>test</p><p>一开始user对象没有id，insertUser之后，id就有值了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testInsertUser</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.getSqlSession();<br>    <span class="hljs-type">SpecialSQLMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(SpecialSQLMapper.class);<br>    User user=<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-literal">null</span>,<span class="hljs-string">&quot;xiaoming&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>,<span class="hljs-number">23</span>,<span class="hljs-string">&quot;女&quot;</span>,<span class="hljs-string">&quot;3241525036@qq.com&quot;</span>);<br>    mapper.insertUser(user);<br>    System.out.println(user);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="自定义映射resultMap"><a href="#自定义映射resultMap" class="headerlink" title="自定义映射resultMap"></a>自定义映射resultMap</h2><p>搭建mybatis</p><p>建立t_emp是员工信息表，里面的dept_id是员工所属部门的id</p><p>建立t_dept是部门信息表，里面的t_dept是部门的信息，部门的名字和id</p><h3 id="处理字段名和属性名不一致的情况"><a href="#处理字段名和属性名不一致的情况" class="headerlink" title="处理字段名和属性名不一致的情况"></a>处理字段名和属性名不一致的情况</h3><p>字段名和属性名不一致的情况下，如何处理映射关系</p><p>若字段名和实体类中的属性名不一致，但是字段名符合数据库的规则（使用_），实体类中的属性名符合Java的规则（使用驼峰）</p><p>此时也可通过以下两种方式处理字段名和实体类中的属性的映射关系</p><p>1.可以通过为字段起别名的方式，保证和实体类中的属性名保持一致</p><p>2.可以在MyBatis的核心配置文件中设置一个全局配置信息mapUnderscoreToCamelCase，可以在查询表中数据时，自动将_类型的字段名转换为驼峰</p><p>在mybatis-config.xml中加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--将下划线映射为驼峰--&gt;</span><br>      <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">      前面是字段，后面是映射成的驼峰</span><br><span class="hljs-comment">      emp_id:empId,   emp_name:empName</span><br><span class="hljs-comment">      --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure><p>EmpMatter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据id来查询员工信息</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> empId</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br>Emp <span class="hljs-title function_">getEmpById</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;empId&quot;)</span> Integer empId)</span>;<br></code></pre></td></tr></table></figure><p>EmpMatter.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    Emp getEmpById(@Param(&quot;id&quot;) Integer id);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br>    select *from t_emp where emp_id=#&#123;empId&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>test</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetEmptyEmpId</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.getSqlSession();<br>    <span class="hljs-type">EmpMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(EmpMapper.class);<br>    <span class="hljs-type">Emp</span> <span class="hljs-variable">empById</span> <span class="hljs-operator">=</span> mapper.getEmpById(<span class="hljs-number">1</span>);<br>    System.out.println(empById);<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="resultMap处理字段名和属性名不一致的情况"><a href="#resultMap处理字段名和属性名不一致的情况" class="headerlink" title="resultMap处理字段名和属性名不一致的情况"></a>resultMap处理字段名和属性名不一致的情况</h3><p>EmpMatter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 根据id来查询员工信息</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> empId</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">   */</span><br>  Emp <span class="hljs-title function_">getEmpById</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;empId&quot;)</span> Integer empId)</span>;<br></code></pre></td></tr></table></figure><p>EmpMatter.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">resultMap:设置自定义的映射关系</span><br><span class="hljs-comment">id:唯一标识，就是在select标签中使用resultMap属性的时候那个value的值</span><br><span class="hljs-comment">type:处理映射关系的实体类的类型，就是把那个数据表对应的java类的名字写上</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">--&gt;</span><br><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">resultMap常用的子标签</span><br><span class="hljs-comment">id:处理主键和实体类属性的映射关系,也就是数据表主键用这个</span><br><span class="hljs-comment">result:处理普通字段的实体类中属性的映射关系</span><br><span class="hljs-comment">column:设置映射关系中的字段名，必须是sql查询出的某个字段</span><br><span class="hljs-comment">property:设置映射关系中的属性的属性名，必须是处理的实体类类型中的属性名</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">--&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;empResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empId&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empName&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;gender&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpById&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;empResultMap&quot;</span>&gt;</span><br>            select *from t_emp where emp_id=#&#123;empId&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>test</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetEmptyEmpId</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.getSqlSession();<br>    <span class="hljs-type">EmpMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(EmpMapper.class);<br>    <span class="hljs-type">Emp</span> <span class="hljs-variable">empById</span> <span class="hljs-operator">=</span> mapper.getEmpById(<span class="hljs-number">1</span>);<br>    System.out.println(empById);<br><br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="处理多对一映射关系功能分析"><a href="#处理多对一映射关系功能分析" class="headerlink" title="处理多对一映射关系功能分析"></a>处理多对一映射关系功能分析</h3><p>EMP</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.mybatis.pojo;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Emp</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer empId;<br><br>    <span class="hljs-keyword">private</span> Dept dept;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Emp</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Dept <span class="hljs-title function_">getDept</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> dept;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDept</span><span class="hljs-params">(Dept dept)</span> &#123;<br>        <span class="hljs-built_in">this</span>.dept = dept;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Emp&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;empId=&quot;</span> + empId +<br>                <span class="hljs-string">&quot;, dept=&quot;</span> + dept +<br>                <span class="hljs-string">&quot;, empName=&#x27;&quot;</span> + empName + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, gender=&#x27;&quot;</span> + gender + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getEmpId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> empId;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setEmpId</span><span class="hljs-params">(Integer empId)</span> &#123;<br>        <span class="hljs-built_in">this</span>.empId = empId;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getEmpName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> empName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setEmpName</span><span class="hljs-params">(String empName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.empName = empName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(Integer age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getGender</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> gender;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setGender</span><span class="hljs-params">(String gender)</span> &#123;<br>        <span class="hljs-built_in">this</span>.gender = gender;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Emp</span><span class="hljs-params">(Integer empId, Dept dept, String empName, Integer age, String gender)</span> &#123;<br>        <span class="hljs-built_in">this</span>.empId = empId;<br>        <span class="hljs-built_in">this</span>.dept = dept;<br>        <span class="hljs-built_in">this</span>.empName = empName;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.gender = gender;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Emp</span><span class="hljs-params">(Integer empId, String empName, Integer age, String gender)</span> &#123;<br>        <span class="hljs-built_in">this</span>.empId = empId;<br>        <span class="hljs-built_in">this</span>.empName = empName;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.gender = gender;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> String empName;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> String gender;<br>&#125;<br></code></pre></td></tr></table></figure><p>Dept</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs typescript">package com.<span class="hljs-property">atguigu</span>.<span class="hljs-property">mybatis</span>.<span class="hljs-property">pojo</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dept</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Dept</span>(<span class="hljs-title class_">Integer</span> deptId, <span class="hljs-title class_">String</span> deptName) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">deptId</span> = deptId;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">deptName</span> = deptName;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">Integer</span> deptId;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Dept&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;deptId=&quot;</span> + deptId +<br>                <span class="hljs-string">&quot;, deptName=&#x27;&quot;</span> + deptName + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Integer</span> <span class="hljs-title function_">getDeptId</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> deptId;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setDeptId</span>(<span class="hljs-params">Integer deptId</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">deptId</span> = deptId;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getDeptName</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> deptName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setDeptName</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> deptName</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">deptName</span> = deptName;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> deptName;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="一对多多对一表关系解释"><a href="#一对多多对一表关系解释" class="headerlink" title="一对多多对一表关系解释"></a>一对多多对一表关系解释</h4><p><strong>一对多，两张表，多的表加外键</strong></p><p>表一对多的意思是</p><p>一张表(父表)中的一条记录可以对应另一张表(子表)中的多条记录</p><p>就像一张部门表可以对应多个员工，但一个员工信息表只能对应部门表中的一条记录</p><p><strong>多对一就是反过来</strong> 一堆员工在一个部门</p><p>多对一功能就是查询员工部门顺带查到它所在的部门的信息</p><p>一对多功能就是查询部门顺带查询其中员工的所有信息</p><p>所以就是在Emp类中加一个属性是Dept对象，来存储这个员工所处的部门的信息</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">private Dept dept<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>EmpMapper.xml</p><p>这个sql语句是多表查询，可以查询到t_emp表中的所有员工以及员工对应的部门信息，但resultType是Emp肯定不行，因为查到的是dept的名字和id，不可能赋给emp中的dept的对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Emp getEmpAndDeptByEmpId(@Param(&quot;empId&quot;) Integer empId);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpAndDeptByEmpId&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br>    select<br>    t_emp.*,t_dept.*<br>    from t_emp<br>    left join t_dept<br>    on t_emp.dept_id=t_dept.dept_id<br>    where t_emp.emp_id=#&#123;empId&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>接下来是处理这个问题</strong></p><p>处理多对一的映射关系：</p><p><strong>1.级联方式处理（出错）</strong></p><p>dept是Emp中的Dept对象属性，所以property中就填这个dept.deptId和dept.deptName</p><p>column就是两个分别对应的列字段名</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;dept.deptId&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;dept.deptName&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;empAndDeptResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empId&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empName&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;gender&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;dept.deptId&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;dept.deptName&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><br><span class="hljs-comment">&lt;!--Emp getEmpAndDeptByEmpId(@Param(&quot;empId&quot;) Integer empId);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpAndDeptByEmpId&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;empAndDeptResultMap&quot;</span>&gt;</span><br>    select<br>    t_emp.*,t_dept.*<br>    from t_emp<br>    left join t_dept<br>    on t_emp.dept_id=t_dept.dept_id<br>    where t_emp.emp_id=#&#123;empId&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>EmpMapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">获取员工以及所对应的部门的信息</span><br><span class="hljs-comment"> */</span><br>Emp <span class="hljs-title function_">getEmpAndDeptByEmpId</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;empId&quot;)</span> Integer empId)</span>;<br></code></pre></td></tr></table></figure><p>test</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetEmpAndDeptByEmpId</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.getSqlSession();<br>    <span class="hljs-type">EmpMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(EmpMapper.class);<br>    <span class="hljs-type">Emp</span> <span class="hljs-variable">empById</span> <span class="hljs-operator">=</span> mapper.getEmpAndDeptByEmpId(<span class="hljs-number">1</span>);<br>    System.out.println(empById);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>association处理多对一映射</strong></p><p>association标签：处理多对一的映射关系（处理实体类类型的属性）</p><p>property:Emp中dept这个实体类对象的名字</p><p>javatype:dept这个实体类对象的类名</p><p>id 和result和之前一样，id是处理主键的映射，result是处理其他属性的映射，  column是列字段名，property是dept这个实体类对象的属性名</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;dept&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;Dept&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;deptId&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;deptName&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;empAndDeptResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empId&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empName&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;gender&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;dept&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;Dept&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;deptId&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;deptName&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><br><span class="hljs-comment">&lt;!--Emp getEmpAndDeptByEmpId(@Param(&quot;empId&quot;) Integer empId);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpAndDeptByEmpId&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;empAndDeptResultMap&quot;</span>&gt;</span><br>    select<br>    t_emp.*,t_dept.*<br>    from t_emp<br>    left join t_dept<br>    on t_emp.dept_id=t_dept.dept_id<br>    where t_emp.emp_id=#&#123;empId&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>分步查询处理多对一的映射</strong></p><p><strong>新建一个  DeptMapper用来查询dept表，所以就是最好一个mapper接口对应着一个表的操作</strong></p><p>DeptMapper</p><p>因为最后是要给emp中的dept对象赋值所以第二次查询是用第一次查询的id做参数，得到Dept对象</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">package</span> <span class="hljs-selector-tag">com</span><span class="hljs-selector-class">.atguigu</span><span class="hljs-selector-class">.mybatis</span><span class="hljs-selector-class">.mapper</span>;<br><br><span class="hljs-selector-tag">import</span> <span class="hljs-selector-tag">com</span><span class="hljs-selector-class">.atguigu</span><span class="hljs-selector-class">.mybatis</span><span class="hljs-selector-class">.pojo</span><span class="hljs-selector-class">.Dept</span>;<br><span class="hljs-selector-tag">import</span> <span class="hljs-selector-tag">org</span><span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.ibatis</span><span class="hljs-selector-class">.annotations</span><span class="hljs-selector-class">.Param</span>;<br><br><span class="hljs-selector-tag">public</span> <span class="hljs-selector-tag">interface</span> <span class="hljs-selector-tag">DeptMapper</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    根据员工部门id查询部门信息</span><br><span class="hljs-comment">     通过分布查询获取员工以及对应的部门信息的第一步</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-selector-tag">Dept</span> <span class="hljs-selector-tag">getEmpAndDeptByStepTwo</span>(<span class="hljs-variable">@Param</span>(<span class="hljs-string">&quot;deptId&quot;</span>) Integer deptId);<br>&#125;<br></code></pre></td></tr></table></figure><p>DeptMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    Dept getEmpAndDeptByStepTwo(@Param(&quot;deptId&quot;) Integer deptId);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpAndDeptByStepTwo&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Dept&quot;</span>&gt;</span><br><br>    select *from t_dept where t_dept.dept_id=#&#123;deptId&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>EmpMapper</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-comment">/*</span><br><span class="hljs-comment">通过分布查询获取员工以及对应的部门信息的第一步</span><br><span class="hljs-comment"> */</span><br><span class="hljs-selector-tag">Emp</span> <span class="hljs-selector-tag">getEmpAndDeptByStepOne</span>(<span class="hljs-variable">@Param</span>(<span class="hljs-string">&quot;empId&quot;</span>) Integer empId);<br></code></pre></td></tr></table></figure><p>EmpMapper.xml</p><p>这个select对应的方法的返回值要和dept也就是property中那个对象的类型相同</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;empAndDeptByStepResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empId&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empName&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;gender&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    peoperty：就是Emp中的那个需要处理映射关系的实体类对象的名字</span><br><span class="hljs-comment">    select：设置分布查询的sql的唯一标识，就是选中mapper中的那个方法然后右键点击copy reference就可以获得它的唯一标识</span><br><span class="hljs-comment">    column:将查询出的某个字段作为分布查询的下一步也就是select那个方法的参数，因为select标签那个方法参数是部门id所以这里column就是dept_id</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;dept&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;com.atguigu.mybatis.mapper.DeptMapper.getEmpAndDeptByStepTwo&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_id&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><br><span class="hljs-comment">&lt;!--    Emp getEmpAndDeptByStepOne(@Param(&quot;empId&quot;) Integer empId);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpAndDeptByStepOne&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;empAndDeptByStepResultMap&quot;</span>&gt;</span><br>    select *from t_emp where t_emp.emp_id=#&#123;empId&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>mybatis分布查询的优势：延迟加载</strong></p><p>可以实现就是有的时候想只要员工信息，有的时候想要员工信息以及对应的部门信息</p><p>mybatis-config.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--开启延迟加载--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lazyLoadingEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--按需加载，这个其实默认就是false--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;aggressiveLazyLoading&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--将下划线映射为驼峰--&gt;</span><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        前面是字段，后面是映射成的驼峰</span><br><span class="hljs-comment">        emp_id:empId,   emp_name:empName</span><br><span class="hljs-comment">        --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--开启延迟加载--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lazyLoadingEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--按需加载，这个其实默认就是false--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;aggressiveLazyLoading&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure><p>test</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//这个地方只获得了员工的名字，所以不需要执行第二步的sql语句，这里可以用这个延迟加载</span><br>System.out.println(empById.getEmpName());<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetEmpAndDeptByStep</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.getSqlSession();<br>    <span class="hljs-type">EmpMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(EmpMapper.class);<br>    <span class="hljs-type">Emp</span> <span class="hljs-variable">empById</span> <span class="hljs-operator">=</span> mapper.getEmpAndDeptByStepOne(<span class="hljs-number">1</span>);<br>   <span class="hljs-comment">// System.out.println(empById);</span><br>    <span class="hljs-comment">//这个地方只获得了员工的名字，所以不需要执行第二步的sql语句，这里可以用这个延迟加载</span><br>    System.out.println(empById.getEmpName());<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>上面是进行了全局配置，对所有的分布查询都有效，现在想让有一些想让他不实现延迟加载</strong></p><p>解决：</p><p>fetchType属性可以指定这个分步查询是立即加载（eager）还是延迟加载(lazy)   ，括号里是这个属性的value值</p><p>立即加载就是即使只要员工姓名，也会执行查询部门信息的那个sql语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;dept&quot;</span> <span class="hljs-attr">fetchType</span>=<span class="hljs-string">&quot;eager&quot;</span></span><br><span class="hljs-tag">             <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;com.atguigu.mybatis.mapper.DeptMapper.getEmpAndDeptByStepTwo&quot;</span></span><br><span class="hljs-tag">             <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_id&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="处理一对多的映射关系的功能分析"><a href="#处理一对多的映射关系的功能分析" class="headerlink" title="处理一对多的映射关系的功能分析"></a>处理一对多的映射关系的功能分析</h3><p>一对多就是一个部门中有很多的员工，就是实现查询部门信息的时候顺便也能查询到这个部门中员工的所有信息</p><p>在Dept表中加上一个属性         private List<Emp> emps;</p><p>这个属性当中存储的是这个部门中的所有员工的信息</p><p>处理一对多的映射关系：1.collection    2.分布查询</p><p>1.collection属性:处理一对多的映射关系（处理集合类型的属性）</p><p>DeptMapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 查询部门以及部门中的员工信息</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> deptId</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> * */</span><br>Dept <span class="hljs-title function_">getDeptAndEmpByDeptId</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;deptId&quot;)</span> Integer deptId)</span>; <br></code></pre></td></tr></table></figure><p>DeptMapper.xml</p><p>collection标签是用来对集合类型的属性进行映射的   就是Dept对象中存储多个员工信息的集合emps</p><p>property的值就是这个集合类型属性的名字，ofType是这个集合中存储的元素的类型</p><p>id和result和之前一样</p><p>column是字段名，property就是emps中存储的emp对象中的属性名，要被映射处理的属性名</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;emps&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empId&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empName&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;gender&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deptAndEmpResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Dept&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;deptId&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;deptName&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;emps&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empId&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empName&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;gender&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--    Dept getDeptAndEmpByDeptId(@Param(&quot;deptId&quot;) Integer deptId);--&gt;</span><br><span class="hljs-comment">&lt;!--这个sql语句是多表连接查询--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getDeptAndEmpByDeptId&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;deptAndEmpResultMap&quot;</span>&gt;</span><br>   <br>    select t_dept.*,t_emp.*<br>    from t_dept<br>    left join t_emp<br>    on t_dept.dept_id=t_emp.dept_id<br>    where t_dept.dept_id=#&#123;deptId&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>test</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetDeptAndEmpByDeptId</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.getSqlSession();<br>    <span class="hljs-type">DeptMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(DeptMapper.class);<br>    <span class="hljs-type">Dept</span> <span class="hljs-variable">deptAndEmpByDeptId</span> <span class="hljs-operator">=</span> mapper.getDeptAndEmpByDeptId(<span class="hljs-number">1</span>);<br>    System.out.println(deptAndEmpByDeptId);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>使用分步查询处理一对多的映射关系</strong></p><p>DeptMapper</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-comment">/*</span><br><span class="hljs-comment">通过分布查询查询部门以及部门中的员工信息的第一步</span><br><span class="hljs-comment"> */</span><br><span class="hljs-selector-tag">Dept</span> <span class="hljs-selector-tag">getDeptAndEmpByStepOne</span>(<span class="hljs-variable">@Param</span>(<span class="hljs-string">&quot;deptId&quot;</span>)Integer deptId);<br></code></pre></td></tr></table></figure><p>DeptMapper.xml</p><p>property是要赋值的属性，select是第二个sql语句的全名，<strong>第二个sql语句的返回值类型要和property中的那个类型一致</strong></p><p>column是第二个sql语句的参数</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deptAndEmpResultMapByStep&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Dept&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;deptId&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;deptName&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;emps&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;com.atguigu.mybatis.mapper.EmpMapper.getDeptAndEmpByStepTwo&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_id&quot;</span></span><br><span class="hljs-tag">    &gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><span class="hljs-comment">&lt;!--    Dept getDeptAndEmpByStepOne(@Param(&quot;deptId&quot;)Integer deptId);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getDeptAndEmpByStepOne&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;deptAndEmpResultMapByStep&quot;</span>&gt;</span><br>    select * from t_dept where dept_id=#&#123;deptId&#125;<br><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>EmpMapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">通过分步查询获取部门以及部门的员工信息的第二步</span><br><span class="hljs-comment">分布查询第二步的返回值类型一定要和要映射的那个属性类型相同</span><br><span class="hljs-comment">用部门id作为参数查部门中的员工</span><br><span class="hljs-comment"> */</span><br>List&lt;Emp&gt; <span class="hljs-title function_">getDeptAndEmpByStepTwo</span><span class="hljs-params">(Integer deptId)</span>;<br></code></pre></td></tr></table></figure><p>EmpMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    List&lt;Emp&gt; getDeptAndEmpByStepTwo(Integer deptId);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getDeptAndEmpByStepTwo&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br>    select *from t_emp where dept_id=#&#123;deptId&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>test</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetDeptAndEmpByStep</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.getSqlSession();<br>    <span class="hljs-type">DeptMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(DeptMapper.class);<br>    <span class="hljs-type">Dept</span> <span class="hljs-variable">deptAndEmpByDeptId</span> <span class="hljs-operator">=</span> mapper.getDeptAndEmpByStepOne(<span class="hljs-number">1</span>);<br>    System.out.println(deptAndEmpByDeptId);<br>&#125;<br></code></pre></td></tr></table></figure><p>设为立即加载还是collection标签中加上fetchType属性设置为eager</p><h2 id="Mybatis动态sql"><a href="#Mybatis动态sql" class="headerlink" title="Mybatis动态sql"></a>Mybatis动态sql</h2><p>就是比如选课的时候，有课外名师，有课程不冲突，有美术类型的，有创新类型的，选哪个过滤哪个，有的不选就不过滤，所以这个sql语句它不是固定的，它的条件不止有一个，也不是单纯的改参数，而是整个sql语句的长度</p><p>1.如何判断是否提交某个条件的问题，看这个表单项上传到服务器之后是否是null或者空字符串，如果不是就要加上这个条件</p><p>2.把这个条件拼接到sql中</p><h3 id="if标签"><a href="#if标签" class="headerlink" title="if标签"></a>if标签</h3><p>DynamicSQLMapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据条件查询员工信息</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> emp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span>    <br>List&lt;Emp&gt; <span class="hljs-title function_">getEmpByCondition</span><span class="hljs-params">(Emp emp)</span>;<br></code></pre></td></tr></table></figure><p>DynamicSQLMapper.xml</p><p>1.if，通过test属性中的表达式判断标签内的内容是否有效，也就是是否是null或者空字符串(是否会拼接到sql中)，也就是判断表单传递的参数</p><p>方法的参数是Emp对象，判断它的属性是否有效可以直接用属性名，底下获取参数也是可以直接用属性名</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    List&lt;Emp&gt; getEmpByCondition(Emp emp); --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpByCondition&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br>    select * from t_emp where<br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;empName!=null and empName!=&#x27;&#x27;&quot;</span>&gt;</span><br>        emp_name=#&#123;empName&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;age!=null and age!=&#x27;&#x27;&quot;</span>&gt;</span><br>        and age=#&#123;age&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;gender!=null and gender!=&#x27;&#x27;&quot;</span>&gt;</span><br>        and gender=#&#123;gender&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>执行的sql的语句的演示</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">select * <span class="hljs-keyword">from</span> t_emp where <span class="hljs-attribute">emp_name</span>=? <span class="hljs-keyword">and</span> <span class="hljs-attribute">age</span>=? <span class="hljs-keyword">and</span> <span class="hljs-attribute">gender</span>=? <br></code></pre></td></tr></table></figure><h3 id="where标签"><a href="#where标签" class="headerlink" title="where标签"></a>where标签</h3><p>上面的第一种优化</p><p>DyanmicSQLMapper.xml</p><p>避免第一个条件不符合，或者都不符合的情况下sql语句错误</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    List&lt;Emp&gt; getEmpByCondition(Emp emp); --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpByCondition&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br>    select * from t_emp where 1=1<br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;empName!=null and empName!=&#x27;&#x27;&quot;</span>&gt;</span><br>        and emp_name=#&#123;empName&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;age!=null and age!=&#x27;&#x27;&quot;</span>&gt;</span><br>        and age=#&#123;age&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;gender!=null and gender!=&#x27;&#x27;&quot;</span>&gt;</span><br>        and gender=#&#123;gender&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>第二种优化</p><p>DyanmicSQLMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    List&lt;Emp&gt; getEmpByCondition(Emp emp); --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpByCondition&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br>    select * from t_emp <br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;empName!=null and empName!=&#x27;&#x27;&quot;</span>&gt;</span><br>         emp_name=#&#123;empName&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;age!=null and age!=&#x27;&#x27;&quot;</span>&gt;</span><br>        and age=#&#123;age&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;gender!=null and gender!=&#x27;&#x27;&quot;</span>&gt;</span><br>        and gender=#&#123;gender&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>where标签的作用：</p><p>1.若where标签中有条件成立，会自动生成where关键字</p><p>2.会自动将where标签中内容前多余的and去掉,但是后面多余的and无法去掉</p><p>3.若where标签中没有任何一个条件成立，则where标签没有任何功能</p><h3 id="trim标签"><a href="#trim标签" class="headerlink" title="trim标签"></a>trim标签</h3><p>第三种方法：</p><p>DynamicSQLMapper.xml</p><p>trim标签：</p><p>prefix,suffix:在标签中内容前面，后面添加指定内容</p><p>prefixOverrides,suffixOverrides:在标签中内容前面，后面去掉指定内容</p><p>下面这种情况是把and放在后面，这样如果age符合条件，gender是null的话就会出错，所以用trim标签解决</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    List&lt;Emp&gt; getEmpByCondition(Emp emp); --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpByCondition&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br>    select * from t_emp<br>    <span class="hljs-tag">&lt;<span class="hljs-name">trim</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;where&quot;</span> <span class="hljs-attr">suffixOverrides</span>=<span class="hljs-string">&quot;and&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;empName!=null and empName!=&#x27;&#x27;&quot;</span>&gt;</span><br>        emp_name=#&#123;empName&#125; and<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;age!=null and age!=&#x27;&#x27;&quot;</span>&gt;</span><br>         age=#&#123;age&#125; and<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;gender!=null and gender!=&#x27;&#x27;&quot;</span>&gt;</span><br>        gender=#&#123;gender&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">trim</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="choose-when-otherwise标签"><a href="#choose-when-otherwise标签" class="headerlink" title="choose when otherwise标签"></a>choose when otherwise标签</h3><p>choose:</p><p>when:  相当于if或者else if</p><p>otherwise:相当于else</p><p>这个是其中有一个条件成立，其他的都不判断了</p><p>DynamicSQLMapper</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">/*</span><br><span class="hljs-comment">使用choose来查询员工信息</span><br><span class="hljs-comment"> */</span><br>List&lt;Emp&gt; get<span class="hljs-constructor">EmpByChoose(Emp <span class="hljs-params">emp</span>)</span>;<br></code></pre></td></tr></table></figure><p>DynamicSQLMapper.xml</p><p>这种如果empName成立了，后面也就不会再执行了，所以前面不用加and</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    List&lt;Emp&gt; getEmpByChoose(Emp emp); --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpByChoose&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br>    select * from t_emp<br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">choose</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;empName!=null and empName!=&#x27;&#x27;&quot;</span>&gt;</span><br>                emp_name=#&#123;empName&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;age!=null and age!=&#x27;&#x27;&quot;</span>&gt;</span><br>                age=#&#123;age&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;gender!=null and gender!=&#x27;&#x27;&quot;</span>&gt;</span><br>                gender=#&#123;gender&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">choose</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br></code></pre></td></tr></table></figure><p>test</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetEmpByChoose</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.getSqlSession();<br>    <span class="hljs-type">DynamicSQLMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(DynamicSQLMapper.class);<br>    Emp emp=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Emp</span>(<span class="hljs-literal">null</span>,<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">20</span>,<span class="hljs-string">&quot;&quot;</span>);<br>    List&lt;Emp&gt; list = mapper.getEmpByChoose(emp);<br>    list.forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="foreach标签-获取list集合参数"><a href="#foreach标签-获取list集合参数" class="headerlink" title="foreach标签(获取list集合参数)"></a>foreach标签(获取list集合参数)</h3><p><strong>批量添加</strong></p><p>获取list形式的参数也用@Param(“emps”)，#{}是在sql语句中使用的用来获得参数的，在标签中不用</p><p>实现批量操作</p><p>DynamicSQLMapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">添加多条员工信息</span><br><span class="hljs-comment">参数是一个存储员工信息的集合</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">insertMoreEmp</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;emps&quot;)</span> List&lt;Emp&gt; emps)</span>;<br></code></pre></td></tr></table></figure><p>DynamicSQLMapper.xml</p><p>collections中是要遍历的集合，item是集合中每一个元素</p><p>这里访问对象的属性，不能直接用属性名       要用对象名字.属性名</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    void insertMoreEmp(List&lt;Emp&gt; emps);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertMoreEmp&quot;</span>&gt;</span><br>    insert into t_emp values<br>    <span class="hljs-comment">&lt;!--separator是每一次循环之间的分隔符的设置--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;emps&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;emp&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span><br>          (null,#&#123;emp.empName&#125;,#&#123;emp.age&#125;,#&#123;emp.gender&#125;,null)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure><p>TEST</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testInsertMoreEmp</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.getSqlSession();<br>        <span class="hljs-type">DynamicSQLMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(DynamicSQLMapper.class);<br>        Emp emp1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Emp</span>(<span class="hljs-literal">null</span>,<span class="hljs-string">&quot;小明1&quot;</span>,<span class="hljs-number">20</span>,<span class="hljs-string">&quot;男&quot;</span>);<br>        Emp emp2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Emp</span>(<span class="hljs-literal">null</span>,<span class="hljs-string">&quot;小明2&quot;</span>,<span class="hljs-number">20</span>,<span class="hljs-string">&quot;男&quot;</span>);<br>        Emp emp3=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Emp</span>(<span class="hljs-literal">null</span>,<span class="hljs-string">&quot;小明3&quot;</span>,<span class="hljs-number">20</span>,<span class="hljs-string">&quot;男&quot;</span>);<br>        ArrayList&lt;Emp&gt; list1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Emp&gt;();<br>list1.add(emp1);<br>list1.add(emp2);<br>list1.add(emp3);<br>         mapper.insertMoreEmp(list1);<br>    &#125;<br></code></pre></td></tr></table></figure><p><strong>批量删除</strong></p><p>DynamicSQLMapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">批量删除</span><br><span class="hljs-comment">参数是存储的员工id的数组</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteMoreEmp</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;empIds&quot;)</span>Integer[] empIds)</span>;<br></code></pre></td></tr></table></figure><p>DynamicSQLMapper.xml</p><p>empId是Integer类型的所以可以用#{empId}来获取</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    void delteMoreEmp(@Param(&quot;empIds&quot;)Integer[] empIds);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteMoreEmp&quot;</span>&gt;</span><br>    delete from t_emp where emp_id in<br>    (<br>    <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;empIds&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;empId&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span><br>            #&#123;empId&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br><br>    )<br><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br></code></pre></td></tr></table></figure><p>test</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testdeleteMoreEmp</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.getSqlSession();<br>    <span class="hljs-type">DynamicSQLMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(DynamicSQLMapper.class);<br>    Integer[] empIds=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>[]&#123;<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>&#125;;<br>    mapper.deleteMoreEmp(empIds);<br>&#125;<br></code></pre></td></tr></table></figure><p>优化</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    void delteMoreEmp(@Param(&quot;empIds&quot;)Integer[] empIds);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteMoreEmp&quot;</span> &gt;</span><br>    delete from t_emp where emp_id in<br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;empIds&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;empId&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span>&gt;</span><br>            #&#123;empId&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br></code></pre></td></tr></table></figure><p>open和close属性代表循环以什么开始和以什么结束</p><p>优化2</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    void delteMoreEmp(@Param(&quot;empIds&quot;)Integer[] empIds);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteMoreEmp&quot;</span> &gt;</span><br>   <span class="hljs-comment">&lt;!-- delete from t_emp where emp_id in</span><br><span class="hljs-comment">    &lt;foreach collection=&quot;empIds&quot; item=&quot;empId&quot; separator=&quot;,&quot; open=&quot;(&quot; close=&quot;)&quot;&gt;</span><br><span class="hljs-comment">            #&#123;empId&#125;</span><br><span class="hljs-comment">    &lt;/foreach&gt;--&gt;</span><br>   delete from t_emp where<br>   <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;empIds&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;empId&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;or&quot;</span>&gt;</span><br>       emp_id=#&#123;empId&#125;<br>   <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br></code></pre></td></tr></table></figure><p>separator：设置每次循环的数据之间的分隔符，前后会自动加空格</p><p>优化2的sql语句</p><p>delete from t_emp where emp_id&#x3D;? or emp_id&#x3D;? or emp_id&#x3D;?</p><h3 id="sql标签"><a href="#sql标签" class="headerlink" title="sql标签"></a>sql标签</h3><p>就是把sql中每次都用到的片段进行封装，然后用include标签来进行引用，比如说*在mybatis中解析为所有字段名，你可以自己将所有字段名封装起来，然后去引用，也避免了mybatis的解析</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">sql</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;empColumns&quot;</span>&gt;</span><br>    emp_id,emp_name,age,gender,dept_id<br><span class="hljs-tag">&lt;/<span class="hljs-name">sql</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> &lt;<span class="hljs-keyword">include</span> refid=<span class="hljs-string">&quot;empColumns&quot;</span>&gt;&lt;/<span class="hljs-keyword">include</span>&gt; <span class="hljs-keyword">from</span> t_emp<br></code></pre></td></tr></table></figure><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">sql</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;empColumns&quot;</span>&gt;</span></span><br><span class="language-xml">    emp_id,emp_name,age,gender,dept_id</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">sql</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-comment">&lt;!--    List&lt;Emp&gt; getEmpByCondition(Emp emp); --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpByCondition&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="language-xml">    select <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;empColumns&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span> from t_emp</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">trim</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;where&quot;</span> <span class="hljs-attr">suffixOverrides</span>=<span class="hljs-string">&quot;and&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;empName!=null and empName!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="language-xml">        emp_name=#</span><span class="hljs-template-variable">&#123;empName&#125;</span><span class="language-xml"> and</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;age!=null and age!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="language-xml">         age=#</span><span class="hljs-template-variable">&#123;age&#125;</span><span class="language-xml"> and</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;gender!=null and gender!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="language-xml">        gender=#</span><span class="hljs-template-variable">&#123;gender&#125;</span><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">trim</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="Mybatis缓存"><a href="#Mybatis缓存" class="headerlink" title="Mybatis缓存"></a>Mybatis缓存</h2><h3 id="一级缓存："><a href="#一级缓存：" class="headerlink" title="一级缓存："></a>一级缓存：</h3><p>默认就是一级缓存</p><p>一级缓存是SqlSession级别的，<strong>通过同一个SqlSession查询的数据会被缓存</strong>，下次查询相同的数据，就会从缓存中直接获取，不会从数据库重新访问</p><p>sqlSession级别，是指一级缓存生效的条件是同一个sqlSession</p><p>虽然执行了两次mapper.getEmpById(1);方法但是只用了一个sql语句这就是一级缓存，注意参数必须相同</p><p>test</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetEmpById</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.getSqlSession();<br>    <span class="hljs-type">CacheMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(CacheMapper.class);<br>    <span class="hljs-type">Emp</span> <span class="hljs-variable">emp1</span> <span class="hljs-operator">=</span> mapper.getEmpById(<span class="hljs-number">1</span>);<br>    System.out.println(emp1);<br>    <span class="hljs-type">Emp</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> mapper.getEmpById(<span class="hljs-number">1</span>);<br>    System.out.println(emp);<br>&#125;<br></code></pre></td></tr></table></figure><p>一级缓存失效的四种情况</p><p>使一级缓存失效的四种情况： </p><ol><li>不同的SqlSession对应不同的一级缓存 </li><li>同一个SqlSession但是查询条件不同 </li><li>同一个SqlSession两次查询期间执行了任何一次增删改操作 </li><li>同一个SqlSession两次查询期间手动清空了缓存</li></ol><p>test</p><p>中间进行了一个删除操作，就会清空一级缓存，这样就是总共执行3个sql语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetEmpById</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.getSqlSession();<br>    <span class="hljs-type">CacheMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(CacheMapper.class);<br>    <span class="hljs-type">Emp</span> <span class="hljs-variable">emp1</span> <span class="hljs-operator">=</span> mapper.getEmpById(<span class="hljs-number">1</span>);<br>    System.out.println(emp1);<br>    mapper.deleteEmpById(<span class="hljs-number">4</span>);<br>    <span class="hljs-type">Emp</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> mapper.getEmpById(<span class="hljs-number">1</span>);<br>    System.out.println(emp);<br>&#125;<br></code></pre></td></tr></table></figure><p>test</p><p>清空一级缓存用sqlSession.clearCache()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetEmpById</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.getSqlSession();<br>    <span class="hljs-type">CacheMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(CacheMapper.class);<br>    <span class="hljs-type">Emp</span> <span class="hljs-variable">emp1</span> <span class="hljs-operator">=</span> mapper.getEmpById(<span class="hljs-number">1</span>);<br>    System.out.println(emp1);<br>    sqlSession.clearCache();<br>   <span class="hljs-comment">// mapper.deleteEmpById(4);</span><br>    <span class="hljs-type">Emp</span> <span class="hljs-variable">emp</span> <span class="hljs-operator">=</span> mapper.getEmpById(<span class="hljs-number">1</span>);<br>    System.out.println(emp);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h3><p>二级缓存是SqlSessionFactory级别，通过同一个SqlSessionFactory创建的SqlSession查询的结果会被 缓存；此后若再次执行相同的查询语句，结果就会从缓存中获取</p><p>使用同一个SqlSessionFactory创建的sqlSession缓存都有效</p><p>二级缓存开启的条件： </p><p>a&gt;在核心配置文件中，设置全局配置属性cacheEnabled&#x3D;”true”，默认为true，不需要设置 </p><p>b&gt;在映射文件中设置标签 </p><p>c&gt;二级缓存必须在SqlSession关闭或提交之后有效 </p><p>d&gt;查询的数据所转换的实体类类型必须实现序列化的接口</p><p>实现接口</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-symbol">Emp</span> <span class="hljs-symbol">implements</span> <span class="hljs-symbol">Serializable</span> &#123;<br></code></pre></td></tr></table></figure><p>test</p><p>先关闭sqlSession才能将数据进入二级缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//sqlSession1关闭之后才能将保存在一级缓存中的数据保存到二级缓存中</span><br>sqlSession1.close();<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testCache</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis-config.xml&quot;</span>);<br>    <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(is);<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession1</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">CacheMapper</span> <span class="hljs-variable">mapper1</span> <span class="hljs-operator">=</span> sqlSession1.getMapper(CacheMapper.class);<br>    <span class="hljs-type">Emp</span> <span class="hljs-variable">empById</span> <span class="hljs-operator">=</span> mapper1.getEmpById(<span class="hljs-number">1</span>);<br>    System.out.println(empById);<br><br>    <span class="hljs-comment">//sqlSession1关闭之后才能将保存在一级缓存中的数据保存到二级缓存中</span><br>    sqlSession1.close();<br><br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession2</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">CacheMapper</span> <span class="hljs-variable">mapper2</span> <span class="hljs-operator">=</span> sqlSession2.getMapper(CacheMapper.class);<br>    <span class="hljs-type">Emp</span> <span class="hljs-variable">empById2</span> <span class="hljs-operator">=</span> mapper2.getEmpById(<span class="hljs-number">1</span>);<br>    System.out.println(empById2);<br>    sqlSession2.close();<br><br>&#125;<br></code></pre></td></tr></table></figure><p>使二级缓存失效的情况： </p><p>两次查询之间执行了任意的增删改，会使一级和二级缓存同时失效</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210201005566.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221020100555990"></p><p>先查询二级缓存，因为二级缓存中可能会有其他程序已经查出来的数据，可以拿来直接使用。 </p><p>如果二级缓存没有命中，再查询一级缓存 </p><p>如果一级缓存也没有命中，则查询数据库</p><p> SqlSession关闭之后一级缓存中的数据会写入二级缓存</p><h3 id="整合第三方缓存Ehache"><a href="#整合第三方缓存Ehache" class="headerlink" title="整合第三方缓存Ehache"></a>整合第三方缓存Ehache</h3><p><strong>第三方缓存是在二级缓存的基础上来使用的</strong></p><p>1.导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Mybatis EHCache整合包 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.caches<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-ehcache<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- slf4j日志门面的一个具体实现 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-classic<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210201017909.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221020101756644"></p><p><strong>创建EHCache的配置文件ehcache.xml</strong></p><p>在resources文件夹下</p><p><strong>设置二级缓存的类型</strong></p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso">&lt;<span class="hljs-keyword">cache</span> <span class="hljs-keyword">type</span>=<span class="hljs-string">&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><p><strong>加入logback日志</strong></p><p>存在SLF4J时，作为简易日志的log4j将失效，此时我们需要借助SLF4J的具体实现logback来打印日 志。 创建logback的配置文件logback.xml</p><p>改动：name是自己的方mapper接口的包</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;logger <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;com.atguigu.mybatis.mapper&quot;</span> <span class="hljs-attribute">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><p>resources下面的logback.xml</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span> <span class="hljs-attr">debug</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!-- 指定日志输出的位置 --&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;STDOUT&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-comment">&lt;!-- 日志输出的格式 --&gt;</span></span><br><span class="language-xml">            <span class="hljs-comment">&lt;!-- 按照顺序分别是： 时间、日志级别、线程名称、打印日志的类、日志主体内容、换行</span></span><br><span class="hljs-comment"><span class="language-xml">            --&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>[%d</span><span class="hljs-template-variable">&#123;HH:mm:ss.SSS&#125;</span><span class="language-xml">] [%-5level] [%thread] [%logger]</span><br><span class="language-xml">                [%msg]%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!-- 设置全局日志级别。日志级别按顺序分别是： DEBUG、INFO、WARN、ERROR --&gt;</span></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!-- 指定任何一个日志级别都只打印当前级别和后面级别的日志。 --&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-comment">&lt;!-- 指定打印日志的appender，这里通过“STDOUT”引用了前面配置的appender --&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!-- 根据特殊需求指定局部日志级别 --&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.atguigu.mybatis.mapper&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span>/&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="mybatis的逆向工程"><a href="#mybatis的逆向工程" class="headerlink" title="mybatis的逆向工程"></a>mybatis的逆向工程</h2><p>正向工程：先创建Java实体类，由框架负责根据实体类生成数据库表。 Hibernate是支持正向工 程的。</p><p>逆向工程：先创建数据库表，由框架负责根据数据库表，反向生成资源： Java实体类 Mapper接口 Mapper映射文件</p><p>先改了以下maven的镜像源</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>nexus-aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Nexus aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br></code></pre></td></tr></table></figure><p>添加依赖</p><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--依赖mybaits核心--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- junit测试 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- log4j日志 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.16<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 控制Maven在构建过程中相关配置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 构建过程中用到的插件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 具体插件，逆向工程的操作是以构建过程中插件形式出现的 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.generator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 插件的依赖 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- 逆向工程的核心依赖 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.generator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-generator-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- MySQL驱动 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.16<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在resources下加入generatorConfig.xml</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livescript">.<span class="hljs-string">\是在当前工程目录下</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">generatorConfiguration</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">generatorConfiguration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    targetRuntime: 执行生成的逆向工程的版本</span><br><span class="hljs-comment">    MyBatis3Simple: 生成基本的CRUD（清新简洁版）</span><br><span class="hljs-comment">    MyBatis3: 生成带条件的CRUD（奢华尊享版）</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;DB2Tables&quot;</span> <span class="hljs-attr">targetRuntime</span>=<span class="hljs-string">&quot;MyBatis3Simple&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 数据库的连接信息 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">jdbcConnection</span> <span class="hljs-attr">driverClass</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span></span><br><span class="hljs-tag">                        <span class="hljs-attr">connectionURL</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/ssm?</span></span><br><span class="hljs-string"><span class="hljs-tag">serverTimezone=UTC&quot;</span></span><br><span class="hljs-tag">                        <span class="hljs-attr">userId</span>=<span class="hljs-string">&quot;root&quot;</span></span><br><span class="hljs-tag">                        <span class="hljs-attr">password</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">jdbcConnection</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- javaBean的生成策略--&gt;</span><br>        <span class="hljs-comment">&lt;!--targetPackage是生成的文件所在的包名，targetProject是整个包所在的文件夹--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">javaModelGenerator</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;com.atguigu.mybatis.pojo&quot;</span></span><br><span class="hljs-tag">                            <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;.\src\main\java&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--这个就是让com.atguigu.mybatis.pojo是多个包层级，而不是一个包的名字--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>            <span class="hljs-comment">&lt;!--把字段前后空格去掉生成对应的属性--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;trimStrings&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">javaModelGenerator</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- SQL映射文件的生成策略 --&gt;</span><br>        <span class="hljs-comment">&lt;!--下面这些标签的意思都和上面相同--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">sqlMapGenerator</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;com.atguigu.mybatis.mapper&quot;</span></span><br><span class="hljs-tag">                         <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;.\src\main\resources&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">sqlMapGenerator</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- Mapper接口的生成策略 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">javaClientGenerator</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;XMLMAPPER&quot;</span></span><br><span class="hljs-tag">                             <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;com.atguigu.mybatis.mapper&quot;</span> <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;.\src\main\java&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">javaClientGenerator</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 逆向分析的表 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- tableName设置为*号，可以对应所有表，此时不写domainObjectName --&gt;</span><br>        <span class="hljs-comment">&lt;!-- domainObjectName属性指定生成出来的实体类的类名 --&gt;</span><br>        <span class="hljs-comment">&lt;!--tableName是需要逆向生成的表--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">tableName</span>=<span class="hljs-string">&quot;t_emp&quot;</span> <span class="hljs-attr">domainObjectName</span>=<span class="hljs-string">&quot;Emp&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">tableName</span>=<span class="hljs-string">&quot;t_dept&quot;</span> <span class="hljs-attr">domainObjectName</span>=<span class="hljs-string">&quot;Dept&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">context</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">generatorConfiguration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>点击mybatis-generator:generate进行逆向工程的运行</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210201113320.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221020111326007"></p><p>双击之后就会出现</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210201115952.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221020111508306"></p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210201115237.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221020111537198"></p><p><strong>类中的属性是根据mysql中的字段生成的</strong></p><p><strong>emp_id字段会自动生成empId  会自动变成驼峰形式</strong></p><p><strong>这个逆向工程不能给类中的对象类型的属性赋值，不支持多表联查的那种形式</strong></p><p>byExample就是指通过条件，这个方法是通过条件获得记录数</p><p>这个可以通过所有的属性来删除</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * This method was generated by MyBatis Generator.</span><br><span class="hljs-comment"> * This method corresponds to the database table t_emp</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * @mbggenerated Thu Oct 20 11:30:05 CST 2022</span><br><span class="hljs-comment"> */</span><br><span class="hljs-built_in">int</span> count<span class="hljs-constructor">ByExample(EmpExample <span class="hljs-params">example</span>)</span>;<br></code></pre></td></tr></table></figure><p>这个只能通过id来删除</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-built_in">int</span> delete<span class="hljs-constructor">ByPrimaryKey(Integer <span class="hljs-params">empId</span>)</span>;<br></code></pre></td></tr></table></figure><p>insert和insertSelective方法差别是，insert如果插入null，就真的是null，insertSelective如果插入为null，则插入的是mysql默认值</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">insert</span>(<span class="hljs-params">Emp <span class="hljs-keyword">record</span></span>)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * This method was generated by MyBatis Generator.</span><br><span class="hljs-comment"> * This method corresponds to the database table t_emp</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * @mbggenerated Thu Oct 20 11:30:05 CST 2022</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">insertSelective</span>(<span class="hljs-params">Emp <span class="hljs-keyword">record</span></span>)</span>;<br></code></pre></td></tr></table></figure><p>selectByExample可以通过任意属性来查询</p><p>selectByPrimatyKey只可以通过id属性查询</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">List&lt;Emp&gt; select<span class="hljs-constructor">ByExample(EmpExample <span class="hljs-params">example</span>)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * This method was generated by MyBatis Generator.</span><br><span class="hljs-comment"> * This method corresponds to the database table t_emp</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * @mbggenerated Thu Oct 20 11:30:05 CST 2022</span><br><span class="hljs-comment"> */</span><br>Emp select<span class="hljs-constructor">ByPrimaryKey(Integer <span class="hljs-params">empId</span>)</span>;<br></code></pre></td></tr></table></figure><p>updateByExampleSelective如果修改哪个字段为null，就不会修改这个字段</p><p>updateByExample是null，也会修改这个字段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-title function_">updateByExampleSelective</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;record&quot;)</span> Emp record, <span class="hljs-meta">@Param(&quot;example&quot;)</span> EmpExample example)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * This method was generated by MyBatis Generator.</span><br><span class="hljs-comment"> * This method corresponds to the database table t_emp</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@mbggenerated</span> Thu Oct 20 11:30:05 CST 2022</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">updateByExample</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;record&quot;)</span> Emp record, <span class="hljs-meta">@Param(&quot;example&quot;)</span> EmpExample example)</span>;<br></code></pre></td></tr></table></figure><p>这两个是根据主键来实现修改功能</p><p>加上Selective那个也是如果属性为null不会给字段赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-title function_">updateByPrimaryKeySelective</span><span class="hljs-params">(Emp record)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * This method was generated by MyBatis Generator.</span><br><span class="hljs-comment"> * This method corresponds to the database table t_emp</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@mbggenerated</span> Thu Oct 20 11:30:05 CST 2022</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">updateByPrimaryKey</span><span class="hljs-params">(Emp record)</span>;<br></code></pre></td></tr></table></figure><p>test</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.mybatis.test;<br><br><span class="hljs-keyword">import</span> com.atguigu.mybatis.mapper.EmpMapper;<br><span class="hljs-keyword">import</span> com.atguigu.mybatis.pojo.Emp;<br><span class="hljs-keyword">import</span> com.atguigu.mybatis.pojo.EmpExample;<br><span class="hljs-keyword">import</span> com.atguigu.mybatis.utils.SqlSessionUtil;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MBGTest</span> &#123;<br><span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testMBG</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.getSqlSession();<br>    <span class="hljs-type">EmpMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(EmpMapper.class);<br>    <span class="hljs-comment">//根据id查询数据</span><br>    <span class="hljs-comment">/*Emp emp = mapper.selectByPrimaryKey(1);</span><br><span class="hljs-comment">    System.out.println(emp);</span><br><span class="hljs-comment">     */</span><br><br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    根据条件查寻，不加任何条件，就是查询全部</span><br><span class="hljs-comment">    List&lt;Emp&gt; emps = mapper.selectByExample(null);</span><br><span class="hljs-comment">    emps.forEach(System.out::println);*、</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    根据条件查询员工信息</span><br><span class="hljs-comment">    example对象就是条件，createCriteria()方法之后加.and然后你想要关于name的条件就.andEmpName然后会有方法</span><br><span class="hljs-comment">    要求条件姓名(是张三，且年龄大于19岁)或者(性别为男)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    对应的sql语句：</span><br><span class="hljs-comment">    &lt;!--select emp_id, emp_name, age, gender, dept_id from t_emp WHERE ( emp_name = ? and age &gt; ? ) or( gender = ? )--&gt;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    EmpExample example=new EmpExample();</span><br><span class="hljs-comment">    example.createCriteria().andEmpNameEqualTo(&quot;张三&quot;).andAgeGreaterThan(19);</span><br><span class="hljs-comment">    example.or().andGenderEqualTo(&quot;男&quot;);</span><br><span class="hljs-comment">    List&lt;Emp&gt; emps = mapper.selectByExample(example);</span><br><span class="hljs-comment">emps.forEach(System.out::println);*/</span><br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    根据id来修改员工信息，所以emp对象中的id属性要和你想修改的那一行数据的id相同</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    updateByPrimaryKeySelective如果修改的属性为null就不会修改了</span><br><span class="hljs-comment">    updateByPrimaryKey如果修改了为null就真是为null</span><br><span class="hljs-comment">     */</span><br>    Emp emp=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Emp</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;小黑&quot;</span>,<span class="hljs-literal">null</span>,<span class="hljs-string">&quot;女&quot;</span>);<br>  <span class="hljs-comment">//  mapper.updateByPrimaryKey(emp);</span><br>mapper.updateByPrimaryKeySelective(emp);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="分页插件"><a href="#分页插件" class="headerlink" title="分页插件"></a>分页插件</h2><p>limit index,pageSize</p><p>pageSize:每页显示的条数</p><p>pageNum:当前页的页码     </p><p>index:当前页的起始索引     (pageNum-1)*pageSize 要显示的是第九条，那索引就是8</p><p>pageSize&#x3D;4，pageNum&#x3D;1，index&#x3D;0 limit 0,4 </p><p>pageSize&#x3D;4，pageNum&#x3D;3，index&#x3D;8 limit 8,4 </p><p>pageSize&#x3D;4，pageNum&#x3D;6，index&#x3D;20 limit 8,4</p><p>count：总记录数 </p><p>totalPage：总页数 </p><p>totalPage &#x3D; count &#x2F; pageSize; </p><p>if(count % pageSize !&#x3D; 0)</p><p>{ </p><p>totalPage +&#x3D; 1; </p><p>}</p><h3 id="分页插件的使用步骤"><a href="#分页插件的使用步骤" class="headerlink" title="分页插件的使用步骤"></a>分页插件的使用步骤</h3><p>添加依赖</p><p>pom.xml文件中添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--分页插件的依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配置插件分页</p><p>在mybatis-config.xml中加入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span> <span class="hljs-attr">interceptor</span>=<span class="hljs-string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="分页插件的使用"><a href="#分页插件的使用" class="headerlink" title="分页插件的使用"></a>分页插件的使用</h3><p>这个测试显示的第二页的四条记录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.mybatis.test;<br><br><span class="hljs-keyword">import</span> com.atguigu.mybatis.mapper.EmpMapper;<br><span class="hljs-keyword">import</span> com.atguigu.mybatis.pojo.Emp;<br><span class="hljs-keyword">import</span> com.atguigu.mybatis.utils.SqlSessionUtil;<br><span class="hljs-keyword">import</span> com.github.pagehelper.PageHelper;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PageTest</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testPage</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.getSqlSession();<br>        <span class="hljs-type">EmpMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(EmpMapper.class);<br><br>        <span class="hljs-comment">//开启分页功能，参数是第几页和一页的记录数</span><br>        <span class="hljs-comment">//如果只有一个参数，则是每页有几条记录，默认显示第一页</span><br>        PageHelper.startPage(<span class="hljs-number">2</span>,<span class="hljs-number">4</span>);<br><br>        <span class="hljs-comment">//查询功能之前要开启分页功能</span><br>        List&lt;Emp&gt; emps = mapper.selectByExample(<span class="hljs-literal">null</span>);<br>        emps.forEach(System.out::println);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>优化</p><p>pageInfo是获取分页相关的所有数据比page要更详细一点</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">PageInfo<span class="hljs-tag">&lt;<span class="hljs-name">Emp</span>&gt;</span> pageInfo=new PageInfo<span class="hljs-tag">&lt;&gt;</span>(emps,5);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testPage</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionUtil.getSqlSession();<br>    <span class="hljs-type">EmpMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(EmpMapper.class);<br><br>    <span class="hljs-comment">//开启分页功能，参数是第几页和一页的记录数</span><br>    <span class="hljs-comment">//如果只有一个参数，则是每页有几条记录，默认显示第一页</span><br>    <span class="hljs-comment">//page就是分页对象</span><br>    Page&lt;Object&gt; page = PageHelper.startPage(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>);<br><br><br>    <span class="hljs-comment">//查询功能之前要开启分页功能</span><br>    List&lt;Emp&gt; emps = mapper.selectByExample(<span class="hljs-literal">null</span>);<br>    emps.forEach(System.out::println);<br>    <br>    <br>    <br>    <span class="hljs-comment">//查询功能之后可以获取分页相关的所有数据</span><br>    <span class="hljs-comment">//navigatePages:导航分页的页码首页上一页【导航页】下一页末页</span><br>    PageInfo&lt;Emp&gt; pageInfo=<span class="hljs-keyword">new</span> <span class="hljs-title class_">PageInfo</span>&lt;&gt;(emps,<span class="hljs-number">5</span>);<br><br>    <br>    <span class="hljs-comment">//输出pageInfo对象</span><br>    System.out.println(pageInfo);<br>    <span class="hljs-comment">//输出查询之后的分页对象</span><br>    System.out.println(page);<br>&#125;<br></code></pre></td></tr></table></figure><p>pageInfo的信息</p><p>可以从当中获取分页的信息，在进行分页处理的时候可以直接用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-comment">/*</span><br><span class="hljs-comment">    pageInfo信息</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-comment">//PageInfo&#123;</span><br>    <span class="hljs-comment">// pageNum=2, pageSize=4, size=4,</span><br>    <span class="hljs-comment">// startRow=5, endRow=8, total=30,</span><br>    <span class="hljs-comment">// pages=8, list=Page&#123;count=true, pageNum=2, pageSize=4, startRow=4, endRow=8, total=30, pages=8, reasonable=false, pageSizeZero=false&#125;[Emp&#123;empId=5, empName=&#x27;a&#x27;, age=null, gender=&#x27;null&#x27;, deptId=null&#125;, Emp&#123;empId=6, empName=&#x27;aa&#x27;, age=null, gender=&#x27;null&#x27;, deptId=null&#125;, Emp&#123;empId=7, empName=&#x27;a&#x27;, age=null, gender=&#x27;null&#x27;, deptId=null&#125;, Emp&#123;empId=8, empName=&#x27;a&#x27;, age=null, gender=&#x27;null&#x27;, deptId=null&#125;],</span><br>    <span class="hljs-comment">// prePage=1, nextPage=3, isFirstPage=false,</span><br>    <span class="hljs-comment">// isLastPage=false, hasPreviousPage=true,</span><br>    <span class="hljs-comment">// hasNextPage=true, navigatePages=5,</span><br>    <span class="hljs-comment">// navigateFirstPage=1, navigateLastPage=5, navigatepageNums=[1, 2, 3, 4, 5]&#125;</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">pageNum：当前页的页码</span><br><span class="hljs-comment">pageSize：每页显示的条数</span><br><span class="hljs-comment">size：当前页显示的真实条数</span><br><span class="hljs-comment">total：总记录数</span><br><span class="hljs-comment">pages：总页数</span><br><span class="hljs-comment">prePage：上一页的页码</span><br><span class="hljs-comment">nextPage：下一页的页码</span><br><span class="hljs-comment">isFirstPage/isLastPage：是否为第一页/最后一页</span><br><span class="hljs-comment">hasPreviousPage/hasNextPage：是否存在上一页/下一页</span><br><span class="hljs-comment">navigatePages：导航分页的页码数</span><br><span class="hljs-comment">navigatepageNums：导航分页的页码，[1,2,3,4,5]</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>javaweb</title>
    <link href="/2022/09/29/javaweb/"/>
    <url>/2022/09/29/javaweb/</url>
    
    <content type="html"><![CDATA[<p><strong>Javaweb</strong></p><h2 id="HTML-CSS-Javascript前端三刺客"><a href="#HTML-CSS-Javascript前端三刺客" class="headerlink" title="HTML.CSS,Javascript前端三刺客"></a>HTML.CSS,Javascript前端三刺客</h2><p>HTML是超文本标记语言，是一个网站页面的主要内容和主体框架（主要是实现内容）</p><p>CSS是层叠样式表，主要用来控制调整网页的样式，它与网页的结构和内容没有关系，仅仅是通过不同语义的标签来调整网页内容的不同表现样式。(主要是实现表现，一种呈现的效果)</p><p>JavaScript是一种完整的网页脚本语言，有自己独立的语法，可以完成复杂的程序逻辑，而HTML和CSS仅仅是标记语言，不具备编程语言的程序逻辑。(行为，指的是页面中元素与输入设备交互的响应，一般使用javascript技术实现)</p><p>B&#x2F;S软件结构：</p><p>客户端：浏览器             服务器端：web服务器</p><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><h4 id="html书写规范"><a href="#html书写规范" class="headerlink" title="html书写规范"></a>html书写规范</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><span class="hljs-comment">&lt;!--约束，声明--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh_CN&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--html标签表示html的开始  lang=&quot;zh_CN表示中文&quot;--&gt;</span><br><span class="hljs-comment">&lt;!--html标签中一般分为两部分，head和body--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-comment">&lt;!--表示头部信息，一般包含三部分内容，title标签，css样式，js代码--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--表示当前页面使用UTF-8字符集--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>标题<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-comment">&lt;!--表示标题--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-comment">&lt;!--body标签是整个html页面显示的主体内容--&gt;</span><br>hello<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="html标签"><a href="#html标签" class="headerlink" title="html标签"></a>html标签</h4><p>1.标签名大小写不敏感</p><p>2.标签名有自己的属性         </p><p> 基本属性：bgcolor&#x3D;“red”  可以修改简单的样式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--背景颜色属性--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">bgcolor</span>=<span class="hljs-string">&quot;green&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--body标签是整个html页面显示的主体内容--&gt;</span><br></code></pre></td></tr></table></figure><p>  事件属性：  onclick&#x3D;“alert(‘你好’);”    </p><p>点击body主题内容触发</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--onclick表示点击事件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;alert(1)&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--body标签是整个html页面显示的主体内容--&gt;</span><br></code></pre></td></tr></table></figure><p>3.分为单标签和双标签 &lt;标签名 &#x2F;&gt;        和&lt;标签名&gt;     &lt;&#x2F;标签名&gt;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;br /&gt;换行       &lt;hr /&gt;<br></code></pre></td></tr></table></figure><p><strong>标签语法</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>0-标签语法.html<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!-- ①标签不能交叉嵌套 --&gt;</span><br>   正确：<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>早安，尚硅谷<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   错误：<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>早安，尚硅谷<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span><br><br>   <span class="hljs-comment">&lt;!-- ②标签必须正确关闭(闭合) --&gt;</span><br>   <span class="hljs-comment">&lt;!-- i.有文本内容的标签： --&gt;</span><br>   正确：<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>早安，尚硅谷<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   错误：<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>早安，尚硅谷<br>   <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span><br>   <br>   <span class="hljs-comment">&lt;!-- ii.没有文本内容的标签： --&gt;</span><br>   正确：<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span>1<br>   错误：<span class="hljs-tag">&lt;<span class="hljs-name">br</span> &gt;</span>2<br>   <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span><br>   <br>   <span class="hljs-comment">&lt;!-- ③属性必须有值，属性值必须加引号 --&gt;</span><br>   正确：<span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;blue&quot;</span>&gt;</span>早安，尚硅谷<span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span><br>   错误：<span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">color</span>=<span class="hljs-string">blue</span>&gt;</span>早安，尚硅谷<span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span><br>   错误：<span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">color</span>&gt;</span>早安，尚硅谷<span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span><br>      <br>   <span class="hljs-comment">&lt;!-- ④注释不能嵌套 --&gt;</span><br>   正确：<span class="hljs-comment">&lt;!-- 注释内容 --&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>   错误：<span class="hljs-comment">&lt;!-- 注释内容 &lt;!-- 注释内容 --&gt;</span>--&gt;<br>   <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>font标签</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>1.font标签.html<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>   <span class="hljs-comment">&lt;!-- 字体标签</span><br><span class="hljs-comment">    需求1：在网页上显示 我是字体标签 ，并修改字体为 宋体，颜色为红色。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    font标签是字体标签,它可以用来修改文本的字体,颜色,大小(尺寸)</span><br><span class="hljs-comment">      color属性修改颜色</span><br><span class="hljs-comment">      face属性修改字体</span><br><span class="hljs-comment">      size属性修改文本大小</span><br><span class="hljs-comment">    --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;red&quot;</span> <span class="hljs-attr">face</span>=<span class="hljs-string">&quot;宋体&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;7&quot;</span>&gt;</span>我是字体标签<span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>特殊字符</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>2.特殊字符.html<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 特殊字符</span><br><span class="hljs-comment">需求1：把 &lt;br&gt; 换行标签 变成文本 转换成字符显示在页面上</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">常用的特殊字符:</span><br><span class="hljs-comment">&lt;===&gt;&gt;&gt;&gt;&amp;lt;</span><br><span class="hljs-comment">&gt;   ===&gt;&gt;&gt;&gt;&amp;gt;</span><br><span class="hljs-comment">  空格===&gt;&gt;&gt;&gt;&amp;nbsp;</span><br><span class="hljs-comment">如果在html文件中出现多个空白字符，那么就只保留一个，必须用特殊字符才可以出现多个空格</span><br><span class="hljs-comment"> --&gt;</span><br>我是<span class="hljs-symbol">&amp;lt;</span>br<span class="hljs-symbol">&amp;gt;</span>标签<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>国哥好<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>帅啊!<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>标题标签</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>3.标题标签.html<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>   <span class="hljs-comment">&lt;!-- 标题标签</span><br><span class="hljs-comment">    需求1：演示标题1到 标题6的</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">      h1 - h6 都是标题标签</span><br><span class="hljs-comment">      h1 最大</span><br><span class="hljs-comment">      h6 最小</span><br><span class="hljs-comment">         align 属性是对齐属性</span><br><span class="hljs-comment">            left      左对齐(默认)</span><br><span class="hljs-comment">            center    剧中</span><br><span class="hljs-comment">            right     右对齐</span><br><span class="hljs-comment">    --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span>标题1<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span>标题2<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span>标题3<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>标题4<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>标题5<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span>标题6<span class="hljs-tag">&lt;/<span class="hljs-name">h6</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">h7</span>&gt;</span>标题7<span class="hljs-tag">&lt;/<span class="hljs-name">h7</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>超链接标签</strong></p><p>网页中点击跳转的内容就是超链接</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>4.超链接.html<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>   <span class="hljs-comment">&lt;!-- a标签是 超链接</span><br><span class="hljs-comment">         href属性设置连接的地址</span><br><span class="hljs-comment">         target属性设置哪个目标进行跳转</span><br><span class="hljs-comment">            _self     表示当前页面(默认值)</span><br><span class="hljs-comment">            _blank    表示打开新页面来进行跳转</span><br><span class="hljs-comment">    --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://localhost:8080&quot;</span>&gt;</span>百度<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://localhost:8080&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_self&quot;</span>&gt;</span>百度_self<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://localhost:8080&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>百度_blank<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>列表标签</strong></p><p>和浏览器有关的或多或少都会有一些兼容问题，所以换了个浏览器可能会不一样比如下面的type</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--需求1：使用无序，列表方式，把东北F4，赵四，刘能，小沈阳，宋小宝，展示出来</span><br><span class="hljs-comment">        ul 是无序列表</span><br><span class="hljs-comment">            type属性可以修改列表项前面的符号</span><br><span class="hljs-comment">        li  是列表项</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-comment">&lt;!--无序列表--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;none&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>赵四<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>刘能<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>小沈阳<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>宋小宝<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--有序列表,前面会加上序号--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ol</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;none&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>赵四<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>刘能<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>小沈阳<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>宋小宝<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>img标签</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>5.img标签.html<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--需求1：使用img标签显示一张美女的照片。并修改宽高，和边框属性</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        img标签是图片标签,用来显示图片</span><br><span class="hljs-comment">            src属性可以设置图片的路径</span><br><span class="hljs-comment">            width属性设置图片的宽度</span><br><span class="hljs-comment">            height属性设置图片的高度</span><br><span class="hljs-comment">            border属性设置图片边框大小</span><br><span class="hljs-comment">            alt属性设置当指定路径找不到图片时,用来代替显示的文本内容</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        在JavaSE中路径也分为相对路径和绝对路径.</span><br><span class="hljs-comment">            相对路径:从工程名开始算</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">            绝对路径:盘符:/目录/文件名</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        在web中路径分为相对路径和绝对路径两种</span><br><span class="hljs-comment">            相对路径:</span><br><span class="hljs-comment">                .           表示当前文件所在的目录</span><br><span class="hljs-comment">                ..          表示当前文件所在的上一级目录</span><br><span class="hljs-comment">                文件名      表示当前文件所在目录的文件,相当于 ./文件名            ./ 可以省略</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">            绝对路径:</span><br><span class="hljs-comment">                正确格式是:  http://ip:port/工程名/资源路径</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">                错误格式是:  盘符:/目录/文件名</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-comment">&lt;!--下面这些值的单位是像素--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;1.jpg&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;260&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;美女找不到&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../../2.jpg&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;260&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;美女找不到&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../imgs/3.jpg&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;260&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../imgs/4.jpg&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;260&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../imgs/5.jpg&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;260&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../imgs/6.jpg&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;260&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>表格标签</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>表格标签<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">需求1：做一个 带表头的 ，三行，三列的表格，并显示边框</span><br><span class="hljs-comment">需求2：修改表格的宽度，高度，表格的对齐方式，单元格间距。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">table 标签是表格标签</span><br><span class="hljs-comment">border 设置表格标框</span><br><span class="hljs-comment">width 设置表格宽度</span><br><span class="hljs-comment">height 设置表格高度</span><br><span class="hljs-comment">align 设置表格相对于页面的对齐方式</span><br><span class="hljs-comment">cellspacing 设置单元格间距</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">tr 是行标签</span><br><span class="hljs-comment">th是表头标签</span><br><span class="hljs-comment">td  是单元格标签</span><br><span class="hljs-comment">align 设置单元格文本对齐方式</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">b 是加粗标签</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">--&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;300&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;300&quot;</span> <span class="hljs-attr">cellspacing</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>1.1<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--注释上面和下面的两个标签是等价的--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>1.1<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>1.3<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2.1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2.2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2.3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3.1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3.2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3.3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>表格跨行跨列标签</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>7.表格的跨行跨列<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!--需求1：</span><br><span class="hljs-comment">新建一个五行，五列的表格，</span><br><span class="hljs-comment">第一行，第一列的单元格要跨两列，</span><br><span class="hljs-comment">第二行第一列的单元格跨两行，</span><br><span class="hljs-comment">第四行第四列的单元格跨两行两列。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">colspan 属性设置跨列，被作用的单元格横向合并一个</span><br><span class="hljs-comment">rowspan 属性设置跨行,指的是被作用的单元格向下合并一个</span><br><span class="hljs-comment">--&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;500&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;500&quot;</span> <span class="hljs-attr">cellspacing</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>1.1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1.3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1.4<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1.5<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">rowspqn</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>2.1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2.2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2.3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2.4<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2.5<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3.2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3.3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3.4<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3.5<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>4.1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>4.2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>4.3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">rowspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>4.4<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>5.1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>5.2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>5.3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>iframe标签</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>8.iframe标签.html<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>我是一个单独的完整的页面<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--ifarme标签可以在页面上开辟一个小区域显示一个单独的页面</span><br><span class="hljs-comment">            ifarme和a标签组合使用的步骤:</span><br><span class="hljs-comment">                1 在iframe标签中使用name属性定义一个名称</span><br><span class="hljs-comment">                2 在a标签的target属性上设置iframe的name的属性值</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;3.标题标签.html&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;abc&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;0-标签语法.html&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;abc&quot;</span>&gt;</span>0-标签语法.html<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;1.font标签.html&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;abc&quot;</span>&gt;</span>1.font标签.html<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;2.特殊字符.html&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;abc&quot;</span>&gt;</span>2.特殊字符.html<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>表单显示</strong></p><p>什么是表单，表单就是html页面中用来收集用户信息的所有元素的集合，然后把这些信息发送给服务器</p><p>同时用<table>标签让表单像表格一样的形式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>表单的显示<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!--需求1:创建一个个人信息注册的表单界面。包含用户名，密码，确认密码。性别（单选），兴趣爱好（多选），国籍（下拉列表）。</span><br><span class="hljs-comment">隐藏域，自我评价（多行文本域）。重置，提交。--&gt;</span><br><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        form标签就是表单</span><br><span class="hljs-comment">            input type=text     是文件输入框  value设置默认显示内容</span><br><span class="hljs-comment">            input type=password 是密码输入框  value设置默认显示内容</span><br><span class="hljs-comment">            input type=radio    是单选框    name属性可以对其进行分组   checked=&quot;checked&quot;表示默认选中</span><br><span class="hljs-comment">            input type=checkbox 是复选框   checked=&quot;checked&quot;表示默认选中</span><br><span class="hljs-comment">            input type=reset    是重置按钮      value属性修改按钮上的文本</span><br><span class="hljs-comment">            input type=submit   是提交按钮      value属性修改按钮上的文本</span><br><span class="hljs-comment">            input type=button   是按钮          value属性修改按钮上的文本</span><br><span class="hljs-comment">            input type=file     是文件上传域</span><br><span class="hljs-comment">            input type=hidden   是隐藏域    当我们要发送某些信息，而这些信息，不需要用户参与，就可以使用隐藏域（提交的时候同时发送给服务器）</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">            select 标签是下拉列表框</span><br><span class="hljs-comment">            option 标签是下拉列表框中的选项 selected=&quot;selected&quot;设置默认选中</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">            textarea 表示多行文本输入框 （起始标签和结束标签中的内容是默认值）</span><br><span class="hljs-comment">                rows 属性设置可以显示几行的高度</span><br><span class="hljs-comment">                cols 属性设置每行可以显示几个字符宽度</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span>用户注册<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span> 用户名称：<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;默认值&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span> 用户密码：<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;abc&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>确认密码：<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;abc&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>性别：<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span>/&gt;</span>男<br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">&quot;checked&quot;</span>  /&gt;</span>女<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span> 兴趣爱好：<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">&quot;checked&quot;</span> /&gt;</span>Java<br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> /&gt;</span>JavaScript<br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> /&gt;</span>C++<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>国籍：<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>--请选择国籍--<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">selected</span>=<span class="hljs-string">&quot;selected&quot;</span>&gt;</span>中国<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>美国<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>小日本<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>自我评价：<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;20&quot;</span>&gt;</span>我才是默认值<span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;reset&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>文件上传<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>表单提交的细节</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>表单的显示<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        form标签是表单标签</span><br><span class="hljs-comment">            action属性设置提交的服务器地址</span><br><span class="hljs-comment">            method属性设置提交的方式GET(默认值)或POST</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        表单提交的时候，数据没有发送给服务器的三种情况：</span><br><span class="hljs-comment">            1、表单项没有name属性值(可是我测试的真实情况是没有也可以)</span><br><span class="hljs-comment">            2、单选、复选（下拉列表中的option标签）都需要添加value属性，以便发送给服务器</span><br><span class="hljs-comment">            3、表单项不在提交的form标签中</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        GET请求的特点是：</span><br><span class="hljs-comment">            1、浏览器地址栏中的地址是：action属性[+?+请求参数]</span><br><span class="hljs-comment">                请求参数的格式是：name=value&amp;name=value</span><br><span class="hljs-comment">            2、不安全</span><br><span class="hljs-comment">            3、它有数据长度的限制</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        POST请求的特点是：</span><br><span class="hljs-comment">            1、浏览器地址栏中只有action属性值</span><br><span class="hljs-comment">            2、相对于GET请求要安全</span><br><span class="hljs-comment">            3、理论上没有数据长度的限制</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://www.baidu.com&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;action&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;login&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span>用户注册<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span> 用户名称：<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;默认值&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span> 用户密码：<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;abc&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>性别：<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;boy&quot;</span>/&gt;</span>男<br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">&quot;checked&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;girl&quot;</span> /&gt;</span>女<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span> 兴趣爱好：<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">&quot;checked&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;java&quot;</span>/&gt;</span>Java<br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;js&quot;</span>/&gt;</span>JavaScript<br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;cpp&quot;</span>/&gt;</span>C++<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>国籍：<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;country&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;none&quot;</span>&gt;</span>--请选择国籍--<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;cn&quot;</span> <span class="hljs-attr">selected</span>=<span class="hljs-string">&quot;selected&quot;</span>&gt;</span>中国<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;usa&quot;</span>&gt;</span>美国<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jp&quot;</span>&gt;</span>小日本<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>自我评价：<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;desc&quot;</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;20&quot;</span>&gt;</span>我才是默认值<span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;reset&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>其他标签div span  p等等</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>其他标签<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--需求1：div、span、p标签的演示</span><br><span class="hljs-comment">            div标签       默认独占一行</span><br><span class="hljs-comment">            span标签      它的长度是封装数据的长度</span><br><span class="hljs-comment">            p段落标签     默认会在段落的上方和下方各空出一行来（如果已有就不再空）</span><br><span class="hljs-comment">        --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div标签1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div标签2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>span标签1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>span标签2<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>p段落标签1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>p段落标签2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><p>css是层叠样式表单，是用于控制网页样式并允许将样式信息与网页内容分割的一种标记性语言</p><p>选择器：1.浏览器根据选择器绝顶受css样式影响的html元素&lt;标签&gt;</p><p>属性：是你要改变的样式名，并且每一个属性都有一个值，属性和值被冒号分开，并由花括号包裹，这样就是一个完整的声明，例如</p><p>p{color:blue}</p><p>多个声明：如果要定义不止一个声明，则需要用分号将每个声明分开，虽然最后一条声明的最后可以不加分号，但尽量在每条声明的末尾加上分号</p><p>例如：</p><p>p{</p><p>color:red;</p><p>font-size:30px;</p><p>}</p><p>不过一般一行只写一个属性   </p><p>css注释&#x2F;*     *&#x2F;</p><h4 id="CSS和HTML的结合方式"><a href="#CSS和HTML的结合方式" class="headerlink" title="CSS和HTML的结合方式"></a>CSS和HTML的结合方式</h4><p><strong>结合方式一</strong></p><p>在标签的属性上设置“key:value value”,修改标签样式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--需求1：分别定义两个 div、span标签，分别修改每个 div 标签的样式为：边框1个像素，实线，红色。--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;border: 1px solid red;&quot;</span>&gt;</span>div标签1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;border: 1px solid red;&quot;</span>&gt;</span>div标签2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;border: 1px solid red;&quot;</span>&gt;</span>span标签1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;border: 1px solid red;&quot;</span>&gt;</span>span标签2<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>缺点：1.如果标签写多了，样式多了，代码量太大</p><p>​            2.可读性非常差</p><p>​            3.Css代码没有什么复用性可言</p><p><strong>结合方式二</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--style标签专门用来定义css样式代码--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-comment">/* 需求1：分别定义两个 div、span标签，分别修改每个 div 标签的样式为：边框1个像素，实线，红色。*/</span></span><br><span class="language-css">        <span class="hljs-selector-tag">div</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid red;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">span</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid red;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div标签1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div标签2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>span标签1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>span标签2<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>缺点：1.只能在一个页面内复用代码，不能再多个页面中复用css代码</p><p>​          2.维护起来不方便，实际的项目中会有成千上万的也买你，要到每个页面中去修改，工作量太大了</p><p><strong>结合方式三</strong></p><p>把css样式写成一个单独的css文件，再通过link标签引入即可复用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--link标签专门用来引入css样式代码--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;1.css&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div标签1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div标签2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>span标签1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>span标签2<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="标签名选择器"><a href="#标签名选择器" class="headerlink" title="标签名选择器"></a>标签名选择器</h4><p>标签名选择器的格式是</p><p>标签名{</p><p>属性:值</p><p>}</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>CSS选择器<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css">      <span class="hljs-selector-tag">div</span>&#123;</span><br><span class="language-css">         <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid yellow;</span><br><span class="language-css">         <span class="hljs-attribute">color</span>: blue;</span><br><span class="language-css">         <span class="hljs-attribute">font-size</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">      &#125;</span><br><span class="language-css">      <span class="hljs-selector-tag">span</span>&#123;</span><br><span class="language-css">         <span class="hljs-attribute">border</span>: <span class="hljs-number">5px</span> dashed  blue;</span><br><span class="language-css">         <span class="hljs-attribute">color</span>: yellow;</span><br><span class="language-css">         <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">      &#125;</span><br><span class="language-css">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>   <span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">   需求1：在所有div标签上修改字体颜色为蓝色，字体大小30个像素。边框为1像素黄色实线。</span><br><span class="hljs-comment">   并且修改所有span 标签的字体颜色为黄色，字体大小20个像素。边框为5像素蓝色虚线。</span><br><span class="hljs-comment">    --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div标签1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div标签2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>span标签1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>span标签2<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>标签名选择器可以决定哪些标签被动的使用这个样式</p><h4 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h4><p>id选择器的格式是：</p><p>#id 属性值{</p><p>属性:值</p><p>}</p><p>id选择器，可以让我们通过id属性选择性的去使用这个样式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>ID选择器<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css"></span><br><span class="language-css">      <span class="hljs-selector-id">#id001</span>&#123;</span><br><span class="language-css">         <span class="hljs-attribute">color</span>: blue;</span><br><span class="language-css">         <span class="hljs-attribute">font-size</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">         <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> yellow solid;</span><br><span class="language-css">      &#125;</span><br><span class="language-css"></span><br><span class="language-css">      <span class="hljs-selector-id">#id002</span>&#123;</span><br><span class="language-css">         <span class="hljs-attribute">color</span>: red;</span><br><span class="language-css">         <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">         <span class="hljs-attribute">border</span>: <span class="hljs-number">5px</span> blue dotted ;</span><br><span class="language-css">      &#125;</span><br><span class="language-css"></span><br><span class="language-css">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>    <br>   <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">   需求1：分别定义两个 div 标签，</span><br><span class="hljs-comment">   第一个div 标签定义 id 为 id001 ，然后根据id 属性定义css样式修改字体颜色为蓝色，</span><br><span class="hljs-comment">   字体大小30个像素。边框为1像素黄色实线。</span><br><span class="hljs-comment">   </span><br><span class="hljs-comment">   第二个div 标签定义 id 为 id002 ，然后根据id 属性定义css样式 修改的字体颜色为红色，字体大小20个像素。</span><br><span class="hljs-comment">   边框为5像素蓝色点线。</span><br><span class="hljs-comment">    --&gt;</span><br>   <br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;id002&quot;</span>&gt;</span>div标签1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;id001&quot;</span>&gt;</span>div标签2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="class选择器"><a href="#class选择器" class="headerlink" title="class选择器"></a>class选择器</h4><p>class 类型选择器的格式是</p><p>.class属性值{</p><p>属性:值</p><p>}</p><p>class类型选择器可以通过class属性有效的选择地去使用这个样式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>class类型选择器<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.class01</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">color</span>: blue;</span><br><span class="language-css"><span class="hljs-attribute">font-size</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css"><span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid yellow;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.class02</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">color</span>: grey;</span><br><span class="language-css"><span class="hljs-attribute">font-size</span>: <span class="hljs-number">26px</span>;</span><br><span class="language-css"><span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid red;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">需求1：修改 class 属性值为 class01的 span 或 div 标签，字体颜色为蓝色，字体大小30个像素。边框为1像素黄色实线。</span><br><span class="hljs-comment">需求2：修改 class 属性值为 class02的 div 标签，字体颜色为灰色，字体大小26个像素。边框为1像素红色实线。</span><br><span class="hljs-comment"> --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;class01&quot;</span>&gt;</span>div标签class01<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;class02&quot;</span>&gt;</span>div标签<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;class02&quot;</span>&gt;</span>span标签class01<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>span标签2<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br><br></code></pre></td></tr></table></figure><h4 id="组合选择器"><a href="#组合选择器" class="headerlink" title="组合选择器"></a>组合选择器</h4><p>组合选择器的格式是：</p><p>选择器1,选择器2,选择器n{</p><p>属性:值</p><p>}</p><p>让多个选择器或者多种类型的选择器共用同一块代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>class类型选择器<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.class01</span> , <span class="hljs-selector-id">#id01</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: blue;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>:  yellow <span class="hljs-number">1px</span> solid;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">需求1：修改 class=&quot;class01&quot; 的div 标签 和 id=&quot;id01&quot; 所有的span标签，</span><br><span class="hljs-comment">字体颜色为蓝色，字体大小20个像素。边框为1像素黄色实线。</span><br><span class="hljs-comment"> --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;id01&quot;</span>&gt;</span>div标签class01<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;class01&quot;</span>&gt;</span>span 标签<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div标签<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div标签id01<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br><br></code></pre></td></tr></table></figure><h4 id="css常用样式"><a href="#css常用样式" class="headerlink" title="css常用样式"></a>css常用样式</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>06-css常用样式.html<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">div</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: red;  红色</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> yellow solid; 边框属性</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;   宽度</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;   高度</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: green;  背景颜色</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">30px</span>;  字体大小</span><br><span class="language-css">            <span class="hljs-attribute">margin-left</span>: auto;   这个和下面那个两行表示<span class="hljs-selector-tag">div</span>居中</span><br><span class="language-css">            <span class="hljs-attribute">margin-right</span>: auto;</span><br><span class="language-css">            <span class="hljs-attribute">text-align</span>: center;  文字居中</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">table</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> red solid;   设置边框</span><br><span class="language-css">            <span class="hljs-attribute">border-collapse</span>: collapse;  将边框合并，就是<span class="hljs-selector-tag">td</span>单元格的边框和表格的边框合并</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">td</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> red solid;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">a</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">text-decoration</span>: none;  超链接去下划线</span><br><span class="language-css"></span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">ul</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">list-style</span>: none; 列表去除修饰</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>11111111111<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>11111111111<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>11111111111<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>11111111111<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>11111111111<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1.1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://www.baidu.com&quot;</span>&gt;</span>百度<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是div标签<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h3><h3 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h3><p>jQuery就是javascript和查询，他就是辅助javascript开发的js类库</p><p>jQuery 的核心思想就是write less ，do more 所以他实现了很多浏览器的兼容问题</p><p>基础使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html <span class="hljs-variable constant_">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Insert title here<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">// window.onload = function () &#123;</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//     var btnObj = document.getElementById(&quot;btnId&quot;);</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//     // alert(btnObj);//[object HTMLButtonElement]   ====&gt;&gt;&gt;  dom对象</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//     btnObj.onclick = function () &#123;</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//        alert(&quot;js 原生的单击事件&quot;);</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//     &#125;</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">// &#125;</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">      $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; <span class="hljs-comment">// 表示页面加载完成 之后，相当 window.onload = function () &#123;&#125;</span></span></span><br><span class="language-javascript"><span class="language-xml">         <span class="hljs-keyword">var</span> $btnObj = $(<span class="hljs-string">&quot;#btnId&quot;</span>); <span class="hljs-comment">// 表示按id查询标签对象，jQuery对象变量都加一个$</span></span></span><br><span class="language-javascript"><span class="language-xml">         $btnObj.<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; <span class="hljs-comment">// 绑定单击事件</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;jQuery 的单击事件&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">         &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btnId&quot;</span>&gt;</span>SayHello<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>jQuery中的$是一个函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html <span class="hljs-variable constant_">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Insert title here<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">   <span class="hljs-comment">&lt;!--引入jQuery文件--&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-comment">//使用$()代替window.onload</span></span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//使用选择器获取按钮对象，随后绑定单击响应函数</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//表示按id查询对象</span></span></span><br><span class="language-javascript"><span class="language-xml">      $(<span class="hljs-string">&quot;#btnId&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">         <span class="hljs-comment">//弹出Hello</span></span></span><br><span class="language-javascript"><span class="language-xml">         <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;Hello&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">   &#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btnId&quot;</span>&gt;</span>SayHello<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>为按钮添加响应函数</p><p>1.使用jQuery查询到标签对象</p><p>2.使用标签对象.click(function(){});</p><h4 id="介绍"><a href="#介绍" class="headerlink" title="$介绍"></a>$介绍</h4><p>$是jQuery的核心函数，能完成jQuery的很多功能，$()就是调用$这个函数</p><p>1.传入的参数是函数时</p><p>表示页面加载完成之后。相当于window.onload&#x3D;function(){};</p><p>2.传入的参数为HTML字符串时，会对我们创建这个html标签对象</p><p>3.传入参数为【选择器字符串时】，</p><p>$(“#id属性值”)：id选择器，根据id查询标签对象</p><p>$(“标签名”):   标签名选择器，根据指定的标签名查询标签对象</p><p>$(“.class属性值”):类型选择器，根据class属性查询标签对象</p><p>4.传入的参数是dom对象，将这个dom对象转换为jQuery对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html <span class="hljs-variable constant_">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Insert title here<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-comment">//核心函数的4个作用</span></span></span><br><span class="language-javascript"><span class="language-xml">    $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// alert(&quot;页面加载完成之后，自动调用&quot;);</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//将生成的html标签对象直接加给了body标签，这样就可以显示</span></span></span><br><span class="language-javascript"><span class="language-xml">        $(<span class="hljs-string">&quot;    &lt;div&gt;&quot;</span> +</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-string">&quot;        &lt;span&gt;div-span1&lt;/span&gt;&quot;</span> +</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-string">&quot;        &lt;span&gt;div-span2&lt;/span&gt;&quot;</span> +</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-string">&quot;    &lt;/div&gt;&quot;</span>).<span class="hljs-title function_">appendTo</span>(<span class="hljs-string">&quot;body&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// alert($(&quot;button&quot;).length);</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> btnObj = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;btn01&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// alert(btnObj);</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// alert( $(btnObj) );</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// alert( $(&quot;&lt;h1&gt;&lt;/h1&gt;&quot;) );</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-title function_">alert</span>($(<span class="hljs-string">&quot;button&quot;</span>));</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-comment">//传入参数为[函数]时：在文档加载完成后执行这个函数</span></span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-comment">//传入参数为[HTML字符串]时：根据这个字符串创建元素节点对象，创建的是jQuery对象</span></span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-comment">//传入参数为[选择器字符串]时：根据这个字符串查找元素节点对象，创建的是jQuery对象</span></span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-comment">//传入参数为[DOM对象]时：将DOM对象包装为jQuery对象返回</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn01&quot;</span>&gt;</span>按钮1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮3<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="jQuery对象和dom对象区分"><a href="#jQuery对象和dom对象区分" class="headerlink" title="jQuery对象和dom对象区分"></a>jQuery对象和dom对象区分</h4><p>DOM对象</p><p>1.通过各种方法查询出来的标签对象是dom对象</p><p>jQuery对象</p><p>1.通过jQuery提供的API创建的对象，是jQuery对象      alert( $(“<h1></h1>“) );</p><p>2.通过JQuery包装的Dom对象，也是JQuery对象         alert( $(btnObj) );  btnObj是一个dom对象</p><p>3.它通过JQuery提供的API查询到的对象，是JQuery对象     alert($(“button”));</p><p>JQuery对象alert出来的效果是[Object Object]</p><h4 id="jQuery对象的本质"><a href="#jQuery对象的本质" class="headerlink" title="jQuery对象的本质"></a>jQuery对象的本质</h4><p>jQuery对象是            dom对象的数组+jQuery提供的一系列功能函数</p><h4 id="jQuery对象和Dom对象的使用区别"><a href="#jQuery对象和Dom对象的使用区别" class="headerlink" title="jQuery对象和Dom对象的使用区别"></a>jQuery对象和Dom对象的使用区别</h4><p>jQuery对象不能使用dom对象的属性和方法</p><p>dom对象也不能使用jQuery对象的属性和方法</p><h4 id="Dom对象和JQuery对象之间的相互转换"><a href="#Dom对象和JQuery对象之间的相互转换" class="headerlink" title="Dom对象和JQuery对象之间的相互转换"></a>Dom对象和JQuery对象之间的相互转换</h4><p>1.dom对象转化为jQUery对象</p><p>现有Dom对象，然后  $(Dom)对象就可以转换为jQuery对象</p><p>2.jQuery对象转为dom对象</p><p>现有jQuery对象，jQuery对象[下标]取出相应的dom对象</p><!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"><html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><title>Insert title here</title><script type="text/javascript" src="../script/jquery-1.7.2.js"></script><script type="text/javascript">​    <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs awk"><br><br>    <span class="hljs-regexp">//</span>jQuery对象的本质的演示<br><br>   $(<span class="hljs-keyword">function</span>()&#123;<br>      <span class="hljs-regexp">//</span>testDiv.css(<span class="hljs-string">&quot;color&quot;</span>,<span class="hljs-string">&quot;red&quot;</span>)<br>      <span class="hljs-regexp">//</span>testDiv.style.color = <span class="hljs-string">&quot;blue&quot;</span>;<br><br>      <span class="hljs-regexp">//</span> var arr = [<span class="hljs-number">12</span>,<span class="hljs-string">&quot;abc&quot;</span>,true];<br>      <span class="hljs-regexp">//</span><br>      <span class="hljs-regexp">//</span> var <span class="hljs-variable">$btns</span> = $(<span class="hljs-string">&quot;button&quot;</span>);<br>      <span class="hljs-regexp">//</span><br>      <span class="hljs-regexp">//</span> <span class="hljs-keyword">for</span> (var i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-variable">$btns</span>.length; i++)&#123;<br>      <span class="hljs-regexp">//</span>     alert(<span class="hljs-variable">$btns</span>[i]);<br>      <span class="hljs-regexp">//</span> &#125;<br><br><br><br>    <span class="hljs-regexp">//</span>jQuery和Dom的使用区别的演示<br>       <span class="hljs-regexp">//</span>document.getElementById(<span class="hljs-string">&quot;testDiv&quot;</span>).innerHTML = <span class="hljs-string">&quot;这是dom对象的属性InnerHTML&quot;</span>;<br>       <span class="hljs-regexp">//</span>$(<span class="hljs-string">&quot;#testDiv&quot;</span>).innerHTML = <span class="hljs-string">&quot;这是dom对象的属性InnerHTML&quot;</span>;<br>    <br>       <span class="hljs-regexp">//</span>$(<span class="hljs-string">&quot;#testDiv&quot;</span>).click(<span class="hljs-keyword">function</span> () &#123;<br>         <span class="hljs-regexp">//</span>alert(<span class="hljs-string">&quot;click()是jQuery对象的方法&quot;</span>);<br>       <span class="hljs-regexp">//</span>&#125;);<br>    <br>       <span class="hljs-regexp">//</span>document.getElementById(<span class="hljs-string">&quot;testDiv&quot;</span>).click(<span class="hljs-keyword">function</span> () &#123;<br>         <span class="hljs-regexp">//</span>alert(<span class="hljs-string">&quot;click()是jQuery对象的方法&quot;</span>);<br>       <span class="hljs-regexp">//</span>&#125;);<br>       <br>       <br>       <span class="hljs-regexp">//</span>下面是jQuery对象转换为dom对象的演示，用下标来取出<br>      <span class="hljs-regexp">//</span> alert( $(document.getElementById(<span class="hljs-string">&quot;testDiv&quot;</span>))[<span class="hljs-number">0</span>] );<br>    <br>      alert( $(<span class="hljs-string">&quot;button:first&quot;</span>) );<br><br>   &#125;);<br><br>&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br><br>   &lt;div id=<span class="hljs-string">&quot;testDiv&quot;</span>&gt;Atguigu is Very Good!&lt;/div&gt;<br><br>   &lt;button id=<span class="hljs-string">&quot;dom2dom&quot;</span>&gt;使用DOM对象调用DOM方法&lt;/button&gt;<br>   &lt;button id=<span class="hljs-string">&quot;dom2jQuery&quot;</span>&gt;使用DOM对象调用jQuery方法&lt;/button&gt;<br>   &lt;button id=<span class="hljs-string">&quot;jQuery2jQuery&quot;</span>&gt;使用jQuery对象调用jQuery方法&lt;/button&gt;<br>   &lt;button id=<span class="hljs-string">&quot;jQuery2dom&quot;</span>&gt;使用jQuery对象调用DOM方法&lt;/button&gt;<br><br><br><br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h4 id="jQuery基本选择器"><a href="#jQuery基本选择器" class="headerlink" title="jQuery基本选择器"></a>jQuery基本选择器</h4><p>基本选择器</p><p>#ID  选择器：根据id查找标签对象</p><p>.class  选择器：根据class查找标签对象</p><p>element  选择器：根据标签名查找标签对象</p><p>*选择器：表示任意的，所有的元素</p><p>selector1,selector2 组合器：合并选择器1,选择器2的结果并返回</p><p>特殊的</p><p>p.myClass表示标签名必须是p标签，而且class类型还要是myClass</p><p>基本选择器的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> <span class="hljs-variable constant_">HTML</span> <span class="hljs-variable constant_">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/strict.dtd&quot;</span>&gt;<br>&lt;html&gt;<br>   &lt;head&gt;<br>      &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;<br>      &lt;title&gt;Untitled Document&lt;/title&gt;<br>      &lt;style type=&quot;text/css&quot;&gt;<br>         div, span, p &#123;<br>             width: 140px;<br>             height: 140px;<br>             margin: 5px;<br>             background: #aaa;<br>             border: #000 1px solid;<br>             float: left;<br>             font-size: 17px;<br>             font-family: Verdana;<br>         &#125;<br>         &lt;!--应该是div标签且class为mini--&gt;<br>         div.mini &#123;<br>             width: 55px;<br>             height: 55px;<br>             background-color: #aaa;<br>             font-size: 12px;<br>         &#125;<br>         <br>         div.hide &#123;<br>             display: none;<br>         &#125;<br>      &lt;/style&gt;<br>      &lt;script type=&quot;text/javascript&quot; src=&quot;../script/jquery-1.7.2.js&quot;&gt;&lt;/script&gt;<br>      &lt;script type=&quot;text/javascript&quot;&gt;<br>         <br>            $(function () &#123;<br>               //1.选择 id 为 one 的元素 &quot;background-color&quot;,&quot;#bbffaa&quot;<br>               $(&quot;#btn1&quot;).click(function () &#123;<br>                  // css() 方法 可以设置和获取样式,第二个参数是颜色属性的值<br>                  $(&quot;#one&quot;).css(&quot;background-color&quot;,&quot;#bbffaa&quot;);<br>               &#125;);<br><br><br>               //2.选择 class 为 mini 的所有元素<br>               $(&quot;#btn2&quot;).click(function () &#123;<br>                  $(&quot;.mini&quot;).css(&quot;background-color&quot;,&quot;#bbffaa&quot;);<br>               &#125;);<br><br>               //3.选择 元素名是 div 的所有元素<br>               $(&quot;#btn3&quot;).click(function () &#123;<br>                  $(&quot;div&quot;).css(&quot;background-color&quot;,&quot;#bbffaa&quot;);<br>               &#125;);<br><br>               //4.选择所有的元素<br>               $(&quot;#btn4&quot;).click(function () &#123;<br>                  $(&quot;*&quot;).css(&quot;background-color&quot;,&quot;#bbffaa&quot;);<br>               &#125;);<br><br>               //5.选择所有的 span 元素和id为two的元素<br>               $(&quot;#btn5&quot;).click(function () &#123;<br>                  $(&quot;span,#two&quot;).css(&quot;background-color&quot;,&quot;#bbffaa&quot;);<br>               &#125;);<br><br>            &#125;);<br><br>      &lt;/script&gt;<br>   &lt;/head&gt;<br>   &lt;body&gt;<br>&lt;!--   &lt;div&gt;<br>      &lt;h1&gt;基本选择器&lt;/h1&gt;<br>   &lt;/div&gt;  --&gt;   <br>      &lt;input type=&quot;button&quot; value=&quot;选择 id 为 one 的元素&quot; id=&quot;btn1&quot; /&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;选择 class 为 mini 的所有元素&quot; id=&quot;btn2&quot; /&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;选择 元素名是 div 的所有元素&quot; id=&quot;btn3&quot; /&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;选择 所有的元素&quot; id=&quot;btn4&quot; /&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;选择 所有的 span 元素和id为two的元素&quot; id=&quot;btn5&quot; /&gt;<br>      <br>      &lt;br&gt;<br>      &lt;div class=&quot;one&quot; id=&quot;one&quot;&gt;<br>         id 为 one,class 为 one 的div<br>         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>      &lt;/div&gt;<br>      &lt;div class=&quot;one&quot; id=&quot;two&quot; title=&quot;test&quot;&gt;<br>         id为two,class为one,title为test的div<br>         &lt;div class=&quot;mini&quot; title=&quot;other&quot;&gt;class为mini,title为other&lt;/div&gt;<br>         &lt;div class=&quot;mini&quot; title=&quot;test&quot;&gt;class为mini,title为test&lt;/div&gt;<br>      &lt;/div&gt;<br>      &lt;div class=&quot;one&quot;&gt;<br>         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>         &lt;div class=&quot;mini&quot;&gt;&lt;/div&gt;<br>      &lt;/div&gt;<br>      &lt;div class=&quot;one&quot;&gt;<br>         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>         &lt;div class=&quot;mini&quot; title=&quot;tesst&quot;&gt;class为mini,title为tesst&lt;/div&gt;<br>      &lt;/div&gt;<br>       &lt;!--display:none就是不显示--&gt;<br>      &lt;div style=&quot;display:none;&quot; class=&quot;none&quot;&gt;style的display为&quot;none&quot;的div&lt;/div&gt;<br>      &lt;div class=&quot;hide&quot;&gt;class为&quot;hide&quot;的div&lt;/div&gt;<br>      &lt;div&gt;<br>         包含input的type为&quot;hidden&quot;的div&lt;input type=&quot;hidden&quot; size=&quot;8&quot;&gt;<br>      &lt;/div&gt;<br>      &lt;span class=&quot;one&quot; id=&quot;span&quot;&gt;^^span元素^^&lt;/span&gt;<br>   &lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h4 id="jQuery层级选择器"><a href="#jQuery层级选择器" class="headerlink" title="jQuery层级选择器"></a>jQuery层级选择器</h4><p>ancestor descendant 后代选择器 ：在给定的祖先元素下匹配所有的后代元素 </p><p>parent &gt; child 子元素选择器：在给定的父元素下匹配所有的子元素 </p><p>prev + next 相邻元素选择器：匹配所有紧接在 prev 元素后的 next 元素 </p><p>prev ~ sibings 之后的兄弟元素选择器：匹配 prev 元素之后的所有 siblings 元素</p><p>儿子元素和孙子元素是有区别的，而且后代元素包括所有的后代包括儿子孙子</p><p>$(“lable + input”) 所有紧跟在lable标签后面的input标签，必须是紧跟</p><p>$(“form &gt; input”)匹配表单中所有的子级input元素，只有儿子辈的，没有孙子辈的</p><p>$(“form input”)匹配form后代的所有的input元素</p><p>$(“form ~input”)找到form后面所有与form同辈的input元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> <span class="hljs-variable constant_">HTML</span> <span class="hljs-variable constant_">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/strict.dtd&quot;</span>&gt;<br>&lt;html&gt;<br>   &lt;head&gt;<br>      &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;<br>      &lt;title&gt;Untitled Document&lt;/title&gt;<br>      &lt;style type=&quot;text/css&quot;&gt;<br>         div, span, p &#123;<br>             width: 140px;<br>             height: 140px;<br>             margin: 5px;<br>             background: #aaa;<br>             border: #000 1px solid;<br>             float: left;<br>             font-size: 17px;<br>             font-family: Verdana;<br>         &#125;<br>         <br>         div.mini &#123;<br>             width: 55px;<br>             height: 55px;<br>             background-color: #aaa;<br>             font-size: 12px;<br>         &#125;<br>         <br>         div.hide &#123;<br>             display: none;<br>         &#125;        <br>      &lt;/style&gt;<br>      &lt;script type=&quot;text/javascript&quot; src=&quot;../script/jquery-1.7.2.js&quot;&gt;&lt;/script&gt;<br>      &lt;script type=&quot;text/javascript&quot;&gt;<br>         $(document).ready(function()&#123;  //$(function()&#123;&#125;);的全写<br>            //1.选择 body 内的所有 div 元素<br>            $(&quot;#btn1&quot;).click(function()&#123;<br>               $(&quot;body div&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);<br>            &#125;);<br><br>            //2.在 body 内, 选择div子元素  <br>            $(&quot;#btn2&quot;).click(function()&#123;<br>               $(&quot;body &gt; div&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);<br>            &#125;);<br><br>            //3.选择 id 为 one 的下一个 div 元素 <br>            $(&quot;#btn3&quot;).click(function()&#123;<br>               $(&quot;#one+div&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);<br>            &#125;);<br><br>            //4.选择 id 为 two 的元素后面的所有 div 兄弟元素<br>            $(&quot;#btn4&quot;).click(function()&#123;<br>               $(&quot;#two~div&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);<br>            &#125;);<br>         &#125;);<br>      &lt;/script&gt;<br>   &lt;/head&gt;<br>   &lt;body&gt; <br>   <br>&lt;!--   &lt;div&gt;<br>      &lt;h1&gt;层级选择器:根据元素的层级关系选择元素&lt;/h1&gt;<br>      ancestor descendant  ：<br>      parent &gt; child           ：<br>      prev + next          ：<br>      prev ~ siblings       ：<br>   &lt;/div&gt;  --&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;选择 body 内的所有 div 元素&quot; id=&quot;btn1&quot; /&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;在 body 内, 选择div子元素&quot; id=&quot;btn2&quot; /&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;选择 id 为 one 的下一个 div 元素&quot; id=&quot;btn3&quot; /&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;选择 id 为 two 的元素后面的所有 div 兄弟元素&quot; id=&quot;btn4&quot; /&gt;<br>      &lt;br&gt;&lt;br&gt;<br>      &lt;div class=&quot;one&quot; id=&quot;one&quot;&gt;<br>         id 为 one,class 为 one 的div<br>         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>      &lt;/div&gt;<br>      &lt;div class=&quot;one&quot; id=&quot;two&quot; title=&quot;test&quot;&gt;<br>         id为two,class为one,title为test的div<br>         &lt;div class=&quot;mini&quot; title=&quot;other&quot;&gt;class为mini,title为other&lt;/div&gt;<br>         &lt;div class=&quot;mini&quot; title=&quot;test&quot;&gt;class为mini,title为test&lt;/div&gt;<br>      &lt;/div&gt;<br>      &lt;div class=&quot;one&quot;&gt;<br>         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>         &lt;div class=&quot;mini&quot;&gt;&lt;/div&gt;<br>      &lt;/div&gt;<br>      &lt;div class=&quot;one&quot;&gt;<br>         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>         &lt;div class=&quot;mini&quot; title=&quot;tesst&quot;&gt;class为mini,title为tesst&lt;/div&gt;<br>      &lt;/div&gt;<br>      &lt;div style=&quot;display:none;&quot; class=&quot;none&quot;&gt;style的display为&quot;none&quot;的div&lt;/div&gt;<br>      &lt;div class=&quot;hide&quot;&gt;class为&quot;hide&quot;的div&lt;/div&gt;<br>      &lt;div&gt;<br>         包含input的type为&quot;hidden&quot;的div&lt;input type=&quot;hidden&quot; size=&quot;8&quot;&gt;<br>      &lt;/div&gt;<br>      &lt;span id=&quot;span&quot;&gt;^^span元素^^&lt;/span&gt;<br>   &lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h4 id="jQuery基本过滤选择器"><a href="#jQuery基本过滤选择器" class="headerlink" title="jQuery基本过滤选择器"></a>jQuery基本过滤选择器</h4><p>:first 获取第一个元素 </p><p>:last 获取最后个元素 </p><p>:not(selector) 去除所有与给定选择器匹配的元素 </p><p>:even 匹配所有索引值为偶数的元素，从 0 开始计数</p><p> :odd 匹配所有索引值为奇数的元素，从 0 开始计数 </p><p>:eq(index) 匹配一个给定索引值的元素 </p><p>:gt(index) 匹配所有大于给定索引值的元素</p><p>:lt(index) 匹配所有小于给定索引值的元素</p><p> :header 匹配如 h1, h2, h3 之类的标题元素 </p><p>:animated 匹配所有正在执行动画效果的元</p><p>:hidden匹配被隐藏起来的元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> <span class="hljs-variable constant_">HTML</span> <span class="hljs-variable constant_">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/strict.dtd&quot;</span>&gt;<br>&lt;html&gt;<br>   &lt;head&gt;<br>      &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;<br>      &lt;title&gt;Untitled Document&lt;/title&gt;<br>      &lt;style type=&quot;text/css&quot;&gt;<br>         div, span, p &#123;<br>             width: 140px;<br>             height: 140px;<br>             margin: 5px;<br>             background: #aaa;<br>             border: #000 1px solid;<br>             float: left;<br>             font-size: 17px;<br>             font-family: Verdana;<br>         &#125;<br>         <br>         div.mini &#123;<br>             width: 55px;<br>             height: 55px;<br>             background-color: #aaa;<br>             font-size: 12px;<br>         &#125;<br>         <br>         div.hide &#123;<br>             display: none;<br>         &#125;        <br>      &lt;/style&gt;<br>      &lt;script type=&quot;text/javascript&quot; src=&quot;../script/jquery-1.7.2.js&quot;&gt;&lt;/script&gt;<br>      &lt;script type=&quot;text/javascript&quot;&gt;<br>      //这是一个动画的代码<br>         $(document).ready(function()&#123;<br>            function anmateIt()&#123;<br>               $(&quot;#mover&quot;).slideToggle(&quot;slow&quot;, anmateIt);<br>            &#125;<br>            anmateIt();<br>         &#125;);<br>         <br>         $(document).ready(function()&#123;<br>            //1.选择第一个 div 元素  <br>            $(&quot;#btn1&quot;).click(function()&#123;<br>               $(&quot;div:first&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);<br>            &#125;);<br><br>            //2.选择最后一个 div 元素<br>            $(&quot;#btn2&quot;).click(function()&#123;<br>               $(&quot;div:last&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);<br>            &#125;);<br><br>            //3.选择class不为 one 的所有 div 元素<br>            $(&quot;#btn3&quot;).click(function()&#123;<br>               $(&quot;div:not(.one)&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);<br>            &#125;);<br><br>            //4.选择索引值为偶数的 div 元素<br>            $(&quot;#btn4&quot;).click(function()&#123;<br>               $(&quot;div:even&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);<br>            &#125;);<br><br>            //5.选择索引值为奇数的 div 元素<br>            $(&quot;#btn5&quot;).click(function()&#123;<br>               $(&quot;div:odd&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);<br>            &#125;);<br><br>            //6.选择索引值为大于 3 的 div 元素<br>            $(&quot;#btn6&quot;).click(function()&#123;<br>               $(&quot;div:gt(3)&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);<br>            &#125;);<br><br>            //7.选择索引值为等于 3 的 div 元素<br>            $(&quot;#btn7&quot;).click(function()&#123;<br>               $(&quot;div:eq(3)&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);<br>            &#125;);<br><br>            //8.选择索引值为小于 3 的 div 元素<br>            $(&quot;#btn8&quot;).click(function()&#123;<br>               $(&quot;div:lt(3)&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);<br>            &#125;);<br><br>            //9.选择所有的标题元素<br>            $(&quot;#btn9&quot;).click(function()&#123;<br>               $(&quot;:header&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);<br>            &#125;);<br><br>            //10.选择当前正在执行动画的所有元素<br>            $(&quot;#btn10&quot;).click(function()&#123;<br>               $(&quot;:animated&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);<br>            &#125;);<br>            //11.选择没有执行动画的最后一个div<br>            $(&quot;#btn11&quot;).click(function()&#123;<br>               $(&quot;div:not(:animated):last&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);<br>            &#125;);<br>         &#125;);<br>      &lt;/script&gt;<br>   &lt;/head&gt;<br>   &lt;body&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;选择第一个 div 元素&quot; id=&quot;btn1&quot; /&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;选择最后一个 div 元素&quot; id=&quot;btn2&quot; /&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;选择class不为 one 的所有 div 元素&quot; id=&quot;btn3&quot; /&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;选择索引值为偶数的 div 元素&quot; id=&quot;btn4&quot; /&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;选择索引值为奇数的 div 元素&quot; id=&quot;btn5&quot; /&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;选择索引值为大于 3 的 div 元素&quot; id=&quot;btn6&quot; /&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;选择索引值为等于 3 的 div 元素&quot; id=&quot;btn7&quot; /&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;选择索引值为小于 3 的 div 元素&quot; id=&quot;btn8&quot; /&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;选择所有的标题元素&quot; id=&quot;btn9&quot; /&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;选择当前正在执行动画的所有元素&quot; id=&quot;btn10&quot; /&gt;    <br>      &lt;input type=&quot;button&quot; value=&quot;选择没有执行动画的最后一个div&quot; id=&quot;btn11&quot; /&gt;<br><br><br>      &lt;h3&gt;基本选择器.&lt;/h3&gt;<br>      &lt;br&gt;&lt;br&gt;<br>      &lt;div class=&quot;one&quot; id=&quot;one&quot;&gt;<br>         id 为 one,class 为 one 的div<br>         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>      &lt;/div&gt;<br>      &lt;div class=&quot;one&quot; id=&quot;two&quot; title=&quot;test&quot;&gt;<br>         id为two,class为one,title为test的div<br>         &lt;div class=&quot;mini&quot; title=&quot;other&quot;&gt;class为mini,title为other&lt;/div&gt;<br>         &lt;div class=&quot;mini&quot; title=&quot;test&quot;&gt;class为mini,title为test&lt;/div&gt;<br>      &lt;/div&gt;<br>      &lt;div class=&quot;one&quot;&gt;<br>         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>         &lt;div class=&quot;mini&quot;&gt;&lt;/div&gt;<br>      &lt;/div&gt;<br>      &lt;div class=&quot;one&quot;&gt;<br>         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>         &lt;div class=&quot;mini&quot; title=&quot;tesst&quot;&gt;class为mini,title为tesst&lt;/div&gt;<br>      &lt;/div&gt;<br>      &lt;div style=&quot;display:none;&quot; class=&quot;none&quot;&gt;style的display为&quot;none&quot;的div&lt;/div&gt;<br>      &lt;div class=&quot;hide&quot;&gt;class为&quot;hide&quot;的div&lt;/div&gt;<br>      &lt;div&gt;<br>         包含input的type为&quot;hidden&quot;的div&lt;input type=&quot;hidden&quot; size=&quot;8&quot;&gt;<br>      &lt;/div&gt;<br>      &lt;div id=&quot;mover&quot;&gt;正在执行动画的div元素.&lt;/div&gt;<br>   &lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h4 id="jQuery内容过滤器"><a href="#jQuery内容过滤器" class="headerlink" title="jQuery内容过滤器"></a>jQuery内容过滤器</h4><p>文本也算是子元素</p><p>:contains(text) 匹配包含给定文本的元素 </p><p>:empty 匹配所有不包含子元素或者文本的空元素 </p><p>:parent 匹配含有子元素或者文本的元素 </p><p>:has(selector) 匹配含有选择器所匹配的元素的元</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> <span class="hljs-variable constant_">HTML</span> <span class="hljs-variable constant_">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/strict.dtd&quot;</span>&gt;<br>&lt;html&gt;<br>   &lt;head&gt;<br>      &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;<br>      &lt;title&gt;Untitled Document&lt;/title&gt;<br>      &lt;style type=&quot;text/css&quot;&gt;<br>         div, span, p &#123;<br>             width: 140px;<br>             height: 140px;<br>             margin: 5px;<br>             background: #aaa;<br>             border: #000 1px solid;<br>             float: left;<br>             font-size: 17px;<br>             font-family: Verdana;<br>         &#125;<br>         <br>         div.mini &#123;<br>             width: 55px;<br>             height: 55px;<br>             background-color: #aaa;<br>             font-size: 12px;<br>         &#125;<br>         <br>         div.hide &#123;<br>             display: none;<br>         &#125;        <br>      &lt;/style&gt;<br>      &lt;script type=&quot;text/javascript&quot; src=&quot;../script/jquery-1.7.2.js&quot;&gt;&lt;/script&gt;<br>      &lt;script type=&quot;text/javascript&quot;&gt;<br>         $(document).ready(function()&#123;<br>            function anmateIt()&#123;<br>               $(&quot;#mover&quot;).slideToggle(&quot;slow&quot;, anmateIt);<br>            &#125;<br>   <br>            anmateIt();             <br>         &#125;);<br>         <br>         /** <br>         :contains(text)   <br>         :empty             <br>         :has(selector)     <br>         :parent          <br>         */<br>         $(document).ready(function()&#123;<br>            //1.选择 含有文本 &#x27;di&#x27; 的 div 元素<br>            $(&quot;#btn1&quot;).click(function()&#123;<br>               $(&quot;div:contains(&#x27;di&#x27;)&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);<br>            &#125;);<br><br>            //2.选择不包含子元素(包括文本元素) 的 div 空元素<br>            $(&quot;#btn2&quot;).click(function()&#123;<br>               $(&quot;div:empty&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);<br>            &#125;);<br><br>            //3.选择含有 class 为 mini 元素的 div 元素<br>            $(&quot;#btn3&quot;).click(function()&#123;<br>               $(&quot;div:has(.mini)&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);<br>            &#125;);<br><br>            //4.选择含有子元素(包括文本元素)的div元素<br>            $(&quot;#btn4&quot;).click(function()&#123;<br>               $(&quot;div:parent&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);<br>            &#125;);<br>         &#125;);<br>      &lt;/script&gt;<br>   &lt;/head&gt;<br>   &lt;body&gt;    <br>      &lt;input type=&quot;button&quot; value=&quot;选择 含有文本 &#x27;di&#x27; 的 div 元素&quot; id=&quot;btn1&quot; /&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;选择不包含子元素(或者文本元素) 的 div 空元素&quot; id=&quot;btn2&quot; /&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;选择含有 class 为 mini 元素的 div 元素&quot; id=&quot;btn3&quot; /&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;选择含有子元素(或者文本元素)的div元素&quot; id=&quot;btn4&quot; /&gt;<br>      <br>      &lt;br&gt;&lt;br&gt;<br>      &lt;div class=&quot;one&quot; id=&quot;one&quot;&gt;<br>         id 为 one,class 为 one 的div<br>         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>      &lt;/div&gt;<br>      &lt;div class=&quot;one&quot; id=&quot;two&quot; title=&quot;test&quot;&gt;<br>         id为two,class为one,title为test的div<br>         &lt;div class=&quot;mini&quot; title=&quot;other&quot;&gt;class为mini,title为other&lt;/div&gt;<br>         &lt;div class=&quot;mini&quot; title=&quot;test&quot;&gt;class为mini,title为test&lt;/div&gt;<br>      &lt;/div&gt;<br>      &lt;div class=&quot;one&quot;&gt;<br>         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>         &lt;div class=&quot;mini&quot;&gt;&lt;/div&gt;<br>      &lt;/div&gt;<br>      &lt;div class=&quot;one&quot;&gt;<br>         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>         &lt;div class=&quot;mini&quot; title=&quot;tesst&quot;&gt;class为mini,title为tesst&lt;/div&gt;<br>      &lt;/div&gt;<br>      &lt;div style=&quot;display:none;&quot; class=&quot;none&quot;&gt;style的display为&quot;none&quot;的div&lt;/div&gt;<br>      &lt;div class=&quot;hide&quot;&gt;class为&quot;hide&quot;的div&lt;/div&gt;<br>      &lt;div&gt;<br>         包含input的type为&quot;hidden&quot;的div&lt;input type=&quot;hidden&quot; size=&quot;8&quot;&gt;<br>      &lt;/div&gt;<br>      &lt;div id=&quot;mover&quot;&gt;正在执行动画的div元素.&lt;/div&gt;<br>   &lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h4 id="jQuery属性过滤选择器"><a href="#jQuery属性过滤选择器" class="headerlink" title="jQuery属性过滤选择器"></a>jQuery属性过滤选择器</h4><p>[attribute] 匹配包含给定属性的元素。 </p><p>[attribute&#x3D;value] 匹配给定的属性是某个特定值的元素 </p><p>[attribute!&#x3D;value] 匹配所有不含有指定的属性，或者属性不等于特定值的元素。 </p><p>[attribute^&#x3D;value] 匹配给定的属性是以某些值开始的元素 </p><p>[attribute$&#x3D;value] 匹配给定的属性是以某些值结尾的元素 </p><p>[attribute*&#x3D;value] 匹配给定的属性是以包含某些值的元素</p><p> [attrSel1][attrSel2][attrSelN] 复合属性选择器，需要同时满足多个条件时使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> <span class="hljs-variable constant_">HTML</span> <span class="hljs-variable constant_">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/strict.dtd&quot;</span>&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;<br>&lt;title&gt;Untitled Document&lt;/title&gt;<br>&lt;style type=&quot;text/css&quot;&gt;<br>div,span,p &#123;<br>   width: 140px;<br>   height: 140px;<br>   margin: 5px;<br>   background: #aaa;<br>   border: #000 1px solid;<br>   float: left;<br>   font-size: 17px;<br>   font-family: Verdana;<br>&#125;<br><br>div.mini &#123;<br>   width: 55px;<br>   height: 55px;<br>   background-color: #aaa;<br>   font-size: 12px;<br>&#125;<br><br>div.hide &#123;<br>   display: none;<br>&#125;<br>&lt;/style&gt;<br>&lt;script type=&quot;text/javascript&quot; src=&quot;../script/jquery-1.7.2.js&quot;&gt;&lt;/script&gt;<br>&lt;script type=&quot;text/javascript&quot;&gt;<br>   /**<br>[attribute]          <br>[attribute=value]     <br>[attribute!=value]         <br>[attribute^=value]        <br>[attribute$=value]        <br>[attribute*=value]        <br>[attrSel1][attrSel2][attrSelN]  <br>   <br>   <br>   */<br>   $(function() &#123;<br>      //1.选取含有 属性title 的div元素<br>      $(&quot;#btn1&quot;).click(function() &#123;<br>         $(&quot;div[title]&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);<br>      &#125;);<br>      //2.选取 属性title值等于&#x27;test&#x27;的div元素<br>      $(&quot;#btn2&quot;).click(function() &#123;<br>         $(&quot;div[title=&#x27;test&#x27;]&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);<br>      &#125;);<br>      //3.选取 属性title值不等于&#x27;test&#x27;的div元素(*没有属性title的也将被选中)<br>      $(&quot;#btn3&quot;).click(function() &#123;<br>         $(&quot;div[title!=&#x27;test&#x27;]&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);<br>      &#125;);<br>      //4.选取 属性title值 以&#x27;te&#x27;开始 的div元素<br>      $(&quot;#btn4&quot;).click(function() &#123;<br>         $(&quot;div[title^=&#x27;te&#x27;]&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);<br>      &#125;);<br>      //5.选取 属性title值 以&#x27;est&#x27;结束 的div元素<br>      $(&quot;#btn5&quot;).click(function() &#123;<br>         $(&quot;div[title$=&#x27;est&#x27;]&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);<br>      &#125;);<br>      //6.选取 属性title值 含有&#x27;es&#x27;的div元素<br>      $(&quot;#btn6&quot;).click(function() &#123;<br>         $(&quot;div[title*=&#x27;es&#x27;]&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);<br>      &#125;);<br>      <br>      //7.首先选取有属性id的div元素，然后在结果中 选取属性title值 含有&#x27;es&#x27;的 div 元素<br>      $(&quot;#btn7&quot;).click(function() &#123;<br>         $(&quot;div[id][title*=&#x27;es&#x27;]&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);<br>      &#125;);<br>      //8.选取 含有 title 属性值, 且title 属性值不等于 test 的 div 元素<br>      $(&quot;#btn8&quot;).click(function() &#123;<br>         $(&quot;div[title][title!=&#x27;test&#x27;]&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);<br>      &#125;);<br>   &#125;);<br>&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>   &lt;input type=&quot;button&quot; value=&quot;选取含有 属性title 的div元素.&quot; id=&quot;btn1&quot; style=&quot;display: none;&quot;/&gt;<br>   &lt;input type=&quot;button&quot; value=&quot;选取 属性title值等于&#x27;test&#x27;的div元素.&quot; id=&quot;btn2&quot; /&gt;<br>   &lt;input type=&quot;button&quot;<br>      value=&quot;选取 属性title值不等于&#x27;test&#x27;的div元素(没有属性title的也将被选中).&quot; id=&quot;btn3&quot; /&gt;<br>   &lt;input type=&quot;button&quot; value=&quot;选取 属性title值 以&#x27;te&#x27;开始 的div元素.&quot; id=&quot;btn4&quot; /&gt;<br>   &lt;input type=&quot;button&quot; value=&quot;选取 属性title值 以&#x27;est&#x27;结束 的div元素.&quot; id=&quot;btn5&quot; /&gt;<br>   &lt;input type=&quot;button&quot; value=&quot;选取 属性title值 含有&#x27;es&#x27;的div元素.&quot; id=&quot;btn6&quot; /&gt;<br>   &lt;input type=&quot;button&quot;<br>      value=&quot;组合属性选择器,首先选取有属性id的div元素，然后在结果中 选取属性title值 含有&#x27;es&#x27;的 div 元素.&quot;<br>      id=&quot;btn7&quot; /&gt;<br>   &lt;input type=&quot;button&quot;<br>      value=&quot;选取 含有 title 属性值, 且title 属性值不等于 test 的 div 元素.&quot; id=&quot;btn8&quot; /&gt;<br><br>   &lt;br&gt;<br>   &lt;br&gt;<br>   &lt;div class=&quot;one&quot; id=&quot;one&quot;&gt;<br>      id 为 one,class 为 one 的div<br>      &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>   &lt;/div&gt;<br>   &lt;div class=&quot;one&quot; id=&quot;two&quot; title=&quot;test&quot;&gt;<br>      id为two,class为one,title为test的div<br>      &lt;div class=&quot;mini&quot; title=&quot;other&quot;&gt;class为mini,title为other&lt;/div&gt;<br>      &lt;div class=&quot;mini&quot; title=&quot;test&quot;&gt;class为mini,title为test&lt;/div&gt;<br>   &lt;/div&gt;<br>   &lt;div class=&quot;one&quot;&gt;<br>      &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>      &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>      &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>      &lt;div class=&quot;mini&quot;&gt;&lt;/div&gt;<br>   &lt;/div&gt;<br>   &lt;div class=&quot;one&quot;&gt;<br>      &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>      &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>      &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>      &lt;div class=&quot;mini&quot; title=&quot;tesst&quot;&gt;class为mini,title为tesst&lt;/div&gt;<br>   &lt;/div&gt;<br>   &lt;div style=&quot;display: none;&quot; class=&quot;none&quot;&gt;style的display为&quot;none&quot;的div&lt;/div&gt;<br>   &lt;div class=&quot;hide&quot;&gt;class为&quot;hide&quot;的div&lt;/div&gt;<br>   &lt;div&gt;<br>      包含input的type为&quot;hidden&quot;的div&lt;input type=&quot;hidden&quot; value=&quot;123456789&quot;<br>         size=&quot;8&quot;&gt;<br>   &lt;/div&gt;<br>   &lt;div id=&quot;mover&quot;&gt;正在执行动画的div元素.&lt;/div&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h4 id="jQuery表单过滤选择器"><a href="#jQuery表单过滤选择器" class="headerlink" title="jQuery表单过滤选择器"></a>jQuery表单过滤选择器</h4><p>:input 匹配所有 input, textarea, select 和 button 元素 </p><p>:text 匹配所有 文本输入框 </p><p>:password 匹配所有的密码输入框 </p><p>:radio 匹配所有的单选框 </p><p>:checkbox 匹配所有的复选框 </p><p>:submit 匹配所有提交按钮 </p><p>:image 匹配所有 img 标签 </p><p>:reset 匹配所有重置按钮 </p><p>:button 匹配所有 input type&#x3D;button 按钮 </p><p>:file 匹配所有 input type&#x3D;file 文件上传 </p><p>:hidden 匹配所有不可见元素 display:none </p><p>:enabled 匹配所有可用元素 </p><p>:disabled 匹配所有不可用元素 </p><p>:checked 匹配所有选中的单选，复选，和下拉列表中选中的 option 标签对象 </p><p>:selected 匹配所有选中的 option</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">HTML</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/strict.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Untitled Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">         $(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            </span><br><span class="language-javascript">            </span><br><span class="language-javascript">      <span class="hljs-comment">/**</span></span><br><span class="hljs-comment"><span class="language-javascript">      :input        </span></span><br><span class="hljs-comment"><span class="language-javascript">      :text     </span></span><br><span class="hljs-comment"><span class="language-javascript">      :password  </span></span><br><span class="hljs-comment"><span class="language-javascript">      :radio        </span></span><br><span class="hljs-comment"><span class="language-javascript">      :checkbox  </span></span><br><span class="hljs-comment"><span class="language-javascript">      :submit    </span></span><br><span class="hljs-comment"><span class="language-javascript">      :image        </span></span><br><span class="hljs-comment"><span class="language-javascript">      :reset        </span></span><br><span class="hljs-comment"><span class="language-javascript">      :button    </span></span><br><span class="hljs-comment"><span class="language-javascript">      :file     </span></span><br><span class="hljs-comment"><span class="language-javascript">      :hidden    </span></span><br><span class="hljs-comment"><span class="language-javascript">      </span></span><br><span class="hljs-comment"><span class="language-javascript">      表单对象的属性</span></span><br><span class="hljs-comment"><span class="language-javascript">      :enabled      </span></span><br><span class="hljs-comment"><span class="language-javascript">      :disabled     </span></span><br><span class="hljs-comment"><span class="language-javascript">      :checked      </span></span><br><span class="hljs-comment"><span class="language-javascript">      :selected     </span></span><br><span class="hljs-comment"><span class="language-javascript">      */</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">               </span><br><span class="language-javascript">            <span class="hljs-comment">//1.对表单内 可用input 赋值操作</span></span><br><span class="language-javascript">            $(<span class="hljs-string">&quot;#btn1&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">               <span class="hljs-comment">// val()可以操作表单项的value属性值</span></span><br><span class="language-javascript">               <span class="hljs-comment">//表单项是那个form标签里面的那些</span></span><br><span class="language-javascript">               <span class="hljs-comment">// 它可以设置和获取</span></span><br><span class="language-javascript">               $(<span class="hljs-string">&quot;:text:enabled&quot;</span>).<span class="hljs-title function_">val</span>(<span class="hljs-string">&quot;我是万能的程序员&quot;</span>);</span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript">            <span class="hljs-comment">//2.对表单内 不可用input 赋值操作</span></span><br><span class="language-javascript">            $(<span class="hljs-string">&quot;#btn2&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">               $(<span class="hljs-string">&quot;:text:disabled&quot;</span>).<span class="hljs-title function_">val</span>(<span class="hljs-string">&quot;管你可用不可用，反正我是万能的程序员&quot;</span>);</span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript">            <span class="hljs-comment">//3.获取多选框选中的个数  使用size()方法获取选取到的元素集合的元素个数</span></span><br><span class="language-javascript">            $(<span class="hljs-string">&quot;#btn3&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">               <span class="hljs-title function_">alert</span>( $(<span class="hljs-string">&quot;:checkbox:checked&quot;</span>).<span class="hljs-property">length</span> );</span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript">            <span class="hljs-comment">//4.获取多选框，每个选中的value值</span></span><br><span class="language-javascript">            $(<span class="hljs-string">&quot;#btn4&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">               <span class="hljs-comment">// 获取全部选中的复选框标签对象</span></span><br><span class="language-javascript">               <span class="hljs-keyword">var</span> $checkboies = $(<span class="hljs-string">&quot;:checkbox:checked&quot;</span>);</span><br><span class="language-javascript">               <span class="hljs-comment">// 老式遍历</span></span><br><span class="language-javascript">               <span class="hljs-comment">// for (var i = 0; i &lt; $checkboies.length; i++)&#123;</span></span><br><span class="language-javascript">               <span class="hljs-comment">//     alert( $checkboies[i].value );</span></span><br><span class="language-javascript">               <span class="hljs-comment">// &#125;</span></span><br><span class="language-javascript">               <span class="hljs-comment">// each方法是jQuery对象提供用来遍历元素的方法</span></span><br><span class="language-javascript">               <span class="hljs-comment">// 在遍历的function函数中，有一个this对象，这个this对象，就是当前遍历到的dom对象</span></span><br><span class="language-javascript">               $checkboies.<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                  <span class="hljs-title function_">alert</span>( <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> );</span><br><span class="language-javascript">               &#125;);</span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript">            <span class="hljs-comment">//5.获取下拉框选中的内容  </span></span><br><span class="language-javascript">            $(<span class="hljs-string">&quot;#btn5&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">               <span class="hljs-comment">// 选中select后代的option标签且被选中的</span></span><br><span class="language-javascript">               <span class="hljs-keyword">var</span> $options = $(<span class="hljs-string">&quot;select option:selected&quot;</span>);</span><br><span class="language-javascript">               <span class="hljs-comment">// 遍历，获取option标签中的文本内容</span></span><br><span class="language-javascript">               $options.<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                  <span class="hljs-comment">// 在each遍历的function函数中，有一个this对象。这个this对象是当前正在遍历到的dom对象</span></span><br><span class="language-javascript">                  <span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">innerHTML</span>);</span><br><span class="language-javascript">               &#125;);</span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript">         &#125;) </span><br><span class="language-javascript">      </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>表单对象属性过滤选择器<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn1&quot;</span>&gt;</span>对表单内 可用input 赋值操作.<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn2&quot;</span>&gt;</span>对表单内 不可用input 赋值操作.<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn3&quot;</span>&gt;</span>获取多选框选中的个数.<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn4&quot;</span>&gt;</span>获取多选框选中的内容.<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn5&quot;</span>&gt;</span>获取下拉框选中的内容.<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>       <br>      <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;form1&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>         <br>         可用元素: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;add&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;可用文本框1&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>         <span class="hljs-comment">&lt;!--diabled=&quot;disabled就是让文本框不可选&quot;--&gt;</span><br>         不可用元素: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">disabled</span>=<span class="hljs-string">&quot;disabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;不可用文本框&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>         可用元素: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;che&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;可用文本框2&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>         不可用元素: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">disabled</span>=<span class="hljs-string">&quot;disabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;不可用文本框&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>         <br>         多选框: <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;newsletter&quot;</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">&quot;checked&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;test1&quot;</span> /&gt;</span>test1<br>         <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;newsletter&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;test2&quot;</span> /&gt;</span>test2<br>         <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;newsletter&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;test3&quot;</span> /&gt;</span>test3<br>         <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;newsletter&quot;</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">&quot;checked&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;test4&quot;</span> /&gt;</span>test4<br>         <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;newsletter&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;test5&quot;</span> /&gt;</span>test5<br>         <br>         <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>         下拉列表1: <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>         <span class="hljs-comment">&lt;!--multiple属性决定了这个下拉表可以多选--&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;test&quot;</span> <span class="hljs-attr">multiple</span>=<span class="hljs-string">&quot;multiple&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height: 100px&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sele1&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>浙江<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">selected</span>=<span class="hljs-string">&quot;selected&quot;</span>&gt;</span>辽宁<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>北京<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">selected</span>=<span class="hljs-string">&quot;selected&quot;</span>&gt;</span>天津<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>广州<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>湖北<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>         <br>         <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>         下拉列表2: <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;test2&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>浙江<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>辽宁<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">selected</span>=<span class="hljs-string">&quot;selected&quot;</span>&gt;</span>北京<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>天津<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>广州<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>湖北<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span>       <br>   <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="jQuery元素的筛选"><a href="#jQuery元素的筛选" class="headerlink" title="jQuery元素的筛选"></a>jQuery元素的筛选</h4><p>eq() 获取给定索引的元素                 功能跟 :eq() 一样</p><p>first() 获取第一个元素                 功能跟 :first 一样 </p><p>last() 获取最后一个元素                     功能跟 :last 一样 </p><p>filter(exp) 留下匹配的元素 </p><p>is(exp) 判断是否匹配给定的选择器，只要有一个匹配就返回，true </p><p>has(exp) 返回包含有匹配选择器的元素的元素                功能跟 :has 一样 </p><p>not(exp) 删除匹配选择器的元素                       功能跟 :not 一样 </p><p>children(exp) 返回匹配给定选择器的子元素          功能跟 parent&gt;child 一样 </p><p>find(exp) 返回匹配给定选择器的后代元素         功能跟 ancestor descendant 一样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> <span class="hljs-variable constant_">HTML</span> <span class="hljs-variable constant_">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/strict.dtd&quot;</span>&gt;<br>&lt;html&gt;<br>   &lt;head&gt;<br>      &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;<br>      &lt;title&gt;DOM查询&lt;/title&gt;<br>      &lt;style type=&quot;text/css&quot;&gt;<br>         div, span, p &#123;<br>             width: 140px;<br>             height: 140px;<br>             margin: 5px;<br>             background: #aaa;<br>             border: #000 1px solid;<br>             float: left;<br>             font-size: 17px;<br>             font-family: Verdana;<br>         &#125;<br>         <br>         div.mini &#123;<br>             width: 55px;<br>             height: 55px;<br>             background-color: #aaa;<br>             font-size: 12px;<br>         &#125;<br>         <br>         div.hide &#123;<br>             display: none;<br>         &#125;        <br>      &lt;/style&gt;<br>      &lt;script type=&quot;text/javascript&quot; src=&quot;../script/jquery-1.7.2.js&quot;&gt;&lt;/script&gt;<br>      &lt;script type=&quot;text/javascript&quot;&gt;<br>         $(document).ready(function()&#123;<br>            function anmateIt()&#123;<br>               $(&quot;#mover&quot;).slideToggle(&quot;slow&quot;, anmateIt);<br>            &#125;<br>            anmateIt();<br>            <br>   /**<br>               <br>   过滤<br>   eq(index|-index)         <br>   first()                <br>   last()                    <br>   hasClass(class)          <br>   filter(expr|obj|ele|fn)    <br>   is(expr|obj|ele|fn)1.6*    <br>   has(expr|ele)           <br>   not(expr|ele|fn)         <br>   slice(start,[end])           <br>   <br>   查找<br>   children([expr])         <br>   closest(expr,[con]|obj|ele)1.6*   <br>   find(expr|obj|ele)              <br>   next([expr])               <br>   nextall([expr])             <br>   nextUntil([exp|ele][,fil])1.6*     <br>   parent([expr])                 <br>   parents([expr])             <br>   parentsUntil([exp|ele][,fil])1.6*  <br>   prev([expr])               <br>   prevall([expr])             <br>   prevUntil([exp|ele][,fil])1.6*     <br>   siblings([expr])            <br>   <br>   串联<br>   add(expr|ele|html|obj[,con])   <br>                     <br>   <br>   */<br>            <br>            //(1)eq()  选择索引值为等于 3 的 div 元素<br>            $(&quot;#btn1&quot;).click(function()&#123;<br>               $(&quot;div&quot;).eq(3).css(&quot;background-color&quot;,&quot;#bfa&quot;);<br>            &#125;);<br>            //(2)first()选择第一个 div 元素<br>             $(&quot;#btn2&quot;).click(function()&#123;<br>                //first()   选取第一个元素<br>               $(&quot;div&quot;).first().css(&quot;background-color&quot;,&quot;#bfa&quot;);<br>            &#125;);<br>            //(3)last()选择最后一个 div 元素<br>            $(&quot;#btn3&quot;).click(function()&#123;<br>               //last()  选取最后一个元素<br>               $(&quot;div&quot;).last().css(&quot;background-color&quot;,&quot;#bfa&quot;);<br>            &#125;);<br>            //(4)filter()在div中选择索引为偶数的<br>            $(&quot;#btn4&quot;).click(function()&#123;<br>               //filter()  过滤   传入的是选择器字符串<br>               $(&quot;div&quot;).filter(&quot;:even&quot;).css(&quot;background-color&quot;,&quot;#bfa&quot;);<br>            &#125;);<br>             //(5)is()判断#one是否为:empty或:parent<br>            //is用来检测jq对象是否符合指定的选择器<br>            $(&quot;#btn5&quot;).click(function()&#123;<br>               alert( $(&quot;#one&quot;).is(&quot;:empty&quot;) );<br>            &#125;);<br>            <br>            //(6)has()选择div中包含.mini的<br>            $(&quot;#btn6&quot;).click(function()&#123;<br>               //has(selector)  选择器字符串    是否包含selector<br>               $(&quot;div&quot;).has(&quot;.mini&quot;).css(&quot;background-color&quot;,&quot;#bfa&quot;);<br>            &#125;);<br>            //(7)not()选择div中class不为one的<br>            $(&quot;#btn7&quot;).click(function()&#123;<br>               //not(selector)  选择不是selector的元素<br>               $(&quot;div&quot;).not(&#x27;.one&#x27;).css(&quot;background-color&quot;,&quot;#bfa&quot;);<br>            &#125;);<br>            //(8)children()在body中选择所有class为one的div子元素<br>            $(&quot;#btn8&quot;).click(function()&#123;<br>               //children()  选出所有的子元素<br>               $(&quot;body&quot;).children(&quot;div.one&quot;).css(&quot;background-color&quot;,&quot;#bfa&quot;);<br>            &#125;);<br>            <br>            <br>            //(9)find()在body中选择所有class为mini的div元素<br>            $(&quot;#btn9&quot;).click(function()&#123;<br>               //find()  选出所有的后代元素<br>               $(&quot;body&quot;).find(&quot;div.mini&quot;).css(&quot;background-color&quot;,&quot;#bfa&quot;);<br>            &#125;);<br>            //(10)next() #one的下一个div<br>            $(&quot;#btn10&quot;).click(function()&#123;<br>               //next()  选择下一个兄弟元素<br>               $(&quot;#one&quot;).next(&quot;div&quot;).css(&quot;background-color&quot;,&quot;#bfa&quot;);<br>            &#125;);<br>            //(11)nextAll() #one后面所有的span元素<br>            $(&quot;#btn11&quot;).click(function()&#123;<br>               //nextAll()   选出后面所有的元素<br>               $(&quot;#one&quot;).nextAll(&quot;span&quot;).css(&quot;background-color&quot;,&quot;#bfa&quot;);<br>            &#125;);<br>            //(12)nextUntil() #one和span之间的元素，不算两边<br>            $(&quot;#btn12&quot;).click(function()&#123;<br>               //<br>               $(&quot;#one&quot;).nextUntil(&quot;span&quot;).css(&quot;background-color&quot;,&quot;#bfa&quot;)<br>            &#125;);<br>            //(13)parent() .mini的父元素<br>            $(&quot;#btn13&quot;).click(function()&#123;<br>               $(&quot;.mini&quot;).parent().css(&quot;background-color&quot;,&quot;#bfa&quot;);<br>            &#125;);<br>            //(14)prev() #two的上一个div<br>            $(&quot;#btn14&quot;).click(function()&#123;<br>               //prev()  <br>               $(&quot;#two&quot;).prev(&quot;div&quot;).css(&quot;background-color&quot;,&quot;#bfa&quot;)<br>            &#125;);<br>            //(15)prevAll() span前面所有的div<br>            $(&quot;#btn15&quot;).click(function()&#123;<br>               //prevAll()   选出前面所有的元素<br>               $(&quot;span&quot;).prevAll(&quot;div&quot;).css(&quot;background-color&quot;,&quot;#bfa&quot;)<br>            &#125;);<br>            //(16)prevUntil() span向前直到#one的元素，都不算两个边界<br>            $(&quot;#btn16&quot;).click(function()&#123;<br>               //prevUntil(exp)   找到之前所有的兄弟元素直到找到exp停止<br>               $(&quot;span&quot;).prevUntil(&quot;#one&quot;).css(&quot;background-color&quot;,&quot;#bfa&quot;)<br>            &#125;);<br>            //(17)siblings() #two的所有兄弟元素<br>            $(&quot;#btn17&quot;).click(function()&#123;<br>               //siblings()    找到所有的兄弟元素，包括前面的和后面的<br>               $(&quot;#two&quot;).siblings().css(&quot;background-color&quot;,&quot;#bfa&quot;)<br>            &#125;);<br>            <br>            <br>            //(18)add()选择所有的 span 元素和id为two的元素<br>            $(&quot;#btn18&quot;).click(function()&#123;<br>   <br>               //   $(&quot;span,#two,.mini,#one&quot;)<br>               $(&quot;span&quot;).add(&quot;#two&quot;).add(&quot;#one&quot;).css(&quot;background-color&quot;,&quot;#bfa&quot;);<br>               <br>            &#125;);<br>            <br><br><br>         &#125;);<br>         <br>         <br>      &lt;/script&gt;<br>   &lt;/head&gt;<br>   &lt;body&gt;    <br>      &lt;input type=&quot;button&quot; value=&quot;eq()选择索引值为等于 3 的 div 元素&quot; id=&quot;btn1&quot; /&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;first()选择第一个 div 元素&quot; id=&quot;btn2&quot; /&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;last()选择最后一个 div 元素&quot; id=&quot;btn3&quot; /&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;filter()在div中选择索引为偶数的&quot; id=&quot;btn4&quot; /&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;is()判断#one是否为:empty或:parent&quot; id=&quot;btn5&quot; /&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;has()选择div中包含.mini的&quot; id=&quot;btn6&quot; /&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;not()选择div中class不为one的&quot; id=&quot;btn7&quot; /&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;children()在body中选择所有class为one的div子元素&quot; id=&quot;btn8&quot; /&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;find()在body中选择所有class为mini的div后代元素&quot; id=&quot;btn9&quot; /&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;next()#one的下一个div&quot; id=&quot;btn10&quot; /&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;nextAll()#one后面所有的span元素&quot; id=&quot;btn11&quot; /&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;nextUntil()#one和span之间的元素&quot; id=&quot;btn12&quot; /&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;parent().mini的父元素&quot; id=&quot;btn13&quot; /&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;prev()#two的上一个div&quot; id=&quot;btn14&quot; /&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;prevAll()span前面所有的div&quot; id=&quot;btn15&quot; /&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;prevUntil()span向前直到#one的元素&quot; id=&quot;btn16&quot; /&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;siblings()#two的所有兄弟元素&quot; id=&quot;btn17&quot; /&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;add()选择所有的 span 元素和id为two的元素&quot; id=&quot;btn18&quot; /&gt;<br><br>      <br>      &lt;h3&gt;基本选择器.&lt;/h3&gt;<br>      &lt;br /&gt;&lt;br /&gt;<br>      文本框&lt;input type=&quot;text&quot; name=&quot;account&quot; disabled=&quot;disabled&quot; /&gt;<br>      &lt;br&gt;&lt;br&gt;<br>      &lt;div class=&quot;one&quot; id=&quot;one&quot;&gt;<br>         id 为 one,class 为 one 的div<br>         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>      &lt;/div&gt;<br>      &lt;div class=&quot;one&quot; id=&quot;two&quot; title=&quot;test&quot;&gt;<br>         id为two,class为one,title为test的div<br>         &lt;div class=&quot;mini&quot; title=&quot;other&quot;&gt;&lt;b&gt;class为mini,title为other&lt;/b&gt;&lt;/div&gt;<br>         &lt;div class=&quot;mini&quot; title=&quot;test&quot;&gt;class为mini,title为test&lt;/div&gt;<br>      &lt;/div&gt;<br>      <br>      &lt;div class=&quot;one&quot;&gt;<br>         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>         &lt;div class=&quot;mini&quot;&gt;&lt;/div&gt;<br>      &lt;/div&gt;<br>      &lt;div class=&quot;one&quot;&gt;<br>         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>         &lt;div class=&quot;mini&quot; title=&quot;tesst&quot;&gt;class为mini,title为tesst&lt;/div&gt;<br>      &lt;/div&gt;<br>      &lt;div style=&quot;display:none;&quot; class=&quot;none&quot;&gt;style的display为&quot;none&quot;的div&lt;/div&gt;<br>      &lt;div class=&quot;hide&quot;&gt;class为&quot;hide&quot;的div&lt;/div&gt;<br>      &lt;span id=&quot;span1&quot;&gt;^^span元素 111^^&lt;/span&gt;<br>      &lt;div&gt;<br>         包含input的type为&quot;hidden&quot;的div&lt;input type=&quot;hidden&quot; size=&quot;8&quot;&gt;<br>      &lt;/div&gt;<br>      &lt;span id=&quot;span2&quot;&gt;^^span元素 222^^&lt;/span&gt;<br>      &lt;div id=&quot;mover&quot;&gt;正在执行动画的div元素.&lt;/div&gt;<br>   &lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h4 id="jQuery属性操作"><a href="#jQuery属性操作" class="headerlink" title="jQuery属性操作"></a>jQuery属性操作</h4><p>html()    它可以设置和获取起始标签和结束标签中的内容，根dom属性innerHTML一样</p><p>不传参数是获取，传入参数是设置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh_CN&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">alert</span>($(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">html</span>());<span class="hljs-comment">//获取</span></span></span><br><span class="language-javascript"><span class="language-xml">     $(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">html</span>(<span class="hljs-string">&quot;&lt;h1&gt;我是赵梓皓&lt;/h1&gt;&quot;</span>);<span class="hljs-comment">//设置</span></span></span><br><span class="language-javascript"><span class="language-xml">&#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是div标签<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我是div中的spqn<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>text()      它可以设置和获取起始标签和结束标签中的文本，根dom属性innerText一样</p><p>不传参数是获取，传入参数是设置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh_CN&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">alert</span>($(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">text</span>());</span></span><br><span class="language-javascript"><span class="language-xml">  $(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">text</span>(<span class="hljs-string">&quot;&lt;h1&gt;我是赵梓皓&lt;/h1&gt;&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">&#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是div标签<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我是div中的spqn<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>text()方法只能让内容全部以文本形式显示，不能识别标签，但html标签可以</p><p>val()   它可以设置和获取<strong>表单项</strong>的value属性值              跟dom属性value一样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh_CN&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    $(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-string">&quot;button&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">alert</span>($(<span class="hljs-string">&quot;#username&quot;</span>).<span class="hljs-title function_">val</span>());</span></span><br><span class="language-javascript"><span class="language-xml">&#125;);</span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-string">&quot;#username&quot;</span>).<span class="hljs-title function_">val</span>(<span class="hljs-string">&quot;超级程序员&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">&#125;);</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是div标签<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我是div中的spqn<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;username&quot;</span> /&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>操作输入框<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>表单选择器练习</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh_CN&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">/*</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">// 批量操作单选</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">$(&quot;:radio&quot;).val([&quot;radio2&quot;]);</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">// 批量操作筛选框的选中状态</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">$(&quot;:checkbox&quot;).val([&quot;checkbox3&quot;,&quot;checkbox2&quot;]);</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">// 批量操作多选的下拉框选中状态</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">$(&quot;#multiple&quot;).val([&quot;mul2&quot;,&quot;mul3&quot;,&quot;mul4&quot;]);</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">// 操作单选的下拉框选中状态</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">$(&quot;#single&quot;).val([&quot;sin2&quot;]);</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">*/</span></span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-string">&quot;#multiple,#single,:radio,:checkbox&quot;</span>).<span class="hljs-title function_">val</span>([<span class="hljs-string">&quot;radio2&quot;</span>,<span class="hljs-string">&quot;checkbox1&quot;</span>,<span class="hljs-string">&quot;checkbox3&quot;</span>,<span class="hljs-string">&quot;mul1&quot;</span>,<span class="hljs-string">&quot;mul4&quot;</span>,<span class="hljs-string">&quot;sin3&quot;</span>]</span></span><br><span class="language-javascript"><span class="language-xml">);</span></span><br><span class="language-javascript"><span class="language-xml">&#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">单选：</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;radio1&quot;</span> /&gt;</span>radio1</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;radio2&quot;</span> /&gt;</span>radio2</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br><span class="language-xml">多选：</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;checkbox1&quot;</span> /&gt;</span>checkbox1</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;checkbox2&quot;</span> /&gt;</span>checkbox2</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;checkbox3&quot;</span> /&gt;</span>checkbox3</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br><span class="language-xml">下拉多选 ：</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;multiple&quot;</span> <span class="hljs-attr">multiple</span>=<span class="hljs-string">&quot;multiple&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;4&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;mul1&quot;</span>&gt;</span>mul1<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;mul2&quot;</span>&gt;</span>mul2<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;mul3&quot;</span>&gt;</span>mul3<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;mul4&quot;</span>&gt;</span>mul4<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br><span class="language-xml">下拉单选 ：</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;single&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sin1&quot;</span>&gt;</span>sin1<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sin2&quot;</span>&gt;</span>sin2<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sin3&quot;</span>&gt;</span>sin3<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>attr()             可以设置和获取属性的值，不推荐操作checked，readOnly，selected，disabled等等</p><p>还不可以操作非标准的属性，比如自定义属性：abc什么的</p><p>prop()           可以设置和获取属性的值，只推荐操作上面不操作的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh_CN&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//attr</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">alert</span>($(<span class="hljs-string">&quot;:checkbox:first&quot;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;name&quot;</span>));<span class="hljs-comment">//获取属性的值</span></span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-string">&quot;:checkbox:first&quot;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;abc&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">alert</span>($(<span class="hljs-string">&quot;:checkbox:first&quot;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;checked&quot;</span>));<span class="hljs-comment">//会返回undefined，但是这个时候没办法判断是没被选还是没有这个属性，所以用到prop()</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">alert</span>($(<span class="hljs-string">&quot;:checkbox:first&quot;</span>).<span class="hljs-title function_">prop</span>(<span class="hljs-string">&quot;checked&quot;</span>));<span class="hljs-comment">//返回的是false</span></span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-string">&quot;:checkbox&quot;</span>).<span class="hljs-title function_">prop</span>(<span class="hljs-string">&quot;checked&quot;</span>,<span class="hljs-literal">true</span>);<span class="hljs-comment">//让所有多选框都选中</span></span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-string">&quot;:checkbox:first&quot;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;abc&quot;</span>,<span class="hljs-string">&quot;abcvalue&quot;</span>);<span class="hljs-comment">//设置自定义属性</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">alert</span>($(<span class="hljs-string">&quot;:checkbox:first&quot;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;abc&quot;</span>));<span class="hljs-comment">//查看自定义属性</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//</span></span></span><br><span class="language-javascript"><span class="language-xml">&#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">单选：</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;radio1&quot;</span> /&gt;</span>radio1</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;radio2&quot;</span> /&gt;</span>radio2</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br><span class="language-xml">多选：</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;checkbox1&quot;</span> /&gt;</span>checkbox1</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;checkbox2&quot;</span> /&gt;</span>checkbox2</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;checkbox3&quot;</span> /&gt;</span>checkbox3</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br><span class="language-xml">下拉多选 ：</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;multiple&quot;</span> <span class="hljs-attr">multiple</span>=<span class="hljs-string">&quot;multiple&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;4&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;mul1&quot;</span>&gt;</span>mul1<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;mul2&quot;</span>&gt;</span>mul2<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;mul3&quot;</span>&gt;</span>mul3<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;mul4&quot;</span>&gt;</span>mul4<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br><span class="language-xml">下拉单选 ：</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;single&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sin1&quot;</span>&gt;</span>sin1<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sin2&quot;</span>&gt;</span>sin2<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sin3&quot;</span>&gt;</span>sin3<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="jQuery练习（全选全不选）"><a href="#jQuery练习（全选全不选）" class="headerlink" title="jQuery练习（全选全不选）"></a>jQuery练习（全选全不选）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html <span class="hljs-variable constant_">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Insert title here<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../../script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">   </span></span><br><span class="language-javascript"><span class="language-xml">   $(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-comment">//给全选绑定单击事件</span></span></span><br><span class="language-javascript"><span class="language-xml">      $(<span class="hljs-string">&quot;#checkedAllBtn&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                $(<span class="hljs-string">&quot;:checkbox&quot;</span>).<span class="hljs-title function_">prop</span>(<span class="hljs-string">&quot;checked&quot;</span>,<span class="hljs-literal">true</span>);<span class="hljs-comment">//这个地方checked的属性值是true，且属性名checked也要加双引号</span></span></span><br><span class="language-javascript"><span class="language-xml">      &#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//给全不选绑定单击事件</span></span></span><br><span class="language-javascript"><span class="language-xml">      $(<span class="hljs-string">&quot;#checkedNoBtn&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      $(<span class="hljs-string">&quot;:checkbox&quot;</span>).<span class="hljs-title function_">prop</span>(<span class="hljs-string">&quot;checked&quot;</span>,<span class="hljs-literal">false</span>);</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//给反选绑定单击事件</span></span></span><br><span class="language-javascript"><span class="language-xml">      $(<span class="hljs-string">&quot;#checkedRevBtn&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//查询全部球类的复选框</span></span></span><br><span class="language-javascript"><span class="language-xml">      $(<span class="hljs-string">&quot;:checkbox[name=&#x27;items&#x27;]&quot;</span>).<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//each方法中这个this就是每一个dom对象，也就是jQuery数组中的一个元素</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">checked</span>=!<span class="hljs-variable language_">this</span>.<span class="hljs-property">checked</span>;</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">       <span class="hljs-comment">//要检查是否满选</span></span></span><br><span class="language-javascript"><span class="language-xml">       <span class="hljs-comment">//获取球类运动总数</span></span></span><br><span class="language-javascript"><span class="language-xml">       <span class="hljs-keyword">var</span> length=$(<span class="hljs-string">&quot;:checkbox[name=&#x27;items&#x27;]&quot;</span>).<span class="hljs-property">length</span>;</span></span><br><span class="language-javascript"><span class="language-xml">       <span class="hljs-comment">//获取被选中的球类运动总数</span></span></span><br><span class="language-javascript"><span class="language-xml">       <span class="hljs-keyword">var</span> length2=$(<span class="hljs-string">&quot;:checkbox[name=&#x27;items&#x27;]:checked&quot;</span>).<span class="hljs-property">length</span>;</span></span><br><span class="language-javascript"><span class="language-xml">       <span class="hljs-comment">//比较,两种</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">/* if(length==length2)&#123;</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">       $(&quot;#checkedAllBox&quot;).prop(&quot;checked&quot;,true);</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">        &#125;*/</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        $(<span class="hljs-string">&quot;#checkedAllBox&quot;</span>).<span class="hljs-title function_">prop</span>(<span class="hljs-string">&quot;checked&quot;</span>,length==length2);</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//给提交按钮绑定事件</span></span></span><br><span class="language-javascript"><span class="language-xml">      $(<span class="hljs-string">&quot;#sendBtn&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      $(<span class="hljs-string">&quot;:checkbox[name=&#x27;items&#x27;]:checked&quot;</span>).<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>);</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//给全选或者全不选那个框框榜单机事件</span></span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-string">&quot;#checkedAllBox&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//再事件的function函数中，有一个this对象，这个this对象是当前正在响应事件的dom对象</span></span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-string">&quot;:checkbox[name=&#x27;items&#x27;]&quot;</span>).<span class="hljs-title function_">prop</span>(<span class="hljs-string">&quot;checked&quot;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">checked</span>);</span></span><br><span class="language-javascript"><span class="language-xml">&#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//给全部球类绑定单击事件,让所有框被选上之后也可以让全选框被选</span></span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-string">&quot;[name=items]&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">var</span> length=$(<span class="hljs-string">&quot;:checkbox[name=&#x27;items&#x27;]&quot;</span>).<span class="hljs-property">length</span>;</span></span><br><span class="language-javascript"><span class="language-xml">       <span class="hljs-comment">//获取被选中的球类运动总数</span></span></span><br><span class="language-javascript"><span class="language-xml">       <span class="hljs-keyword">var</span> length2=$(<span class="hljs-string">&quot;:checkbox[name=&#x27;items&#x27;]:checked&quot;</span>).<span class="hljs-property">length</span>;</span></span><br><span class="language-javascript"><span class="language-xml">        $(<span class="hljs-string">&quot;#checkedAllBox&quot;</span>).<span class="hljs-title function_">prop</span>(<span class="hljs-string">&quot;checked&quot;</span>,length==length2);</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">   &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">   </span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span></span><br><span class="language-xml">   </span><br><span class="language-xml">      你爱好的运动是？<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checkedAllBox&quot;</span> /&gt;</span>全选/全不选 </span><br><span class="language-xml">      </span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;items&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;足球&quot;</span> /&gt;</span>足球</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;items&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;篮球&quot;</span> /&gt;</span>篮球</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;items&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;羽毛球&quot;</span> /&gt;</span>羽毛球</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;items&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;乒乓球&quot;</span> /&gt;</span>乒乓球</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checkedAllBtn&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;全　选&quot;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checkedNoBtn&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;全不选&quot;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checkedRevBtn&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;反　选&quot;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sendBtn&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提　交&quot;</span> /&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="jQuery-对标签的增删改"><a href="#jQuery-对标签的增删改" class="headerlink" title="jQuery  对标签的增删改"></a>jQuery  对标签的增删改</h4><p>内部插入</p><p>用jQuery对象的方法来操作标签的增删改</p><p>appendTo         a.appendTo(b)           把a插入到b子元素末尾，成为最后一个子元素</p><p>prependTo()        a.prependTo(b)        把a插入到b所有子元素之前，成为第一个子元素</p><p>外部插入</p><p>insertAfter()          a.insertAfter(b)        得到ba</p><p>insertBefore()       a.insertBefore(b)      得到ab</p><p>替换</p><p>replaceWith()      a.replaceWith(b)          用b替换掉a</p><p>replaceAll()              a.replaceAll(b)        用a替换掉所有b</p><p>删除</p><p>remove()            a.remove();             删除a标签</p><p>empty()           a.empty();               清空标签里的内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh_CN&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span><br><span class="language-xml"><span class="language-handlebars">//$(&quot;<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>&quot;).appendTo(&quot;div&quot;);</span></span><br><span class="language-xml"><span class="language-handlebars">//$(&quot;<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>&quot;).prependTo(&quot;div&quot;);</span></span><br><span class="language-xml"><span class="language-handlebars">//$(&quot;<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>&quot;).insertAfter(&quot;div&quot;);</span></span><br><span class="language-xml"><span class="language-handlebars">//$(&quot;<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>&quot;).insertBefore($(&quot;div&quot;));</span></span><br><span class="language-xml"><span class="language-handlebars">//$(&quot;<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>&quot;).replaceWith(&quot;div&quot;);</span></span><br><span class="language-xml"><span class="language-handlebars">//$(&quot;div&quot;).replaceWith(&quot;<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>&quot;);</span></span><br><span class="language-xml"><span class="language-handlebars">//$(&quot;<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>&quot;).replaceAll&quot;div&quot;);</span></span><br><span class="language-xml"><span class="language-handlebars">//$(&quot;div&quot;).remove();</span></span><br><span class="language-xml"><span class="language-handlebars">//$(&quot;div&quot;).empty();</span></span><br><span class="language-xml"><span class="language-handlebars">    </span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>1234<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="jQuery练习"><a href="#jQuery练习" class="headerlink" title="jQuery练习"></a>jQuery练习</h4><p>从左到右从右到左</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html <span class="hljs-variable constant_">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Insert title here<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml">      select &#123;</span></span><br><span class="language-css"><span class="language-xml">         <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span></span><br><span class="language-css"><span class="language-xml">         <span class="hljs-attribute">height</span>: <span class="hljs-number">140px</span>;</span></span><br><span class="language-css"><span class="language-xml">      &#125;</span></span><br><span class="language-css"><span class="language-xml">      </span></span><br><span class="language-css"><span class="language-xml">      <span class="hljs-selector-tag">div</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">         <span class="hljs-attribute">width</span>: <span class="hljs-number">130px</span>;</span></span><br><span class="language-css"><span class="language-xml">         <span class="hljs-attribute">float</span>: left;</span></span><br><span class="language-css"><span class="language-xml">         <span class="hljs-attribute">text-align</span>: center;</span></span><br><span class="language-css"><span class="language-xml">      &#125;</span></span><br><span class="language-css"><span class="language-xml">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//实现左边的可以添加到右边</span></span></span><br><span class="language-javascript"><span class="language-xml">      $(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      $(<span class="hljs-string">&quot;button:first&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//这个就是叫先找标签select的第一个然后找他后代的所有option中被选中的</span></span></span><br><span class="language-javascript"><span class="language-xml">      $(<span class="hljs-string">&quot;select:eq(0) option:selected&quot;</span>).<span class="hljs-title function_">appendTo</span>($(<span class="hljs-string">&quot;select:eq(1)&quot;</span>));</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//实现将左边的全部添加到右边</span></span></span><br><span class="language-javascript"><span class="language-xml">      $(<span class="hljs-string">&quot;button:eq(1)&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      $(<span class="hljs-string">&quot;select:eq(0) option&quot;</span>).<span class="hljs-title function_">appendTo</span>($(<span class="hljs-string">&quot;select:eq(1)&quot;</span>));</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">      &#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//将右边的添加到左边</span></span></span><br><span class="language-javascript"><span class="language-xml">         $(<span class="hljs-string">&quot;button:eq(2)&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//这个就是叫先找标签select的第一个然后找他后代的所有option中被选中的</span></span></span><br><span class="language-javascript"><span class="language-xml">      $(<span class="hljs-string">&quot;select:eq(1) option:selected&quot;</span>).<span class="hljs-title function_">appendTo</span>($(<span class="hljs-string">&quot;select:eq(0)&quot;</span>));</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//将右边的全部添加到左边</span></span></span><br><span class="language-javascript"><span class="language-xml">      $(<span class="hljs-string">&quot;button:eq(3)&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      $(<span class="hljs-string">&quot;select:eq(1) option&quot;</span>).<span class="hljs-title function_">appendTo</span>($(<span class="hljs-string">&quot;select:eq(0)&quot;</span>));</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">            &#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">      </span></span><br><span class="language-javascript"><span class="language-xml">   </span></span><br><span class="language-javascript"><span class="language-xml">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">multiple</span>=<span class="hljs-string">&quot;multiple&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sel01&quot;</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;opt01&quot;</span>&gt;</span>选项1<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;opt02&quot;</span>&gt;</span>选项2<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;opt03&quot;</span>&gt;</span>选项3<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;opt04&quot;</span>&gt;</span>选项4<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;opt05&quot;</span>&gt;</span>选项5<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;opt06&quot;</span>&gt;</span>选项6<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;opt07&quot;</span>&gt;</span>选项7<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;opt08&quot;</span>&gt;</span>选项8<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="language-xml">      </span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>选中添加到右边<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>全部添加到右边<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;rigth&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">multiple</span>=<span class="hljs-string">&quot;multiple&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sel02&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>选中删除到左边<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>全部删除到左边<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="jQuery练习，删除添加记录"><a href="#jQuery练习，删除添加记录" class="headerlink" title="jQuery练习，删除添加记录"></a>jQuery练习，删除添加记录</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> <span class="hljs-variable constant_">HTML</span> <span class="hljs-variable constant_">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/strict.dtd&quot;</span>&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Untitled Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;styleB/css.css&quot;</span> /&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../../script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">   $(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">   $(<span class="hljs-string">&quot;#addEmpButton&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-comment">//获取输入框的内容</span></span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-keyword">var</span> name=$(<span class="hljs-string">&quot;#empName&quot;</span>).<span class="hljs-title function_">val</span>();</span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-keyword">var</span> email=$(<span class="hljs-string">&quot;#email&quot;</span>).<span class="hljs-title function_">val</span>();</span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-keyword">var</span> salary=$(<span class="hljs-string">&quot;#salary&quot;</span>).<span class="hljs-title function_">val</span>();</span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-comment">//创建一个行标签对象，添加到显示数据的表格中</span></span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-keyword">var</span> $tobr=$(<span class="hljs-string">&quot;&lt;tr&gt;&quot;</span>+</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-string">&quot;&lt;td&gt;&quot;</span>+name+<span class="hljs-string">&quot;&lt;/td&gt;&quot;</span>+</span></span><br><span class="language-javascript"><span class="language-xml">         <span class="hljs-string">&quot;&lt;td&gt;&quot;</span>+email+<span class="hljs-string">&quot;&lt;/td&gt;&quot;</span>+</span></span><br><span class="language-javascript"><span class="language-xml">         <span class="hljs-string">&quot;&lt;td&gt;&quot;</span>+salary+<span class="hljs-string">&quot;&lt;/td&gt;&quot;</span>+</span></span><br><span class="language-javascript"><span class="language-xml">         <span class="hljs-string">&quot;&lt;td&gt;&lt;a href=\&quot;deleteEmp?id=002\&quot;&gt;Delete&lt;/a&gt;&lt;/td&gt;&quot;</span>+</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-string">&quot;&lt;/tr&gt;&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//添加到显示数据的表格中</span></span></span><br><span class="language-javascript"><span class="language-xml">         $tobr.<span class="hljs-title function_">appendTo</span>($(<span class="hljs-string">&quot;#employeeTable&quot;</span>));</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">       <span class="hljs-comment">//这里是每次添加新的信息之后，给他绑定删除事件，防止新添加的这些无法删除</span></span></span><br><span class="language-javascript"><span class="language-xml">      $tobr.<span class="hljs-title function_">find</span>(<span class="hljs-string">&quot;a&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//在事件响应function的时候会有一个this对象，这个this对象是当前正在响应事件的dom对象</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//得到a标签对象的父亲的父亲</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">var</span> $tbr=$(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">parent</span>().<span class="hljs-title function_">parent</span>();</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//获取第一个td标签的内容</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">var</span> name=$tbr.<span class="hljs-title function_">find</span>(<span class="hljs-string">&quot;td:first&quot;</span>).<span class="hljs-title function_">text</span>();</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//confirm是js提供的一个确认提示框，你给他传什么它就提示什么，用户点击确定就返回true，点击取消就返回false</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">if</span>(<span class="hljs-title function_">confirm</span>(<span class="hljs-string">&quot;你确定要删除&quot;</span>+name+<span class="hljs-string">&quot;么&quot;</span>))&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      $tbr.<span class="hljs-title function_">remove</span>();</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//return false; 可以阻止，元素的默认行为</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<span class="hljs-comment">//可以点击标签时不跳转</span></span></span><br><span class="language-javascript"><span class="language-xml">      &#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">   &#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//给删除a标签绑定单机事件</span></span></span><br><span class="language-javascript"><span class="language-xml">      $(<span class="hljs-string">&quot;a&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//在事件响应function的时候会有一个this对象，这个this对象是当前正在响应事件的dom对象</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//得到a标签对象的父亲的父亲</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">var</span> $tbr=$(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">parent</span>().<span class="hljs-title function_">parent</span>();</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//获取第一个td标签的内容</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">var</span> name=$tbr.<span class="hljs-title function_">find</span>(<span class="hljs-string">&quot;td:first&quot;</span>).<span class="hljs-title function_">text</span>();</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//confirm是js提供的一个确认提示框，你给他传什么它就提示什么，用户点击确定就返回true，点击取消就返回false</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">if</span>(<span class="hljs-title function_">confirm</span>(<span class="hljs-string">&quot;你确定要删除&quot;</span>+name+<span class="hljs-string">&quot;么&quot;</span>))&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      $tbr.<span class="hljs-title function_">remove</span>();</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//return false; 可以阻止，元素的默认行为</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<span class="hljs-comment">//可以点击标签时不跳转</span></span></span><br><span class="language-javascript"><span class="language-xml">      &#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">   &#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">   </span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;employeeTable&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Name<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Email<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Salary<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Tom<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>tom@tom.com<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>5000<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;deleteEmp?id=001&quot;</span>&gt;</span>Delete<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Jerry<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>jerry@sohu.com<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>8000<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;deleteEmp?id=002&quot;</span>&gt;</span>Delete<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Bob<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>bob@tom.com<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>10000<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;deleteEmp?id=003&quot;</span>&gt;</span>Delete<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;formDiv&quot;</span>&gt;</span></span><br><span class="language-xml">   </span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>添加新员工<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;word&quot;</span>&gt;</span>name: <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inp&quot;</span>&gt;</span></span><br><span class="language-xml">               <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;empName&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;empName&quot;</span> /&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;word&quot;</span>&gt;</span>email: <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inp&quot;</span>&gt;</span></span><br><span class="language-xml">               <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;email&quot;</span> /&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;word&quot;</span>&gt;</span>salary: <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inp&quot;</span>&gt;</span></span><br><span class="language-xml">               <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;salary&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;salary&quot;</span> /&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span></span><br><span class="language-xml">               <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addEmpButton&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;abc&quot;</span>&gt;</span></span><br><span class="language-xml">                  Submit</span><br><span class="language-xml">               <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>优化后，封装函数复用的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> <span class="hljs-variable constant_">HTML</span> <span class="hljs-variable constant_">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/strict.dtd&quot;</span>&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Untitled Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;styleB/css.css&quot;</span> /&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../../script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">   $(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-keyword">var</span> deleteFun=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-comment">//在事件响应function的时候会有一个this对象，这个this对象是当前正在响应事件的dom对象</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//得到a标签对象的父亲的父亲</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">var</span> $tbr=$(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">parent</span>().<span class="hljs-title function_">parent</span>();</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//获取第一个td标签的内容</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">var</span> name=$tbr.<span class="hljs-title function_">find</span>(<span class="hljs-string">&quot;td:first&quot;</span>).<span class="hljs-title function_">text</span>();</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//confirm是js提供的一个确认提示框，你给他传什么它就提示什么，用户点击确定就返回true，点击取消就返回false</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">if</span>(<span class="hljs-title function_">confirm</span>(<span class="hljs-string">&quot;你确定要删除&quot;</span>+name+<span class="hljs-string">&quot;么&quot;</span>))&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      $tbr.<span class="hljs-title function_">remove</span>();</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//return false; 可以阻止，元素的默认行为</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<span class="hljs-comment">//可以点击标签时不跳转</span></span></span><br><span class="language-javascript"><span class="language-xml">   &#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">   $(<span class="hljs-string">&quot;#addEmpButton&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-comment">//获取输入框的内容</span></span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-keyword">var</span> name=$(<span class="hljs-string">&quot;#empName&quot;</span>).<span class="hljs-title function_">val</span>();</span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-keyword">var</span> email=$(<span class="hljs-string">&quot;#email&quot;</span>).<span class="hljs-title function_">val</span>();</span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-keyword">var</span> salary=$(<span class="hljs-string">&quot;#salary&quot;</span>).<span class="hljs-title function_">val</span>();</span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-comment">//创建一个行标签对象，添加到显示数据的表格中</span></span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-keyword">var</span> $tobr=$(<span class="hljs-string">&quot;&lt;tr&gt;&quot;</span>+</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-string">&quot;&lt;td&gt;&quot;</span>+name+<span class="hljs-string">&quot;&lt;/td&gt;&quot;</span>+</span></span><br><span class="language-javascript"><span class="language-xml">         <span class="hljs-string">&quot;&lt;td&gt;&quot;</span>+email+<span class="hljs-string">&quot;&lt;/td&gt;&quot;</span>+</span></span><br><span class="language-javascript"><span class="language-xml">         <span class="hljs-string">&quot;&lt;td&gt;&quot;</span>+salary+<span class="hljs-string">&quot;&lt;/td&gt;&quot;</span>+</span></span><br><span class="language-javascript"><span class="language-xml">         <span class="hljs-string">&quot;&lt;td&gt;&lt;a href=\&quot;deleteEmp?id=002\&quot;&gt;Delete&lt;/a&gt;&lt;/td&gt;&quot;</span>+</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-string">&quot;&lt;/tr&gt;&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//添加到显示数据的表格中</span></span></span><br><span class="language-javascript"><span class="language-xml">         $tobr.<span class="hljs-title function_">appendTo</span>($(<span class="hljs-string">&quot;#employeeTable&quot;</span>));</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">       <span class="hljs-comment">//这里是每次添加新的信息之后，给他绑定删除事件，防止新添加的这些无法删除</span></span></span><br><span class="language-javascript"><span class="language-xml">      $tobr.<span class="hljs-title function_">find</span>(<span class="hljs-string">&quot;a&quot;</span>).<span class="hljs-title function_">click</span>(deleteFun);&#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//给删除a标签绑定单机事件</span></span></span><br><span class="language-javascript"><span class="language-xml">      $(<span class="hljs-string">&quot;a&quot;</span>).<span class="hljs-title function_">click</span>(deleteFun);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">   &#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">   </span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;employeeTable&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Name<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Email<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Salary<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Tom<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>tom@tom.com<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>5000<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;deleteEmp?id=001&quot;</span>&gt;</span>Delete<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Jerry<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>jerry@sohu.com<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>8000<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;deleteEmp?id=002&quot;</span>&gt;</span>Delete<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Bob<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>bob@tom.com<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>10000<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;deleteEmp?id=003&quot;</span>&gt;</span>Delete<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;formDiv&quot;</span>&gt;</span></span><br><span class="language-xml">   </span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>添加新员工<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;word&quot;</span>&gt;</span>name: <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inp&quot;</span>&gt;</span></span><br><span class="language-xml">               <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;empName&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;empName&quot;</span> /&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;word&quot;</span>&gt;</span>email: <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inp&quot;</span>&gt;</span></span><br><span class="language-xml">               <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;email&quot;</span> /&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;word&quot;</span>&gt;</span>salary: <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inp&quot;</span>&gt;</span></span><br><span class="language-xml">               <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;salary&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;salary&quot;</span> /&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span></span><br><span class="language-xml">               <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addEmpButton&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;abc&quot;</span>&gt;</span></span><br><span class="language-xml">                  Submit</span><br><span class="language-xml">               <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="jQuery中css样式操作"><a href="#jQuery中css样式操作" class="headerlink" title="jQuery中css样式操作"></a>jQuery中css样式操作</h4><p>addClass()        添加样式</p><p>removeClass()    删除样式</p><p>toggleClass()    有就删除，没有就添加样式</p><p>offset()        获取和设置元素的坐标，下面是这个的样例显示</p><p>top: 10.777777671813965, left: 118.55555725097656}  这两个参数top是符合条件的标签到浏览器顶上的距离，left是到左边框距离</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.whiteborder</span>&#123;<br>   <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> white solid;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个div是指这个样式只能给div这个标签使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html <span class="hljs-variable constant_">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Insert title here<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml">   </span></span><br><span class="language-css"><span class="language-xml">   <span class="hljs-selector-tag">div</span>&#123;</span></span><br><span class="language-css"><span class="language-xml">      <span class="hljs-attribute">width</span>:<span class="hljs-number">100px</span>;</span></span><br><span class="language-css"><span class="language-xml">      <span class="hljs-attribute">height</span>:<span class="hljs-number">260px</span>;</span></span><br><span class="language-css"><span class="language-xml">   &#125;</span></span><br><span class="language-css"><span class="language-xml">   </span></span><br><span class="language-css"><span class="language-xml">   <span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.whiteborder</span>&#123;</span></span><br><span class="language-css"><span class="language-xml">      <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> white solid;</span></span><br><span class="language-css"><span class="language-xml">   &#125;</span></span><br><span class="language-css"><span class="language-xml">   </span></span><br><span class="language-css"><span class="language-xml">   <span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.redDiv</span>&#123;</span></span><br><span class="language-css"><span class="language-xml">      <span class="hljs-attribute">background-color</span>: red;</span></span><br><span class="language-css"><span class="language-xml">   &#125;</span></span><br><span class="language-css"><span class="language-xml">   </span></span><br><span class="language-css"><span class="language-xml">   <span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.blueBorder</span>&#123;</span></span><br><span class="language-css"><span class="language-xml">      <span class="hljs-attribute">border</span>: <span class="hljs-number">5px</span> blue solid;</span></span><br><span class="language-css"><span class="language-xml">   &#125;</span></span><br><span class="language-css"><span class="language-xml">   </span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">   </span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">   $(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      </span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">var</span> $divEle = $(<span class="hljs-string">&#x27;div:first&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">      </span></span><br><span class="language-javascript"><span class="language-xml">      $(<span class="hljs-string">&#x27;#btn01&#x27;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">         <span class="hljs-comment">//addClass() - 向被选元素添加一个或多个类</span></span></span><br><span class="language-javascript"><span class="language-xml">         $divEle.<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&quot;redDiv blueBorder&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">      </span></span><br><span class="language-javascript"><span class="language-xml">      $(<span class="hljs-string">&#x27;#btn02&#x27;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">         <span class="hljs-comment">//removeClass() - 从被选元素删除一个或多个类 </span></span></span><br><span class="language-javascript"><span class="language-xml">         $divEle.<span class="hljs-title function_">removeClass</span>(<span class="hljs-string">&quot;redDiv blueBorder&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">         <span class="hljs-comment">//$divEle.removeClass();全部删除</span></span></span><br><span class="language-javascript"><span class="language-xml">      &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">   </span></span><br><span class="language-javascript"><span class="language-xml">      </span></span><br><span class="language-javascript"><span class="language-xml">      $(<span class="hljs-string">&#x27;#btn03&#x27;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">         <span class="hljs-comment">//toggleClass() - 对被选元素进行添加/删除类的切换操作 </span></span></span><br><span class="language-javascript"><span class="language-xml">         $divEle.<span class="hljs-title function_">toggleClass</span>(<span class="hljs-string">&#x27;redDiv&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">      </span></span><br><span class="language-javascript"><span class="language-xml">      </span></span><br><span class="language-javascript"><span class="language-xml">      $(<span class="hljs-string">&#x27;#btn04&#x27;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">         <span class="hljs-comment">//offset() - 返回第一个匹配元素相对于文档的位置。</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">var</span> pos=$divEle.<span class="hljs-title function_">offset</span>();</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//得到top和left</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(pos);</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//还可以自己设置top和left，不一定是自己输入的值，按照当前屏幕大小给的值</span></span></span><br><span class="language-javascript"><span class="language-xml">      $divEle.<span class="hljs-title function_">offset</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">top</span>:<span class="hljs-number">100</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">left</span>:<span class="hljs-number">50</span></span></span><br><span class="language-javascript"><span class="language-xml">      &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">      </span></span><br><span class="language-javascript"><span class="language-xml">   </span></span><br><span class="language-javascript"><span class="language-xml">      </span></span><br><span class="language-javascript"><span class="language-xml">   &#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;border&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">         </span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span></span><br><span class="language-xml">               <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;addClass()&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn01&quot;</span>/&gt;</span></span><br><span class="language-xml">               <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;removeClass()&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn02&quot;</span>/&gt;</span></span><br><span class="language-xml">               <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;toggleClass()&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn03&quot;</span>/&gt;</span></span><br><span class="language-xml">               <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;offset()&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn04&quot;</span>/&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span><br><span class="language-xml">   </span><br><span class="language-xml">   </span><br><span class="language-xml">   </span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br><span class="language-xml">   </span><br><span class="language-xml">   </span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br><span class="language-xml">   </span><br><span class="language-xml">   </span><br><span class="language-xml">   </span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="jQuery动画"><a href="#jQuery动画" class="headerlink" title="jQuery动画"></a>jQuery动画</h4><p>基本动画</p><p>show()       将隐藏的元素显示</p><p>hide()         将可见的元素隐藏</p><p>toggle()       可见就隐藏，不可见就显示</p><p>以上动画方法都可以添加参数</p><p>这七个函数的参数都是这俩，只有fadeTo是不一样的，因为fadeTo多一个透明度的参数</p><p>​        1.第一个参数是动画执行的时常，以毫秒为单位</p><p>​        2.第二个参数是动画的回调函数（动画完成后自动调用的函数）</p><p>淡入淡出动画</p><p>fadeln()     淡入   慢慢可见</p><p>fadeOut()   淡出    慢慢消失</p><p>fadeTo()   在指定时常内慢慢的将透明度修改到指定的值  0透明   0.5半透明  1不透明</p><p>fadeToggle()   淡入淡出切换</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">HTML</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/strict.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Untitled Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/style.css&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>   <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">   <span class="hljs-comment">/*     </span></span><br><span class="hljs-comment"><span class="language-javascript">      基本</span></span><br><span class="hljs-comment"><span class="language-javascript">      show([speed,[easing],[fn]]) </span></span><br><span class="hljs-comment"><span class="language-javascript">      hide([speed,[easing],[fn]]) </span></span><br><span class="hljs-comment"><span class="language-javascript">      toggle([speed],[easing],[fn]) </span></span><br><span class="hljs-comment"><span class="language-javascript">      滑动</span></span><br><span class="hljs-comment"><span class="language-javascript">      slideDown([spe],[eas],[fn]) </span></span><br><span class="hljs-comment"><span class="language-javascript">      slideUp([speed,[easing],[fn]]) </span></span><br><span class="hljs-comment"><span class="language-javascript">      slideToggle([speed],[easing],[fn]) </span></span><br><span class="hljs-comment"><span class="language-javascript">      淡入淡出</span></span><br><span class="hljs-comment"><span class="language-javascript">      fadeIn([speed],[eas],[fn]) </span></span><br><span class="hljs-comment"><span class="language-javascript">      fadeOut([speed],[eas],[fn]) </span></span><br><span class="hljs-comment"><span class="language-javascript">      fadeTo([[spe],opa,[eas],[fn]]) </span></span><br><span class="hljs-comment"><span class="language-javascript">      fadeToggle([speed,[eas],[fn]])</span></span><br><span class="hljs-comment"><span class="language-javascript">      */</span></span><br><span class="language-javascript">      $(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">         <span class="hljs-comment">//显示   show()</span></span><br><span class="language-javascript">         $(<span class="hljs-string">&quot;#btn1&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            $(<span class="hljs-string">&quot;#div1&quot;</span>).<span class="hljs-title function_">show</span>(<span class="hljs-number">1000</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;show动画完成&quot;</span>)</span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript">         &#125;);       </span><br><span class="language-javascript">         <span class="hljs-comment">//隐藏  hide()</span></span><br><span class="language-javascript">         $(<span class="hljs-string">&quot;#btn2&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            $(<span class="hljs-string">&quot;#div1&quot;</span>).<span class="hljs-title function_">hide</span>(<span class="hljs-number">1000</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;hide动画执行完成&quot;</span>)</span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript">         &#125;);    </span><br><span class="language-javascript">         <span class="hljs-comment">//切换   toggle()</span></span><br><span class="language-javascript">         $(<span class="hljs-string">&quot;#btn3&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            $(<span class="hljs-string">&quot;#div1&quot;</span>).<span class="hljs-title function_">toggle</span>(<span class="hljs-number">1000</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;toggle动画执行完成&quot;</span>)</span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript">         &#125;);</span><br><span class="language-javascript">         <span class="hljs-comment">//动画的演示方式，就是不断的调用他自己</span></span><br><span class="language-javascript">         <span class="hljs-comment">/*var abc=function()&#123;</span></span><br><span class="hljs-comment"><span class="language-javascript">         $(&quot;#div1&quot;).toggle(1000,abc);</span></span><br><span class="hljs-comment"><span class="language-javascript">         &#125;</span></span><br><span class="hljs-comment"><span class="language-javascript">         abc();*/</span></span><br><span class="language-javascript">         </span><br><span class="language-javascript">         <span class="hljs-comment">//淡入   fadeIn()</span></span><br><span class="language-javascript">         $(<span class="hljs-string">&quot;#btn4&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;#div1&#x27;</span>).<span class="hljs-title function_">fadeIn</span>(<span class="hljs-number">2000</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;淡入完成&quot;</span>);</span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript">         &#125;);    </span><br><span class="language-javascript">         <span class="hljs-comment">//淡出  fadeOut()</span></span><br><span class="language-javascript">         $(<span class="hljs-string">&quot;#btn5&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;#div1&#x27;</span>).<span class="hljs-title function_">fadeOut</span>(<span class="hljs-number">2000</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;淡出完成&quot;</span>);</span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript">         &#125;);    </span><br><span class="language-javascript">         </span><br><span class="language-javascript">         <span class="hljs-comment">//淡化到  fadeTo()</span></span><br><span class="language-javascript">         $(<span class="hljs-string">&quot;#btn6&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            $(<span class="hljs-string">&quot;#div1&quot;</span>).<span class="hljs-title function_">fadeTo</span>(<span class="hljs-number">2000</span>,<span class="hljs-number">0.5</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;fadeTo完成&quot;</span>);</span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript">         &#125;);    </span><br><span class="language-javascript">         <span class="hljs-comment">//淡化切换  fadeToggle()</span></span><br><span class="language-javascript">         $(<span class="hljs-string">&quot;#btn7&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;#div1&#x27;</span>).<span class="hljs-title function_">fadeToggle</span>(<span class="hljs-number">2000</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;切换完成&quot;</span>);</span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript">         &#125;);    </span><br><span class="language-javascript">      &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>   <br>   <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;float: left;&quot;</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn1&quot;</span>&gt;</span>显示show()<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn2&quot;</span>&gt;</span>隐藏hide()<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn3&quot;</span>&gt;</span>显示/隐藏切换 toggle()<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn4&quot;</span>&gt;</span>淡入fadeIn()<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn5&quot;</span>&gt;</span>淡出fadeOut()<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn6&quot;</span>&gt;</span>淡化到fadeTo()<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn7&quot;</span>&gt;</span>淡化切换fadeToggle()<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>      <br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;div1&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;float:left;border: 1px solid;background-color: blue;width: 300px;height: 200px;&quot;</span>&gt;</span><br>         jquery动画定义了很多种动画效果，可以很方便的使用这些动画效果<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="jQuery动画练习"><a href="#jQuery动画练习" class="headerlink" title="jQuery动画练习"></a>jQuery动画练习</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.showmore</span> <span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">span</span> &#123;<br>   <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">15px</span>;<br>   <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">img/down.gif</span>) no-repeat <span class="hljs-number">0</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个css选择器的意思是   类选择器      且用这个选择器的标签子代必须有一个a，a的子代必须有一个span</p><p>添加cssclass样式的时候既可以用prop也可以用addClass</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html <span class="hljs-variable constant_">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>品牌展示练习<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml">* &#123;</span></span><br><span class="language-css"><span class="language-xml">   <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span></span><br><span class="language-css"><span class="language-xml">   <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-tag">body</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">   <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;</span></span><br><span class="language-css"><span class="language-xml">   <span class="hljs-attribute">text-align</span>: center;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-tag">a</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">   <span class="hljs-attribute">color</span>: <span class="hljs-number">#04D</span>;</span></span><br><span class="language-css"><span class="language-xml">   <span class="hljs-attribute">text-decoration</span>: none;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">   <span class="hljs-attribute">color</span>: <span class="hljs-number">#F50</span>;</span></span><br><span class="language-css"><span class="language-xml">   <span class="hljs-attribute">text-decoration</span>: underline;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.SubCategoryBox</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">   <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;</span></span><br><span class="language-css"><span class="language-xml">   <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span></span><br><span class="language-css"><span class="language-xml">   <span class="hljs-attribute">text-align</span>: center;</span></span><br><span class="language-css"><span class="language-xml">   <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">40px</span>;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.SubCategoryBox</span> <span class="hljs-selector-tag">ul</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">   <span class="hljs-attribute">list-style</span>: none;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.SubCategoryBox</span> <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">   <span class="hljs-attribute">display</span>: block;</span></span><br><span class="language-css"><span class="language-xml">   <span class="hljs-attribute">float</span>: left;</span></span><br><span class="language-css"><span class="language-xml">   <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span></span><br><span class="language-css"><span class="language-xml">   <span class="hljs-attribute">line-height</span>: <span class="hljs-number">20px</span>;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.showmore</span> , <span class="hljs-selector-class">.showless</span>&#123;</span></span><br><span class="language-css"><span class="language-xml">   <span class="hljs-attribute">clear</span>: both;</span></span><br><span class="language-css"><span class="language-xml">   <span class="hljs-attribute">text-align</span>: center;</span></span><br><span class="language-css"><span class="language-xml">   <span class="hljs-attribute">padding-top</span>: <span class="hljs-number">10px</span>;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.showmore</span> <span class="hljs-selector-tag">a</span> , <span class="hljs-selector-class">.showless</span> <span class="hljs-selector-tag">a</span>&#123;</span></span><br><span class="language-css"><span class="language-xml">   <span class="hljs-attribute">display</span>: block;</span></span><br><span class="language-css"><span class="language-xml">   <span class="hljs-attribute">width</span>: <span class="hljs-number">120px</span>;</span></span><br><span class="language-css"><span class="language-xml">   <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span></span><br><span class="language-css"><span class="language-xml">   <span class="hljs-attribute">line-height</span>: <span class="hljs-number">24px</span>;</span></span><br><span class="language-css"><span class="language-xml">   <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#AAA</span>;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.showmore</span> <span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">span</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">   <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">15px</span>;</span></span><br><span class="language-css"><span class="language-xml">   <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">img/down.gif</span>) no-repeat <span class="hljs-number">0</span> <span class="hljs-number">0</span>;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.showless</span> <span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">span</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">   <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">15px</span>;</span></span><br><span class="language-css"><span class="language-xml">   <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">img/up.gif</span>) no-repeat <span class="hljs-number">0</span> <span class="hljs-number">0</span>;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.promoted</span> <span class="hljs-selector-tag">a</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">   <span class="hljs-attribute">color</span>: <span class="hljs-number">#F50</span>;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">   $(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-comment">//基本初始状态</span></span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-string">&quot;li:gt(5):not(:last)&quot;</span>).<span class="hljs-title function_">hide</span>();<span class="hljs-comment">//hide是动画操作</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//给功能的按钮绑定单击事件</span></span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-string">&quot;div div a&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-string">&quot;li:gt(5):not(:last)&quot;</span>).<span class="hljs-title function_">toggle</span>();<span class="hljs-comment">//切换回显示</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//按钮上的文本，1.显示全部品牌，角标向下，文字显示全部品牌</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">if</span>( $(<span class="hljs-string">&quot;li:gt(5):not(:last)&quot;</span>).<span class="hljs-title function_">is</span>(<span class="hljs-string">&quot;:hidden&quot;</span>))&#123;</span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-string">&quot;div div a span&quot;</span>).<span class="hljs-title function_">text</span>(<span class="hljs-string">&quot;显示全部品牌&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-string">&quot;div div&quot;</span>).<span class="hljs-title function_">removeClass</span>();</span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-string">&quot;div div&quot;</span>).<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&quot;showmore&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//$(&quot;div div&quot;).prop(&quot;class&quot;,&quot;showmore&quot;);,添加自己定义的css类的时候也可以用prop</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//高亮取消</span></span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-string">&quot;li:contains(&#x27;索尼&#x27;)&quot;</span>).<span class="hljs-title function_">removeClass</span>(<span class="hljs-string">&quot;promoted&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">else</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//显示精简品牌，角标向上，且文字是显示精简品牌</span></span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-string">&quot;div div a span&quot;</span>).<span class="hljs-title function_">text</span>(<span class="hljs-string">&quot;显示精简品牌&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-string">&quot;div div&quot;</span>).<span class="hljs-title function_">removeClass</span>();</span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-string">&quot;div div&quot;</span>).<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&quot;showless&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//$(&quot;div div&quot;).prop(&quot;class&quot;,&quot;showless&quot;);</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//高亮取消</span></span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-string">&quot;li:contains(&#x27;索尼&#x27;)&quot;</span>).<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&quot;promoted&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">   &#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;SubCategoryBox&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>佳能<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>(30440) <span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>索尼<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>(27220) <span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>三星<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>(20808) <span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>尼康<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>(17821) <span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>松下<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>(12289) <span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>卡西欧<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>(8242) <span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>富士<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>(14894) <span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>柯达<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>(9520) <span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>宾得<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>(2195) <span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>理光<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>(4114) <span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>奥林巴斯<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>(12205) <span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>明基<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>(1466) <span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>爱国者<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>(3091) <span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>其它品牌相机<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>(7275) <span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;showmore&quot;</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;more.html&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>显示全部品牌<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="原生js和jQuery页面加载完成之后的区别"><a href="#原生js和jQuery页面加载完成之后的区别" class="headerlink" title="原生js和jQuery页面加载完成之后的区别"></a>原生js和jQuery页面加载完成之后的区别</h4><p>$( function(){} ); 和 window.onload &#x3D; function(){} 的区别？ </p><p>他们分别是在什么时候触发？ </p><p>1、jQuery 的页面加载完成之后是浏览器的内核解析完页面的标签创建好 DOM 对象之后就会马上执行。 </p><p>2、原生 js 的页面加载完成之后，除了要等浏览器内核解析完标签创建好 DOM 对象，还要等标签显示时需要的内容加载 完成。 </p><p>他们触发的顺序？ </p><p>1、jQuery 页面加载完成之后先执行 </p><p>2、原生 js 的页面加载完成之后 </p><p>他们执行的次数？ </p><p>1、原生 js 的页面加载完成之后，只会执行最后一次的赋值函数。 </p><p>2、jQuery 的页面加载完成之后是全部把注册的 function 函数，依次顺序全部执行</p><h4 id="jQuery中常用的事件处理方法"><a href="#jQuery中常用的事件处理方法" class="headerlink" title="jQuery中常用的事件处理方法"></a>jQuery中常用的事件处理方法</h4><p>click()        可以绑定单击事件，以及触发单击事件</p><p>mouseover()    鼠标移入事件</p><p>mouseout()     鼠标移出事件</p><p>bind()      可以给元素一次性绑定一个或多个事件</p><p>one()     使用上和bind一样，但是one方法绑定的事件只会触发一次</p><p>unbind ()    和bind方法相反的操作，解除事件的绑定</p><p>live()    也是用来绑定事件的，可以用来绑定选择器匹配的所有元素的事件，哪怕这个元素是后面动态创建出来的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> <span class="hljs-variable constant_">HTML</span> <span class="hljs-variable constant_">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/strict.dtd&quot;</span>&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Untitled Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/style.css&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../../script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">      </span></span><br><span class="language-javascript"><span class="language-xml">         $(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">//1.通常绑定事件的方式</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">//3.合并“鼠标移入”和“鼠标移出”事件</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">//4.合并单击事件</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">//5.切换元素可见状态</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">//6.只绑定一次</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">               <span class="hljs-comment">// 触发事件的讲解</span></span></span><br><span class="language-javascript"><span class="language-xml">            $(<span class="hljs-string">&quot;h5&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-comment">//传function是绑定事件</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;h5单击事件&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">/*$(&quot;button&quot;).click(function()&#123;</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">            $(&quot;h5&quot;).click();//不传function是触发事件，就是调用了h5的绑定事件</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">            &#125;);*/</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">//鼠标移入事件</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">/*$(&quot;h5&quot;).mouseover(function()&#123;</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">            console.log(&quot;你进来了&quot;);</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">            &#125;);*/</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">//鼠标移除事件</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">/*$(&quot;h5&quot;).mouseout(function()&#123;</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">            console.log(&quot;你出来了&quot;);</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">            &#125;);*/</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">//jQuery提供的绑定方式：bind()函数</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">/*$(&quot;h5&quot;).bind(&quot;click mouseover mouseout&quot;,function()&#123;</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">            console.log(&quot;这是bind绑定的事件&quot;);</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">            &#125;);*/</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">               <span class="hljs-comment">//one()函数</span></span></span><br><span class="language-javascript"><span class="language-xml">              <span class="hljs-comment">/* $(&quot;h5&quot;).one(&quot;click mouseover mouseout&quot;,function()&#123;</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">               console.log(&quot;这是one绑定的事件&quot;);</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">               &#125;);*/</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">              <span class="hljs-comment">//unbind()函数,不加参数就全删了</span></span></span><br><span class="language-javascript"><span class="language-xml">              <span class="hljs-comment">/*$(&quot;h5&quot;).unbind(&quot;click mouseover&quot;);*/</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">              <span class="hljs-comment">//live()函数</span></span></span><br><span class="language-javascript"><span class="language-xml">              <span class="hljs-comment">//正常的绑定函数就是只有一开始那个被绑定的标签有效果，现在后来添加的标签依然是有效果的</span></span></span><br><span class="language-javascript"><span class="language-xml">              $(<span class="hljs-string">&quot;h5&quot;</span>).<span class="hljs-title function_">live</span>(<span class="hljs-string">&quot;click&quot;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">              <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;h5单击事件==live方法绑定&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">              &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">              $(<span class="hljs-string">&#x27;&lt;h5 class=&quot;head&quot;&gt;什么是jQuery?&lt;/h5&gt;&#x27;</span>).<span class="hljs-title function_">appendTo</span>($(<span class="hljs-string">&quot;#panel&quot;</span>));</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">         &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">      </span></span><br><span class="language-javascript"><span class="language-xml">      </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;panel&quot;</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">h5</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;head&quot;</span>&gt;</span>什么是jQuery?<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span></span><br><span class="language-xml">            jQuery是继Prototype之后又一个优秀的JavaScript库，它是一个由 John Resig 创建于2006年1月的开源项目。jQuery凭借简洁的语法和跨平台的兼容性，极大地简化了JavaScript开发人员遍历HTML文档、操作DOM、处理事件、执行动画和开发Ajax。它独特而又优雅的代码风格改变了JavaScript程序员的设计思路和编写程序的方式。</span><br><span class="language-xml">         <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="jQuery事件的冒泡"><a href="#jQuery事件的冒泡" class="headerlink" title="jQuery事件的冒泡"></a>jQuery事件的冒泡</h4><p>事件冒泡是指父子元素同时监听一个事件，当触发子元素事件的时候，同一个事件也被传递到了父元素的事件里去响应</p><p>在子元素事件函数体内，return false 可以阻止事件的冒泡传递</p><p>简单来说就是，如果父子元素绑定同一个事件，子元素的事件被触发的时候，父元素的这个事件也会被触发</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">HTML</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/strict.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Untitled Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css">*&#123;</span><br><span class="language-css"><span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css"><span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-tag">body</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">font-size</span>: <span class="hljs-number">13px</span>;</span><br><span class="language-css"><span class="hljs-attribute">line-height</span>: <span class="hljs-number">130%</span>;</span><br><span class="language-css"><span class="hljs-attribute">padding</span>: <span class="hljs-number">60px</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-id">#content</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">width</span>: <span class="hljs-number">220px</span>;</span><br><span class="language-css"><span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#0050D0</span>;</span><br><span class="language-css"><span class="hljs-attribute">background</span>: <span class="hljs-number">#96E555</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-tag">span</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css"><span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css"><span class="hljs-attribute">background</span>: <span class="hljs-number">#666666</span>;</span><br><span class="language-css"><span class="hljs-attribute">cursor</span>: pointer;</span><br><span class="language-css"><span class="hljs-attribute">color</span>: white;</span><br><span class="language-css"><span class="hljs-attribute">display</span>: block;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-tag">p</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css"><span class="hljs-attribute">background</span>: <span class="hljs-number">#888</span>;</span><br><span class="language-css"><span class="hljs-attribute">color</span>: white;</span><br><span class="language-css"><span class="hljs-attribute">height</span>: <span class="hljs-number">16px</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">$(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">$(<span class="hljs-string">&quot;#content&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;这是div&quot;</span>);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript">$(<span class="hljs-string">&quot;span&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;这是span&quot;</span>);</span><br><span class="language-javascript"><span class="hljs-comment">//return false;</span></span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>外层div元素<br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>内层span元素<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>外层div元素<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;msg&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://www.hao123.com&quot;</span>&gt;</span>WWW.HAO123.COM<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br><br></code></pre></td></tr></table></figure><h4 id="jQuery事件对象"><a href="#jQuery事件对象" class="headerlink" title="jQuery事件对象"></a>jQuery事件对象</h4><p>事件对象，是封装有触发的事件信息的一个javascript对象</p><p>我们重点关心的是怎么拿到这个javasccript的事件对象</p><p>再给元素绑定事件的时候，在事件的function参数列表中添加一个参数，这个event就是javasccript传递参事件处理函数的事件对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Insert title here<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css"></span><br><span class="language-css">   <span class="hljs-selector-id">#areaDiv</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;</span><br><span class="language-css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">   &#125;</span><br><span class="language-css">   </span><br><span class="language-css">   <span class="hljs-selector-id">#showMsg</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;</span><br><span class="language-css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">   &#125;</span><br><span class="language-css"></span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">   <span class="hljs-comment">//1.原生javascript获取 事件对象</span></span><br><span class="language-javascript">   <span class="hljs-comment">/*window.onload=function()&#123;</span></span><br><span class="hljs-comment"><span class="language-javascript">   document.getElementById(&quot;areaDiv&quot;).onclick=function(event)&#123;</span></span><br><span class="hljs-comment"><span class="language-javascript">   console.log(event);</span></span><br><span class="hljs-comment"><span class="language-javascript">   &#125;</span></span><br><span class="hljs-comment"><span class="language-javascript">   &#125;;*/</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">   <span class="hljs-comment">//2.JQuery代码获取 事件对象</span></span><br><span class="language-javascript">   <span class="hljs-comment">/*$(function()&#123;</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">   $(&quot;#areaDiv&quot;).click(function(event)&#123;</span></span><br><span class="hljs-comment"><span class="language-javascript">   console.log(event);</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">   &#125;);</span></span><br><span class="hljs-comment"><span class="language-javascript">   &#125;);*/</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">   <span class="hljs-comment">//3.使用bind同时对多个事件绑定同一个函数。怎么获取当前操作是什么事件。</span></span><br><span class="language-javascript">    <span class="hljs-comment">//这个操作可以让bind绑定的多个事件做不一样的事情</span></span><br><span class="language-javascript">    $(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">    $(<span class="hljs-string">&quot;#areaDiv&quot;</span>).<span class="hljs-title function_">bind</span>(<span class="hljs-string">&quot;mouseout mouseover&quot;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)&#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">if</span>(event.<span class="hljs-property">type</span>==<span class="hljs-string">&quot;mouseover&quot;</span>)&#123;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;鼠标移入&quot;</span>);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(event.<span class="hljs-property">type</span>==<span class="hljs-string">&quot;mouseout&quot;</span>)</span><br><span class="language-javascript">    &#123;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;鼠标移出&quot;</span>);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;areaDiv&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;showMsg&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="jQuery练习，图片跟随"><a href="#jQuery练习，图片跟随" class="headerlink" title="jQuery练习，图片跟随"></a>jQuery练习，图片跟随</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html <span class="hljs-variable constant_">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;<br>&lt;title&gt;Insert title here&lt;/title&gt;<br>&lt;style type=&quot;text/css&quot;&gt;<br>   body &#123;<br>      text-align: center;<br>   &#125;<br>   #small &#123;<br>      margin-top: 150px;<br>   &#125;<br>   #showBig &#123;<br>      position: absolute;<br>      display: none;<br>   &#125;<br>&lt;/style&gt;<br>&lt;script type=&quot;text/javascript&quot; src=&quot;script/jquery-1.7.2.js&quot;&gt;&lt;/script&gt;<br>&lt;script type=&quot;text/javascript&quot;&gt;<br>   $(function()&#123;<br>      $(&quot;#small&quot;).bind(&quot;mouseover mouseout mousemove&quot;,function(event)&#123;<br>             if(event.type==&quot;mouseover&quot;)&#123;<br>             $(&quot;#showBig&quot;).show();<br>             &#125;<br>             else if(event.type==&quot;mouseout&quot;)&#123;<br>             $(&quot;#showBig&quot;).hide();<br>             &#125;<br>             else if(event.type==&quot;mousemove&quot;)&#123;<br>             $(&quot;#showBig&quot;).offset(&#123;<br>             left:event.pageX+10,<br>             top:event.pageY+10<br>             &#125;);<br>             &#125;<br><br><br><br><br>      &#125;);<br>   &#125;);<br>&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br><br>   &lt;img id=&quot;small&quot; src=&quot;img/small.jpg&quot; /&gt;<br>   <br>   &lt;div id=&quot;showBig&quot;&gt;<br>      &lt;img src=&quot;img/big.jpg&quot;&gt;<br>   &lt;/div&gt;<br><br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h4 id="书城项目的第一个阶段表单验证"><a href="#书城项目的第一个阶段表单验证" class="headerlink" title="书城项目的第一个阶段表单验证"></a>书城项目的第一个阶段表单验证</h4><p>规定了注册时用户名密码的格式，以及错误提示等等，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=&quot;UTF-8&quot;&gt;<br>&lt;title&gt;尚硅谷会员注册页面&lt;/title&gt;<br>&lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;../../static/css/style.css&quot; &gt;<br>&lt;script src=&quot;../../static/script/jquery-1.7.2.js&quot;&gt;&lt;/script&gt;<br>&lt;script&gt;<br>$(function()&#123;<br>//1.验证用户名，必须由数字字母下划线组成，并且长度为5到12位<br>$(&quot;#sub_btn&quot;).click(function()&#123;<br>//1.获取用户名输入框中的内容<br>var username=$(&quot;#username&quot;).val();<br>//2.创建正则表达式对象<br>var pattern=/^\w&#123;5,12&#125;$/;<br>//3.使用test方法进行验证<br>if(!pattern.test(username))&#123;<br>$(&quot;span.errorMsg&quot;).text(&quot;用户名不合法&quot;);<br>//有了return false不会跳转<br>return false;<br>&#125;<br>//2.验证密码<br>//1.获取用户名输入框中的内容<br>var password=$(&quot;#password&quot;).val();<br>//2.创建正则表达式对象<br>var pspattern=/^\w&#123;5,12&#125;$/;<br>//3.使用test方法进行验证<br>if(!pspattern.test(password))&#123;<br>$(&quot;span.errorMsg&quot;).text(&quot;密码不合法&quot;);<br>//有了return false不会跳转<br>return false;<br>&#125;<br><br><br>//3.确认密码<br>        //1.获取确认密码内容<br>        var repassword =$(&quot;#repwd&quot;).val();<br>        if(repassword!=password)&#123;<br>        $(&quot;span.errorMsg&quot;).text(&quot;确认密码与密码不一致&quot;);<br>        return false;<br>        &#125;<br><br>//4.验证邮箱<br>        //1.获取邮箱当中的内容<br>        var emailText=$(&quot;#email&quot;).val();<br>        var emailpt=/^([a-z0-9_\.-]+)@([\da-z\.-]+)\.([a-z\.]&#123;2,6&#125;)$/;<br>        if(!emailpt.test(emailText))&#123;<br>        $(&quot;span.errorMsg&quot;).text(&quot;邮箱格式不合法&quot;);<br>        return false;<br>        &#125;<br><br><br>//5.验证码，验证由输入内容即可<br>        var codeText=$(&quot;#code&quot;).val();<br>        //去掉验证码前后空格<br>        codeText=$.trim(codeText);<br>        if(codeText==null||codeText==&quot;&quot;)&#123;<br>        $(&quot;span.errorMsg&quot;).text(&quot;无验证码&quot;);<br>        return false;<br>        &#125;<br><br>        $(&quot;span.errorMsg&quot;).text(&quot;&quot;);//如果用户名密码邮箱又合法了再给他改过来<br>&#125;);<br>&#125;);<br><br>&lt;/script&gt;<br>&lt;style type=&quot;text/css&quot;&gt;<br>.login_form&#123;<br>height:420px;<br>margin-top: 25px;<br>&#125;<br><br>&lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div id=&quot;login_header&quot;&gt;<br>&lt;img class=&quot;logo_img&quot; alt=&quot;&quot; src=&quot;../../static/img/logo.gif&quot; &gt;<br>&lt;/div&gt;<br><br>&lt;div class=&quot;login_banner&quot;&gt;<br><br>&lt;div id=&quot;l_content&quot;&gt;<br>&lt;span class=&quot;login_word&quot;&gt;欢迎注册&lt;/span&gt;<br>&lt;/div&gt;<br><br>&lt;div id=&quot;content&quot;&gt;<br>&lt;div class=&quot;login_form&quot;&gt;<br>&lt;div class=&quot;login_box&quot;&gt;<br>&lt;div class=&quot;tit&quot;&gt;<br>&lt;h1&gt;注册尚硅谷会员&lt;/h1&gt;<br>&lt;span class=&quot;errorMsg&quot;&gt;&lt;/span&gt;<br>&lt;/div&gt;<br>&lt;div class=&quot;form&quot;&gt;<br>&lt;form action=&quot;regist_success.html&quot;&gt;<br>&lt;label&gt;用户名称：&lt;/label&gt;<br>&lt;input class=&quot;itxt&quot; type=&quot;text&quot; placeholder=&quot;请输入用户名&quot; autocomplete=&quot;off&quot; tabindex=&quot;1&quot; name=&quot;username&quot; id=&quot;username&quot; /&gt;<br>&lt;br /&gt;<br>&lt;br /&gt;<br>&lt;label&gt;用户密码：&lt;/label&gt;<br>&lt;input class=&quot;itxt&quot; type=&quot;password&quot; placeholder=&quot;请输入密码&quot; autocomplete=&quot;off&quot; tabindex=&quot;1&quot; name=&quot;password&quot; id=&quot;password&quot; /&gt;<br>&lt;br /&gt;<br>&lt;br /&gt;<br>&lt;label&gt;确认密码：&lt;/label&gt;<br>&lt;input class=&quot;itxt&quot; type=&quot;password&quot; placeholder=&quot;确认密码&quot; autocomplete=&quot;off&quot; tabindex=&quot;1&quot; name=&quot;repwd&quot; id=&quot;repwd&quot; /&gt;<br>&lt;br /&gt;<br>&lt;br /&gt;<br>&lt;label&gt;电子邮件：&lt;/label&gt;<br>&lt;input class=&quot;itxt&quot; type=&quot;text&quot; placeholder=&quot;请输入邮箱地址&quot; autocomplete=&quot;off&quot; tabindex=&quot;1&quot; name=&quot;email&quot; id=&quot;email&quot; /&gt;<br>&lt;br /&gt;<br>&lt;br /&gt;<br>&lt;label&gt;验证码：&lt;/label&gt;<br>&lt;input class=&quot;itxt&quot; type=&quot;text&quot; style=&quot;width: 150px;&quot; id=&quot;code&quot;/&gt;<br>&lt;img alt=&quot;&quot; src=&quot;../../static/img/code.bmp&quot; style=&quot;float: right; margin-right: 40px&quot;&gt;<br>&lt;br /&gt;<br>&lt;br /&gt;<br>&lt;input type=&quot;submit&quot; value=&quot;注册&quot; id=&quot;sub_btn&quot; /&gt;<br><br>&lt;/form&gt;<br>&lt;/div&gt;<br><br>&lt;/div&gt;<br>&lt;/div&gt;<br>&lt;/div&gt;<br>&lt;/div&gt;<br>&lt;div id=&quot;bottom&quot;&gt;<br>&lt;span&gt;<br>尚硅谷书城.Copyright &amp;copy;2015<br>&lt;/span&gt;<br>&lt;/div&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h1 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h1><p>什么是XML？</p><p>xml是可扩展性标记性语言</p><p>XML的作用</p><p>​        1.用来保存数据，而且这些数据具有自我描述性</p><p>​         2.它还可以做为项目或者模块的配置文件</p><p>​        3.还可以作为网络传输数据的格式(JSON为主)</p><p>示例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;<br>&lt;!--<br>&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;<br>以上内容就是xml文件的声明<br>version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>    version表示xml的版本  encoding表示xml文件本身的编码<br>--&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">books</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">sb</span>=<span class="hljs-string">&quot;SN123412123412&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--book表示一个图书信息   sn属性表示图书序列号--&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>时间监视<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><span class="hljs-comment">&lt;!--name标签表示书名--&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">author</span>&gt;</span>霍金<span class="hljs-tag">&lt;/<span class="hljs-name">author</span>&gt;</span><span class="hljs-comment">&lt;!--author表示作者--&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">price</span>&gt;</span>75<span class="hljs-tag">&lt;/<span class="hljs-name">price</span>&gt;</span><span class="hljs-comment">&lt;!--price表示图书价格--&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">sb</span>=<span class="hljs-string">&quot;SN123412123411&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--book表示一个图书信息   sn属性表示图书序列号--&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>java入门<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><span class="hljs-comment">&lt;!--name标签表示书名--&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">author</span>&gt;</span>沙老师<span class="hljs-tag">&lt;/<span class="hljs-name">author</span>&gt;</span><span class="hljs-comment">&lt;!--author表示作者--&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">price</span>&gt;</span>9.9<span class="hljs-tag">&lt;/<span class="hljs-name">price</span>&gt;</span><span class="hljs-comment">&lt;!--price表示图书价格--&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">books</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>XML文件的写法</p><p>1-2 </p><p>xml 发明的<strong>目的</strong>：  <strong>传输和 存储数据。</strong></p><p>**xml 发明的*<em>目的*<em>：  *<em>传输和 存储数据。*</em></em></em></p><p>xml 发明的<strong>目的</strong>：  <strong>传输和 存储数据。</strong></p><p>**xml 发明的*<em>目的*<em>：  *<em>传输和 存储数据。*</em></em></em></p><p><strong>xml 不是为了展示数据，</strong></p><p><strong>html 才是为了展示数据用的。</strong> </p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291643448.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220917161433670"></p><p>所有的<strong>xml</strong> 必须要<strong>有一个根节点</strong>： </p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291643450.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="1013846-20210808203953565-117336166"></p><p>这种写法是错误的 </p><p>正确的写法：</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291643451.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="1"></p><p>浏览器展示</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291643452.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220917163634579"></p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291643453.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220917163657572"></p><h2 id="第二章：-xml的-基本语法。"><a href="#第二章：-xml的-基本语法。" class="headerlink" title="第二章： xml的 基本语法。"></a>第二章： xml的 基本语法。</h2><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291643454.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220917163709935"></p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291643455.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220917163722062"></p><p>Xml的头声明， 可以有，也可以省略</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br>&quot;&quot;&quot;version参数是版本号&quot;&quot;&quot;  encoding是编码<br><span class="hljs-comment">&lt;!--&lt;a&gt;ddd &lt;b&gt;hh&lt;/a&gt;&lt;/b&gt;--&gt;</span><br>&quot;&quot;&quot;这里是一个xml文件的一个注释&quot;&quot;&quot;<br><span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">shuibian</span>&gt;</span>....<span class="hljs-tag">&lt;/<span class="hljs-name">shuibian</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">xie</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">xie</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291643456.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220917163734405"></p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291643457.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220917163749487"></p><p>标签交叉，在xml 是不允许的。</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291643458.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220917163803928"></p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291643459.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220917163815433"></p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291643460.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220917163829643"></p><p>属性：就是描述这个标签额外的信息。</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291643461.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220917163844467"></p><p>例子：比如img 标签，必须要有 src属性 。</p><p>Img 标签，本身的目的：就是个图片标签 。</p><p>Src 属性 的作用是： 告诉你要展示的图片 在哪里</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291643462.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220917163859302"></p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291643463.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220917163912615"></p><p>属性规则：</p><p>但是在xml中，我们不需要额外的信息进行展示。</p><p>因为我们是自定义标签的 。</p><p>Html标签，必须要用到属性，因为我们不能自定义html标签。</p><p>Xml 中，属性就是鸡肋。</p><p>属性，在xml中可以用。但是用的真不多</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291643464.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220917163927505"></p><p>CDATA的写法</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291643465.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220917163938534"></p><p>展示效果：</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291643466.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220917164019883"></p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291643467.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220917164032816"></p><h2 id="DTD"><a href="#DTD" class="headerlink" title="DTD"></a>DTD</h2><p><strong>简介</strong></p><p>1.对xml文件的格式进行约束，保证xml是一个有效的xml</p><p>2.dtd可以分为两种，内部dtd(你在写xml代码的时候就把内部dtd写好了)，外部dtd(他是一个外部的单独的dtd文件，需要引入进来)</p><p><strong>使用</strong></p><p><strong>内部的dtd</strong>的定义，语法如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-comment">&lt;!--声明dtd--&gt;</span><br><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">scores</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">scores</span> (<span class="hljs-keyword">student</span>*)&gt;</span></span><br><span class="hljs-meta">&lt;!--这里的星号表示出现任意次--&gt;</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">student</span> (<span class="hljs-keyword">name</span>,<span class="hljs-keyword">course</span>,<span class="hljs-keyword">score</span>)&gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ATTLIST <span class="hljs-keyword">student</span> <span class="hljs-keyword">id</span> <span class="hljs-keyword">CDATA</span> <span class="hljs-keyword">#REQUIRED</span>&gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">name</span> (<span class="hljs-keyword">#PCDATA</span>)&gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">score</span> (<span class="hljs-keyword">#PCDATA</span>)&gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">course</span> (<span class="hljs-keyword">#PCDATA</span>)&gt;</span></span><br><span class="hljs-meta">&lt;!--让name标签里面只能写文本而不能写其他的标签之类的--&gt;</span><br><span class="hljs-meta">&lt;!--PCDATA 是会被解析器解析的文本。. 这些文本将被解析器检查实体以及标记。. 文本中的标签会被当作标记来处理，而实体会被展开。. 不过，被解析的字符数据不应当包含任何 &amp; &lt; &gt; 字符；需要使用 &amp; &lt; &gt; 实体来分别替换它们--&gt;</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">jt</span> <span class="hljs-string">&quot;Joe Test&quot;</span>&gt;</span></span><br><span class="hljs-meta">&lt;!--实例--&gt;</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">jtt</span> <span class="hljs-string">&quot;Joe Test&quot;</span>&gt;</span></span><br><span class="hljs-meta">&lt;!--这相当于声明了一个对象，只能在dtd文件中使用,用的时候就是%jjt;--&gt;</span><br><span class="hljs-meta">&lt;scores&gt;</span><br><span class="hljs-meta">  &lt;student id=&quot;1&quot;&gt;</span><br><span class="hljs-meta">     &lt;name&gt;王同&lt;/name&gt;</span><br><span class="hljs-meta">     &lt;course&gt;java&lt;/course&gt;</span><br><span class="hljs-meta">     &lt;score&gt;89&lt;/score&gt;</span><br><span class="hljs-meta">  &lt;/student&gt;</span><br><span class="hljs-meta">  &lt;student id=&quot;2&quot;&gt;</span><br><span class="hljs-meta">     &lt;name&gt;李佳&lt;/name&gt;</span><br><span class="hljs-meta">     &lt;course&gt;sql&lt;/course&gt;</span><br><span class="hljs-meta">     &lt;score&gt;58&lt;/score&gt;</span><br><span class="hljs-meta">     &lt;test&gt;&amp;jt;&lt;/test&gt;</span><br><span class="hljs-meta">     &lt;!--实例，这里的;不会显示--&gt;</span><br><span class="hljs-meta">  &lt;/student&gt;</span><br><span class="hljs-meta">&lt;/scores&gt;</span><br><span class="hljs-meta"></span><br><span class="hljs-meta"></span><br><span class="hljs-meta"></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-comment">&lt;!--加入了dtd之后，写xml文件之后就有模板有提示了--&gt;</span><br><br><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml">这就是<span class="hljs-meta">&lt;!ATTLIST <span class="hljs-keyword">student</span> <span class="hljs-keyword">id</span> <span class="hljs-keyword">CDATA</span> <span class="hljs-keyword">#REQUIRED</span>&gt;</span>条代码的解释<br>基本语法：<span class="hljs-meta">&lt;!ATTLIST  元素名称  属性名称  属性类型  默认值&gt;</span><br><br>上面对id属性的限制的最后一个参数类型有<br><br>#REQUIRED 表示属性值必须<br><br>#IMPLIED   表示属性值不是必须的<br><br>#FIXED value  属性值是固定的<br>值      默认值<br><br><br>上面对id属性的限制倒数第二个参数类型有<br><br>CDATA    字符或数字<br><br>(en1|en2|……)  枚举类型<br><br> ID    属性唯一<br><br>IDREF   对某个唯一属性进行引用<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ELEMENT 元素名称 类别&gt;</span> 或<span class="hljs-meta">&lt;!ELEMENT 元素名称 (元素内容)&gt;</span><br>类别：约束标签的内容<br><br>EMPTY：空标签<br><br>(#PCDATA)：普通字符串（没有子标签）<br><br>ANY ： 可以是任何内容（包含子标签）<br><br>(元素内容)： 标签包含子标签的情况<br><br>顺序问题：<br>(A,B,C,D): 按顺序依次出现<br><br>(A|B|C|D): 任意出现一个(枚举式出现)<br></code></pre></td></tr></table></figure><p>数量词</p><p>+ 表示出现一次或者多次，至少一次</p><p>?表示出现0次或1次</p><p>*表示出现任意次</p><p><strong>外部dtd</strong></p><p>1.创建一个外部的dtd文件</p><p>这是一个文件的格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs dtd">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;<br><br>&lt;!--声明dtd--&gt;<br><br>&lt;!ELEMENT scores (student*)&gt;<br>&lt;!--上面的空格是必须要有的--&gt;<br><br>&lt;!--这里的星号表示出现任意次--&gt;<br><br>&lt;!ELEMENT student (name,course,score)&gt;<br><br>&lt;!ATTLIST student id CDATA #REQUIRED&gt;<br><br>&lt;!ELEMENT name (#PCDATA)&gt;<br><br>&lt;!ELEMENT score (#PCDATA)&gt;<br><br>&lt;!ELEMENT course (#PCDATA)&gt;<br></code></pre></td></tr></table></figure><p>2.在xml中引入一个外部的dtd文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DPCTYPE <span class="hljs-keyword">scores</span> <span class="hljs-keyword">SYSTEM</span> “scores.dtd<span class="hljs-string">&quot;&gt;</span></span><br></code></pre></td></tr></table></figure><p>这有的浏览器对其可能不支持</p><p>第二个是根标签，scores.dtd是一个要引入的文件，SYSTEM也是必要的</p><p><strong>ENTITY的使用实例</strong></p><p>关于ENTITY的讲解，在xxe漏洞当中介绍</p><h2 id="XML解析技术介绍"><a href="#XML解析技术介绍" class="headerlink" title="XML解析技术介绍"></a>XML解析技术介绍</h2><p>xml 可扩展的标记语言。 </p><p>不管是 html 文件还是 xml 文件它们都是标记型文档，都可以使用 w3c 组织制定的 dom 技术来解析</p><p>document 对象表示的是整个文档（可以是 html 文档，也可以是 xml 文档）</p><h2 id="使用dom4j读取xml文件得到document对象"><a href="#使用dom4j读取xml文件得到document对象" class="headerlink" title="使用dom4j读取xml文件得到document对象"></a>使用dom4j读取xml文件得到document对象</h2><p>dom4j的使用直接看pdf</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291643468.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220917222951542"></p><p>被用来解析的xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">books</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">sn</span>=<span class="hljs-string">&quot;SN12341232&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>辟邪剑谱<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">price</span>&gt;</span>9.9<span class="hljs-tag">&lt;/<span class="hljs-name">price</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">author</span>&gt;</span>班主任<span class="hljs-tag">&lt;/<span class="hljs-name">author</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">sn</span>=<span class="hljs-string">&quot;SN12341231&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>葵花宝典<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">price</span>&gt;</span>99.99<span class="hljs-tag">&lt;/<span class="hljs-name">price</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">author</span>&gt;</span>班长<span class="hljs-tag">&lt;/<span class="hljs-name">author</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">books</span>&gt;</span><br></code></pre></td></tr></table></figure><p>解析xml文件的代码</p><p>@Test是指一个测试方法，这个方法使用需要导包导关于junit4的包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.atguigu.pojo.Book;<br><span class="hljs-keyword">import</span> org.dom4j.Document;<br><span class="hljs-keyword">import</span> org.dom4j.DocumentException;<br><span class="hljs-keyword">import</span> org.dom4j.Element;<br><span class="hljs-keyword">import</span> org.dom4j.io.SAXReader;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> java.lang.Double.parseDouble;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dom4jTest</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><span class="hljs-comment">//是指这是一个测试方法，可以不用主方法来调用</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> DocumentException &#123;<br>        <span class="hljs-comment">//创建一个SaxReader输入流，去读取xml配置文件，生成Document对象</span><br>        SAXReader saxReader=<span class="hljs-keyword">new</span> <span class="hljs-title class_">SAXReader</span>();<br>        <span class="hljs-type">Document</span> <span class="hljs-variable">document</span> <span class="hljs-operator">=</span> saxReader.read(<span class="hljs-string">&quot;src/books.xml&quot;</span>);<br>        System.out.println(document);<br>    &#125;<br><br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> DocumentException &#123;<br>        <span class="hljs-comment">//1.读取books.xml文件</span><br>        SAXReader reader= <span class="hljs-keyword">new</span> <span class="hljs-title class_">SAXReader</span>();<br>        <span class="hljs-comment">// 2.通过Document对象获取根元素</span><br>        <span class="hljs-comment">//在Junit测试中，相对路径是从模块开始的也就是从xml模块开始的，所以路径中第一个是src</span><br>        <span class="hljs-type">Document</span> <span class="hljs-variable">read</span> <span class="hljs-operator">=</span> reader.read(<span class="hljs-string">&quot;src/books.xml&quot;</span>);<br>        <span class="hljs-comment">//3.通过根元素获取book标签对象</span><br>        <span class="hljs-type">Element</span> <span class="hljs-variable">element</span> <span class="hljs-operator">=</span> read.getRootElement();<br>        <span class="hljs-comment">//element()和elements()都是通过标签名查找子元素，elements()返回多个，element()返回一个</span><br>        List&lt;Element&gt; books = element.elements(<span class="hljs-string">&quot;book&quot;</span>);<br>        <span class="hljs-comment">//4.遍历，处理每个book标签转化为Book类</span><br>        <span class="hljs-keyword">for</span>(Element book:books)&#123;<br>            <span class="hljs-comment">//asXML()把标签对象转换为标签字符串</span><br>            Element nameElement=book.element(<span class="hljs-string">&quot;name&quot;</span>);<br>            <span class="hljs-comment">//getText()获取标签文本内容</span><br>            String nameText=nameElement.getText();<br>            <span class="hljs-comment">//直接获取指定标签名的文本内容</span><br>            String priceText=book.elementText(<span class="hljs-string">&quot;price&quot;</span>);<br>            String authorText=book.elementText(<span class="hljs-string">&quot;author&quot;</span>);<br><br>            <span class="hljs-comment">//获取属性值</span><br>            String snValue=book.attributeValue(<span class="hljs-string">&quot;sn&quot;</span>);<br>            System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(snValue,nameText,parseDouble(priceText),authorText));<br><br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Idea文件结构"><a href="#Idea文件结构" class="headerlink" title="Idea文件结构"></a>Idea文件结构</h2><p>项目-&gt;模块-&gt;包</p><p>src文件夹中放置你的源代码，out目录放置src文件夹里面的java程序</p><h1 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h1><h2 id="javaweb概念"><a href="#javaweb概念" class="headerlink" title="javaweb概念"></a>javaweb概念</h2><p>javaweb是指所有通过java语言编写的可以通过浏览器访问的程序的总成称叫javaweb</p><p>java是基于请求和响应来开发的</p><p><strong>什么是请求</strong></p><p>请求是指客户端发给服务器发送数据，叫请求request</p><p><strong>什么是响应</strong></p><p>相应是指服务器给客户端回传数据，叫响应reponse</p><p><strong>请求和响应的关系</strong></p><p>成对出现的，有请求就有回应</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291643469.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220918100658314"></p><p><strong>2.Web 资源的分类</strong></p><p> web 资源按实现的技术和呈现的效果的不同，又分为静态资源和动态资源两种。 </p><p>静态资源： html、css、js、txt、mp4 视频 , jpg 图片 </p><p>动态资源： jsp 页面、Servlet 程序</p><p>3.常用的 Web 服务器 </p><p>Tomcat：由 Apache 组织提供的一种 Web 服务器，提供对 jsp 和 Servlet 的支持。它是一种轻量级的 javaWeb 容器（服务 器），也是当前应用最广的 JavaWeb 服务器（免费）。 </p><p>Jboss：是一个遵从 JavaEE 规范的、开放源代码的、纯 Java 的 EJB 服务器，它支持所有的 JavaEE 规范（免费）。 </p><p>GlassFish： 由 Oracle 公司开发的一款 JavaWeb 服务器，是一款强健的商业服务器，达到产品级质量（应用很少）。 </p><p>Resin：是 CAUCHO 公司的产品，是一个非常流行的服务器，对 servlet 和 JSP 提供了良好的支持， 性能也比较优良，resin 自身采用 JAVA 语言开发（收费，应用比较多）。 </p><p>WebLogic：是 Oracle 公司的产品，是目前应用最广泛的 Web 服务器，支持 JavaEE 规范， 而且不断的完善以适应新的开发要求，适合大型项目（收费，用的不多，适合大公司）。</p><p><strong>Tomcat服务器和Servelet版本的对应关系</strong></p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291643470.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220918102346974"></p><h2 id="Tomcat使用"><a href="#Tomcat使用" class="headerlink" title="Tomcat使用"></a>Tomcat使用</h2><p>安装 找到你需要用的 Tomcat 版本对应的 zip 压缩包，解压到需要安装的目录即可。</p><h3 id="目录介绍"><a href="#目录介绍" class="headerlink" title="目录介绍"></a>目录介绍</h3><p>bin          专门用来存放 Tomcat 服务器的可执行程序 </p><p>conf         专门用来存放 Tocmat 服务器的配置文件 </p><p>lib            专门用来存放 Tomcat 服务器的 jar 包 </p><p>logs             专门用来存放 Tomcat 服务器运行时输出的日记信息 </p><p>temp             专门用来存放 Tomcdat 运行时产生的临时数据 </p><p>webapps      专门用来存放部署的 Web 工程。 </p><p>work          是 Tomcat 工作时的目录，用来存放 Tomcat 运行时 jsp 翻译为 Servlet 的源码，和 Session 钝化（序列化）的目录</p><p><strong>如何启动tomcat服务器</strong></p><p>找到 Tomcat 目录下的 bin 目录下的 startup.bat 文件，双击，就可以启动 Tomcat 服务器</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291643471.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220918124637456"></p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291643472.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220918124707554"></p><p><strong>另一种启动Tomcat服务器的方式</strong></p><p>1、打开命令行 </p><p>2、cd 到 你的 Tomcat 的 bin 目录下 </p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291643473.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220918130712935"></p><p>3、敲入启动命令： catalina ru</p><p>直接在命令行里输入D:就可以进入D盘</p><h3 id="Tomcat的停止"><a href="#Tomcat的停止" class="headerlink" title="Tomcat的停止"></a>Tomcat的停止</h3><p>1、点击 tomcat 服务器窗口的 x 关闭按钮 </p><p>2、把 Tomcat 服务器窗口置为当前窗口，然后按快捷键 Ctrl+C</p><p> 3、找到 Tomcat 的 bin 目录下的 shutdown.bat 双击，就可以停止 Tomcat 服务器</p><h3 id="如何修改Tomcat默认的端口号"><a href="#如何修改Tomcat默认的端口号" class="headerlink" title="如何修改Tomcat默认的端口号"></a>如何修改Tomcat默认的端口号</h3><p>Mysql 默认的端口号是：3306 </p><p>Tomcat 默认的端口号是：8080 </p><p>找到 Tomcat 目录下的 conf 目录，找到 server.xml 配置文件。</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291643474.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220918132017144"></p><p>修改port属性来修改服务器端口</p><h3 id="如何把web工程部署到tomcat服务器中"><a href="#如何把web工程部署到tomcat服务器中" class="headerlink" title="如何把web工程部署到tomcat服务器中"></a>如何把web工程部署到tomcat服务器中</h3><p>第一种方法：只需要把web工程的目录拷贝到Tomcat服务器的webapps目录下即可</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291643475.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220918134335523"></p><p>第二种方法</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291643476.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220918135319528"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/abc/i</span>ndex.html<br><br><br></code></pre></td></tr></table></figure><p>这个xml文件名和那个path不一定非得一样，且这个xml文件在变成xml文件之前必须是UTF-8的记事本文件，然后改名为xml文件</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291643477.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220918144329941"></p><p>1.让txt文件变成html文件被访问的时候，用ANSI编码格式，否则会出现乱码</p><h3 id="Tomcat中创建动态的web工程"><a href="#Tomcat中创建动态的web工程" class="headerlink" title="Tomcat中创建动态的web工程"></a>Tomcat中创建动态的web工程</h3><p>csdn中记载那样创建</p><p>先创建一个java模块，然后右键java模块找到add framework support</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291643478.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220920121015195"></p><p>再在WEB-INF目录里创建lib目录，存放jar包，将jar复制进去之后，右键jar包，选add as libray</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291643479.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220920121255710"></p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291643480.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220920121310644"></p><p>Application server  是自己找到那个自己的Tomcat</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291643481.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220920121325671"></p><p><img src="https://img-blog.csdnimg.cn/68743a3a6bed43db9d196ee788ed76f7.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAQllCU1hI,size_20,color_FFFFFF,t_70,g_se,x_16" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="img"></p><h3 id="如何在-IDEA-中部署工程到-Tomcat-上运行"><a href="#如何在-IDEA-中部署工程到-Tomcat-上运行" class="headerlink" title="如何在 IDEA 中部署工程到 Tomcat 上运行"></a>如何在 IDEA 中部署工程到 Tomcat 上运行</h3><p>看pdf文件即可</p><h3 id="如何给Tomcat添加第三方jar包"><a href="#如何给Tomcat添加第三方jar包" class="headerlink" title="如何给Tomcat添加第三方jar包"></a>如何给Tomcat添加第三方jar包</h3><p>看pdf即可</p><h1 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h1><p>路径</p><p><strong>什么是·Servlet</strong></p><p>1.Servlet是javaEE规范之一，规范就是接口</p><p>2.Servlet是javaweb三大组件之一，三大组件分别是servlet程序，filter过滤器，listener监听器</p><p>3.Servlet是运行在服务器上的Java小程序，它可以接受客户端发送过来的请求，并响应数据给客户端</p><h2 id="手动实现Servlet程序"><a href="#手动实现Servlet程序" class="headerlink" title="手动实现Servlet程序"></a>手动实现Servlet程序</h2><p>1.编写一个类去实现Servlet接口</p><p>2.实现service方法，处理请求，并响应数据</p><p>3.到web.xml中配置servlet程序的访问地址</p><p>实现servlet接口的程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.servlet;<br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloServlet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Servlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(ServletConfig servletConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ServletConfig <span class="hljs-title function_">getServletConfig</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/*service方法是专门用来处理请求和响应的*/</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;hello servlet访问了&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getServletInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>web.xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--servlet标签给Tomcat配置Servlet程序--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span><br>            HelloServlet<br>            <span class="hljs-comment">&lt;!--这个名字一般是和类名一样的，但也是别名可以不同，但一定要和下面的servlet-mapping中的name相同，servlet-class是必须和真实类名相同的--&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--servlet-class是Servlet程序的全类名--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span><br>            com.atguigu.servlet.HelloServlet<br><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--servlet-name标签的作用是告诉服务器，我当前配置的地址给那个Servlet程序使用--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--servlet-name标签的作用是告诉服务器，我当前配置的地址给那个Servlet程序使用--&gt;</span><br>        <span class="hljs-comment">&lt;!-- url-pattern标签配置访问地址</span><br><span class="hljs-comment">        /   斜杠在服务器解析的时候，表示地址为http://ip:port/工程路径</span><br><span class="hljs-comment">        /hello  表示地址为:http://ip:port/工程路径/hello</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-comment">&lt;!--这里的这个hello最好是和servlet的名字有点联系，一眼能看出--&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br><br><br></code></pre></td></tr></table></figure><p>运行tomcat实例之后，在url后面添加&#x2F;hello就可以访问到这个HelloServlet程序，也就是调用了上面java代码中的service方法</p><p>常见的错误</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291643482.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220920164356420"></p><h2 id="url地址如何定位servlet程序去访问的"><a href="#url地址如何定位servlet程序去访问的" class="headerlink" title="url地址如何定位servlet程序去访问的"></a>url地址如何定位servlet程序去访问的</h2><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291643483.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220921102737307"></p><h2 id="Servlet的生命周期"><a href="#Servlet的生命周期" class="headerlink" title="Servlet的生命周期"></a>Servlet的生命周期</h2><p>一个servlet的执行顺序</p><p>1.执行Servlet构造器方法</p><p>2.执行init初始化方法</p><p>第一二步是在第一次方法的时候创建Servlet程序会调用，就是如果刷新页面再次访问不会再执行1，2</p><p>3.执行service方法</p><p>每次访问都会调用，每次刷新页面再次访问就会调用</p><p>4.执行destroy方法</p><p>第四步，在web工程停止的时候会调用</p><p>四个方法实现的演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.servlet;<br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloServlet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Servlet</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">HelloServlet</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;1 构造器方法&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(ServletConfig servletConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>        System.out.println(<span class="hljs-string">&quot;2.ini方法&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ServletConfig <span class="hljs-title function_">getServletConfig</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/*service方法是专门用来处理请求和响应的*/</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;3 service===hello servlet访问了&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getServletInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;4.destroy方法&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">启动服务器之后，访问http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/ab/</span>hello<br><br>结果：<span class="hljs-number">1</span> 构造器方法<br>     <span class="hljs-number">2</span>.ini方法<br>     <span class="hljs-number">3</span> service===hello servlet访问了<br></code></pre></td></tr></table></figure><h2 id="Servlet请求的分发处理"><a href="#Servlet请求的分发处理" class="headerlink" title="Servlet请求的分发处理"></a>Servlet请求的分发处理</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">在模块文件夹下的html文件，可以通过http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/servlet/</span>a.html访问<br></code></pre></td></tr></table></figure><p>a.html前面的都是工程路径</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://localhost:8080/servlet/hello&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>method可以有post和get，对应不同的操作，所以应该对Servlet程序进行改良</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.servlet;<br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloServlet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Servlet</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">HelloServlet</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;1 构造器方法&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(ServletConfig servletConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>        System.out.println(<span class="hljs-string">&quot;2.ini方法&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ServletConfig <span class="hljs-title function_">getServletConfig</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/*service方法是专门用来处理请求和响应的*/</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//类型转换，HttpServletRequest是ServletRequest的子接口，Servlet没有getMethod方法</span><br>        HttpServletRequest httpServletRequest= (HttpServletRequest) servletRequest;<br>        <span class="hljs-comment">//获取请求的方式</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> httpServletRequest.getMethod();<br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;GET&quot;</span>.equals(method))&#123;<br>            System.out.println(<span class="hljs-string">&quot;get请求&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;POST&quot;</span>.equals(<span class="hljs-string">&quot;post请求&quot;</span>))&#123;<br>            System.out.println(<span class="hljs-string">&quot;post请求&quot;</span>);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getServletInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;4.destroy方法&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>一个方法中又执行get又执行post不太好，将这两个方法分开</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.servlet;<br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloServlet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Servlet</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">HelloServlet</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;1 构造器方法&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(ServletConfig servletConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>        System.out.println(<span class="hljs-string">&quot;2.ini方法&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ServletConfig <span class="hljs-title function_">getServletConfig</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/*service方法是专门用来处理请求和响应的*/</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//类型转换，HttpServletRequest是ServletRequest的子接口，Servlet没有getMethod方法</span><br>        HttpServletRequest httpServletRequest= (HttpServletRequest) servletRequest;<br>        <span class="hljs-comment">//获取请求的方式</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> httpServletRequest.getMethod();<br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;GET&quot;</span>.equals(method))&#123;<br>            doGet();<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;POST&quot;</span>.equals(<span class="hljs-string">&quot;post请求&quot;</span>))&#123;<br>           doPost();<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;get请求&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;get请求&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;get请求&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;get请求&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;get请求&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;post请求&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;post请求&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;post请求&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;post请求&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;post请求&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getServletInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;4.destroy方法&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="通过继承HttpServlet实现Servlet程序"><a href="#通过继承HttpServlet实现Servlet程序" class="headerlink" title="通过继承HttpServlet实现Servlet程序"></a>通过继承HttpServlet实现Servlet程序</h2><p>一般在实际项目中，都是使用继承HttpServlet类的方式去实现Servlet程序</p><p>1.编写一个类去继承 HttpServlet类</p><p>2.根据业务需要重写doGet或者doPost方法</p><p>3.到web.xml中配置Servlet程序的访问地址</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://localhost:8080/servlet/hello2&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloServlet2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    doGet()方法在Get请求的时候调用</span><br><span class="hljs-comment">    doPost()方法在Post请求的时候调用</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;helloservlet2  doget&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;helloservlet2 dopost&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="使用IDEA菜单生成Servlet程序"><a href="#使用IDEA菜单生成Servlet程序" class="headerlink" title="使用IDEA菜单生成Servlet程序"></a>使用IDEA菜单生成Servlet程序</h2><h2 id="整个Servlet类的继承体系"><a href="#整个Servlet类的继承体系" class="headerlink" title="整个Servlet类的继承体系"></a>整个Servlet类的继承体系</h2><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291643484.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220922185908421"></p><h2 id="ServletConfig类"><a href="#ServletConfig类" class="headerlink" title="ServletConfig类"></a>ServletConfig类</h2><p>ServletConfig从类名上看，就是Servlet程序的配置信息类</p><p>servlet程序和servletConfig对象都是由Tomcat负责创建，我们负责使用</p><p>Servlet程序默认是第一次访问的时候创建，ServletConfig是每个Servlet程序创建的时候，就创建一个对应的ServletConfig对象</p><p><strong>三大作用</strong></p><p>1.可以获取Servlet的别名额就是servlet-name的值</p><p>2.获取初始化参数init-param</p><p>3.获取servletContext对象</p><p><strong>init方法体现了ServletConfig的三大作用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.servlet;<br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloServlet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Servlet</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">HelloServlet</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;1 构造器方法&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(ServletConfig servletConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>        System.out.println(<span class="hljs-string">&quot;2.ini方法&quot;</span>);<br>       <span class="hljs-comment">// 1.可以获取Servlet的别名额就是servlet-name的值</span><br>System.out.println(<span class="hljs-string">&quot;servlet的别名是:&quot;</span>+servletConfig.getServletName());<br>        <span class="hljs-comment">//2.获取初始化参数init-param</span><br>System.out.println(<span class="hljs-string">&quot;初始化参数username的值为&quot;</span>+servletConfig.getInitParameter(<span class="hljs-string">&quot;username&quot;</span>));<br>System.out.println(<span class="hljs-string">&quot;初始化参数password的值为&quot;</span>+servletConfig.getInitParameter(<span class="hljs-string">&quot;password&quot;</span>));<br>        <span class="hljs-comment">//3.获取servletContext对象</span><br>        System.out.println(servletConfig.getServletContext());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ServletConfig <span class="hljs-title function_">getServletConfig</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/*service方法是专门用来处理请求和响应的*/</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//类型转换，HttpServletRequest是ServletRequest的子接口，Servlet没有getMethod方法</span><br>        HttpServletRequest httpServletRequest= (HttpServletRequest) servletRequest;<br>        <span class="hljs-comment">//获取请求的方式</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> httpServletRequest.getMethod();<br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;GET&quot;</span>.equals(method))&#123;<br>            doGet();<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;POST&quot;</span>.equals(<span class="hljs-string">&quot;post请求&quot;</span>))&#123;<br>           doPost();<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;get请求&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;get请求&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;get请求&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;get请求&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;get请求&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;post请求&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;post请求&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;post请求&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;post请求&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;post请求&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getServletInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;4.destroy方法&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>每个Servlet程序对应一个ServletConfig对象，所以不可能在HelloServlet2中获得的ServletConfig对象来获取给HelloServlet1配置的信息</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">package</span> com.atguigu.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.<span class="hljs-type">ServletConfig</span>;<br><span class="hljs-keyword">import</span> javax.servlet.<span class="hljs-type">ServletException</span>;<br><span class="hljs-keyword">import</span> javax.servlet.http.<span class="hljs-type">HttpServlet</span>;<br><span class="hljs-keyword">import</span> javax.servlet.http.<span class="hljs-type">HttpServletRequest</span>;<br><span class="hljs-keyword">import</span> javax.servlet.http.<span class="hljs-type">HttpServletResponse</span>;<br><span class="hljs-keyword">import</span> java.io.<span class="hljs-type">IOException</span>;<br><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloServlet2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    doGet()方法在Get请求的时候调用</span><br><span class="hljs-comment">    doPost()方法在Post请求的时候调用</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> void doGet(<span class="hljs-type">HttpServletRequest</span> req, <span class="hljs-type">HttpServletResponse</span> resp) <span class="hljs-keyword">throws</span> <span class="hljs-type">ServletException</span>, <span class="hljs-type">IOException</span> &#123;<br>        <span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;helloservlet2  doget&quot;</span>);<br><br>        <span class="hljs-comment">//可以使用getServletConfig()方法来获得servletConfig对象</span><br>        <span class="hljs-type">ServletConfig</span> servletConfig=getServletConfig();<br>        <span class="hljs-type">System</span>.out.println(servletConfig);<br>        <span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;初始化参数username的值为&quot;</span>+servletConfig.getInitParameter(<span class="hljs-string">&quot;username&quot;</span>));<br>        <span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;初始化参数password的值为&quot;</span>+servletConfig.getInitParameter(<span class="hljs-string">&quot;password&quot;</span>));<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> void doPost(<span class="hljs-type">HttpServletRequest</span> req, <span class="hljs-type">HttpServletResponse</span> resp) <span class="hljs-keyword">throws</span> <span class="hljs-type">ServletException</span>, <span class="hljs-type">IOException</span> &#123;<br>        <span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;helloservlet2 dopost&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>重写Servlet程序的init方法的时候一定要就是调用它父类的init方法</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs scala">public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloServlet2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br><br>    <span class="hljs-comment">//重写init程序的时候必须有这个super.init(config)</span><br>    <span class="hljs-meta">@Override</span><br>    public void init(<span class="hljs-type">ServletConfig</span> config) <span class="hljs-keyword">throws</span> <span class="hljs-type">ServletException</span> &#123;<br>        <span class="hljs-keyword">super</span>.init(config);<span class="hljs-comment">//调用父类的init方法才能让this.config获值</span><br>        <span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;重写了init初始化方法，做了一些工作&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">/*</span><br></code></pre></td></tr></table></figure><h2 id="ServletContext类"><a href="#ServletContext类" class="headerlink" title="ServletContext类"></a>ServletContext类</h2><p>1.ServletContext是一个接口，它表示servlet上下文对象</p><p>2.一个web工程只有一个ServletConText对象实例，不管调用getServletContext()几次，得到的都是一个ServletContext对象</p><p>3.ServletContext对象是一个域对象</p><p>4.<strong>ServletContext是在web工程部署启动的时候创建，在web工程停止的时候销毁</strong>    重新部署或者重启服务器之后，存储的数据就会消失</p><p>什么是域对象</p><p>域对象是可以象Map一样存储数据的对象，叫域对象</p><p>这里的域指的是存储数据的操作范围，整个web工程</p><p>​                               存数据                           取数据                           删除数据</p><p>Map                        put()                           get()                                       remove()</p><p>域对象                      setAttribute()            getAttribute()                    removeAttribute()</p><p><strong>ServletContext对象能向ServletContext域中存储对象</strong></p><p><strong>ServletContext类的四个作用</strong></p><p>1.获取web.xml中配置的上下文参数context.param</p><p>2.获取当前的工程路径，格式:&#x2F;工程路径</p><p>3.获取工程部署后在服务器硬盘上的绝对路径</p><p>4.像Map一样存储数据</p><p><strong>当正常在网址栏输入网址访问基本都是get请求</strong></p><p>以下路径是IDEA整合Tomcat之后，Tomcat被拷贝的一些副本内容</p><p>C:\Users#赵梓皓&amp;\AppData\Local\JetBrains\IntelliJIdea2020.3\tomcat\cc813db2-dbda-4294-89c0-505f477c0964</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">D:</span>\IDEAjava工程\javaweb\<span class="hljs-keyword">out</span>\artifacts\servlet_war_exploded\  这个就是项目部署之后在磁盘中的位置<br></code></pre></td></tr></table></figure><p>servlet:war exploded就是一个文件夹，里面是项目中的web文件夹中的内容</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291643485.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220922204548529"></p><p>前三个功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletConfig;<br><span class="hljs-keyword">import</span> javax.servlet.ServletContext;<br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ContextServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//1.获取web.xml中配置的上下文参数context.param</span><br>        ServletContext context= getServletConfig().getServletContext();<br>        String username=context.getInitParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;context-param参数username是&quot;</span>+username);<br>        System.out.println(<span class="hljs-string">&quot;context-param参数password是&quot;</span>+context.getInitParameter(<span class="hljs-string">&quot;password&quot;</span>));<br>        <span class="hljs-comment">//2.获取当前的工程路径，格式:/工程路径</span><br>System.out.println(<span class="hljs-string">&quot;当前工程的路径&quot;</span>+context.getContextPath());<br>        <span class="hljs-comment">//3.获取工程部署后在服务器硬盘上的绝对路径</span><br>        <span class="hljs-comment">//   斜杠   被服务器解析地址为http://ip:port/工程名/    映射到IDEA代码的web目录</span><br>        <span class="hljs-comment">//就是得到的这个地址访问之后就是web目录下的东西</span><br>        System.out.println(<span class="hljs-string">&quot;工程部书之后的路径&quot;</span>+context.getRealPath(<span class="hljs-string">&quot;/&quot;</span>));<br>        <span class="hljs-comment">//获取web目录下的其他文件的绝对路径</span><br>        System.out.println(<span class="hljs-string">&quot;工程下css目录的绝对路径是&quot;</span>+context.getRealPath(<span class="hljs-string">&quot;/css&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;工程目录下imgs目录1.jpg的绝对路径是&quot;</span>+context.getRealPath(<span class="hljs-string">&quot;/imgs/1.jpg&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>第四个功能.像Map一样存储数据，</p><p>ContextServlet1和ContextServlet2只要有一个存了key1的值，另一个也能获取key1的值，但重新部署或者重启服务器数据就消失了</p><p>ContextServlet1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletContext;<br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ContextServlet1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//获取ServletContext对象</span><br>        <span class="hljs-type">ServletContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> getServletContext();<br>        <span class="hljs-comment">//打印context的地址看两个Servlet中的地址相不相同</span><br>        System.out.println(context);<br>        System.out.println(<span class="hljs-string">&quot;保存之前：Context1获取key1的值是&quot;</span>+context.getAttribute(<span class="hljs-string">&quot;key1&quot;</span>));<br>        context.setAttribute(<span class="hljs-string">&quot;key1&quot;</span>,<span class="hljs-string">&quot;value&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;context1中获取域数据key1的值为&quot;</span>+context.getAttribute(<span class="hljs-string">&quot;key1&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;context1中获取域数据key1的值为&quot;</span>+context.getAttribute(<span class="hljs-string">&quot;key1&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;context1中获取域数据key1的值为&quot;</span>+context.getAttribute(<span class="hljs-string">&quot;key1&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>ContextServlet2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletContext;<br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ContextServlet2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException&#123;<br>        <span class="hljs-type">ServletContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> getServletContext();<br>        System.out.println(context);<br>        System.out.println(<span class="hljs-string">&quot;Context2中获取域数据key1的值是&quot;</span>+context.getAttribute(<span class="hljs-string">&quot;key1&quot;</span>));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>两个文件中context地址相同</p><p>org.apache.catalina.core.ApplicationContextFacade@467b6a76</p><p>org.apache.catalina.core.ApplicationContextFacade@467b6a76</p><h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><h3 id="请求的HTTP协议"><a href="#请求的HTTP协议" class="headerlink" title="请求的HTTP协议"></a>请求的HTTP协议</h3><p>协议是指双方或者多方约定好，大家都需要遵守的规则，叫协议</p><p>所谓HTTP协议就是指，客户端和服务器之间通信时，发送的数据需要遵守的规则，叫http协议</p><p>HTTP 协议中的数据又叫报文。</p><p>客户端给服务器发送数据叫请求。 </p><p>服务器给客户端回传数据叫响应。 </p><p>请求又分为 GET 请求，和 POST 请求两种</p><p><strong>GET 请求</strong> </p><p>getpost都会对url进行url编码</p><p>1、请求行(报文行) (1) 请求的方式 GET (2) 请求的资源路径[+?+请求参数] (3) 请求的协议的版本号 HTTP&#x2F;1.1 </p><p>2、请求头(报文头) key : value 组成 不同的键值对，表示不同的含义</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291643486.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220923145222423"></p><p><strong>ii. POST 请求</strong></p><p> 1、请求行</p><p> (1)请求的方式 POST (2) 请求的资源路径[+?+请求参数] (3) 请求的协议的版本号 HTTP&#x2F;1.1 2、</p><p>2.请求头 </p><ol><li>key : value 不同的请求头，有不同的含义</li></ol><p>空行(请求头和请求体之间有空行)</p><p>3、请求体 &#x3D;&#x3D;&#x3D;&gt;&gt;&gt; 就是发送给服务器的数据</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291643487.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220923150231137"></p><p><strong>iii. 常用请求头的说明</strong> </p><p>Accept: 表示客户端可以接收的数据类型 </p><p>Accpet-Languege: 表示客户端可以接收的语言类型 </p><p>User-Agent: 表示客户端浏览器的信息 </p><p>Host： 表示请求时的服务器 ip 和端口</p><p><strong>iv. 哪些是 GET 请求，哪些是 POST 请求</strong> </p><p>GET 请求有哪些：</p><p> 1、form 标签 method&#x3D;get   2、a 标签    3、link 标签引入 css    4、Script 标签引入 js 文件     5、img 标签引入图片    6、iframe 引入 html 页面    7、在浏览器地址栏中输入地址后敲回车 </p><p>POST 请求有哪些：</p><p> 8、form 标签 method&#x3D;post</p><h3 id="响应的-HTTP-协议格式"><a href="#响应的-HTTP-协议格式" class="headerlink" title="响应的 HTTP 协议格式"></a>响应的 HTTP 协议格式</h3><p>1、响应行 (1) 响应的协议和版本号   HTTP&#x2F;1.1</p><p>​                  (2) 响应状态码    200</p><p>​                  (3) 响应状态描述符      </p><p>2、响应头 (1) key : value 不同的响应头，有其不同含义</p><p> 空行 </p><p>3、响应体 —-&gt;&gt;&gt; 就是回传给客户端的数</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291643488.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220924084143658"></p><p><strong>常见的响应码</strong></p><p>200 表示请求成功 </p><p>302 表示请求重定向（明天讲） </p><p>404 表示请求服务器已经收到了，但是你要的数据不存在（请求地址错误） </p><p>500 表示服务器已经收到请求，但是服务器内部错误（代码错误）</p><p><strong>MIME 类型说明</strong> </p><p>MIME 是 HTTP 协议中数据类型。 MIME 的英文全称是”Multipurpose Internet Mail Extensions” 多功能 Internet 邮件扩充服务。MIME 类型的格式是“大类型&#x2F;小 类型”，并与某一种文件的扩展名相对应</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291643489.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220924085410669"></p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291643490.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220924090516889"></p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291643491.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220924090547978"></p><h2 id="ServletRequest"><a href="#ServletRequest" class="headerlink" title="ServletRequest"></a>ServletRequest</h2><p>每次只要有请求进入，tomcat服务器就会把请求过来的HTTP协议信息解析好封装到request对象中。</p><p>然后传递到service方法，也含有doget  dopost方法中给我们使用。我们可以通过HttpServletRequest对象，获取到所有请求的信息</p><h3 id="HttpServletRequest-类的常用方法"><a href="#HttpServletRequest-类的常用方法" class="headerlink" title="HttpServletRequest 类的常用方法"></a>HttpServletRequest 类的常用方法</h3><p>i. getRequestURI()                                 获取请求的资源路径 </p><p>ii. getRequestURL()                               获取请求的统一资源定位符（绝对路径） </p><p>iii. getRemoteHost()                             获取客户端的 ip 地址 </p><p>iv. getHeader()                                      获取请求头 </p><p>v. getParameter()                                 获取请求的参数 </p><p>vi. getParameterValues()                    获取请求的参数（多个值的时候使用） </p><p>vii. getMethod()                                    获取请求的方式 GET 或 POST </p><p>viii. setAttribute(key, value);              设置域数据   ，<strong>ServletRequest能通过这个方法向request域中存储数据</strong></p><p>ix. getAttribute(key);                           获取域数据 </p><p>x. getRequestDispatcher()                 获取请求转发对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestAPIServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>       <span class="hljs-comment">// i. getRequestURI()                             获取请求的资源路径</span><br>System.out.println(<span class="hljs-string">&quot;url=&gt;&quot;</span>+req.getRequestURI());<br>        <span class="hljs-comment">//ii. getRequestURL()                            获取请求的统一资源定位符（绝对路径）</span><br>System.out.println(<span class="hljs-string">&quot;ulr=&gt;&quot;</span>+req.getRequestURL());<br>        <span class="hljs-comment">//iii. getRemoteHost()                             获取客户端的 ip 地址</span><br>System.out.println(<span class="hljs-string">&quot;客户端 ip 地址&quot;</span>+req.getRemoteHost());<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">在IDEA中，使用使用localhost访问时，得到的客户端ip地址是127.0.0.1</span><br><span class="hljs-comment">在IDEA中，使用使用127.0.0.1访问时，得到的客户端ip地址是127.0.0.1</span><br><span class="hljs-comment">在IDEA中，使用使用真实ip访问时，得到的客户端ip地址是真实ip</span><br><span class="hljs-comment"> */</span><br><br>        <span class="hljs-comment">//iv. getHeader()                                      获取请求头</span><br>System.out.println(<span class="hljs-string">&quot;请求头&quot;</span>+req.getHeader(<span class="hljs-string">&quot;User-Agent&quot;</span>));<br>        <span class="hljs-comment">//vii. getMethod()                                    获取请求的方式 GET 或 POST</span><br>        System.out.println(<span class="hljs-string">&quot;请求的方式&quot;</span>+req.getMethod());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Servlet获取请求的参数值"><a href="#Servlet获取请求的参数值" class="headerlink" title="Servlet获取请求的参数值"></a>Servlet获取请求的参数值</h3><p>用来发送参数的form表单</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://localhost:8086/servlet2/parameterServlet&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span><br><br>    用户名 <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    密码 <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    兴趣爱好 <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;cpp&quot;</span>&gt;</span>c++<br>           <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;java&quot;</span>&gt;</span>java<br>           <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;javascript&quot;</span>&gt;</span>javascript<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ParameterServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br> <span class="hljs-comment">//获取请求的参数，用name属性的值来作为参数获取</span><br>        System.out.println(req.getParameter(<span class="hljs-string">&quot;username&quot;</span>));<br>        System.out.println(req.getParameter(<span class="hljs-string">&quot;password&quot;</span>));<br><span class="hljs-comment">//获取有多个参数的请求</span><br>String []hobby=req.getParameterValues(<span class="hljs-string">&quot;hobby&quot;</span>);<br>System.out.println(Arrays.toString(hobby));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>解决post请求中的中文乱码问题</strong></p><p>req.setCharacterEncoding(“UTF-8”);</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://localhost:8086/servlet2/parameterServlet&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br><br>    用户名 <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    密码 <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    兴趣爱好 <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;cpp&quot;</span>&gt;</span>c++<br>           <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;java&quot;</span>&gt;</span>java<br>           <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;javascript&quot;</span>&gt;</span>javascript<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ParameterServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br> <span class="hljs-comment">//获取请求的参数，用name属性的值来作为参数获取</span><br>        System.out.println(req.getParameter(<span class="hljs-string">&quot;username&quot;</span>));<br>        System.out.println(req.getParameter(<span class="hljs-string">&quot;password&quot;</span>));<br><span class="hljs-comment">//获取有多个参数的请求</span><br>String []hobby=req.getParameterValues(<span class="hljs-string">&quot;hobby&quot;</span>);<br>System.out.println(Arrays.toString(hobby));<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//设置请求体的字符集为UTF-8，从而解决post请求的中文乱码问题</span><br>        <span class="hljs-comment">//这个方法只有在所有获取请求参数方法之前调用才有效</span><br>        req.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;=-----post----&quot;</span>);<br>        <span class="hljs-comment">//获取请求的参数，用name属性的值来作为参数获取</span><br>        System.out.println(req.getParameter(<span class="hljs-string">&quot;username&quot;</span>));<br>        System.out.println(req.getParameter(<span class="hljs-string">&quot;password&quot;</span>));<br><span class="hljs-comment">//获取有多个参数的请求</span><br>        String []hobby=req.getParameterValues(<span class="hljs-string">&quot;hobby&quot;</span>);<br>        System.out.println(Arrays.toString(hobby));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="请求的转发"><a href="#请求的转发" class="headerlink" title="请求的转发"></a>请求的转发</h3><p>什么是请求的转发?</p><p> 请求转发是指，服务器收到请求后，从一次资源跳转到另一个资源的操作叫请求转发</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291643492.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220924113414262"></p><p>请求转发的特点第四条</p><p>如果form.html在WEB-INF目录下无法通过<a href="http://localhost:8086/servlet2/WEB-INF/form.html%E8%AE%BF%E9%97%AE">http://localhost:8086/servlet2/WEB-INF/form.html访问</a></p><p>但可以通过请求转发访问</p><p>下面两种都可以，第一个是绝对路径，第二个是相对路径</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">RequestDispatcher requestDispatcher <span class="hljs-operator">=</span> req.getRequestDispatcher(<span class="hljs-string">&quot;/WEB-INF/form.html&quot;</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">RequestDispatcher requestDispatcher <span class="hljs-operator">=</span> req.getRequestDispatcher(<span class="hljs-string">&quot;WEB-INF/form.html&quot;</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>在web中   &#x2F;斜杠就代表<a href="http://ip:port/工程名/">http://ip:port/工程名/</a>  可以映射到web目录下，可以在后面直接加web目录中的资源访问，但不能直接访问</p><p>WEB-INF目录中的资源</p><p>这是实现图片中的请求转发的步骤</p><p>servlet1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.servlet;<br><br><span class="hljs-keyword">import</span> javafx.scene.control.TextInputControl;<br><br><span class="hljs-keyword">import</span> javax.servlet.RequestDispatcher;<br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">servlet1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>       <span class="hljs-comment">//获取请求参数，(办事的材料)查看</span><br>        <span class="hljs-comment">//这个参数也可以用get传参直接传</span><br>        String username=req.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;在servlet1柜台中查看参数(材料)&quot;</span>+username);<br><br>        <span class="hljs-comment">//给材料盖一个章，并传递到servlet2柜台二去查看</span><br>        req.setAttribute(<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-string">&quot;柜台1的章&quot;</span>);<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        请求转发必须要以斜杠打头，斜杠表示地址为：http://ip:port/工程名/  ,映射到IDEA代码的web目录，然后在后面加这个servlet文件名即可</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-comment">//问路servlet2(柜台二在哪)</span><br>        <span class="hljs-type">RequestDispatcher</span> <span class="hljs-variable">requestDispatcher</span> <span class="hljs-operator">=</span> req.getRequestDispatcher(<span class="hljs-string">&quot;/servlet2&quot;</span>);<br><br>        <span class="hljs-comment">//走向servlet2，柜台二</span><br>        requestDispatcher.forward(req,resp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>servlet2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">servlet2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//获取请求参数，(办事的材料)查看</span><br>        String username=req.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;在servlet1柜台中查看参数(材料)&quot;</span>+username);<br><br>        <span class="hljs-comment">//查看柜台1 是否有盖章</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> req.getAttribute(<span class="hljs-string">&quot;key&quot;</span>);<br>      System.out.println(<span class="hljs-string">&quot;柜台一是否有章&quot;</span>+key);<br><br>      <span class="hljs-comment">//处理自己的业务</span><br>        System.out.println(<span class="hljs-string">&quot;servlet2处理自己的业务&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="关于重定向以及javaweb的路径补充（getResourcAsStream）"><a href="#关于重定向以及javaweb的路径补充（getResourcAsStream）" class="headerlink" title="关于重定向以及javaweb的路径补充（getResourcAsStream）"></a>关于重定向以及javaweb的路径补充（getResourcAsStream）</h3><p>服务器对服务器(请求转发)发起请求：(也叫服务器对斜杠&#x2F;进行解析的时候</p><p>绝对路径：&#x2F;   斜杠代表的是项目根目录     也就是<a href="http://ip:port/工程名，">http://ip:port/工程名，</a>  可以映射到web目录下，后面直接跟web目录下内容，除了WEB-INF</p><p>浏览器对服务器(重定向)发起请求：(也叫浏览器对斜杠&#x2F;进行解析的时候)</p><p>绝对路径：&#x2F;   斜杠代表的是tomcat根目录，也就是<a href="http://ip:port">http://ip:port</a> 需要自己去加工程名</p><p>当这种&#x2F;表示tomcat根目录的时候，绝对路径开头的   &#x2F;工程名   就是自己设置的那个    而不是文件名</p><p>不管是哪个相对路径都是看相对位置</p><p>这个就是规定了工程的目录   也就是<a href="http://ip:port/servlet2">http://ip:port/servlet2</a></p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291643493.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220924140059312"></p><p>请求转发路径解释：</p><p>这个是web.xml文件中规定的Servlet文件的访问路径</p><p>等于是在web文件夹中创立一个contextservlet2文件，这也为什么<a href="http://ip:port/servlet2/contextservlet2能访问到servlet文件的原因">http://ip:port/servlet2/contextservlet2能访问到servlet文件的原因</a></p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291643494.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220924140317384"></p><p>请求转发</p><p>这个地方用servlet2是因为这可以用相对路径，他们访问路径都在web目录下</p><p>也可以用&#x2F;servlet2  这是绝对路径，因为servlet2访问路径在web目录下</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291643496.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220924141139460"></p><p>如果是web文件下有这个form.html文件也可以就是通过请求转发访问</p><p>下面两种都可以</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">RequestDispatcher</span> <span class="hljs-variable">requestDispatcher</span> <span class="hljs-operator">=</span> req.getRequestDispatcher(<span class="hljs-string">&quot;form.html&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">RequestDispatcher</span> <span class="hljs-variable">requestDispatcher</span> <span class="hljs-operator">=</span> req.getRequestDispatcher(<span class="hljs-string">&quot;/form.html&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">getResourceAsStream中的路径只有两种写法<br><br>最前面是<span class="hljs-string">&#x27;/&#x27;</span>      说明是工程目录下可以映射到web目录下<br><br>最前面没有<span class="hljs-string">&#x27;/&#x27;</span>   说明是默认从<span class="hljs-attribute">src</span>目录开始<br></code></pre></td></tr></table></figure><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291643497.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220924155454292"></p><h3 id="base标签的作用"><a href="#base标签的作用" class="headerlink" title="base标签的作用"></a>base标签的作用</h3><p>即使文件加上了base标签，也可以使用绝对路径</p><p>错误演示</p><p>c.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>这是a下的b下的c.html页面<br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/servlet2/index.html&quot;</span>&gt;</span>跳回首页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;../../index.html&quot;</span>&gt;</span>跳回首页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这两个a标签中的地址都是index.html的地址一个是相对路径一个是绝对路径</p><p>这里因为是浏览器向服务器发起请求所以这里的绝对路径    &#x2F;   斜杠代表的是<a href="http://ip:port/">http://ip:port/</a></p><p>访问到工程名默认的是访问web文件下的名为index的html或者js的文件</p><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>这是web下的index.html<br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;a/b/c.html&quot;</span>&gt;</span>a/b/c.html<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://localhost:8086/servlet2/ForwardC&quot;</span>&gt;</span><br>    请求转发<br><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>第二个a标签利用请求转发跳转，是无法在c.html回到首页的</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291643498.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220924152916257"></p><p>正确版本</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--base标签设置页面相对路径工作时参照的地址</span><br><span class="hljs-comment">        href   属性就是参数的地址值</span><br><span class="hljs-comment">    --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>这是a下的b下的c.html页面<br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/servlet2/index.html&quot;</span>&gt;</span>跳回首页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;../../index.html&quot;</span>&gt;</span>跳回首页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a href="http://localhost:8080/servlet2/a/b/c.html%E5%B0%B1%E6%98%AF%E8%BF%99%E4%B8%AA%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84%E6%89%80%E6%9C%89%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84%E7%9A%84%E5%9C%B0%E5%9D%80%E9%83%BD%E6%98%AF%E5%8F%82%E7%85%A7%E8%BF%99%E4%B8%AA%E8%B7%AF%E5%BE%84%E7%9A%84">http://localhost:8080/servlet2/a/b/c.html就是这个文件中的所有相对路径的地址都是参照这个路径的</a></p><h2 id="HttpServletResponse"><a href="#HttpServletResponse" class="headerlink" title="HttpServletResponse"></a>HttpServletResponse</h2><p>作用</p><p>HttpServletResponse 类和 HttpServletRequest 类一样。每次请求进来，Tomcat 服务器都会创建一个 Response 对象传递给 Servlet 程序去使用。</p><p>HttpServletRequest 表示请求过来的信息，HttpServletResponse 表示所有响应的信息， 我们如果需要设置返回给客户端的信息，都可以通过 HttpServletResponse</p><h3 id="两个输出流说明"><a href="#两个输出流说明" class="headerlink" title="两个输出流说明"></a>两个输出流说明</h3><p>字节流          getOutputStream()     常用于下载，传递二进制数据 </p><p>字符流          getWriter()           常用于回传字符串(常用)</p><p><strong>两个流同时只能使用一个，使用了字节流，就不能再使用字符流，否则就会报错</strong></p><h3 id="如何往客户端回传数据（乱码解决）"><a href="#如何往客户端回传数据（乱码解决）" class="headerlink" title="如何往客户端回传数据（乱码解决）"></a>如何往客户端回传数据（乱码解决）</h3><p>要求：往客户端回传字符串数据以及中文乱码的解决方案（将服务器和浏览器统一编码）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.PrintWriter;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResponseIOServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//查看相应的字符集      默认ISO-8859-1</span><br>        System.out.println(resp.getCharacterEncoding());<br>        <span class="hljs-comment">//设置服务器字符集为UTF-8</span><br><br>        resp.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br><br>        <span class="hljs-comment">//同时要自己去改变浏览器的字符集，改为UTF-8</span><br>        resp.setHeader(<span class="hljs-string">&quot;Content-Type&quot;</span>,<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>);<br><br>        <span class="hljs-comment">//要求：往客户端回传字符串数据</span><br>        PrintWriter writer=resp.getWriter();<br>        writer.write(<span class="hljs-string">&quot;我很帅&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>第二种解决中文乱码的方案</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.PrintWriter;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResponseIOServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//它会同时设置服务器和客户端都使用UTF-8字符集，还设置了响应头</span><br>        <span class="hljs-comment">//此方法一定要在获取流之前时使用才有效</span><br>       resp.setContentType(<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>);<br>       System.out.println(resp.getCharacterEncoding());<br>        <span class="hljs-comment">//要求：往客户端回传字符串数据</span><br>        PrintWriter writer=resp.getWriter();<br>        writer.write(<span class="hljs-string">&quot;我很帅&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Servlet请求重定向"><a href="#Servlet请求重定向" class="headerlink" title="Servlet请求重定向"></a>Servlet请求重定向</h2><p>请求重定向，是指客户端给服务器发请求，然后服务器告诉客户端说。我给你一些地址。你去新地址访问。叫请求 重定向（因为之前的地址可能已经被废弃）</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291643499.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220924164726868"></p><p>重点：两个servlet之间不共享Request域中的数据</p><p>其实就是当用HttpServletResponse的setAttribute()方法是不能把把存储的数据给多个Servlet获取的，但ServletContext可以</p><p><strong>response1重定向到response2的解析</strong></p><p>response1</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">package</span> com.atguigu.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.<span class="hljs-type">ServletException</span>;<br><span class="hljs-keyword">import</span> javax.servlet.http.<span class="hljs-type">HttpServlet</span>;<br><span class="hljs-keyword">import</span> javax.servlet.http.<span class="hljs-type">HttpServletRequest</span>;<br><span class="hljs-keyword">import</span> javax.servlet.http.<span class="hljs-type">HttpServletResponse</span>;<br><span class="hljs-keyword">import</span> java.io.<span class="hljs-type">IOException</span>;<br><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">response1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> void doGet(<span class="hljs-type">HttpServletRequest</span> req, <span class="hljs-type">HttpServletResponse</span> resp) <span class="hljs-keyword">throws</span> <span class="hljs-type">ServletException</span>, <span class="hljs-type">IOException</span> &#123;<br>        <span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;曾到此一游 Response1&quot;</span>);<br>        req.setAttribute(<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-string">&quot;value1&quot;</span>);<br>        <span class="hljs-comment">//设置响应状态码，表示重定向(已搬迁)</span><br>        resp.setStatus(<span class="hljs-number">302</span>);<br>        <span class="hljs-comment">//设置响应头，说明新的地址在哪里</span><br>        resp.setHeader(<span class="hljs-string">&quot;Location&quot;</span>,<span class="hljs-string">&quot;http://localhost:8086/servlet2/response2&quot;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>response2</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">package</span> com.atguigu.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.<span class="hljs-type">ServletException</span>;<br><span class="hljs-keyword">import</span> javax.servlet.http.<span class="hljs-type">HttpServlet</span>;<br><span class="hljs-keyword">import</span> javax.servlet.http.<span class="hljs-type">HttpServletRequest</span>;<br><span class="hljs-keyword">import</span> javax.servlet.http.<span class="hljs-type">HttpServletResponse</span>;<br><span class="hljs-keyword">import</span> java.io.<span class="hljs-type">IOException</span>;<br><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">response2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> void doGet(<span class="hljs-type">HttpServletRequest</span> req, <span class="hljs-type">HttpServletResponse</span> resp) <span class="hljs-keyword">throws</span> <span class="hljs-type">ServletException</span>, <span class="hljs-type">IOException</span> &#123;<br>        <span class="hljs-type">System</span>.out.println(req.getAttribute(<span class="hljs-string">&quot;key&quot;</span>));<br>        resp.getWriter().write(<span class="hljs-string">&quot;response2 result&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>response1重定向到form.html的解析</p><p><strong>错误案例：不能够重定向到WEB-INF下的form.html文件</strong></p><p>因为重定向也就是第二次的地址是用来浏览器向服务器发起请求，WEB-INF中的文件受保护所以不行</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">package</span> com.atguigu.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.<span class="hljs-type">ServletException</span>;<br><span class="hljs-keyword">import</span> javax.servlet.http.<span class="hljs-type">HttpServlet</span>;<br><span class="hljs-keyword">import</span> javax.servlet.http.<span class="hljs-type">HttpServletRequest</span>;<br><span class="hljs-keyword">import</span> javax.servlet.http.<span class="hljs-type">HttpServletResponse</span>;<br><span class="hljs-keyword">import</span> java.io.<span class="hljs-type">IOException</span>;<br><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">response1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> void doGet(<span class="hljs-type">HttpServletRequest</span> req, <span class="hljs-type">HttpServletResponse</span> resp) <span class="hljs-keyword">throws</span> <span class="hljs-type">ServletException</span>, <span class="hljs-type">IOException</span> &#123;<br>        <span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;曾到此一游 Response1&quot;</span>);<br>        req.setAttribute(<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-string">&quot;value1&quot;</span>);<br>        <span class="hljs-comment">//设置响应状态码，表示重定向(已搬迁)</span><br>        resp.setStatus(<span class="hljs-number">302</span>);<br>        <span class="hljs-comment">//设置响应头，说明新的地址在哪里</span><br>        resp.setHeader(<span class="hljs-string">&quot;Location&quot;</span>,<span class="hljs-string">&quot;http://localhost:8086/WEB-INF/form.html&quot;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>正确案例</strong>：访问web目录下的form.html</p><p>新地址使用绝对路径的方法，下面两个都是绝对路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">response1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;曾到此一游 Response1&quot;</span>);<br>        req.setAttribute(<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-string">&quot;value1&quot;</span>);<br>        <span class="hljs-comment">//设置响应状态码，表示重定向(已搬迁)</span><br>        resp.setStatus(<span class="hljs-number">302</span>);<br>        <span class="hljs-comment">//设置响应头，说明新的地址在哪里</span><br>        resp.setHeader(<span class="hljs-string">&quot;Location&quot;</span>,<span class="hljs-string">&quot;http://localhost:8086/servlet2/form.html&quot;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">package</span> com.atguigu.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.<span class="hljs-type">ServletException</span>;<br><span class="hljs-keyword">import</span> javax.servlet.http.<span class="hljs-type">HttpServlet</span>;<br><span class="hljs-keyword">import</span> javax.servlet.http.<span class="hljs-type">HttpServletRequest</span>;<br><span class="hljs-keyword">import</span> javax.servlet.http.<span class="hljs-type">HttpServletResponse</span>;<br><span class="hljs-keyword">import</span> java.io.<span class="hljs-type">IOException</span>;<br><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">response1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> void doGet(<span class="hljs-type">HttpServletRequest</span> req, <span class="hljs-type">HttpServletResponse</span> resp) <span class="hljs-keyword">throws</span> <span class="hljs-type">ServletException</span>, <span class="hljs-type">IOException</span> &#123;<br>        <span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;曾到此一游 Response1&quot;</span>);<br>        req.setAttribute(<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-string">&quot;value1&quot;</span>);<br>        <span class="hljs-comment">//设置响应状态码，表示重定向(已搬迁)</span><br>        resp.setStatus(<span class="hljs-number">302</span>);<br>        <span class="hljs-comment">//设置响应头，说明新的地址在哪里</span><br>        resp.setHeader(<span class="hljs-string">&quot;Location&quot;</span>,<span class="hljs-string">&quot;/servlet2/form.html&quot;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>相对路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">response1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;曾到此一游 Response1&quot;</span>);<br>        req.setAttribute(<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-string">&quot;value1&quot;</span>);<br>        <span class="hljs-comment">//设置响应状态码，表示重定向(已搬迁)</span><br>        resp.setStatus(<span class="hljs-number">302</span>);<br>        <span class="hljs-comment">//设置响应头，说明新的地址在哪里</span><br>        resp.setHeader(<span class="hljs-string">&quot;Location&quot;</span>,<span class="hljs-string">&quot;form.html&quot;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>因为这里的重定向的地址是浏览器会向服务器发起的请求，所以绝对路径的  &#x2F;表示的是tomcat根目录下的内容</p><p>重定向也可以访问外部地址，只要把location换成一个网站的网址就可以</p><h2 id="第二种请求重定向的方法"><a href="#第二种请求重定向的方法" class="headerlink" title="第二种请求重定向的方法"></a>第二种请求重定向的方法</h2><p>第二种方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">response1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>     resp.sendRedirect(<span class="hljs-string">&quot;/servlet2/response2&quot;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="书城项目的第二个阶段"><a href="#书城项目的第二个阶段" class="headerlink" title="书城项目的第二个阶段"></a>书城项目的第二个阶段</h2><p>用户的注册和登录</p><p><strong>javaEE项目的三层架构</strong></p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291643500.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220924190340985"></p><p>分层的目的是为了解耦。解耦就是为了降低代码的耦合度。方便项目后期的维护和升级</p><p>下面的斜杠是或者的意思</p><p>web 层       com.atguigu.web&#x2F;servlet&#x2F;controller   </p><p>service 层            com.atguigu.service                    Service 接口包 </p><p>​                             com.atguigu.service.impl          Service 接口实现类 </p><p>dao 持久层 com.atguigu.dao                  Dao 接口包        </p><p>​                    com.atguigu.dao.impl          Dao 接口实现类 </p><p>实体 bean 对象          com.atguigu.pojo&#x2F;entity&#x2F;domain&#x2F;bean         JavaBean 类 </p><p>测试包                    com.atguigu.test&#x2F;junit</p><p>工具类                     com.atguigu.utils</p><h3 id="创建数据库和User用户表"><a href="#创建数据库和User用户表" class="headerlink" title="创建数据库和User用户表"></a>创建数据库和User用户表</h3><p>一般创建一个表都需要有一个id这样自增的主键</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">database</span> book;<br><br>use book;<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_user(<br>id <span class="hljs-type">int</span> <span class="hljs-keyword">PRIMARY KEY</span> auto_increment,<br>username <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">unique</span>,<br><span class="hljs-keyword">password</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>email <span class="hljs-type">varchar</span>(<span class="hljs-number">200</span>)<br>);<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t_user(username,<span class="hljs-keyword">password</span>,email) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;admin&#x27;</span>,<span class="hljs-string">&#x27;admin&#x27;</span>,<span class="hljs-string">&#x27;admin@guigu.com&#x27;</span>);<br><br><span class="hljs-keyword">select</span> *<span class="hljs-keyword">from</span> t_user;<br></code></pre></td></tr></table></figure><h3 id="编写数据库表对应的javaBean对象"><a href="#编写数据库表对应的javaBean对象" class="headerlink" title="编写数据库表对应的javaBean对象"></a>编写数据库表对应的javaBean对象</h3><p>所谓的javaBean对象就是一个和数据库中储存数据一样类型的java类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.pojo;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, username=&#x27;&quot;</span> + username + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, password=&#x27;&quot;</span> + password + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, email=&#x27;&quot;</span> + email + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(Integer id, String username, String password, String email)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.username = username;<br>        <span class="hljs-built_in">this</span>.password = password;<br>        <span class="hljs-built_in">this</span>.email = email;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(Integer id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUsername</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUsername</span><span class="hljs-params">(String username)</span> &#123;<br>        <span class="hljs-built_in">this</span>.username = username;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPassword</span><span class="hljs-params">(String password)</span> &#123;<br>        <span class="hljs-built_in">this</span>.password = password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getEmail</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> email;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setEmail</span><span class="hljs-params">(String email)</span> &#123;<br>        <span class="hljs-built_in">this</span>.email = email;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> String email;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="编写工具类JDBCUtils"><a href="#编写工具类JDBCUtils" class="headerlink" title="编写工具类JDBCUtils"></a>编写工具类JDBCUtils</h3><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291643501.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220925164446929"></p><p>导入这两个包才能用@test</p><p>JdbcUtils类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.utils;<br><br><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSource;<br><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;<br><br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JdbcUtils</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> DruidDataSource dataSource;<br><span class="hljs-keyword">static</span> &#123;<br>    <span class="hljs-keyword">try</span>&#123;<br>      Properties properties=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>      <span class="hljs-comment">//奇怪的是这个地方不能用绝对路径</span><br>      InputStream inputStream=JdbcUtils.class.getClassLoader().getResourceAsStream(<span class="hljs-string">&quot;druid.properties&quot;</span>);<br>      properties.load(inputStream);<br>      dataSource= (DruidDataSource) DruidDataSourceFactory.createDataSource(properties);<br>      System.out.println(dataSource.getConnection());<br>    &#125;<br>    <span class="hljs-keyword">catch</span>(Exception e)&#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//获取数据库连接池中的连接，如果返回null就是获取失败，有值就是获取成功</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title function_">getConnection</span><span class="hljs-params">()</span>&#123;<br>    Connection conn=<span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        conn=dataSource.getConnection();<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    <span class="hljs-keyword">return</span> conn;<br>&#125;<br><br><span class="hljs-comment">//关闭连接</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">(Connection conn)</span>&#123;<br>    <span class="hljs-keyword">if</span>(conn!=<span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            conn.close();<br>        &#125;<br>        <span class="hljs-keyword">catch</span>(Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.test;<br><br><span class="hljs-keyword">import</span> com.atguigu.utils.JdbcUtils;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JdbcUtilsTest</span> &#123;<br>    <span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testJdbcUtils</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;<span class="hljs-number">100</span> ; i++) &#123;<br>            Connection conn=JdbcUtils.getConnection();<br>            System.out.println(conn);<br>            JdbcUtils.close(conn);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>因为数据库连接池配置文件中有最大连接数为规定数，所以只有每次都释放才能获取连接</p><h3 id="BaseDao"><a href="#BaseDao" class="headerlink" title="BaseDao"></a>BaseDao</h3><p><strong>在使用queryForList和queryForOne来获得javaBean对象的时候，这个javaBean类中属性的名字必须和select后面的列名相同，或者是起名让他相同</strong></p><p>封装了增删改和查询方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.dao.impl;<br><br><span class="hljs-keyword">import</span> com.atguigu.utils.JdbcUtils;<br><span class="hljs-keyword">import</span> org.apache.commons.dbutils.QueryRunner;<br><span class="hljs-keyword">import</span> org.apache.commons.dbutils.handlers.BeanHandler;<br><span class="hljs-keyword">import</span> org.apache.commons.dbutils.handlers.BeanListHandler;<br><span class="hljs-keyword">import</span> org.apache.commons.dbutils.handlers.ScalarHandler;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseDao</span> &#123;<br>    <span class="hljs-comment">//使用DbUtils操作数据库</span><br><span class="hljs-keyword">private</span> QueryRunner queryRunner=<span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryRunner</span>();<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">update()方法用来执行：insert  update  delete语句</span><br><span class="hljs-comment">如果返回-1说明执行失败，  否则返回其他表示影响的行数</span><br><span class="hljs-comment"> */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">update</span><span class="hljs-params">(String sql,Object...args)</span>&#123;<br>        Connection conn= JdbcUtils.getConnection();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> queryRunner.update(conn, sql, args);<br>        &#125;<br>        <span class="hljs-keyword">catch</span>(Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    查询返回一个javaBean的sql语句   type为返回对象类型，args是sql对应的参数值，sql是执行的sql语句  &lt;T&gt;返回的类型和泛型</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">queryForOne</span><span class="hljs-params">(Class&lt;T&gt; type,String sql,Object...args)</span> &#123;<br>        Connection con=JdbcUtils.getConnection();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> queryRunner.query(con,sql,<span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanHandler</span>&lt;T&gt;(type),args);<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">finally</span>&#123;<br>            JdbcUtils.close(con);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    查询返回多个javaBean的sql语句</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-keyword">public</span> &lt;T&gt; List&lt;T&gt; <span class="hljs-title function_">queryForList</span><span class="hljs-params">(Class&lt;T&gt; type,String sql,Object...args)</span>&#123;<br>        Connection con=JdbcUtils.getConnection();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> queryRunner.query(con,sql,<span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanListHandler</span>&lt;T&gt;(type),args);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>        e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">finally</span>&#123;<br>            JdbcUtils.close(con);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    执行返回一个单元格的sql</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">queryForSingleValue</span><span class="hljs-params">(String sql,Object...args)</span>&#123;<br>        Connection conn=JdbcUtils.getConnection();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> queryRunner.query(conn, sql,<span class="hljs-keyword">new</span> <span class="hljs-title class_">ScalarHandler</span>(), args);<br>        &#125;<br>        <span class="hljs-keyword">catch</span>(Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">finally</span>&#123;<br>            JdbcUtils.close(conn);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="编写UserDao和测试"><a href="#编写UserDao和测试" class="headerlink" title="编写UserDao和测试"></a>编写UserDao和测试</h3><p><strong>其实这个Dao可以设计为一个泛型接口，用哪个类时再传递泛型参数，这样就是设计了一个不同数据库类的通用Dao</strong></p><p>根据你所需要的方法来设计</p><p>UserDao</p><p>可以在空白处按ctrl和shift和t得到这个接口的测试</p><p>将Destination package换成你想要的位置，勾选好下面三个方法</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291643502.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220926110847299"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.dao;<br><br><span class="hljs-keyword">import</span> com.atguigu.pojo.User;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserDao</span> &#123;<br><br><br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    根据用户名查询用户信息</span><br><span class="hljs-comment">    username 用户名</span><br><span class="hljs-comment">    如果返回null则说明没有这个用户，返之亦然</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">queryByUsername</span><span class="hljs-params">(String username)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 保存用户信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> user</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回-1表示操作失败，其他是sql语句影响的行数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">saveUser</span><span class="hljs-params">(User user)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据用户名和密码查询用户信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> username</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> password</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 如果返回null则说明用户名或密码错误，返之亦然</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">queryUserByUsernameAndPassword</span><span class="hljs-params">(String username,String password)</span>;<br><br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>UserDaoImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.dao.impl;<br><br><span class="hljs-keyword">import</span> com.atguigu.dao.UserDao;<br><span class="hljs-keyword">import</span> com.atguigu.pojo.User;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseDao</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">queryByUsername</span><span class="hljs-params">(String username)</span> &#123;<br>        String sql=<span class="hljs-string">&quot;select id,username,password,email from t_user where username=?&quot;</span>;<br>        <span class="hljs-keyword">return</span> queryForOne(User.class,sql,username);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">saveUser</span><span class="hljs-params">(User user)</span> &#123;<br>        String sql=<span class="hljs-string">&quot;insert into t_user(username,password,email) values(?,?,?)&quot;</span>;<br>        <span class="hljs-keyword">return</span> update(sql,user.getUsername(),user.getPassword(),user.getEmail());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">queryUserByUsernameAndPassword</span><span class="hljs-params">(String username, String password)</span> &#123;<br>        String sql=<span class="hljs-string">&quot;select id,username,password,email from t_user where username=? and password=?&quot;</span>;<br>        <span class="hljs-keyword">return</span> queryForOne(User.class,sql,username,password);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>UserDaoTest</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.test;<br><br><span class="hljs-keyword">import</span> com.atguigu.dao.UserDao;<br><span class="hljs-keyword">import</span> com.atguigu.dao.impl.UserDaoImpl;<br><span class="hljs-keyword">import</span> com.atguigu.pojo.User;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.junit.Assert.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoTest</span> &#123;<br>    UserDao userDao=<span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDaoImpl</span>();<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">queryByUsername</span><span class="hljs-params">()</span> &#123;<br><br>         <span class="hljs-keyword">if</span>(userDao.queryByUsername(<span class="hljs-string">&quot;admin123&quot;</span>)==<span class="hljs-literal">null</span>)<br>         &#123;<br>             System.out.println(<span class="hljs-string">&quot;用户名可用&quot;</span>);<br>         &#125;<br>         <span class="hljs-keyword">else</span><br><br>         &#123;<br>             System.out.println(<span class="hljs-string">&quot;用户名已存在&quot;</span>);<br>         &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveUser</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span>(userDao.queryUserByUsernameAndPassword(<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;admin&quot;</span>)==<span class="hljs-literal">null</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;用户名或密码错误登陆错误&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            System.out.println(<span class="hljs-string">&quot;登陆成功&quot;</span>);<br>        &#125;<br><br><br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">queryUserByUsernameAndPassword</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(userDao.saveUser(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-literal">null</span>,<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>,<span class="hljs-string">&quot;wzg168@qq.com&quot;</span>)));<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="编写UserService和测试"><a href="#编写UserService和测试" class="headerlink" title="编写UserService和测试"></a>编写UserService和测试</h3><p>可以在空白处按ctrl和shift和t得到这个接口的测试</p><p>将Destination package换成你想要的位置，勾选好下面三个方法</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291643502.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220926110847299"></p><p>实现业务</p><p>UserService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.service;<br><br><span class="hljs-keyword">import</span> com.atguigu.pojo.User;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 注册用户</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> user</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerUser</span><span class="hljs-params">(User user)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 登录</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> user</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 如果返回null，说明登录失败，返回有值，是登录成功</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">login</span><span class="hljs-params">(User user)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 检查用户名是否可用</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> username</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回true表示用户名已存在，返回false表示用户名可用</span><br><span class="hljs-comment">     */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">existsUsername</span><span class="hljs-params">(String username)</span>;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>UserServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.service.impl;<br><br><span class="hljs-keyword">import</span> com.atguigu.dao.UserDao;<br><span class="hljs-keyword">import</span> com.atguigu.dao.impl.UserDaoImpl;<br><span class="hljs-keyword">import</span> com.atguigu.pojo.User;<br><span class="hljs-keyword">import</span> com.atguigu.service.UserService;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-keyword">private</span> UserDao userDao=<span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDaoImpl</span>();<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerUser</span><span class="hljs-params">(User user)</span> &#123;<br>        userDao.saveUser(user);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">login</span><span class="hljs-params">(User user)</span> &#123;<br>        <span class="hljs-keyword">return</span> userDao.queryUserByUsernameAndPassword(user.getUsername(),user.getPassword());<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">existsUsername</span><span class="hljs-params">(String username)</span> &#123;<br>        <span class="hljs-keyword">if</span>(userDao.queryByUsername(username)==<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-comment">//等于null说明没查到，没查到表示可用</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>UserServiceTest</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.test;<br><br><span class="hljs-keyword">import</span> com.atguigu.pojo.User;<br><span class="hljs-keyword">import</span> com.atguigu.service.UserService;<br><span class="hljs-keyword">import</span> com.atguigu.service.impl.UserServiceImpl;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.junit.Assert.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceTest</span> &#123;<br><br>    UserService userService=<span class="hljs-keyword">new</span> <span class="hljs-title class_">UserServiceImpl</span>();<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerUser</span><span class="hljs-params">()</span> &#123;<br>        userService.registerUser(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-literal">null</span>,<span class="hljs-string">&quot;bbj168&quot;</span>,<span class="hljs-string">&quot;666666&quot;</span>,<span class="hljs-string">&quot;6668@qq.com&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">login</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(userService.login(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-literal">null</span>,<span class="hljs-string">&quot;bbj168&quot;</span>,<span class="hljs-string">&quot;666666&quot;</span>,<span class="hljs-literal">null</span>)));<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">existsUsername</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span>(userService.existsUsername(<span class="hljs-string">&quot;bbj168&quot;</span>))&#123;<br>            System.out.println(<span class="hljs-string">&quot;用户名已存在&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            System.out.println(<span class="hljs-string">&quot;用户名可用&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="实现用户注册的功能"><a href="#实现用户注册的功能" class="headerlink" title="实现用户注册的功能"></a>实现用户注册的功能</h3><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291643503.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220926113340709"></p><p>javaweb阶段用base设定相对路径跳转</p><p>框架阶段用绝对路径</p><p>在title下面加上base标签<strong>，然后改变文件中所有的路径，因为现在的相对路径是以base这个路径为开头的</strong></p><p>改变的文件既有register.html也有register_success.html   </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;base <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;http://localhost:8087/book2/&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p>xml文件中配置servlet</p><p>把html文件中的表单，action设置为servlet的路径，method改为post</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;form <span class="hljs-attribute">action</span>=<span class="hljs-string">&quot;registServlet&quot;</span> <span class="hljs-attribute">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p><strong>编写RegistServlet程序</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.web;<br><br><br><span class="hljs-keyword">import</span> com.atguigu.pojo.User;<br><span class="hljs-keyword">import</span> com.atguigu.service.UserService;<br><span class="hljs-keyword">import</span> com.atguigu.service.impl.UserServiceImpl;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RegisterServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-comment">//web层和service层交互</span><br>    UserService userService=<span class="hljs-keyword">new</span> <span class="hljs-title class_">UserServiceImpl</span>();<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//1.获取请求的参数</span><br>        String username=req.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>        String password=req.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br>        String email=req.getParameter(<span class="hljs-string">&quot;email&quot;</span>);<br>        String code=req.getParameter(<span class="hljs-string">&quot;code&quot;</span>);<br>        <span class="hljs-comment">//2.检查 验证码是否正确,先把验证码写死，要求为abcde</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;abcde&quot;</span>.equalsIgnoreCase(code))&#123;<br>            <span class="hljs-comment">//验证码正确</span><br>            <span class="hljs-comment">//检查用户名是否可用</span><br>            <span class="hljs-keyword">if</span>(userService.existsUsername(username))&#123;<br>                System.out.println(<span class="hljs-string">&quot;用户名&quot;</span>+username+<span class="hljs-string">&quot;已存在&quot;</span>);<br>                <span class="hljs-comment">//跳回到注册页面</span><br>                req.getRequestDispatcher(<span class="hljs-string">&quot;/pages/user/regist.html&quot;</span>).forward(req,resp);<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-comment">//可用</span><br>                <span class="hljs-comment">//调用Sercice保存到数据库</span><br>                userService.registerUser(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-literal">null</span>,username,password,email));<br>                <span class="hljs-comment">//注册成功后，跳转到注册成功页面</span><br>                req.getRequestDispatcher(<span class="hljs-string">&quot;/pages/user/regist_success.html&quot;</span>).forward(req,resp);<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;验证码&quot;</span>+code+<span class="hljs-string">&quot;错误&quot;</span>);<br>            <span class="hljs-comment">//验证码不正确</span><br>            <span class="hljs-comment">//跳回注册页面，因为还是申请服务器中文件所以/还是工程目录下的</span><br>            req.getRequestDispatcher(<span class="hljs-string">&quot;/pages/user/regist.html&quot;</span>).forward(req,resp);<br><br>        &#125;<br><br><br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="IDEA中的Debug调试"><a href="#IDEA中的Debug调试" class="headerlink" title="IDEA中的Debug调试"></a>IDEA中的Debug调试</h3><p>看pdf文件即可</p><h3 id="用户登录功能的实现"><a href="#用户登录功能的实现" class="headerlink" title="用户登录功能的实现"></a>用户登录功能的实现</h3><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210011009030.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221001100925253"></p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210011031511.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221001100954890"></p><p>操作步骤和用户注册功能差不多</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">package com.atguigu.web;<br><br><br>import com.atguigu.pojo.User;<br>import com.atguigu.service.UserService;<br>import com.atguigu.service.impl.UserServiceImpl;<br><br>import javax.servlet.ServletException;<br>import javax.servlet.http.HttpServlet;<br>import javax.servlet.http.HttpServletRequest;<br>import javax.servlet.http.HttpServletResponse;<br>import java.io.IOException;<br><br>public <span class="hljs-keyword">class</span> RegisterServlet extends HttpServlet &#123;<br>    <span class="hljs-comment">//web层和service层交互</span><br>    UserService userService=<span class="hljs-keyword">new</span> <span class="hljs-constructor">UserServiceImpl()</span>;<br>    @Override<br>    protected void <span class="hljs-keyword">do</span><span class="hljs-constructor">Post(HttpServletRequest <span class="hljs-params">req</span>, HttpServletResponse <span class="hljs-params">resp</span>)</span> throws ServletException, IOException &#123;<br>        <span class="hljs-comment">//1.获取请求的参数</span><br>        <span class="hljs-comment">//这个getParameter方法是通过那个属性的name得到的</span><br>        String username=req.get<span class="hljs-constructor">Parameter(<span class="hljs-string">&quot;username&quot;</span>)</span>;<br>        String password=req.get<span class="hljs-constructor">Parameter(<span class="hljs-string">&quot;password&quot;</span>)</span>;<br>        String email=req.get<span class="hljs-constructor">Parameter(<span class="hljs-string">&quot;email&quot;</span>)</span>;<br>        String code=req.get<span class="hljs-constructor">Parameter(<span class="hljs-string">&quot;code&quot;</span>)</span>;<br>        <span class="hljs-comment">//2.检查 验证码是否正确,先把验证码写死，要求为abcde</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;abcde&quot;</span>.equals<span class="hljs-constructor">IgnoreCase(<span class="hljs-params">code</span>)</span>)&#123;<br>            <span class="hljs-comment">//验证码正确</span><br>            <span class="hljs-comment">//检查用户名是否可用</span><br>            <span class="hljs-keyword">if</span>(userService.exists<span class="hljs-constructor">Username(<span class="hljs-params">username</span>)</span>)&#123;<br>                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;用户名&quot;</span>+username+<span class="hljs-string">&quot;已存在&quot;</span>);<br>                <span class="hljs-comment">//跳回到注册页面</span><br>                req.get<span class="hljs-constructor">RequestDispatcher(<span class="hljs-string">&quot;/pages/user/regist.html&quot;</span>)</span>.forward(req,resp);<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-comment">//可用</span><br>                <span class="hljs-comment">//调用Sercice保存到数据库</span><br>                userService.register<span class="hljs-constructor">User(<span class="hljs-params">new</span> User(<span class="hljs-params">null</span>,<span class="hljs-params">username</span>,<span class="hljs-params">password</span>,<span class="hljs-params">email</span>)</span>);<br>                <span class="hljs-comment">//注册成功后，跳转到注册成功页面</span><br>                req.get<span class="hljs-constructor">RequestDispatcher(<span class="hljs-string">&quot;/pages/user/regist_success.html&quot;</span>)</span>.forward(req,resp);<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;验证码&quot;</span>+code+<span class="hljs-string">&quot;错误&quot;</span>);<br>            <span class="hljs-comment">//验证码不正确</span><br>            <span class="hljs-comment">//跳回注册页面，因为还是申请服务器中文件所以/还是工程目录下的</span><br>            req.get<span class="hljs-constructor">RequestDispatcher(<span class="hljs-string">&quot;/pages/user/regist.html&quot;</span>)</span>.forward(req,resp);<br><br>        &#125;<br><br><br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="JSP的内容"><a href="#JSP的内容" class="headerlink" title="JSP的内容"></a>JSP的内容</h1><p><strong>jsp就是既能写java又能写html的文件</strong></p><p>jsp 的全换是 java server pages。</p><p>Java 的服务器页面。 jsp 的主要作用是代替 Servlet 程序回传 html 页面的数据。 </p><p>因为 Servlet 程序回传 html 页面数据是一件非常繁锁的事情。开发成本和维护成本都极高。</p><p>用servlet回传数据示例</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs swift">package com.atguigu.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.PrintWriter;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">pringHtml</span> <span class="hljs-title class_">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    protected void doGet(<span class="hljs-type">HttpServletRequest</span> req, <span class="hljs-type">HttpServletResponse</span> resp) <span class="hljs-keyword">throws</span> <span class="hljs-type">ServletException</span>, <span class="hljs-type">IOException</span> &#123;<br>        <span class="hljs-comment">// 通过响应的回传流回传 html 页面数据</span><br>        resp.setContentType(<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>);<br>        <span class="hljs-type">PrintWriter</span> writer <span class="hljs-operator">=</span> resp.getWriter();<br>        writer.write(<span class="hljs-string">&quot;&lt;!DOCTYPE html&gt;<span class="hljs-subst">\r</span><span class="hljs-subst">\n</span>&quot;</span>);<br>        writer.write(<span class="hljs-string">&quot; &lt;html lang=<span class="hljs-subst">\&quot;</span>en<span class="hljs-subst">\&quot;</span>&gt;<span class="hljs-subst">\r</span><span class="hljs-subst">\n</span>&quot;</span>);<br>        writer.write(<span class="hljs-string">&quot; &lt;head&gt;<span class="hljs-subst">\r</span><span class="hljs-subst">\n</span>&quot;</span>);<br>        writer.write(<span class="hljs-string">&quot; &lt;meta charset=<span class="hljs-subst">\&quot;</span>UTF-8<span class="hljs-subst">\&quot;</span>&gt;<span class="hljs-subst">\r</span><span class="hljs-subst">\n</span>&quot;</span>);<br>        writer.write(<span class="hljs-string">&quot; &lt;title&gt;Title&lt;/title&gt;<span class="hljs-subst">\r</span><span class="hljs-subst">\n</span>&quot;</span>);<br>        writer.write(<span class="hljs-string">&quot; &lt;/head&gt;<span class="hljs-subst">\r</span><span class="hljs-subst">\n</span>&quot;</span>);<br>        writer.write(<span class="hljs-string">&quot; &lt;body&gt;<span class="hljs-subst">\r</span><span class="hljs-subst">\n</span>&quot;</span>);<br>        writer.write(<span class="hljs-string">&quot; 这是 html 页面数据 <span class="hljs-subst">\r</span><span class="hljs-subst">\n</span>&quot;</span>);<br>        writer.write(<span class="hljs-string">&quot; &lt;/body&gt;<span class="hljs-subst">\r</span><span class="hljs-subst">\n</span>&quot;</span>);<br>        writer.write(<span class="hljs-string">&quot;&lt;/html&gt;<span class="hljs-subst">\r</span><span class="hljs-subst">\n</span>&quot;</span>);<br>        writer.write(<span class="hljs-string">&quot;<span class="hljs-subst">\r</span><span class="hljs-subst">\n</span>&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>一个简单的jsp代码</p><figure class="highlight mojolicious"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs mojolicious"><span class="language-xml">&lt;%</span><span class="language-perl">--</span><br><span class="language-perl">  Created by IntelliJ IDEA.</span><br><span class="language-perl">  User: <span class="hljs-comment">#赵梓皓&amp;</span></span><br><span class="language-perl">  Date: <span class="hljs-number">2022</span>/<span class="hljs-number">10</span>/<span class="hljs-number">1</span></span><br><span class="language-perl">  Time: <span class="hljs-number">10</span>:<span class="hljs-number">28</span></span><br><span class="language-perl">  To change this template <span class="hljs-keyword">use</span> File | Settings | File Templates.</span><br><span class="language-perl">--</span><span class="language-xml">%&gt;</span><br><span class="language-xml">&lt;%</span><span class="language-perl">@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> </span><span class="language-xml">%&gt;</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">这是html页面数据</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210011031963.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221001103112651"></p><p>2、jsp 如何访问：</p><p> jsp 页面和 html 页面一样，都是存放在 web 目录下。访问也跟访问 html 页面一样</p><p>在 web 目录下有如下的文件： </p><p>web 目录 a.html 页面 访问地址是 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;&gt;&gt;&gt; <a href="http://ip:port/工程路径/">http://ip:port/工程路径/</a></p><p>a.html b.jsp 页面 访问地址是 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;&gt;&gt;&gt; <a href="http://ip:port/工程路径/b.js">http://ip:port/工程路径/b.js</a></p><h2 id="jsp页面的本质"><a href="#jsp页面的本质" class="headerlink" title="jsp页面的本质"></a>jsp页面的本质</h2><p>jsp 页面本质上是一个 Servlet 程序</p><p>当我们第一次访问 jsp 页面的时候。Tomcat 服务器会帮我们把 jsp 页面翻译成为一个 java 源文件。并且对它进行编译成 为.class 字节码程序。我们打开 java 源文件不难发现其里面的内容是</p><p>找java源文件的路径     </p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs moonscript"><span class="hljs-name">C</span>:\Users\#赵梓皓&amp;\AppData\Local\JetBrains\IntelliJIdea2020<span class="hljs-number">.3</span>\tomcat\a918c083-a48c<span class="hljs-number">-4</span>fed-a7cf<span class="hljs-number">-4186</span>b397852c\work\Catalina\localhost\jsp\org\apache\jsp<br><br></code></pre></td></tr></table></figure><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210011039442.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221001103931295"></p><p>我们跟踪原代码发现，HttpJspBase 类。它直接地继承了 HttpServlet 类。也就是说。jsp 翻译出来的 java 类，它间接了继 承了 HttpServlet 类。也就是说，翻译出来的是一个 Servlet 程序</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210011039961.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221001103955100"></p><p>总结：通过翻译的 java 源代码我们就可以得到结果：jsp 就是 Servlet 程序。</p><p>大家也可以去观察翻译出来的 Servlet 程序的源代码，不难发现。其底层实现，也是通过输出流。把 html 页面数据回传 给客户端</p><h2 id="jsp-的三种语法"><a href="#jsp-的三种语法" class="headerlink" title="jsp 的三种语法"></a>jsp 的三种语法</h2><h3 id="jsp-头部的-page-指令"><a href="#jsp-头部的-page-指令" class="headerlink" title="jsp 头部的 page 指令"></a>jsp 头部的 page 指令</h3><p>jsp 的 page 指令可以修改 jsp 页面中一些重要的属性，或者行为</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;%@<span class="hljs-built_in"> page </span><span class="hljs-attribute">contentType</span>=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> <span class="hljs-attribute">language</span>=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br></code></pre></td></tr></table></figure><p>i. language 属性                         表示 jsp 翻译后是什么语言文件。暂时只支持 java。</p><p> ii. contentType 属性                 表示 jsp 返回的数据类型是什么。也是源码中 response.setContentType()参数值 </p><p>iii. pageEncoding 属性                表示当前 jsp 页面文件本身的字符集。 </p><p>iv. import 属性                              跟 java 源代码中一样。用于导包，导类。 </p><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;两个属性是给 out 输出流使用&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; </p><p>v. autoFlush 属性 设置当 out 输出流缓冲区满了之后，是否自动刷新冲级区。默认值是 true。 </p><p>vi. buffer 属性 设置 out 缓冲区的大小。默认是 8kb</p><p>如果将autoFlush设为false</p><p>buffer改为比较小的2kb    </p><p>然后jsp中页面又很多就会出现这种情况</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210011111674.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221001111120326"></p><p>pageEncoding属性改变的就是这个界面的编码</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210011105624.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221001110537277"></p><p>vii. errorPage                 属性 设置当 jsp 页面运行时出错，自动跳转去的错误页面路径。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">errorPage</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;/error500.jsp&quot;</span><br></code></pre></td></tr></table></figure><!--errorPage 表示错误后自动跳转去的路径 <br/>这个路径一般都是以斜杠打头，它表示请求地址为 http://ip:port/工程路径/映射到代码的 Web 目录--><p>viii.              isErrorPage 属性             设置当前 jsp 页面是否是错误信息页面。默认是 false。如果是 true 可以 获取异常信息。 </p><p>ix.           session 属性                         设置访问当前 jsp 页面，是否会创建 HttpSession 对象。默认是 true。 </p><p>x. extends 属性                                    设置 jsp 翻译出来的java 类默认继承谁。</p><figure class="highlight mojolicious"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs mojolicious"><span class="language-xml">&lt;%</span><span class="language-perl">--</span><br><span class="language-perl">  Created by IntelliJ IDEA.</span><br><span class="language-perl">  User: <span class="hljs-comment">#赵梓皓&amp;</span></span><br><span class="language-perl">  Date: <span class="hljs-number">2022</span>/<span class="hljs-number">10</span>/<span class="hljs-number">1</span></span><br><span class="language-perl">  Time: <span class="hljs-number">10</span>:<span class="hljs-number">28</span></span><br><span class="language-perl">  To change this template <span class="hljs-keyword">use</span> File | Settings | File Templates.</span><br><span class="language-perl">--</span><span class="language-xml">%&gt;</span><br><span class="language-xml">&lt;%</span><span class="language-perl">@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span></span><br><span class="language-perl">         pageEncoding=<span class="hljs-string">&quot;utf-8&quot;</span></span><br><span class="language-perl">         import=<span class="hljs-string">&quot;java.util.Map&quot;</span></span><br><span class="language-perl">         autoFlush=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="language-perl">         buffer=<span class="hljs-string">&quot;8kb&quot;</span></span><br><span class="language-perl">         errorPage=<span class="hljs-string">&quot;/error500.jsp&quot;</span></span><br><span class="language-perl">         language=<span class="hljs-string">&quot;java&quot;</span> </span><span class="language-xml">%&gt;</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">a.jsp页面</span><br><span class="language-xml">&lt;%</span><span class="language-perl"></span><br><span class="language-perl">    <span class="hljs-keyword">int</span> i=<span class="hljs-number">12</span>/<span class="hljs-number">0</span>;</span><br><span class="language-perl"></span><span class="language-xml">%&gt;</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h3><h4 id="声明脚本（少用）"><a href="#声明脚本（少用）" class="headerlink" title="声明脚本（少用）"></a>声明脚本（少用）</h4><p>声明脚本的格式是： &lt;%! 声明 java 代码 %</p><p>作用：可以给 jsp 翻译出来的 java 类定义属性和方法甚至是静态代码块。内部类等</p><p>这是jsp的代码</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs JSP">&lt;%--<br>  Created by IntelliJ IDEA.<br>  User: #赵梓皓&amp;<br>  Date: <span class="hljs-number">2022</span>/<span class="hljs-number">10</span>/<span class="hljs-number">1</span><br>  Time: <span class="hljs-number">10</span>:<span class="hljs-number">28</span><br>  To change <span class="hljs-built_in">this</span> template use File | Settings | File Templates.<br>--%&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span><br>         pageEncoding=<span class="hljs-string">&quot;utf-8&quot;</span><br>         <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.util.Map&quot;</span><br>         autoFlush=<span class="hljs-string">&quot;true&quot;</span><br>         buffer=<span class="hljs-string">&quot;8kb&quot;</span><br>         errorPage=<span class="hljs-string">&quot;/error500.jsp&quot;</span><br>         language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.util.HashMap&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;!--<span class="hljs-number">1.</span>声明类属性--&gt;<br>&lt;%!<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;String,Object&gt; map;<br>%&gt;<br>&lt;!--<span class="hljs-number">2.</span>定义静态代码块--&gt;<br>&lt;%!<br>    <span class="hljs-keyword">static</span> &#123;<br>        map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Object&gt;();<br>        map.put(<span class="hljs-string">&quot;key1&quot;</span>, <span class="hljs-string">&quot;value1&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;key2&quot;</span>, <span class="hljs-string">&quot;value2&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;key3&quot;</span>, <span class="hljs-string">&quot;value3&quot;</span>);<br>    &#125;<br>%&gt;<br><br>&lt;!--声明类的方法--&gt;<br>&lt;%!<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">abc</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">12</span>;<br>    &#125;<br>%&gt;<br><br>&lt;!--生成内部类--&gt;<br>&lt;%!<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br>        <span class="hljs-keyword">private</span> Integer id;<br>        <span class="hljs-keyword">private</span> String abc=<span class="hljs-string">&quot;abc&quot;</span>;<br>        <br>    &#125;<br>%&gt;<br><br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210011309848.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221001130940305"></p><p>上面这个图片是对应的jsp程序在a_jsp.java文件中生成的方法属性和静态代码块的样子</p><h4 id="表达式脚本（常用）"><a href="#表达式脚本（常用）" class="headerlink" title="表达式脚本（常用）"></a>表达式脚本（常用）</h4><p>表达式脚本的格式是：&lt;%&#x3D;表达式%&gt; 表达式脚本的作用是：的 jsp 页面上输出数据。</p><p>表达式脚本的特点： </p><p>1、所有的表达式脚本都会被翻译到_jspService() 方法中 </p><p>2、表达式脚本都会被翻译成为 out.print()输出到页面上 </p><p><strong>_3、由于表达式脚本翻译的内容都在_jspService() 方法中,所以_jspService()方法中的对象都可以直接使用。</strong> </p><p>4、表达式脚本中的表达式不能以分号结束。</p><p>这个就是jspService方法</p><p><strong>out就是jsp专用的一个输入输出流</strong></p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210011327189.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221001132735772"></p><p>这个_jspService方法中的对象都可以使用</p><p>这个是表达式脚本的翻译演示</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210011331773.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221001133107785"></p><figure class="highlight mojolicious"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mojolicious"><span class="language-xml">&lt;%=</span><span class="language-perl"><span class="hljs-number">12</span></span><span class="language-xml">%&gt;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br><span class="language-xml">&lt;%=</span><span class="language-perl"><span class="hljs-number">12.12</span></span><span class="language-xml">%&gt;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br><span class="language-xml">&lt;%=</span><span class="language-perl"><span class="hljs-string">&quot;我是字符串&quot;</span></span><span class="language-xml">%&gt;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br><span class="language-xml">&lt;%=</span><span class="language-perl"><span class="hljs-keyword">map</span></span><span class="language-xml">%&gt;</span><br><span class="language-xml"><span class="hljs-comment">&lt;!--使用_jspService方法中的对象--&gt;</span></span><br><span class="language-xml">&lt;%=</span><span class="language-perl">request.getParameter(<span class="hljs-string">&quot;username&quot;</span>)</span><span class="language-xml">%&gt;</span><br></code></pre></td></tr></table></figure><p>在页面输出12等等</p><h4 id="代码脚本"><a href="#代码脚本" class="headerlink" title="代码脚本"></a>代码脚本</h4><p>代码脚本中用System.out.println输出的都是在控制台中输出的</p><p>代码脚本的格式是： &lt;% java 语句 %&gt;</p><p>代码脚本的作用是：可以在 jsp 页面中，编写我们自己需要的功能（写的是 java 语句）</p><p>代码脚本的特点是： </p><p>1、代码脚本翻译之后都在_jspService 方法中 _</p><p><strong>_2、代码脚本由于翻译到_jspService()方法中，所以在_jspService()方法中的现有对象都可以直接使用。</strong> </p><p>3、还可以由多个代码脚本块组合完成一个完整的 java 语句。 </p><p>4、代码脚本还可以和表达式脚本一起组合使用，在 jsp 页面上输出数</p><p>正常的System只能输出在控制台，只有和表达式脚本结合才能输出页面</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;!--代码脚本和表达式脚本组合在一起用--&gt;<br>&lt;%<br>    <span class="hljs-type">int</span> i=<span class="hljs-number">13</span>;<br>    <span class="hljs-keyword">if</span>(i==<span class="hljs-number">12</span>)&#123;%&gt;<br>&lt;h1&gt;我是赵梓皓&lt;/h1&gt;<br>   &lt;% &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;%&gt;<br>&lt;h1&gt;我是张几名&lt;/h1&gt;<br>    &lt;%<br>    &#125;<br> %&gt;<br><br>&lt;!--两个代码脚本合成一个，即使会报错，但是运行之后还是可以输出的--&gt;<br>&lt;!--代码脚本还可以和表达式脚本一起组合输出--&gt;<br>&lt;table border=<span class="hljs-string">&quot;1&quot;</span> cellspacing=<span class="hljs-string">&quot;0&quot;</span>&gt;<br><br>&lt;%<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">10</span>;j++)&#123;<br>    %&gt;<br>    &lt;tr&gt;<br>        &lt;td&gt;&lt;%=j%&gt;&lt;/td&gt;<br>    &lt;/tr&gt;<br>    &lt;%<br>    &#125;<br>%&gt;<br><br>&lt;/table&gt;<br><br><br><br>&lt;!--用jspService中的对象--&gt;<br>&lt;%<br>    String username=request.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;用户名的请求参数是&quot;</span>+username);<br><br>%&gt;<br></code></pre></td></tr></table></figure><h4 id="jsp中的三种注释"><a href="#jsp中的三种注释" class="headerlink" title="jsp中的三种注释"></a>jsp中的三种注释</h4><p>i. html 注释 </p><p><strong>html 注释会被翻译到 java 源代码中。在_jspService 方法里，以 out.writer 输出到客户端。</strong></p><p> ii. java 注释 </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">&lt;% <span class="hljs-regexp">//</span> 单行 java 注释 <span class="hljs-regexp">/* 多行 java 注释 */</span> %&gt; <br></code></pre></td></tr></table></figure><p>java 注释会被翻译到 java 源代码中。 </p><p>iii. jsp 注释 &lt;%– 这是 jsp 注释 –%&gt; jsp 注释可以注掉，jsp 页面中所有代码</p><h2 id="jsp九大内置对象"><a href="#jsp九大内置对象" class="headerlink" title="jsp九大内置对象"></a>jsp九大内置对象</h2><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210011451154.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221001145135639"></p><p>这个第九个内置对象只有 isErrorPage为true的时候才会在java文件中显示出来</p><h2 id="java四个域对象的演示"><a href="#java四个域对象的演示" class="headerlink" title="java四个域对象的演示"></a>java四个域对象的演示</h2><p><strong>这四个域和Servlet中的域是一样的，所以Servlet在request域中存储的数据，其实在jsp中是可以获取的</strong></p><p>四个域对象分别是： </p><p>pageContext (PageContextImpl 类)              当前 jsp 页面范围内有效 </p><p>request (HttpServletRequest 类)、               一次请求内有效 ，请求转发是一次请求</p><p>session (HttpSession 类)、                            一个会话范围内有效（打开浏览器访问服务器，直到关闭浏览器） </p><p>application (ServletContext 类)                  整个 web 工程范围内都有效（只要 web 工程不停止，数据都在）</p><p>域对象是可以像 Map 一样存取数据的对象。四个域对象功能一样。不同的是它们对数据的存取范围</p><p>虽然四个域对象都可以存取数据。在使用上它们是有优先顺序的。</p><p>四个域在使用的时候，优先顺序分别是，他们从小到大的范围的顺序。</p><p>pageContext &#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt; request &#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt; session &#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;application</p><p>score.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--<br>  Created by IntelliJ IDEA.<br>  User: #赵梓皓&amp;<br>  Date: <span class="hljs-number">2022</span>/<span class="hljs-number">10</span>/<span class="hljs-number">1</span><br>  Time: <span class="hljs-number">14</span>:<span class="hljs-number">58</span><br>  To change <span class="hljs-built_in">this</span> template use File | Settings | File Templates.<br>--%&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>   &lt;h1&gt;score.jsp页面&lt;/h1&gt;<br>   &lt;%<br>       <span class="hljs-comment">//往四个域中都分别保存了数据</span><br>       pageContext.setAttribute(<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-string">&quot;pageContext&quot;</span>);<br>       request.setAttribute(<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-string">&quot;request&quot;</span>);<br>       session.setAttribute(<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-string">&quot;session&quot;</span>);<br>       application.setAttribute(<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-string">&quot;application&quot;</span>);<br>   %&gt;<br>   pageContext域是否有值：&lt;%=pageContext.getAttribute(<span class="hljs-string">&quot;key&quot;</span>)%&gt; &lt;br&gt;<br>   request域是否有值：&lt;%=request.getAttribute(<span class="hljs-string">&quot;key&quot;</span>)%&gt; &lt;br&gt;<br>   session域是否有值：&lt;%=session.getAttribute(<span class="hljs-string">&quot;key&quot;</span>)%&gt; &lt;br&gt;<br>   application域是否有值：&lt;%=application.getAttribute(<span class="hljs-string">&quot;key&quot;</span>)%&gt; &lt;br&gt;<br>&lt;%<br>    request.getRequestDispatcher(<span class="hljs-string">&quot;/score2.jsp&quot;</span>).forward(request,response);<br>%&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>score2.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--<br>  Created by IntelliJ IDEA.<br>  User: Administrator<br>  Date: <span class="hljs-number">2020</span>/<span class="hljs-number">2</span>/<span class="hljs-number">23</span><br>  Time: <span class="hljs-number">21</span>:<span class="hljs-number">23</span><br>  To change <span class="hljs-built_in">this</span> template use File | Settings | File Templates.<br>--%&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;h1&gt;scope2.jsp页面&lt;/h1&gt;<br>    pageContext域是否有值：&lt;%=pageContext.getAttribute(<span class="hljs-string">&quot;key&quot;</span>)%&gt; &lt;br&gt;<br>    request域是否有值：&lt;%=request.getAttribute(<span class="hljs-string">&quot;key&quot;</span>)%&gt; &lt;br&gt;<br>    session域是否有值：&lt;%=session.getAttribute(<span class="hljs-string">&quot;key&quot;</span>)%&gt; &lt;br&gt;<br>    application域是否有值：&lt;%=application.getAttribute(<span class="hljs-string">&quot;key&quot;</span>)%&gt; &lt;br&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>这种情况pageContext是null，因为请求转发就变了一个jsp页面了，但是依然是一次请求所以request是有的</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">如果再专门请求一次score2                  http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8088</span><span class="hljs-regexp">/jsp/</span>score2.jsp<br></code></pre></td></tr></table></figure><p>就可以让request也变成null</p><p>如果关闭浏览器，这里指的是关闭浏览器而不是只关闭浏览器的那个页面，然后再访问一次<a href="http://localhost:8088/jsp/score2.jsp">http://localhost:8088/jsp/score2.jsp</a></p><p>这样session就会消失了</p><p>重启或者重新部署服务器就会让application变为null</p><h2 id="jsp中out和response-getWriter输出的区别"><a href="#jsp中out和response-getWriter输出的区别" class="headerlink" title="jsp中out和response.getWriter输出的区别"></a>jsp中out和response.getWriter输出的区别</h2><p>response 中表示响应，我们经常用于设置返回给客户端的内容（输出） </p><p>out 也是给用户做输出使用的。</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210011607003.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221001160700668"></p><p>由于 jsp 翻译之后，底层源代码都是使用 out 来进行输出，所以一般情况下。我们在 jsp 页面中统一使用 out 来进行输出。避 免打乱页面输出内容的顺序</p><p>out.write() 输出字符串没有问题 out.print() 输出任意数据都没有问题（都转换成为字符串后调用的 write 输出</p><p>深入源码，浅出结论：在 jsp 页面中，可以统一使用 out.print()来进行输</p><p>这个就是out输出一     out输出二   response输出1       response输出2</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&lt;%<br>    <span class="hljs-keyword">out</span>.<span class="hljs-keyword">write</span>(&quot;out输出一&quot;);<br>    <span class="hljs-keyword">out</span>.<span class="hljs-keyword">write</span>(&quot;out输出二&quot;);<br>    <span class="hljs-keyword">out</span>.flush();<br>    response.getWriter().<span class="hljs-keyword">write</span>(&quot;respose输出1&quot;);<br>    response.getWriter().<span class="hljs-keyword">write</span>(&quot;response输出2&quot;);<br><br>%&gt;<br></code></pre></td></tr></table></figure><p>下面的这个规则对out的print方法依然适用</p><p><strong>就是两个对象的write方法都能把自己分别写入自己的缓冲区</strong></p><p><strong>有out.flush方法就把out缓冲区中的追加到response缓冲区，就算没有out.flush，在页面代码执行完成（也就是response write的都写进了response缓冲区）自动把out缓冲区中的追加到response缓冲区</strong></p><p><strong>然后执行response刷新，把全部数据给客户端</strong></p><h2 id="jsp常用标签"><a href="#jsp常用标签" class="headerlink" title="jsp常用标签"></a>jsp常用标签</h2><h3 id="jsp静态包含"><a href="#jsp静态包含" class="headerlink" title="jsp静态包含"></a>jsp静态包含</h3><p>示例说明： </p><p> &lt;%@ include file&#x3D;””%&gt; 就是静态包含</p><p> file 属性指定你要包含的 jsp 页面的路径 地址中第一个斜杠 &#x2F; 表示为 <a href="http://ip:port/工程路径/">http://ip:port/工程路径/</a> 映射到代码的 web 目录</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">&lt;%@ include <span class="hljs-keyword">file</span>=<span class="hljs-string">&quot;/include/foot.jsp&quot;</span>%&gt;<br></code></pre></td></tr></table></figure><p>在main.jsp中包含foot.jsp文件 </p><p>这样访问main.jsp的时候也可以看到foot.jsp中的内容</p><p>静态包含的特点：</p><p>​             1、静态包含不会翻译被包含的 jsp 页面。</p><p>​             2、静态包含其实是把被包含的 jsp 页面的代码拷贝到包含的位置执行输出</p><h3 id="jsp动态包含"><a href="#jsp动态包含" class="headerlink" title="jsp动态包含"></a>jsp动态包含</h3><p> 这是动态包含 </p><figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs openscad">&lt;jsp:<span class="hljs-meta"><span class="hljs-keyword">include</span> page=&quot;&quot;&gt;</span>&lt;/jsp:<span class="hljs-meta"><span class="hljs-keyword">include</span>&gt;</span><br></code></pre></td></tr></table></figure><p>page 属性是指定你要包含的 jsp 页面的路径 </p><p>动态包含也可以像静态包含一样。把被包含的内容执行输出到包含位置</p><p>动态包含的特点： </p><p>1、动态包含会把包含的 jsp 页面也翻译成为 java 代码 </p><p>2、动态包含底层代码使用如下代码去调用被包含的 jsp 页面执行输出。 </p><p>​                                        JspRuntimeLibrary.include(request, response, “&#x2F;include&#x2F;footer.jsp”, out, false); </p><p>3、动态包含，还可以传递参数</p><p>动态包含的原理是：main.jsp把自己的对象都传递给了footer.jsp页面，所以而这用的是一个out对象</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210021324447.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221002132437189"></p><p>main.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--<br>  Created by IntelliJ IDEA.<br>  User: #赵梓皓&amp;<br>  Date: <span class="hljs-number">2022</span>/<span class="hljs-number">10</span>/<span class="hljs-number">2</span><br>  Time: <span class="hljs-number">13</span>:<span class="hljs-number">01</span><br>  To change <span class="hljs-built_in">this</span> template use File | Settings | File Templates.<br>--%&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>头部信息&lt;br/&gt;<br>主体信息&lt;br/&gt;<br><br><br><span class="hljs-comment">//静态包含</span><br>&lt;%@ include file=<span class="hljs-string">&quot;/include/foot.jsp&quot;</span>%&gt;<br><br><span class="hljs-comment">//动态包含</span><br>&lt;%--可以向foot.jsp传递参数，在foot.jsp页面中获取，因为都是用的一个request对象--%&gt;<br>&lt;jsp:include page=<span class="hljs-string">&quot;/include/foot.jsp&quot;</span>&gt;<br>   &lt;jsp:param name=<span class="hljs-string">&quot;username&quot;</span> value=<span class="hljs-string">&quot;admin&quot;</span>/&gt;<br>   &lt;jsp:param name=<span class="hljs-string">&quot;password&quot;</span> value=<span class="hljs-string">&quot;admin&quot;</span>/&gt;<br>&lt;/jsp:include&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>foot.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--<br>  Created by IntelliJ IDEA.<br>  User: #赵梓皓&amp;<br>  Date: <span class="hljs-number">2022</span>/<span class="hljs-number">10</span>/<span class="hljs-number">2</span><br>  Time: <span class="hljs-number">13</span>:<span class="hljs-number">04</span><br>  To change <span class="hljs-built_in">this</span> template use File | Settings | File Templates.<br>--%&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>页脚信息&lt;br/&gt;<br><span class="hljs-comment">//获取main.jsp传来的参数</span><br>&lt;%=request.getParameter(<span class="hljs-string">&quot;username&quot;</span>)%&gt;<br>&lt;%=request.getParameter(<span class="hljs-string">&quot;password&quot;</span>)%&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure><h3 id="请求转发"><a href="#请求转发" class="headerlink" title="请求转发"></a>请求转发</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">jsp:forward</span> <span class="hljs-attr">page</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">jsp:forward</span>&gt;</span><br></code></pre></td></tr></table></figure><p> 是请求转发标签，它的功能就是请求转发 page 属性设置请求转发的路径</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xquery">&lt;<span class="hljs-meta">%--</span>请求转发--%&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">jsp:forward</span> <span class="hljs-attr">page</span>=<span class="hljs-string">&quot;/score2.jsp&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">jsp:forward</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>跳转到访问score2.jsp，显示score2.jsp内容</p><h2 id="jsp练习题"><a href="#jsp练习题" class="headerlink" title="jsp练习题"></a>jsp练习题</h2><p>总结：</p><p>&lt;%   %&gt;代码脚本中  不要有表达式脚本或者声明脚本，也不要有html标签</p><p>html标签中可以有表达式脚本或者代码脚本</p><p>而且<tr>   到</tr>可以是看作一行，</tr>就是用来换行的标志</p><h3 id="jsp页面中输出九九乘法表"><a href="#jsp页面中输出九九乘法表" class="headerlink" title="jsp页面中输出九九乘法表"></a>jsp页面中输出九九乘法表</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--<br>  Created by IntelliJ IDEA.<br>  User: #赵梓皓&amp;<br>  Date: <span class="hljs-number">2022</span>/<span class="hljs-number">10</span>/<span class="hljs-number">2</span><br>  Time: <span class="hljs-number">13</span>:<span class="hljs-number">36</span><br>  To change <span class="hljs-built_in">this</span> template use File | Settings | File Templates.<br>--%&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>    &lt;style type=<span class="hljs-string">&quot;text/css&quot;</span>&gt;<br><br>        table&#123;<br>            width:600px;<br>        &#125;<br><br>    &lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;h1 align=<span class="hljs-string">&quot;center&quot;</span>&gt;九九乘法口诀表&lt;/h1&gt;<br>&lt;table border=<span class="hljs-string">&quot;1&quot;</span>&gt;<br>&lt;%<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">9</span>;i++)&#123;    %&gt;<br>&lt;tr&gt;<br>&lt;%<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=i;j++)<br>&#123;%&gt;<br>    &lt;td&gt;&lt;%=i+<span class="hljs-string">&quot;*&quot;</span>+j+<span class="hljs-string">&quot;=&quot;</span>+i*j%&gt;&lt;/td&gt;<br>&lt;%<br>&#125;<br>%&gt;<br>    &lt;tr/&gt;<br>&lt;%<br>&#125;%&gt;<br>&lt;/table&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h3 id="遍历输出10个学生信息到表格中"><a href="#遍历输出10个学生信息到表格中" class="headerlink" title="遍历输出10个学生信息到表格中"></a>遍历输出10个学生信息到表格中</h3><p>Student类</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs typescript">package com.<span class="hljs-property">atguigu</span>.<span class="hljs-property">pojo</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">Integer</span> id;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">Integer</span> age;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> phone;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Student</span>() &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Student</span>(<span class="hljs-title class_">Integer</span> id, <span class="hljs-title class_">String</span> name, <span class="hljs-title class_">Integer</span> age, <span class="hljs-title class_">String</span> phone) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">id</span> = id;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">phone</span> = phone;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, phone=&#x27;&quot;</span> + phone + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Integer</span> <span class="hljs-title function_">getId</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setId</span>(<span class="hljs-params">Integer id</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">id</span> = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getName</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setName</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> name</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Integer</span> <span class="hljs-title function_">getAge</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setAge</span>(<span class="hljs-params">Integer age</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getPhone</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> phone;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setPhone</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> phone</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">phone</span> = phone;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;com.atguigu.pojo.Student&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.util.ArrayList&quot;</span> %&gt;&lt;%--<br>  Created by IntelliJ IDEA.<br>  User: #赵梓皓&amp;<br>  Date: <span class="hljs-number">2022</span>/<span class="hljs-number">10</span>/<span class="hljs-number">2</span><br>  Time: <span class="hljs-number">13</span>:<span class="hljs-number">56</span><br>  To change <span class="hljs-built_in">this</span> template use File | Settings | File Templates.<br>--%&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>    &lt;style&gt;<br>        table&#123;<br>            border:1px black solid;<br>            width:600px;<br>            border-collapse: collapse;<br><br>        &#125;<br>        td,th&#123;<br>   border:1px black solid;<br>        &#125;<br>    &lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;%<br>    ArrayList&lt;Student&gt; studentArrayList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Student&gt;();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)&#123;<br>        <span class="hljs-type">int</span> t=i+<span class="hljs-number">1</span>;<br>        studentArrayList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(t,<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-number">18</span>+t,<span class="hljs-string">&quot;phone&quot;</span>+t));<br>    &#125;<br>%&gt;<br>&lt;table border=<span class="hljs-string">&quot;1px&quot;</span>&gt;<br>    &lt;tr&gt;<br>        &lt;td&gt;id&lt;/td&gt;<br>        &lt;td&gt;姓名&lt;/td&gt;<br>        &lt;td&gt;年龄&lt;/td&gt;<br>        &lt;td&gt;手机号&lt;/td&gt;<br>    &lt;/tr&gt;<br>    &lt;%<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)&#123;<br>    <span class="hljs-type">int</span> id=studentArrayList.get(i).getId();<br>    String name=studentArrayList.get(i).getName();<br>    <span class="hljs-type">int</span> age=studentArrayList.get(i).getAge();<br>    String phone=studentArrayList.get(i).getPhone();<br>    %&gt;<br>        &lt;tr&gt;<br>            &lt;td&gt;&lt;%=id%&gt;&lt;/td&gt;<br>            &lt;td&gt;&lt;%=name%&gt;&lt;/td&gt;<br>            &lt;td&gt;&lt;%=age%&gt;&lt;/td&gt;<br>            &lt;td&gt;&lt;%=phone%&gt;&lt;/td&gt;<br>        &lt;/tr&gt;<br>    &lt;%&#125;%&gt;<br>&lt;/table&gt;<br>&lt;%<br><br>%&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h3 id="请求转发的使用说明（第二个练习的优化）"><a href="#请求转发的使用说明（第二个练习的优化）" class="headerlink" title="请求转发的使用说明（第二个练习的优化）"></a>请求转发的使用说明（第二个练习的优化）</h3><p>Servlet不太适合将查到的学生信息回传到客户端，所以改用jsp</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210021429478.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221002142858573"></p><p>SearchStudentServlet程序</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">package</span> com.atguigu.servlet;<br><br><span class="hljs-keyword">import</span> com.atguigu.pojo.<span class="hljs-type">Student</span>;<br><br><span class="hljs-keyword">import</span> javax.servlet.<span class="hljs-type">ServletException</span>;<br><span class="hljs-keyword">import</span> javax.servlet.http.<span class="hljs-type">HttpServlet</span>;<br><span class="hljs-keyword">import</span> javax.servlet.http.<span class="hljs-type">HttpServletRequest</span>;<br><span class="hljs-keyword">import</span> javax.servlet.http.<span class="hljs-type">HttpServletResponse</span>;<br><span class="hljs-keyword">import</span> java.io.<span class="hljs-type">IOException</span>;<br><span class="hljs-keyword">import</span> java.util.<span class="hljs-type">ArrayList</span>;<br><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SearchStudentServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> void doGet(<span class="hljs-type">HttpServletRequest</span> req, <span class="hljs-type">HttpServletResponse</span> resp) <span class="hljs-keyword">throws</span> <span class="hljs-type">ServletException</span>, <span class="hljs-type">IOException</span> &#123;<br>        <span class="hljs-comment">//获取请求的参数</span><br>        <span class="hljs-comment">//发sql语句查询学生的信息</span><br>        <span class="hljs-comment">//使用for循环代替前面两步</span><br>        <span class="hljs-type">ArrayList</span>&lt;<span class="hljs-type">Student</span>&gt; studentArrayList = <span class="hljs-keyword">new</span> <span class="hljs-type">ArrayList</span>&lt;<span class="hljs-type">Student</span>&gt;();<br>        <span class="hljs-keyword">for</span>(int i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)&#123;<br>            int t=i+<span class="hljs-number">1</span>;<br>            studentArrayList.add(<span class="hljs-keyword">new</span> <span class="hljs-type">Student</span>(t,<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-number">18</span>+t,<span class="hljs-string">&quot;phone&quot;</span>+t));<br>        &#125;<br>        <span class="hljs-comment">//保存查询到的结果到request域中</span><br>        req.setAttribute(<span class="hljs-string">&quot;stuList&quot;</span>,studentArrayList);<br>        <span class="hljs-comment">//请求转发到showStudent.jsp页面</span><br>        req.getRequestDispatcher(<span class="hljs-string">&quot;/test/test2.jsp&quot;</span>).forward(req,resp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>test2.jsp</p><figure class="highlight vbscript-html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs vbscript-html"><span class="language-vbscript">&lt;%@ page import=<span class="hljs-string">&quot;com.atguigu.pojo.Student&quot;</span> %&gt;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="language-vbscript">&lt;%@ page import=<span class="hljs-string">&quot;java.util.ArrayList&quot;</span> %&gt;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="language-vbscript">&lt;%@ page import=<span class="hljs-string">&quot;java.util.List&quot;</span> %&gt;</span><span class="language-vbscript">&lt;%--</span><br><span class="language-vbscript">  Created by IntelliJ IDEA.</span><br><span class="language-vbscript">  User: #赵梓皓&amp;</span><br><span class="language-vbscript">  Date: <span class="hljs-number">2022</span>/<span class="hljs-number">10</span>/<span class="hljs-number">2</span></span><br><span class="language-vbscript">  Time: <span class="hljs-number">13</span>:<span class="hljs-number">56</span></span><br><span class="language-vbscript">  <span class="hljs-keyword">To</span> change this template use File | Settings | File Templates.</span><br><span class="language-vbscript">--%&gt;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="language-vbscript">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;</span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml">        <span class="hljs-selector-tag">table</span>&#123;</span></span><br><span class="language-css"><span class="language-xml">            <span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> black solid;</span></span><br><span class="language-css"><span class="language-xml">            <span class="hljs-attribute">width</span>:<span class="hljs-number">600px</span>;</span></span><br><span class="language-css"><span class="language-xml">            <span class="hljs-attribute">border-collapse</span>: collapse;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml">        &#125;</span></span><br><span class="language-css"><span class="language-xml">        <span class="hljs-selector-tag">td</span>,<span class="hljs-selector-tag">th</span>&#123;</span></span><br><span class="language-css"><span class="language-xml">   <span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> black solid;</span></span><br><span class="language-css"><span class="language-xml">        &#125;</span></span><br><span class="language-css"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"></span><span class="language-vbscript">&lt;%</span><br><span class="language-vbscript">    List&lt;Student&gt; studentList=(List&lt;Student&gt;)<span class="hljs-built_in">request</span>.getAttribute(<span class="hljs-string">&quot;stuList&quot;</span>);</span><br><span class="language-vbscript">%&gt;</span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1px&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>id<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>年龄<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>手机号<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">    </span><span class="language-vbscript">&lt;%<span class="hljs-keyword">for</span>(int i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)&#123;</span><br><span class="language-vbscript">    int id=studentList.<span class="hljs-keyword">get</span>(i).getId();</span><br><span class="language-vbscript">    String name=studentList.<span class="hljs-keyword">get</span>(i).getName();</span><br><span class="language-vbscript">    int age=studentList.<span class="hljs-keyword">get</span>(i).getAge();</span><br><span class="language-vbscript">    String phone=studentList.<span class="hljs-keyword">get</span>(i).getPhone();</span><br><span class="language-vbscript">    %&gt;</span><span class="language-xml"></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><span class="language-vbscript">&lt;%=id%&gt;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><span class="language-vbscript">&lt;%=name%&gt;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><span class="language-vbscript">&lt;%=age%&gt;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><span class="language-vbscript">&lt;%=phone%&gt;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">    </span><span class="language-vbscript">&lt;%&#125;%&gt;</span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span><br><span class="language-xml"></span><span class="language-vbscript">&lt;%</span><br><span class="language-vbscript"></span><br><span class="language-vbscript">%&gt;</span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="Listener监听器"><a href="#Listener监听器" class="headerlink" title="Listener监听器"></a>Listener监听器</h2><p>1、Listener 监听器它是 JavaWeb 的三大组件之一。JavaWeb 的三大组件分别是：Servlet 程序、Filter 过滤器、Listener 监 听器。</p><p> 2、Listener 它是 JavaEE 的规范，就是接口 </p><p>3、监听器的作用是，监听某种事物的变化。然后通过回调函数，反馈给客户（程序）去做一些相应的处理。</p><h3 id="ServletContextListener监听器"><a href="#ServletContextListener监听器" class="headerlink" title="ServletContextListener监听器"></a>ServletContextListener监听器</h3><p>ServletContextListener 它可以监听 ServletContext 对象的创建和销毁</p><p>ServletContext 对象在 web 工程启动的时候创建，在 web 工程停止的时候销毁。</p><p>监听到创建和销毁之后都会分别调用 </p><p>两个方法分别是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//</span><br><span class="hljs-comment">// Source code recreated from a .class file by IntelliJ IDEA</span><br><span class="hljs-comment">// (powered by FernFlower decompiler)</span><br><span class="hljs-comment">//</span><br><br><span class="hljs-keyword">package</span> javax.servlet;<br><br><span class="hljs-keyword">import</span> java.util.EventListener;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ServletContextListener</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">EventListener</span> &#123;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">这个方法在ServletContext对象创建之后调用，做初始化</span><br><span class="hljs-comment">*/</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextInitialized</span><span class="hljs-params">(ServletContextEvent var1)</span>;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">这个方法在ServletContext对象销毁之后调用</span><br><span class="hljs-comment">*/</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextDestroyed</span><span class="hljs-params">(ServletContextEvent var1)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>如何使用 ServletContextListener 监听器监听 ServletContext 对象。 使用步骤如下：</p><p>​             1、编写一个类去实现 ServletContextListener </p><p>​             2、实现其两个回调方法 </p><p>​             3、到 web.xml 中去配置监听器</p><h1 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式"></a>EL表达式</h1><p>EL 表达式的全称是：Expression Language。是表达式语言。 </p><p>EL 表达式的什么作用：EL 表达式主要是代替 jsp 页面中的表达式脚本在 jsp 页面中进行数据的输出。</p><p> 因为 EL 表达式在输出数据的时候，要比 jsp 的表达式脚本要简洁很多</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--<br>  Created by IntelliJ IDEA.<br>  User: #赵梓皓&amp;<br>  Date: <span class="hljs-number">2022</span>/<span class="hljs-number">10</span>/<span class="hljs-number">2</span><br>  Time: <span class="hljs-number">15</span>:08<br>  To change <span class="hljs-built_in">this</span> template use File | Settings | File Templates.<br>--%&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>jsp的用法<br>&lt;%<br>    request.setAttribute(<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-string">&quot;值&quot;</span>);<br>%&gt;<br>表达式输出key的值是&lt;%=request.getAttribute(<span class="hljs-string">&quot;key1&quot;</span>)%&gt;<br><br>EL表达式输出key的值<br>$&#123;key1&#125;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>EL 表达式的格式是：${表达式} </p><p>EL 表达式在输出 null 值的时候，输出的是空串。jsp 表达式脚本输出 null 值的时候，输出的是 null 字符串。</p><h2 id="EL表达式搜索域数据的顺序"><a href="#EL表达式搜索域数据的顺序" class="headerlink" title="EL表达式搜索域数据的顺序"></a>EL表达式搜索域数据的顺序</h2><p>EL 表达式主要是在 jsp 页面中输出数据。 </p><p>主要是输出域对象中的数据。</p><p>当四个域中都有相同的 key 的数据的时候，EL 表达式会按照四个域的从小到大的顺序去进行搜索，找到就输出。</p><p>pageContext&#x3D;&#x3D;》requst&#x3D;&#x3D;》session&#x3D;&#x3D;》application</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--<br>  Created by IntelliJ IDEA.<br>  User: #赵梓皓&amp;<br>  Date: <span class="hljs-number">2022</span>/<span class="hljs-number">10</span>/<span class="hljs-number">2</span><br>  Time: <span class="hljs-number">15</span>:<span class="hljs-number">17</span><br>  To change <span class="hljs-built_in">this</span> template use File | Settings | File Templates.<br>--%&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;%<br>    <span class="hljs-comment">//往四个域中都保存了相同的key的数据</span><br><br>    request.setAttribute(<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-string">&quot;request&quot;</span>);<br>    session.setAttribute(<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-string">&quot;session&quot;</span>);<br>    application.setAttribute(<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-string">&quot;application&quot;</span>);<br>    pageContext.setAttribute(<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-string">&quot;pageContext&quot;</span>);<br>%&gt;<br>$&#123;key&#125;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h2 id="EL-表达式输出-Bean-的普通属性，数组属性。List-集-合属性，map-集合属性"><a href="#EL-表达式输出-Bean-的普通属性，数组属性。List-集-合属性，map-集合属性" class="headerlink" title="EL 表达式输出 Bean 的普通属性，数组属性。List 集 合属性，map 集合属性"></a>EL 表达式输出 Bean 的普通属性，数组属性。List 集 合属性，map 集合属性</h2><p>i. 需求——输出 Person 类中普通属性，数组属性。list 集合属性和 map</p><p>Person类</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs typescript">package com.<span class="hljs-property">atguigu</span>.<span class="hljs-property">pojo</span>;<br><br><span class="hljs-keyword">import</span> java.<span class="hljs-property">util</span>.<span class="hljs-property">Arrays</span>;<br><span class="hljs-keyword">import</span> java.<span class="hljs-property">util</span>.<span class="hljs-property">List</span>;<br><span class="hljs-keyword">import</span> java.<span class="hljs-property">util</span>.<span class="hljs-property">Map</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> int age=<span class="hljs-number">18</span>;<br><br>    <span class="hljs-keyword">public</span> int <span class="hljs-title function_">getAge</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setAge</span>(<span class="hljs-params">int age</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getName</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setName</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> name</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span>[] <span class="hljs-title function_">getPhones</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> phones;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setPhones</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] phones</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">phones</span> = phones;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&quot;</span> + name +<br>                <span class="hljs-string">&quot;, phones=&quot;</span> + <span class="hljs-title class_">Arrays</span>.<span class="hljs-title function_">toString</span>(phones) +<br>                <span class="hljs-string">&quot;, cities=&quot;</span> + cities +<br>                <span class="hljs-string">&quot;, map=&quot;</span> + map +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">String</span>&gt; <span class="hljs-title function_">getCities</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> cities;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setCities</span>(<span class="hljs-params">List&lt;<span class="hljs-built_in">String</span>&gt; cities</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">cities</span> = cities;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Map</span>&lt;<span class="hljs-title class_">String</span>, <span class="hljs-title class_">Object</span>&gt; <span class="hljs-title function_">getMap</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> map;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setMap</span>(<span class="hljs-params"><span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">Object</span>&gt; map</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">map</span> = map;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Person</span>(<span class="hljs-title class_">String</span> name, <span class="hljs-title class_">String</span>[] phones, <span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">String</span>&gt; cities, <span class="hljs-title class_">Map</span>&lt;<span class="hljs-title class_">String</span>, <span class="hljs-title class_">Object</span>&gt; map) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">phones</span> = phones;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">cities</span> = cities;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">map</span> = map;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Person</span>() &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span>[] phones;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">String</span>&gt; cities;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">Map</span>&lt;<span class="hljs-title class_">String</span>,<span class="hljs-title class_">Object</span>&gt; map;<br>&#125;<br></code></pre></td></tr></table></figure><p>c.jsp文件</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;com.atguigu.pojo.Person&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.util.List&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.util.ArrayList&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.util.HashMap&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.util.Map&quot;</span> %&gt;&lt;%--<br>  Created by IntelliJ IDEA.<br>  User: #赵梓皓&amp;<br>  Date: <span class="hljs-number">2022</span>/<span class="hljs-number">10</span>/<span class="hljs-number">2</span><br>  Time: <span class="hljs-number">15</span>:<span class="hljs-number">29</span><br>  To change <span class="hljs-built_in">this</span> template use File | Settings | File Templates.<br>--%&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;%<br>    <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>    person.setName(<span class="hljs-string">&quot;国哥好帅！&quot;</span>);<br>    person.setPhones(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;18610541354&quot;</span>,<span class="hljs-string">&quot;18688886666&quot;</span>,<span class="hljs-string">&quot;18699998888&quot;</span>&#125;);<br>    List&lt;String&gt; cities = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>    cities.add(<span class="hljs-string">&quot;北京&quot;</span>);<br>    cities.add(<span class="hljs-string">&quot;上海&quot;</span>);<br>    cities.add(<span class="hljs-string">&quot;深圳&quot;</span>);<br>    person.setCities(cities);<br>    Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    map.put(<span class="hljs-string">&quot;key1&quot;</span>,<span class="hljs-string">&quot;value1&quot;</span>);<br>    map.put(<span class="hljs-string">&quot;key2&quot;</span>,<span class="hljs-string">&quot;value2&quot;</span>);<br>    map.put(<span class="hljs-string">&quot;key3&quot;</span>,<span class="hljs-string">&quot;value3&quot;</span>);<br>    person.setMap(map);<br><br>    pageContext.setAttribute(<span class="hljs-string">&quot;p&quot;</span>,person);<br>%&gt;<br><br>输出 Person $&#123;p&#125;&lt;br/&gt;<br>输出 Person 的 name 属性：$&#123;p.name&#125; &lt;br&gt;<br>输出 Person 的 phones 数组属性值：$&#123;p.phones[<span class="hljs-number">2</span>]&#125; &lt;br&gt;<br>输出 Person 的 cities 集合中的元素值：$&#123;p.cities&#125; &lt;br&gt;<br>输出 Person 的 List 集合中个别元素值：$&#123;p.cities[<span class="hljs-number">2</span>]&#125; &lt;br&gt;<br>输出 Person 的 Map 集合:  $&#123;p.map&#125;&lt;br&gt;<br>输出 Person 的 Map 集合中某个 key 的值: $&#123;p.map.key1&#125; &lt;br&gt;<br>输出 Person 的 age 属性： $&#123;p.age&#125;&lt;br&gt;<br>    输出Person的Map集合中所有的值  :$&#123;p.map.values()&#125;<br><br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>EL表达式在查找属性的时候其实是通过get方法来查找，所以即使你没有age属性，只要有getAge()方法就可以了</p><h2 id="EL表达式运算"><a href="#EL表达式运算" class="headerlink" title="EL表达式运算"></a>EL表达式运算</h2><h3 id="关系运算"><a href="#关系运算" class="headerlink" title="关系运算"></a>关系运算</h3><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210021553962.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221002155311757"></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--<br>  Created by IntelliJ IDEA.<br>  User: #赵梓皓&amp;<br>  Date: <span class="hljs-number">2022</span>/<span class="hljs-number">10</span>/<span class="hljs-number">2</span><br>  Time: <span class="hljs-number">15</span>:<span class="hljs-number">56</span><br>  To change <span class="hljs-built_in">this</span> template use File | Settings | File Templates.<br>--%&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>$&#123;<span class="hljs-number">12</span>==<span class="hljs-number">12</span>&#125;&lt;br/&gt;<br>或<br>$&#123;<span class="hljs-number">12</span> eq <span class="hljs-number">12</span>&#125;&lt;br/&gt;<br>$&#123;<span class="hljs-number">12</span>!=<span class="hljs-number">12</span>&#125;&lt;br/&gt;<br>$&#123;<span class="hljs-number">12</span> ne <span class="hljs-number">12</span>&#125;&lt;br/&gt;<br><br>$&#123;<span class="hljs-number">12</span>&lt;<span class="hljs-number">12</span>&#125;&lt;br/&gt;<br>$&#123;<span class="hljs-number">12</span> lt <span class="hljs-number">12</span>&#125;&lt;br/&gt;<br><br>$&#123;<span class="hljs-number">12</span>&gt;<span class="hljs-number">12</span>&#125;&lt;br/&gt;<br>$&#123;<span class="hljs-number">12</span> gt <span class="hljs-number">12</span>&#125;&lt;br/&gt;<br><br><br>$&#123;<span class="hljs-number">12</span>&gt;=<span class="hljs-number">12</span>&#125;&lt;br/&gt;<br>$&#123;<span class="hljs-number">12</span> ge <span class="hljs-number">12</span>&#125;&lt;br/&gt;<br><br>$&#123;<span class="hljs-number">12</span>&lt;=<span class="hljs-number">12</span>&#125;&lt;br/&gt;<br>$&#123;<span class="hljs-number">12</span> le <span class="hljs-number">12</span>&#125;&lt;br/&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h3 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h3><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210021603750.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221002160354580"></p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">$</span><span class="hljs-template-variable">&#123;12==12&amp;&amp;12&gt;11&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br><span class="language-xml">$</span><span class="hljs-template-variable">&#123;12==12 and 12&gt;11&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br><span class="language-xml">$</span><span class="hljs-template-variable">&#123;! true&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br><span class="language-xml">$</span><span class="hljs-template-variable">&#123;not true&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="算数运算"><a href="#算数运算" class="headerlink" title="算数运算"></a>算数运算</h3><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210021604773.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221002160439704"></p><h3 id="empty运算"><a href="#empty运算" class="headerlink" title="empty运算"></a>empty运算</h3><p>empty 运算可以判断一个数据是否为空，如果为空，则输出 true,不为空输出 false。</p><p>以下几种情况为空：</p><p>1、值为 null 值的时候，为空 </p><p>2、值为空串的时候，为空 </p><p>3、值是 Object 类型数组，长度为零的时候 </p><p>4、list 集合，元素个数为零 </p><p>5、map 集合，元素个数为零</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.util.ArrayList&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.util.List&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.util.HashMap&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.util.Map&quot;</span> %&gt;&lt;%--<br>  Created by IntelliJ IDEA.<br>  User: #赵梓皓&amp;<br>  Date: <span class="hljs-number">2022</span>/<span class="hljs-number">10</span>/<span class="hljs-number">2</span><br>  Time: <span class="hljs-number">16</span>:<span class="hljs-number">52</span><br>  To change <span class="hljs-built_in">this</span> template use File | Settings | File Templates.<br>--%&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;%<br>    <span class="hljs-comment">//1、值为 null 值的时候，为空</span><br>request.setAttribute(<span class="hljs-string">&quot;emptyNull&quot;</span>,<span class="hljs-literal">null</span>);<br>    <span class="hljs-comment">//2、值为空串的时候，为空</span><br>    request.setAttribute(<span class="hljs-string">&quot;emptyStr&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-comment">//3、值是 Object 类型数组，长度为零的时候</span><br>    request.setAttribute(<span class="hljs-string">&quot;emptyArr&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;&#125;);<br>    <span class="hljs-comment">//4、list 集合，元素个数为零</span><br>List&lt;String&gt; list=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>list.add(<span class="hljs-string">&quot;abc&quot;</span>);<br>    request.setAttribute(<span class="hljs-string">&quot;emptyList&quot;</span>,list);<br>    <span class="hljs-comment">//5、map 集合，元素个数为零</span><br>    Map&lt;String,Object&gt; map=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String,Object&gt;();<br>%&gt;<br>$&#123;empty emptyNull&#125;&lt;br/&gt;<br>$&#123;empty emptyStr&#125;&lt;br/&gt;<br>$&#123;empty emptyArr&#125;&lt;br/&gt;<br>$&#123;empty emptyList&#125;&lt;br/&gt;<br>$&#123;empty emptyMap&#125;&lt;br/&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h3 id="三元运算"><a href="#三元运算" class="headerlink" title="三元运算"></a>三元运算</h3><p>表达式 1？表达式 2：表达式 3 </p><p>如果表达式 1 的值为真，返回表达式 2 的值，如果表达式 1 的值为假，返回表达式 3 的值</p><p>实例</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$&#123;</span> <span class="hljs-number">12</span> != <span class="hljs-number">12</span> ? <span class="hljs-string">&quot;国哥帅呆&quot;</span><span class="hljs-symbol">:<span class="hljs-string">&quot;国哥又骗人啦&quot;</span></span> &#125;<br></code></pre></td></tr></table></figure><h3 id="“-”点运算-和-中括号运算"><a href="#“-”点运算-和-中括号运算" class="headerlink" title="“.”点运算 和 [] 中括号运算"></a>“.”点运算 和 [] 中括号运算</h3><p>.点运算，可以输出 Bean 对象中某个属性的值。 </p><p>[]中括号运算，可以输出有序集合中某个元素的值。 并且[]中括号运算，还可以输出 map 集合中 key 里<strong>含有特殊字符</strong>的 key 的值。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.util.HashMap&quot;</span> %&gt;&lt;%--<br>  Created by IntelliJ IDEA.<br>  User: #赵梓皓&amp;<br>  Date: <span class="hljs-number">2022</span>/<span class="hljs-number">10</span>/<span class="hljs-number">2</span><br>  Time: <span class="hljs-number">17</span>:<span class="hljs-number">03</span><br>  To change <span class="hljs-built_in">this</span> template use File | Settings | File Templates.<br>--%&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;%<br>    HashMap&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    map.put(<span class="hljs-string">&quot;a.a.a&quot;</span>,<span class="hljs-string">&quot;aaaValue&quot;</span>);<br>    map.put(<span class="hljs-string">&quot;b+b+b&quot;</span>,<span class="hljs-string">&quot;bbbValue&quot;</span>);<br>    map.put(<span class="hljs-string">&quot;c-c-c&quot;</span>,<span class="hljs-string">&quot;cccValue&quot;</span>);<br>    request.setAttribute(<span class="hljs-string">&quot;map&quot;</span>,map);<br>%&gt;<br>$&#123;map[<span class="hljs-string">&quot;a.a.a&quot;</span>]&#125;&lt;br/&gt;<br>$&#123;map[<span class="hljs-string">&quot;b+b+b&quot;</span>]&#125;&lt;br/&gt;<br>$&#123;map[<span class="hljs-string">&quot;c-c-c&quot;</span>]&#125;&lt;br/&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure><p>这两个前面用到过一次输出bean普通属性时</p><p>但如果map的key中有.这种特殊字符，就不能用map.key   可以用map[“key”]</p><h2 id="EL表达式中的11个隐含对象"><a href="#EL表达式中的11个隐含对象" class="headerlink" title="EL表达式中的11个隐含对象"></a>EL表达式中的11个隐含对象</h2><p>EL 个达式中 11 个隐含对象，是 EL 表达式中自己定义的，可以直接使用</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210021710656.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221002171048641"></p><p>initParam                                  Map&lt;String,String&gt;                                                                   它可以获取在 web.xml 中配置的上下文参数</p><h2 id="EL获取四个特定域中的属性"><a href="#EL获取四个特定域中的属性" class="headerlink" title="EL获取四个特定域中的属性"></a>EL获取四个特定域中的属性</h2><p>pageScope                         &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;             pageContext域</p><p>requestScope                    &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;             request域</p><p>sessionScope                    &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;            session域</p><p>applicationScope             &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;              ServletContext域</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--<br>  Created by IntelliJ IDEA.<br>  User: #赵梓皓&amp;<br>  Date: <span class="hljs-number">2022</span>/<span class="hljs-number">10</span>/<span class="hljs-number">2</span><br>  Time: <span class="hljs-number">17</span>:<span class="hljs-number">22</span><br>  To change <span class="hljs-built_in">this</span> template use File | Settings | File Templates.<br>--%&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;%<br>    pageContext.setAttribute(<span class="hljs-string">&quot;key1&quot;</span>,<span class="hljs-string">&quot;pageContext1&quot;</span>);<br>    pageContext.setAttribute(<span class="hljs-string">&quot;key2&quot;</span>,<span class="hljs-string">&quot;pageContext2&quot;</span>);<br>    request.setAttribute(<span class="hljs-string">&quot;key2&quot;</span>,<span class="hljs-string">&quot;request&quot;</span>);<br>    session.setAttribute(<span class="hljs-string">&quot;key2&quot;</span>,<span class="hljs-string">&quot;session&quot;</span>);<br>    application.setAttribute(<span class="hljs-string">&quot;key2&quot;</span>,<span class="hljs-string">&quot;application&quot;</span>);<br><br>%&gt;<br>&lt;%--输出pageContext域中的属性--%&gt;<br>&lt;%--如果多个域中只有一个key1，可以直接$&#123;key1&#125;   但是如果两个域中都由key1属性，就可以通过$&#123;内置对象.key1&#125;来调用你想要的--%&gt;<br>$&#123;pageScope.key1&#125;&lt;br/&gt;<br>$&#123;pageScope.key2&#125;&lt;br/&gt;<br>$&#123;requestScope.key2&#125;&lt;br/&gt;<br>$&#123;sessionScope.key2&#125;&lt;br/&gt;<br>$&#123;applicationScope.key2&#125;;&lt;br/&gt;<br><br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h2 id="pageContext演示"><a href="#pageContext演示" class="headerlink" title="pageContext演示"></a>pageContext演示</h2><p>可以获取jsp中的九大内置对象</p><ol><li>协议：</li><li>服务器 ip： </li><li>服务器端口：</li><li>获取工程路径： </li><li>获取请求方法： </li><li>获取客户端 ip 地址： </li><li>获取会话的 id 编号</li></ol><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--<br>  Created by IntelliJ IDEA.<br>  User: #赵梓皓&amp;<br>  Date: <span class="hljs-number">2022</span>/<span class="hljs-number">10</span>/<span class="hljs-number">2</span><br>  Time: <span class="hljs-number">17</span>:<span class="hljs-number">35</span><br>  To change <span class="hljs-built_in">this</span> template use File | Settings | File Templates.<br>--%&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;%--<br>jsp中的内置对象<br>request.getScheme()它可以获取请求的协议<br>--%&gt;<br><br>&lt;%--<br>request.getScheme() 它可以获取请求的协议<br>request.getServerName() 获取请求的服务器 ip 或域名<br>request.getServerPort() 获取请求的服务器端口号<br>request.getContextPath() 获取当前工程路径<br>request.getMethod() 获取请求的方式（GET 或 POST）<br>request.getRemoteHost() 获取客户端的 ip 地址<br>session.getId() 获取会话的唯一标识<br>--%&gt;<br>&lt;%=request.getScheme()%&gt;<br>&lt;%--<br>用pageContext.request.scheme其实就和调用getScheme方法是一样的<br>--%&gt;<br><span class="hljs-number">1.</span> 协议：$&#123;pageContext.request.scheme&#125;&lt;br/&gt;<br><span class="hljs-number">2.</span> 服务器 ip：$&#123;pageContext.request.serverName&#125;&lt;br/&gt;<br><span class="hljs-number">3.</span> 服务器端口：$&#123;pageContext.request.serverPort&#125;&lt;br/&gt;<br><span class="hljs-number">4.</span> 获取工程路径：$&#123;pageContext.request.contextPath&#125;&lt;br/&gt;<br><span class="hljs-number">5.</span> 获取请求方法：$&#123;pageContext.request.method&#125;&lt;br/&gt;<br><span class="hljs-number">6.</span>  获取客户端 ip 地址： $&#123;pageContext.request.remoteHost&#125;&lt;br/&gt;<br><span class="hljs-number">7.</span> 获取会话的 id 编号  $&#123;pageContext.session.id&#125; &lt;br/&gt;<br><br>&lt;%--简洁的写法--%&gt;<br>&lt;%<br>    pageContext.setAttribute(<span class="hljs-string">&quot;req&quot;</span>,request);<br><br>%&gt;<br>&lt;%--获取协议--%&gt;<br>$&#123;req.scheme&#125;<br><br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h2 id="其他EL隐含对象的事例"><a href="#其他EL隐含对象的事例" class="headerlink" title="其他EL隐含对象的事例"></a>其他EL隐含对象的事例</h2><p>param Map 它可以获取请求参数的值     Map&lt;String,String&gt;</p><p>paramValues Map&lt;String,String[]&gt; 它也可以获取请求参数的值，获取多个值的时候使用</p><p>请求地址</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://localhost:<span class="hljs-number">8084</span>/eljstl/other.jsp?username=<span class="hljs-number">1</span>&amp;password=<span class="hljs-number">2</span>&amp;hobby=<span class="hljs-number">1</span>&amp;hobby=<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">&lt;%--</span><br><span class="language-xml">  Created by IntelliJ IDEA.</span><br><span class="language-xml">  User: #赵梓皓&amp;</span><br><span class="language-xml">  Date: 2022/10/2</span><br><span class="language-xml">  Time: 18:30</span><br><span class="language-xml">  To change this template use File | Settings | File Templates.</span><br><span class="language-xml">--%&gt;</span><br><span class="language-xml">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">$</span><span class="hljs-template-variable">&#123;param.username&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br><span class="language-xml">$</span><span class="hljs-template-variable">&#123;param.password&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br><span class="language-xml">$</span><span class="hljs-template-variable">&#123;paramValues.username[0]&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br><span class="language-xml">$</span><span class="hljs-template-variable">&#123;paramValues.password[0]&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br><span class="language-xml">$</span><span class="hljs-template-variable">&#123;paramValues.hobby[0]&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br><span class="language-xml">$</span><span class="hljs-template-variable">&#123;paramValues.hobby[1]&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>header Map 它可以获取请求头的信息 </p><p>headerValues Map 它可以获取请求头的信息，它可以获取多个值的情况</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&lt;%<span class="hljs-comment">--</span><br>  Created <span class="hljs-keyword">by</span> IntelliJ IDEA.<br>  <span class="hljs-keyword">User</span>: #赵梓皓&amp;<br>  <span class="hljs-type">Date</span>: <span class="hljs-number">2022</span>/<span class="hljs-number">10</span>/<span class="hljs-number">2</span><br>  <span class="hljs-type">Time</span>: <span class="hljs-number">18</span>:<span class="hljs-number">30</span><br>  <span class="hljs-keyword">To</span> change this <span class="hljs-keyword">template</span> use File | Settings | File Templates.<br><span class="hljs-comment">--%&gt;</span><br>&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; <span class="hljs-keyword">language</span>=&quot;java&quot; %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;%<span class="hljs-comment">--因为User-Agent的- 是特殊字符--%&gt;</span><br>$&#123;<span class="hljs-keyword">header</span>[<span class="hljs-string">&#x27;User-Agent&#x27;</span>]&#125;&lt;br/&gt;<br>$&#123;<span class="hljs-keyword">header</span>.<span class="hljs-keyword">Connection</span>&#125;&lt;br/&gt;<br>$&#123;headerValues[<span class="hljs-string">&#x27;User-Agent&#x27;</span>][<span class="hljs-number">0</span>]&#125;&lt;br/&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>cookie                      Map &lt;String,Cookie&gt;                  它可以获取当前请求的 Cookie 信息</p><figure class="highlight mojolicious"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs mojolicious"><span class="language-xml">&lt;%</span><span class="language-perl">--</span><br><span class="language-perl">  Created by IntelliJ IDEA.</span><br><span class="language-perl">  User: <span class="hljs-comment">#赵梓皓&amp;</span></span><br><span class="language-perl">  Date: <span class="hljs-number">2022</span>/<span class="hljs-number">10</span>/<span class="hljs-number">2</span></span><br><span class="language-perl">  Time: <span class="hljs-number">18</span>:<span class="hljs-number">30</span></span><br><span class="language-perl">  To change this template <span class="hljs-keyword">use</span> File | Settings | File Templates.</span><br><span class="language-perl">--</span><span class="language-xml">%&gt;</span><br><span class="language-xml">&lt;%</span><span class="language-perl">@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> </span><span class="language-xml">%&gt;</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">获取cookie的名称:$&#123;cookie.JSESSIONID.name&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br><span class="language-xml">获取Cookie的值：$&#123;cookie.JSESSIONID.value&#125;</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>initParam              Map&lt;String,String&gt;         它可以获取在web.xml中配置的<context-param>上下文参数</p><p>在web.xml文件中添加这个  修改配置web.xml这种文件需要重新部署才能生效</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sqf">&lt;context-<span class="hljs-built_in">param</span>&gt;<br>    &lt;<span class="hljs-built_in">param</span>-<span class="hljs-built_in">name</span>&gt;url&lt;/<span class="hljs-built_in">param</span>-<span class="hljs-built_in">name</span>&gt;<br>    &lt;<span class="hljs-built_in">param</span>-value&gt;jdbc:mysql:<span class="hljs-comment">//test&lt;/param-value&gt;</span><br>&lt;/context-<span class="hljs-built_in">param</span>&gt;<br></code></pre></td></tr></table></figure><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">$</span><span class="hljs-template-variable">&#123;initParam&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">输出<span class="hljs-symbol">&amp;lt;</span>Context-param<span class="hljs-symbol">&amp;gt;</span>username的值：$</span><span class="hljs-template-variable">&#123;initParam.username&#125;</span><span class="language-xml"></span><br><span class="language-xml">输出<span class="hljs-symbol">&amp;lt;</span>Context-param<span class="hljs-symbol">&amp;gt;</span>url的值：$</span><span class="hljs-template-variable">&#123;initParam.url&#125;</span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><h1 id="JSTL标签库"><a href="#JSTL标签库" class="headerlink" title="JSTL标签库"></a>JSTL标签库</h1><p>JSTL 标签库 全称是指 JSP Standard Tag Library JSP 标准标签库。是一个不断完善的开放源代码的 JSP 标 签库。 </p><p>EL 表达式主要是为了替换 jsp 中的表达式脚本，而标签库则是为了替换代码脚本。这样使得整个 jsp 页面 变得更佳简洁</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210031529632.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload></p><h2 id="JSTL标签库的使用步骤"><a href="#JSTL标签库的使用步骤" class="headerlink" title="JSTL标签库的使用步骤"></a>JSTL标签库的使用步骤</h2><p>先导入jstl的jar包</p><p>1、先导入 jstl 标签库的 jar 包。 </p><p>taglibs-standard-impl-1.2.1.jar taglibs-standard-spec-1.2.1.jar</p><p>2、第二步，使用 taglib</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">&lt;<span class="hljs-meta">%</span>@ taglib prefix=<span class="hljs-string">&quot;c&quot;</span> uri=<span class="hljs-string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> <span class="hljs-meta">%</span>&gt;<br></code></pre></td></tr></table></figure><p>用自动补全代码的时候，这个会自动导入进来</p><h2 id="core核心库的使用"><a href="#core核心库的使用" class="headerlink" title="core核心库的使用"></a>core核心库的使用</h2><p>i. &lt;c:set &#x2F;&gt;（使用很少） </p><p>作用：set 标签可以往域中保存数据</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;<br>&lt;%<span class="hljs-comment">--</span><br>  Created <span class="hljs-keyword">by</span> IntelliJ IDEA.<br>  <span class="hljs-keyword">User</span>: #赵梓皓&amp;<br>  <span class="hljs-type">Date</span>: <span class="hljs-number">2022</span>/<span class="hljs-number">10</span>/<span class="hljs-number">3</span><br>  <span class="hljs-type">Time</span>: <span class="hljs-number">15</span>:<span class="hljs-number">30</span><br>  <span class="hljs-keyword">To</span> change this <span class="hljs-keyword">template</span> use File | Settings | File Templates.<br><span class="hljs-comment">--%&gt;</span><br>&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; <span class="hljs-keyword">language</span>=&quot;java&quot; %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;%<span class="hljs-comment">--</span><br>i.&lt;c:<span class="hljs-keyword">set</span> /&gt;<br>作用：<span class="hljs-keyword">set</span> 标签可以往域中保存数据<br><br>以前保存域数据<br>域对象.setAttribute(key,<span class="hljs-keyword">value</span>);<br><br>scope 属性设置保存到哪个域<br>page 表示 PageContext 域（默认值）<br>request 表示 Request 域<br><span class="hljs-keyword">session</span> 表示 <span class="hljs-keyword">Session</span> 域<br>application 表示 ServletContext 域<br>var 属性设置 key 是多少<br><span class="hljs-keyword">value</span> 属性设置值<br><span class="hljs-comment">--%&gt;</span><br>保存之前:$&#123;requestScope.abc&#125;&lt;br/&gt;<br>&lt;c:<span class="hljs-keyword">set</span> scope=&quot;request&quot; var=&quot;abc&quot; <span class="hljs-keyword">value</span>=&quot;abcValue&quot;/&gt;<br>保存之后:$&#123;requestScope.abc&#125;&lt;br/&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>ii .&lt;c:if &#x2F;&gt;</p><p>if 标签用来做 if 判断。</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">ii.<span class="hljs-tag">&lt;<span class="hljs-name">c:if</span> /&gt;</span></span><br><span class="language-xml">if 标签用来做 if 判断。</span><br><span class="language-xml">test 属性表示判断的条件（使用 EL 表达式输出）</span><br><span class="language-xml">--%&gt;</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">c:if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;12==12&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>无敌<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">c:if</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">c:if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;12!=12&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>无敌<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">c:if</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><p>iii.&lt;c:choose&gt; &lt;c:when&gt; &lt;c:otherwise&gt;标签</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ taglib prefix=<span class="hljs-string">&quot;c&quot;</span> uri=<span class="hljs-string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;<br>&lt;%--<br>  Created by IntelliJ IDEA.<br>  User: #赵梓皓&amp;<br>  Date: <span class="hljs-number">2022</span>/<span class="hljs-number">10</span>/<span class="hljs-number">3</span><br>  Time: <span class="hljs-number">15</span>:<span class="hljs-number">30</span><br>  To change <span class="hljs-built_in">this</span> template use File | Settings | File Templates.<br>--%&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;%--<br>i.&lt;c:set /&gt;<br>作用：set 标签可以往域中保存数据<br><br>以前保存域数据<br>域对象.setAttribute(key,value);<br><br>scope 属性设置保存到哪个域<br>page 表示 PageContext 域（默认值）<br>request 表示 Request 域<br>session 表示 Session 域<br>application 表示 ServletContext 域<br><span class="hljs-keyword">var</span> 属性设置 key 是多少<br>value 属性设置值<br>--%&gt;<br>保存之前:$&#123;requestScope.abc&#125;&lt;br/&gt;<br>&lt;c:set scope=<span class="hljs-string">&quot;request&quot;</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;abc&quot;</span> value=<span class="hljs-string">&quot;abcValue&quot;</span>/&gt;<br>保存之后:$&#123;requestScope.abc&#125;&lt;br/&gt;<br>&lt;%--<br>ii.&lt;c:<span class="hljs-keyword">if</span> /&gt;<br><span class="hljs-keyword">if</span> 标签用来做 <span class="hljs-keyword">if</span> 判断。<br>test 属性表示判断的条件（使用 EL 表达式输出）<br>--%&gt;<br>&lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;$&#123;12==12&#125;&quot;</span>&gt;<br>    &lt;h1&gt;无敌&lt;/h1&gt;<br>&lt;/c:<span class="hljs-keyword">if</span>&gt;<br>&lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;$&#123;12!=12&#125;&quot;</span>&gt;<br>    &lt;h1&gt;无敌&lt;/h1&gt;<br>&lt;/c:<span class="hljs-keyword">if</span>&gt;<br><br><br><br>&lt;%--<br>iii.&lt;c:choose&gt; &lt;c:when&gt; &lt;c:otherwise&gt;标签<br>作用：多路判断。跟 <span class="hljs-keyword">switch</span> ... <span class="hljs-keyword">case</span> .... <span class="hljs-keyword">default</span> 非常接近<br>choose 标签开始选择判断<br>when 标签表示每一种判断情况<br>test 属性表示当前这种判断情况的值<br>otherwise 标签表示剩下的情况<br>&lt;hr/&gt;<br><br>&lt;c:choose&gt; &lt;c:when&gt; &lt;c:otherwise&gt;标签使用时需要注意的点：<br><span class="hljs-number">1</span>、标签里不能使用 html 注释，要使用 jsp 注释<br><span class="hljs-number">2</span>、when 标签的父标签一定要是 choose 标签<br>--%&gt;<br>&lt;%<br>    request.setAttribute(<span class="hljs-string">&quot;height&quot;</span>,<span class="hljs-number">178</span>);<br>%&gt;<br>&lt;c:choose&gt;<br>    &lt;c:when test=<span class="hljs-string">&quot;$&#123;requestScope.height&gt;190&#125;&quot;</span>&gt;<br>        &lt;h1&gt;是巨人&lt;/h1&gt;<br>    &lt;/c:when&gt;<br>    &lt;c:when test=<span class="hljs-string">&quot;$&#123;requestScope.height&gt;180&#125;&quot;</span>&gt;<br>        &lt;h1&gt;小巨人&lt;/h1&gt;<br>    &lt;/c:when&gt;<br>    &lt;c:when test=<span class="hljs-string">&quot;$&#123;requestScope.height&gt;170&#125;&quot;</span>&gt;<br>        &lt;h1&gt;还行&lt;/h1&gt;<br>    &lt;/c:when&gt;<br>    &lt;c:when test=<span class="hljs-string">&quot;$&#123;requestScope.height&gt;160&#125;&quot;</span>&gt;<br>        &lt;h1&gt;有点矮&lt;/h1&gt;<br>    &lt;/c:when&gt;<br>    &lt;c:otherwise&gt;<br>        &lt;c:choose&gt;<br>            &lt;c:when test=<span class="hljs-string">&quot;$&#123;requestScope.height&gt;150&#125;&quot;</span>&gt;<br>                &lt;h1&gt;xiaoren&lt;/h1&gt;<br>            &lt;/c:when&gt;<br>            &lt;c:when test=<span class="hljs-string">&quot;$&#123;requestScope.height&gt;140&#125;&quot;</span>&gt;<br>                &lt;h1&gt;xiaoren2&lt;/h1&gt;<br>            &lt;/c:when&gt;<br>        &lt;/c:choose&gt;<br>    &lt;/c:otherwise&gt;<br>&lt;/c:choose&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure><p>test中是要判断的条件，otherwise是这些都不符合之后执行的，这些when标签和otherwise标签执行一个，其他的就不能执行</p><p>如果想要在otherwise标签中再使用when标签就要加上choose</p><p>c：foreach  标签</p><p>遍历1到10</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&lt;%<span class="hljs-comment">--1.遍历 1 到 10，输出</span><br><span class="hljs-keyword">begin</span> 属性设置开始的索引<br><span class="hljs-keyword">end</span> 属性设置结束的索引<br>var 属性表示循环的变量(也是当前正在遍历到的数据)<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">10</span>; i++)<br><span class="hljs-comment">--%&gt;</span><br>&lt;<span class="hljs-keyword">table</span> border=&quot;1&quot;&gt;<br>&lt;c:<span class="hljs-keyword">forEach</span> <span class="hljs-keyword">begin</span>=&quot;1&quot; end=&quot;100&quot; var=&quot;i&quot;&gt;<br>    &lt;tr&gt;<br>    &lt;td&gt;第$&#123;i&#125;行&lt;td/&gt;<br>    &lt;tr/&gt;<br>        &lt;/c:<span class="hljs-keyword">forEach</span>&gt;<br>&lt;/<span class="hljs-keyword">table</span>&gt;<br></code></pre></td></tr></table></figure><p>遍历Object类型的数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;%-- <span class="hljs-number">2.</span>遍历 <span class="hljs-title class_">Object</span> 数组<br><span class="hljs-keyword">for</span> (<span class="hljs-title class_">Object</span> <span class="hljs-attr">item</span>: arr)<br>items 表示遍历的数据源（遍历的集合）<br><span class="hljs-keyword">var</span> 表示当前遍历到的数据<br>--%&gt;<br>&lt;%<br>    request.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&quot;arr&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;18888&quot;</span>,<span class="hljs-string">&quot;166666&quot;</span>&#125;);<br>%&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">c:forEach</span> <span class="hljs-attr">items</span>=<span class="hljs-string">&quot;$&#123;requestScope.arr&#125;&quot;</span> <span class="hljs-attr">var</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span></span><br><span class="language-xml">    $&#123;item&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">c:forEach</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>遍历Map集合</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<br>    Map&lt;String,Object&gt; map=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String,Object&gt;();<br>    map.put(<span class="hljs-string">&quot;key1&quot;</span>,<span class="hljs-string">&quot;value1&quot;</span>);<br>    map.put(<span class="hljs-string">&quot;key2&quot;</span>,<span class="hljs-string">&quot;value2&quot;</span>);<br>    map.put(<span class="hljs-string">&quot;key3&quot;</span>,<span class="hljs-string">&quot;value3&quot;</span>);<br>    <span class="hljs-comment">// for ( Map.Entry&lt;String,Object&gt; entry : map.entrySet()) &#123;</span><br><span class="hljs-comment">// &#125;</span><br>    request.setAttribute(<span class="hljs-string">&quot;map&quot;</span>,map);<br>%&gt;<br>&lt;c:forEach items=<span class="hljs-string">&quot;$&#123;requestScope.map&#125;&quot;</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;entry&quot;</span>&gt;<br>    &lt;h1&gt;$&#123;entry&#125;&lt;/h1&gt;<br>    &lt;h1&gt;$&#123;entry.key&#125;&lt;/h1&gt;<br>    &lt;h2&gt;$&#123;entry.value&#125;&lt;/h2&gt;<br>&lt;/c:forEach&gt;<br></code></pre></td></tr></table></figure><p>entry是map中的一个元素</p><p>entry.key是map中一个元素的key值</p><p>entry.value是map中一个元素的value值</p><p>遍历List集合–list 中存放 Student 类，有属性：编号，用户名，密码，年龄， 电话信息</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">&lt;%--4.遍历 List 集合---list 中存放 Student 类，有属性：编号，用户名，密码，年龄，电话信息--%&gt;</span><br><span class="language-xml">&lt;%</span><br><span class="language-xml"></span><br><span class="language-xml">    List<span class="hljs-tag">&lt;<span class="hljs-name">Student</span>&gt;</span> studentArraylist = new ArrayList<span class="hljs-tag">&lt;<span class="hljs-name">Student</span>&gt;</span>();</span><br><span class="language-xml">    for(int i=0;i&lt;10;i++)</span><br><span class="language-xml">    studentArraylist.add(new Student(i,i+&quot;username&quot;,i+&quot;password&quot;,i+18,i+&quot;1&quot;));</span><br><span class="language-xml">    request.setAttribute(&quot;list&quot;,studentArraylist);</span><br><span class="language-xml">%&gt;</span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>id<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>username<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>password<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>age<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>phone<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>step<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">    &lt;%--</span><br><span class="language-xml">items 表示遍历的集合</span><br><span class="language-xml">var 表示遍历到的数据</span><br><span class="language-xml">--%&gt;</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">c:forEach</span>  <span class="hljs-attr">items</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;requestScope.list&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> <span class="hljs-attr">var</span>=<span class="hljs-string">&quot;stu&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;stu.id&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;stu.username&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;stu.password&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;stu.age&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;stu.phone&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>删除修改<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">c:forEach</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>foreach标签组合使用</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210032042016.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload></p><p>上面的图片是status可以获取到的东西</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.util.HashMap&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.util.Map&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;com.atguigu.pojo.Student&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.util.List&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.util.ArrayList&quot;</span> %&gt;<br>&lt;%@ taglib prefix=<span class="hljs-string">&quot;c&quot;</span> uri=<span class="hljs-string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;<br>&lt;%--<br>  Created by IntelliJ IDEA.<br>  User: #赵梓皓&amp;<br>  Date: <span class="hljs-number">2022</span>/<span class="hljs-number">10</span>/<span class="hljs-number">3</span><br>  Time: <span class="hljs-number">16</span>:<span class="hljs-number">11</span><br>  To change <span class="hljs-built_in">this</span> template use File | Settings | File Templates.<br>--%&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br><br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;%--<span class="hljs-number">4.</span>遍历 List 集合---list 中存放 Student 类，有属性：编号，用户名，密码，年龄，电话信息--%&gt;<br>&lt;%<br><br>    List&lt;Student&gt; studentArraylist = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Student&gt;();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)<br>    studentArraylist.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(i,i+<span class="hljs-string">&quot;username&quot;</span>,i+<span class="hljs-string">&quot;password&quot;</span>,i+<span class="hljs-number">18</span>,i+<span class="hljs-string">&quot;1&quot;</span>));<br>    request.setAttribute(<span class="hljs-string">&quot;list&quot;</span>,studentArraylist);<br>%&gt;<br><br>&lt;table&gt;<br><br>&lt;tr&gt;<br>    &lt;td&gt;id&lt;/td&gt;<br>    &lt;td&gt;username&lt;/td&gt;<br>    &lt;td&gt;password&lt;/td&gt;<br>    &lt;td&gt;age&lt;/td&gt;<br>    &lt;td&gt;phone&lt;/td&gt;<br>    &lt;td&gt;step&lt;/td&gt;<br>&lt;/tr&gt;<br>    &lt;%--<br>    items 表示遍历的集合<br>    <span class="hljs-keyword">var</span> 表示遍历到的数据<br>    begin 表示遍历的开始索引值<br>    end 表示结束的索引值<br>    step 属性表示遍历的步长值<br>    varStatus 属性表示当前遍历到的数据的状态<br>    <span class="hljs-keyword">for</span>（<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">10</span>; i+=<span class="hljs-number">2</span>）<br>    --%&gt;<br>&lt;c:forEach  begin=<span class="hljs-string">&quot;2&quot;</span> end=<span class="hljs-string">&quot;7&quot;</span> step=<span class="hljs-string">&quot;2&quot;</span> varStatus=<span class="hljs-string">&quot;status&quot;</span> items=<span class="hljs-string">&quot;$&#123;requestScope.list&#125;&quot;</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;stu&quot;</span>&gt;<br>    &lt;tr&gt;<br>    &lt;td&gt;$&#123;stu.id&#125;&lt;/td&gt;<br>    &lt;td&gt;$&#123;stu.username&#125;&lt;/td&gt;<br>    &lt;td&gt;$&#123;stu.password&#125;&lt;/td&gt;<br>    &lt;td&gt;$&#123;stu.age&#125;&lt;/td&gt;<br>    &lt;td&gt;$&#123;stu.phone&#125;&lt;/td&gt;<br>    &lt;td&gt;$&#123;status.current&#125;&lt;/td&gt;<br>    &lt;/tr&gt;<br>&lt;/c:forEach&gt;<br><br>&lt;/table&gt;<br><br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210032042016.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload></p><p>  varStatus 属性表示当前遍历到的数据的状态</p><p>这个是status能够获得的状态</p><p>status.current</p><p>status.first</p><p>status.end</p><p>这样去用</p><h1 id="文件的上传和下载"><a href="#文件的上传和下载" class="headerlink" title="文件的上传和下载"></a>文件的上传和下载</h1><p>文件的上传和下载，是非常常见的功能。</p><p>很多的系统中，或者软件中都经常使用文件的上传和下载。 </p><p>比如：QQ 头像，就使用了上传。 邮箱中也有附件的上传和下载功能。 </p><p>OA 系统中审批有附件材料的上传。</p><h2 id="文件上传的介绍"><a href="#文件上传的介绍" class="headerlink" title="文件上传的介绍"></a>文件上传的介绍</h2><p>1、要有一个 form 标签，method&#x3D;post 请求 </p><p>因为get请求有长度限制，所以使用post请求</p><p>2、form 标签的 encType 属性值必须为 multipart&#x2F;form-data 值 </p><p>3、在 form 标签中使用 input type&#x3D;file 添加上传的文件 </p><p>4、编写服务器代码（Servlet 程序）接收，处理上传的数据。</p><p>encType&#x3D;multipart&#x2F;form-data 表示提交的数据，以多段（每一个表单项一个数据段）的形式进行拼 接，然后以二进制流的形式发送给服务器</p><p>上传文件的表单</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--<br>  Created by IntelliJ IDEA.<br>  User: #赵梓皓&amp;<br>  Date: <span class="hljs-number">2022</span>/<span class="hljs-number">10</span>/<span class="hljs-number">3</span><br>  Time: <span class="hljs-number">20</span>:<span class="hljs-number">56</span><br>  To change <span class="hljs-built_in">this</span> template use File | Settings | File Templates.<br>--%&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;form action=<span class="hljs-string">&quot;&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span> enctype=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;<br>    用户名:&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;username&quot;</span> /&gt;&lt;br/&gt;<br>    头像 &lt;input type=<span class="hljs-string">&quot;file&quot;</span> name=<span class="hljs-string">&quot;photo&quot;</span>&gt;&lt;br/&gt;<br>    &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;上传&quot;</span>&gt;<br>    <br>&lt;/form&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210032120378.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221003212028363"></p><p>username是用户名，就是表单中提交的东西，如果还提交了密码或者别的，都会在请求体中以分段的形式出现</p><p>请求体中每一个数据段都是一个表单中的项</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210032121269.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221003212147818">&#x3D;</p><p><strong>要用下面这种流的格式来获取post传的值，基本就是请求体的内容</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.ServletInputStream;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UploadServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用来处理文件上传</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> req</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> resp</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> ServletException</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;文件上传&quot;</span>);<br>        <span class="hljs-type">ServletInputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> req.getInputStream();<br>        <span class="hljs-type">byte</span>[] buffer=<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024000</span>];<br>        <span class="hljs-type">int</span> read=inputStream.read(buffer);<br>        System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buffer,<span class="hljs-number">0</span>,read));<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>文件上传中获取其他表单项也都不能用getParameter的方法</p><h2 id="文件上传用到的类和方法"><a href="#文件上传用到的类和方法" class="headerlink" title="文件上传用到的类和方法"></a>文件上传用到的类和方法</h2><p>commons-fileupload.jar 常用 API 介绍说明</p><p>commons-fileupload.jar 需要依赖 commons-io.jar 这个包，所以两个包我们都要引入。 </p><p>第一步，就是需要导入两个 jar 包： commons-fileupload-1.2.1.jar commons-io-1.4.jar </p><p>commons-fileupload.jar 和 commons-io.jar 包中，我们常用的类有哪些？</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210032136278.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221003213648900"></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs jsp"><span class="hljs-keyword">package</span> com.atguigu.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">import</span> org.apache.commons.fileupload.FileItem;<br><span class="hljs-keyword">import</span> org.apache.commons.fileupload.FileItemFactory;<br><span class="hljs-keyword">import</span> org.apache.commons.fileupload.FileUploadException;<br><span class="hljs-keyword">import</span> org.apache.commons.fileupload.disk.DiskFileItemFactory;<br><span class="hljs-keyword">import</span> org.apache.commons.fileupload.servlet.ServletFileUpload;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UploadServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用来处理文件上传</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> req</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> resp</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> ServletException</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>  <span class="hljs-comment">//1.先判断上传的数据是否是多段数据，只有是多端的数据才可能是文件上传的</span><br>        <span class="hljs-keyword">if</span>(ServletFileUpload.isMultipartContent(req))&#123;<br>            <span class="hljs-comment">//创建FileItemFactory工厂实现类</span><br>            FileItemFactory fileItemFactory=<span class="hljs-keyword">new</span> <span class="hljs-title class_">DiskFileItemFactory</span>();<br>            <span class="hljs-comment">//创建用于解析上传数据的工具类ServletFileUpload</span><br>            ServletFileUpload servletFileUpload=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletFileUpload</span>(fileItemFactory);<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">//解析上传的数据，得到一个表单项FileItem</span><br>                List&lt;FileItem&gt; list=servletFileUpload.parseRequest(req);<br><br>                <span class="hljs-comment">//循环判断每一个表单项是上传的文件还是普通类型</span><br>                <span class="hljs-keyword">for</span>(FileItem fileItem:list)&#123;<br>                    <span class="hljs-keyword">if</span>(fileItem.isFormField())&#123;<br>                        <span class="hljs-comment">//普通表单项</span><br>                        System.out.println(<span class="hljs-string">&quot;表单项的name属性值&quot;</span>+fileItem.getFieldName());<br>                        <span class="hljs-comment">//UTF-8是为了防止出现乱码</span><br>                        System.out.println(<span class="hljs-string">&quot;表单项的value属性&quot;</span>+fileItem.getString(<span class="hljs-string">&quot;UTF-8&quot;</span>));<br>                    &#125;<br>                    <span class="hljs-keyword">else</span><br>                    &#123;<br>                        <span class="hljs-comment">//上传的文件</span><br>                        System.out.println(<span class="hljs-string">&quot;表单项的name属性值&quot;</span>+fileItem.getFieldName());<br>                        System.out.println(<span class="hljs-string">&quot;表单项的value属性&quot;</span>+fileItem.getName());<br><br>                        <span class="hljs-comment">//将上传的文件写入e盘</span><br>                        fileItem.write(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;e:\\&quot;</span>+fileItem.getName()));<br>                    &#125;<br><br>                &#125;<br><br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h2><p>getResourceAsStream中的路径只有两种写法</p><p>最前面是’&#x2F;‘      说明是工程目录下可以映射到web目录下</p><p>最前面没有’&#x2F;‘   说明是默认从src目录开始</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210041335095.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221004133553535"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.servlet;<br><br><span class="hljs-keyword">import</span> org.apache.commons.io.IOUtils;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletContext;<br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.io.OutputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Download</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//1.获取要下载的文件名</span><br>        String downloadFilename=<span class="hljs-string">&quot;1.jpg&quot;</span>;<br><br>        <span class="hljs-comment">//2.读取要下载的文件内容（通过ServletContext对象可以读取）</span><br>        ServletContext servletContext=getServletContext();<br><br>        <span class="hljs-comment">// 获取要下载的文件类型</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">mimeType</span> <span class="hljs-operator">=</span> servletContext.getMimeType(<span class="hljs-string">&quot;/File/&quot;</span> + downloadFilename);<br>        System.out.println(<span class="hljs-string">&quot;下载的文件类型&quot;</span>+mimeType);<br>        <span class="hljs-comment">//4.在回传前，通过响应头告诉客户端返回的数据类型</span><br>        resp.setContentType(mimeType);<br>        <span class="hljs-comment">//5.还要告诉客户端收到的数据是用于下载使用(还是使用响应头)</span><br>        <span class="hljs-comment">//Content-Disposition响应头，表示收到的数据怎么处理</span><br>        <span class="hljs-comment">//attachment表示附件，表示下载使用</span><br>        <span class="hljs-comment">//filename=表示指定下载的文件名</span><br>        <span class="hljs-comment">//这个filename不一定是源文件名，用自己起的也行</span><br>        resp.setHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>,<span class="hljs-string">&quot;attachment;filename=&quot;</span>+downloadFilename);<br><br>        InputStream resourceAsStream=servletContext.getResourceAsStream(<span class="hljs-string">&quot;/File/&quot;</span>+downloadFilename);<br>        <span class="hljs-comment">//获取响应的输出流</span><br>        OutputStream outputStream=resp.getOutputStream();<br>        <span class="hljs-comment">//3.把下载的文件内容回传给客户端</span><br>        <span class="hljs-comment">//读取输入流中全部的数据，赋值给输出流，输出给客户端</span><br>        IOUtils.copy(resourceAsStream,outputStream);<br><br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210041340069.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221004134034653"></p><p>火狐浏览器base64编码</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210041357388.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221004135746774"></p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210041357553.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221004135756281"></p><p>因为火狐浏览器有点问题，所以要单独把他拿出来</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210041401323.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221004140104518"></p><h1 id="书城项目第三阶段"><a href="#书城项目第三阶段" class="headerlink" title="书城项目第三阶段"></a>书城项目第三阶段</h1><h2 id="页面jsp动态化"><a href="#页面jsp动态化" class="headerlink" title="页面jsp动态化"></a>页面jsp动态化</h2><p>1.在html页面添加page指令</p><p>2.修改文件后缀名为.jsp</p><p>再次打开服务器访问时，需要先去除浏览器缓存，ctrl+shift+delete</p><p>3、使用 IDEA 搜索替换.html 为.jsp(快捷键：Ctrl+Shift+R</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210041424700.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221004142358836"></p><p>用.jsp替换文件中的.html</p><h2 id="抽取所有jsp页面中的公共内容"><a href="#抽取所有jsp页面中的公共内容" class="headerlink" title="抽取所有jsp页面中的公共内容"></a>抽取所有jsp页面中的公共内容</h2><p>将下面的内容放在一个jsp文件中然后使用静态包含，引用到利用它的地方</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>欢迎<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;um_span&quot;</span>&gt;</span>韩总<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>光临尚硅谷书城<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;order/order.jsp&quot;</span>&gt;</span>我的订单<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;index.jsp&quot;</span>&gt;</span>注销<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;index.jsp&quot;</span>&gt;</span>返回<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>静态包含</p><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs erb"><span class="language-xml"> <span class="hljs-comment">&lt;!--静态包含jsp文件--&gt;</span></span><br><span class="language-xml">&lt;%</span><span class="language-ruby">@ <span class="hljs-keyword">include</span> file=<span class="hljs-string">&quot;/pages/common/login_success_menu.jsp&quot;</span></span><span class="language-xml">%&gt;</span><br></code></pre></td></tr></table></figure><p>这个也是每一个文件公有的，引入css样式，jQuery库和base标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml">    <span class="hljs-comment">&lt;!--写base标签，永远固定相对路径的跳转结果--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">base</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://localhost:8087/book2/&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;static/css/style.css&quot;</span> &gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;static/script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>静态包含</p><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs erb"><span class="language-xml"><span class="hljs-comment">&lt;!--使用静态包含引入css样式jQuery和base标签--&gt;</span></span><br><span class="language-xml">   &lt;%</span><span class="language-ruby">@ <span class="hljs-keyword">include</span> file=<span class="hljs-string">&quot;/pages/common/head.jsp&quot;</span></span><span class="language-xml">%&gt;</span><br></code></pre></td></tr></table></figure><p>页脚也是完全一样的</p><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs erb"><span class="language-xml"><span class="hljs-comment">&lt;!--静态包含页脚的代码--&gt;</span></span><br><span class="language-xml">&lt;%</span><span class="language-ruby"><span class="hljs-variable">@include</span> file=<span class="hljs-string">&quot;/pages/common/footer.jsp&quot;</span> </span><span class="language-xml">%&gt;</span><br></code></pre></td></tr></table></figure><p>manager中的下面的也是一样的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;book_manager.jsp&quot;</span>&gt;</span>图书管理<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;order_manager.jsp&quot;</span>&gt;</span>订单管理<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;../../index.jsp&quot;</span>&gt;</span>返回商城<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="动态的base标签值"><a href="#动态的base标签值" class="headerlink" title="动态的base标签值"></a>动态的base标签值</h2><p>就是让文件的路径根据我们的输入的网址来进行改变</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;!--写base标签，永远固定相对路径的跳转结果--&gt;<br>&lt;%<br>    String basePath=request.getScheme()+<span class="hljs-string">&quot;://&quot;</span>+request.getServerName()+<span class="hljs-string">&quot;:&quot;</span>+request.getServerPort()+request.getContextPath()+<span class="hljs-string">&quot;/&quot;</span>;<br><br>%&gt;<br>&lt;%--这个最后的/是一定不能省去的--%&gt;<br>&lt;%--这写个方法的意思写在PageContext演示标题下--%&gt;<br>&lt;base href=<span class="hljs-string">&quot;&lt;%=basePath%&gt;&quot;</span>&gt;<br></code></pre></td></tr></table></figure><h2 id="登录，注册错误提示，及表单回显"><a href="#登录，注册错误提示，及表单回显" class="headerlink" title="登录，注册错误提示，及表单回显"></a>登录，注册错误提示，及表单回显</h2><p>在LoginServlet中将信息保存到request域中，方便当用户输入错误时，在jsp页面保留输入的用户名以及出现错误提示</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//把错误信息，和回显的表单项信息，保存到request域中</span><br>req.set<span class="hljs-constructor">Attribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;用户名或者密码错误&quot;</span>)</span>;<br>req.set<span class="hljs-constructor">Attribute(<span class="hljs-string">&quot;username&quot;</span>,<span class="hljs-params">username</span>)</span>;<br></code></pre></td></tr></table></figure><p>这个value是为了第一次进入页面没有提交过信息的时候，那个username那一栏是空的</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;input class<span class="hljs-operator">=</span><span class="hljs-string">&quot;itxt&quot;</span> type<span class="hljs-operator">=</span><span class="hljs-string">&quot;text&quot;</span> placeholder<span class="hljs-operator">=</span><span class="hljs-string">&quot;请输入用户名&quot;</span> autocomplete<span class="hljs-operator">=</span><span class="hljs-string">&quot;off&quot;</span> tabindex<span class="hljs-operator">=</span><span class="hljs-string">&quot;1&quot;</span> name<span class="hljs-operator">=</span><span class="hljs-string">&quot;username&quot;</span><br><span class="hljs-attribute">value</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;&lt;%=request.getAttribute(&quot;</span>username<span class="hljs-string">&quot;)==null?&quot;</span><span class="hljs-string">&quot;:request.getAttribute(&quot;</span>username<span class="hljs-string">&quot;)%&gt;&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><p>这是对报错信息的修改，就是为了刚进去是请输入用户密码和用户名，如果提交信息的错误则输出报错信息</p><figure class="highlight vbscript-html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vbscript-html"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;errorMsg&quot;</span>&gt;</span></span><span class="language-vbscript">&lt;%=<span class="hljs-built_in">request</span>.getAttribute(<span class="hljs-string">&quot;msg&quot;</span>)==<span class="hljs-literal">null</span>?<span class="hljs-string">&quot;请输入用户密码和用户名&quot;</span>:<span class="hljs-built_in">request</span>.getAttribute(<span class="hljs-string">&quot;msg&quot;</span>)%&gt;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>这是对登录页面的修改，在注册页面中也对username  email 以及报错信息进行了类似的修改</p><h2 id="合并LoginServlet和RegistServlet为UserServlet"><a href="#合并LoginServlet和RegistServlet为UserServlet" class="headerlink" title="合并LoginServlet和RegistServlet为UserServlet"></a>合并LoginServlet和RegistServlet为UserServlet</h2><p>在实际的项目开发中，一个模块，一般只使用一个 Servlet 程序。</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210051900338.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221005185950311"></p><p>就是在两个jsp页面的表单中添加hidden的表单项，根据Servlet程序获取的表单项的值不同，可以判断是login还是regist继而执行对应的程序，同时两个表单的action属性改为UserServlet</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;form <span class="hljs-attribute">action</span>=<span class="hljs-string">&quot;UserServlet&quot;</span> <span class="hljs-attribute">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;<br>   &lt;input <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;action&quot;</span> <span class="hljs-attribute">value</span>=<span class="hljs-string">&quot;login&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;form <span class="hljs-attribute">action</span>=<span class="hljs-string">&quot;UserServlet&quot;</span> <span class="hljs-attribute">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;<br>   &lt;input <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;action&quot;</span> <span class="hljs-attribute">value</span>=<span class="hljs-string">&quot;regist&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.web;<br><br><span class="hljs-keyword">import</span> com.atguigu.pojo.User;<br><span class="hljs-keyword">import</span> com.atguigu.service.UserService;<br><span class="hljs-keyword">import</span> com.atguigu.service.impl.UserServiceImpl;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-keyword">private</span> UserService userService=<span class="hljs-keyword">new</span> <span class="hljs-title class_">UserServiceImpl</span>();<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">login</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br><span class="hljs-comment">//获取用户名和密码参数</span><br>        String username=req.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>        String password=req.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br>        <span class="hljs-comment">//如果用户名或密码错误</span><br>        <span class="hljs-keyword">if</span>(userService.login(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-literal">null</span>,username,password,<span class="hljs-literal">null</span>))==<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-comment">//把错误信息，和回显的表单项信息，保存到request域中</span><br>            req.setAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;用户名或者密码错误&quot;</span>);<br>            req.setAttribute(<span class="hljs-string">&quot;username&quot;</span>,username);<br>            req.getRequestDispatcher(<span class="hljs-string">&quot;/pages/user/login.jsp&quot;</span>).forward(req,resp);<br>        &#125;<br>        <span class="hljs-comment">//如果用户名和密码正确</span><br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            req.getRequestDispatcher(<span class="hljs-string">&quot;/pages/user/login_success.jsp&quot;</span>).forward(req,resp);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">regist</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//1.获取请求的参数</span><br>        <span class="hljs-comment">//这个getParameter方法是通过那个属性的name得到的</span><br>        String username=req.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>        String password=req.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br>        String email=req.getParameter(<span class="hljs-string">&quot;email&quot;</span>);<br>        String code=req.getParameter(<span class="hljs-string">&quot;code&quot;</span>);<br>        <span class="hljs-comment">//2.检查 验证码是否正确,先把验证码写死，要求为abcde</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;abcde&quot;</span>.equalsIgnoreCase(code))&#123;<br>            <span class="hljs-comment">//验证码正确</span><br>            <span class="hljs-comment">//检查用户名是否可用</span><br>            <span class="hljs-keyword">if</span>(userService.existsUsername(username))&#123;<br>                System.out.println(<span class="hljs-string">&quot;用户名&quot;</span>+username+<span class="hljs-string">&quot;已存在&quot;</span>);<br><br>                req.setAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;用户名已存在&quot;</span>);<br>                req.setAttribute(<span class="hljs-string">&quot;username&quot;</span>,username);<br>                req.setAttribute(<span class="hljs-string">&quot;email&quot;</span>,email);<br>                <span class="hljs-comment">//跳回到注册页面</span><br>                req.getRequestDispatcher(<span class="hljs-string">&quot;/pages/user/regist.jsp&quot;</span>).forward(req,resp);<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-comment">//可用</span><br>                <span class="hljs-comment">//调用Sercice保存到数据库</span><br>                userService.registerUser(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-literal">null</span>,username,password,email));<br>                <span class="hljs-comment">//注册成功后，跳转到注册成功页面</span><br>                req.getRequestDispatcher(<span class="hljs-string">&quot;/pages/user/regist_success.jsp&quot;</span>).forward(req,resp);<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">//把回显信息保存到request域中</span><br>            req.setAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;用户验证码错误&quot;</span>);<br>            req.setAttribute(<span class="hljs-string">&quot;username&quot;</span>,username);<br>            req.setAttribute(<span class="hljs-string">&quot;email&quot;</span>,email);<br><br>            System.out.println(<span class="hljs-string">&quot;验证码&quot;</span>+code+<span class="hljs-string">&quot;错误&quot;</span>);<br>            <span class="hljs-comment">//验证码不正确</span><br>            <span class="hljs-comment">//跳回注册页面，因为还是申请服务器中文件所以/还是工程目录下的</span><br>            req.getRequestDispatcher(<span class="hljs-string">&quot;/pages/user/regist.jsp&quot;</span>).forward(req,resp);<br><br>        &#125;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br><br>        String parameter=req.getParameter(<span class="hljs-string">&quot;action&quot;</span>);<br>        <span class="hljs-keyword">if</span>(parameter.equals(<span class="hljs-string">&quot;login&quot;</span>))&#123;<br>            login(req,resp);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(parameter.equals(<span class="hljs-string">&quot;regist&quot;</span>))&#123;<br>            regist(req,resp);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="使用反射优化大量else-if代码"><a href="#使用反射优化大量else-if代码" class="headerlink" title="使用反射优化大量else if代码"></a>使用反射优化大量else if代码</h2><p>用户模块的功能，除了登录和注册，还有其他比如：添加用户，修改用户信息，修改密码，绑定手机号，绑定邮箱，注销用户</p><p>….等等这样在UserServlet终究会出现特别多的else if 语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br><br>    String parameter=req.getParameter(<span class="hljs-string">&quot;action&quot;</span>);<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//通过反射获取对应的方法，因为设定获取的action的参数值和调用方法的名字相同</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">parameter1</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getClass().getDeclaredMethod(parameter,HttpServletRequest.class,HttpServletResponse.class);<br>        <span class="hljs-comment">//执行目标业务方法</span><br>        parameter1.invoke(<span class="hljs-built_in">this</span>,req,resp);<br><br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>这个是因为获取的hidden的action参数值是和要调用的业务方法是相同的，所以用反射获取要调用的业务方法然后调用</p><h2 id="抽取BaseServlet程序"><a href="#抽取BaseServlet程序" class="headerlink" title="抽取BaseServlet程序"></a>抽取BaseServlet程序</h2><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210051954859.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221005195440449"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        doPost(req,resp);<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br><br>        resp.setContentType(<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>);<br>        <span class="hljs-comment">//解决响应乱码问题</span><br>        String parameter=req.getParameter(<span class="hljs-string">&quot;action&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//通过反射获取对应的方法，因为设定获取的action的参数值和调用方法的名字相同</span><br>            <span class="hljs-comment">//this是指调用该post方法的对象</span><br>            <span class="hljs-type">Method</span> <span class="hljs-variable">parameter1</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getClass().getDeclaredMethod(parameter,HttpServletRequest.class,HttpServletResponse.class);<br>            <span class="hljs-comment">//执行目标业务方法</span><br>            parameter1.invoke(<span class="hljs-built_in">this</span>,req,resp);<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br><br>    &#125;<br><br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>因为Servlet程序还有好多有UserServlet有BookServlet等等他们上面那些代码都是一致的，所以拿出来形成一个BaseServlet</p><p>BaseServlet继承HttpServlet     ，其他的都继承BaseServlet就可以了</p><p>post访问时会自动调用UserServlet中继承的doPost方法</p><h2 id="BeanUtils工具的使用"><a href="#BeanUtils工具的使用" class="headerlink" title="BeanUtils工具的使用"></a>BeanUtils工具的使用</h2><p>BeanUtils 工具类，它可以一次性的把所有请求的参数注入到 JavaBean 中</p><p>BeanUtils 工具类，经常用于把 Map 中的值注入到 JavaBean 中，或者是对象属性值的拷贝操作。</p><p>BeanUtils 它不是 Jdk 的类。而是第三方的工具类。所以需要导包。 </p><p>1、导入需要的 jar 包： commons-beanutils-1.8.0.jar commons-logging-1.1.1.jar</p><p>2.BeanUtils的使用</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">User user=<span class="hljs-keyword">new</span> <span class="hljs-constructor">User()</span>;<br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">//将所有请求参数导入user对象，getParameterMap方法是获得Map类型的参数</span><br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">BeanUtils</span>.</span></span>populate(user,req.get<span class="hljs-constructor">ParameterMap()</span>);<br>&#125; catch (Exception e) &#123;<br>    e.print<span class="hljs-constructor">StackTrace()</span>;<br>&#125;<br>userService.register<span class="hljs-constructor">User(<span class="hljs-params">user</span>)</span>;<br></code></pre></td></tr></table></figure><p><strong>这个的使用原理就是   找属性username然后变成setUsername对这个属性进行赋值，然后再对其他每个属性进行这个操作</strong></p><p><strong>所以如果这个属性没有对应的正确的set方法是无法注入值的</strong> </p><p><strong>所以还有一个要求是获取的参数的name一定要和java类中的属性的名字相同</strong></p><p>webUtils类</p><p>对这个BeanUtils类中的方法使用进行一个封装</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.utils;<br><br><span class="hljs-keyword">import</span> com.atguigu.pojo.User;<br><span class="hljs-keyword">import</span> org.apache.commons.beanutils.BeanUtils;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebUtils</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 把 Map 中的值注入到对应的 JavaBean 属性中。</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> bean</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>&lt;T&gt; T <span class="hljs-title function_">copyParamToBean</span><span class="hljs-params">(Map value, T bean)</span>&#123;<br>          <span class="hljs-comment">/*</span><br><span class="hljs-comment">           将所有的请求参数一次性注入到user对象中</span><br><span class="hljs-comment">           */</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;注入之前:&quot;</span>+bean);<br>            <span class="hljs-comment">//将所有请求参数导入user对象，getParameterMap方法是获得Map类型的参数</span><br>            BeanUtils.populate(bean,value);<br>            System.out.println(<span class="hljs-string">&quot;注入之后&quot;</span>+bean);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>webUtils的使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">  <span class="hljs-comment">//可用</span><br>  <span class="hljs-comment">//调用Sercice保存到数据库</span><br>Map map=req.getParameterMap();<br>User user=WebUtils.copyParamToBean(map,<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>());<br></code></pre></td></tr></table></figure><h1 id="书城项目第四阶段"><a href="#书城项目第四阶段" class="headerlink" title="书城项目第四阶段"></a>书城项目第四阶段</h1><h2 id="使用EL修改表单回显"><a href="#使用EL修改表单回显" class="headerlink" title="使用EL修改表单回显"></a>使用EL修改表单回显</h2><p>这是login.jsp的</p><p>将用jsp表达式脚本转变为EL表达式</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ruby">&lt;span <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;errorMsg&quot;</span>&gt;<br>   &lt;<span class="hljs-string">%--</span>&lt;%=request.getAttribute(<span class="hljs-string">&quot;msg&quot;</span>)==null?<span class="hljs-string">&quot;请输入用户密码和用户名&quot;</span><span class="hljs-symbol">:request</span>.getAttribute(<span class="hljs-string">&quot;msg&quot;</span>)%&gt;--%&gt;<br>    <span class="hljs-variable">$&#123;</span>empty requestScope.msg?<span class="hljs-string">&quot;请输入用户密码和用户名&quot;</span><span class="hljs-symbol">:requestScope</span>.msg&#125;<br>&lt;<span class="hljs-regexp">/span&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;!--省去判断是因为即使是空那么返回的也是空字符串--&gt;<br>&lt;input class=<span class="hljs-string">&quot;itxt&quot;</span> type=<span class="hljs-string">&quot;text&quot;</span> placeholder=<span class="hljs-string">&quot;请输入用户名&quot;</span> autocomplete=<span class="hljs-string">&quot;off&quot;</span> tabindex=<span class="hljs-string">&quot;1&quot;</span> name=<span class="hljs-string">&quot;username&quot;</span><br>&lt;%--value=<span class="hljs-string">&quot;&lt;%=request.getAttribute(&quot;</span>username<span class="hljs-string">&quot;)==null?&quot;</span><span class="hljs-string">&quot;:request.getAttribute(&quot;</span>username<span class="hljs-string">&quot;)%&gt;&quot;</span>--%&gt;<br>      value=<span class="hljs-string">&quot;$&#123;requestScope.username&#125;&quot;</span><br>/&gt;<br></code></pre></td></tr></table></figure><p>regist.jsp中同样有这种的 ，username ，email  和报错信息</p><h1 id="书城项目的第五阶段"><a href="#书城项目的第五阶段" class="headerlink" title="书城项目的第五阶段"></a>书城项目的第五阶段</h1><h2 id="MVC概念"><a href="#MVC概念" class="headerlink" title="MVC概念"></a>MVC概念</h2><p>MVC 全称：Model 模型、 View 视图、 Controller 控制器。</p><p>MVC 最早出现在 JavaEE 三层中的 Web 层，它可以有效的指导 Web 层的代码如何有效分离，单独工作</p><p>View 视图：只负责数据和界面的显示，不接受任何与显示数据无关的代码，便于程序员和美工的分工合作—— JSP&#x2F;HTML</p><p>Controller 控制器：只负责接收请求，调用业务层的代码处理请求，然后派发页面，是一个“调度者”的角色——Servlet。 转到某个页面。或者是重定向到某个页面。</p><p>Model 模型：将与业务逻辑相关的数据封装为具体的 JavaBean 类，其中不掺杂任何与数据处理相关的代码—— JavaBean&#x2F;domain&#x2F;entity&#x2F;pojo。</p><p>MVC 是一种思想</p><p> MVC 的理念是将软件代码拆分成为组件，单独开发，组合使用（目的还是为了降低耦合度）。</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210052131626.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221005213127177"></p><h2 id="创建图书模块的数据库表"><a href="#创建图书模块的数据库表" class="headerlink" title="创建图书模块的数据库表"></a>创建图书模块的数据库表</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_book(<br>id <span class="hljs-type">int</span> <span class="hljs-keyword">primary key</span> auto_increment,<br><span class="hljs-type">name</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>),<br>price <span class="hljs-type">decimal</span>(<span class="hljs-number">11</span>,<span class="hljs-number">2</span>),<br>author <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>),<br>sales <span class="hljs-type">int</span>,<br>stock <span class="hljs-type">int</span>,<br>img_path <span class="hljs-type">varchar</span>(<span class="hljs-number">200</span>)<br>);<br></code></pre></td></tr></table></figure><p>然后在里面插入数据</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">use book<span class="hljs-comment">;</span><br>select *from t_book<span class="hljs-comment">;</span><br>查询一下里面插入的数据<br></code></pre></td></tr></table></figure><h2 id="编写图书模块的JavaBean"><a href="#编写图书模块的JavaBean" class="headerlink" title="编写图书模块的JavaBean"></a>编写图书模块的JavaBean</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.pojo;<br><br><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String author;<br>    <span class="hljs-keyword">private</span> BigDecimal price;<br>    <span class="hljs-keyword">private</span> Integer sales;<br>    <span class="hljs-keyword">private</span> Integer stock;<br>    <span class="hljs-keyword">private</span> String imgPath=<span class="hljs-string">&quot;static/img/default.jpg&quot;</span>;<span class="hljs-comment">//图书的封面</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Book</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Book</span><span class="hljs-params">(Integer id, String name, String author, BigDecimal price, Integer sales, Integer stock, String imgPath)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.author = author;<br>        <span class="hljs-built_in">this</span>.price = price;<br>        <span class="hljs-built_in">this</span>.sales = sales;<br>        <span class="hljs-built_in">this</span>.stock = stock;<br>        <span class="hljs-built_in">this</span>.imgPath = imgPath;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(Integer id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Book&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, author=&#x27;&quot;</span> + author + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, price=&quot;</span> + price +<br>                <span class="hljs-string">&quot;, sales=&quot;</span> + sales +<br>                <span class="hljs-string">&quot;, stock=&quot;</span> + stock +<br>                <span class="hljs-string">&quot;, imgPath=&#x27;&quot;</span> + imgPath + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getAuthor</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> author;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAuthor</span><span class="hljs-params">(String author)</span> &#123;<br>        <span class="hljs-built_in">this</span>.author = author;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> BigDecimal <span class="hljs-title function_">getPrice</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> price;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPrice</span><span class="hljs-params">(BigDecimal price)</span> &#123;<br>        <span class="hljs-built_in">this</span>.price = price;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getSales</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sales;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSales</span><span class="hljs-params">(Integer sales)</span> &#123;<br>        <span class="hljs-built_in">this</span>.sales = sales;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getStock</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> stock;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setStock</span><span class="hljs-params">(Integer stock)</span> &#123;<br>        <span class="hljs-built_in">this</span>.stock = stock;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getImgPath</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> imgPath;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setImgPath</span><span class="hljs-params">(String imgPath)</span> &#123;<br>        <span class="hljs-built_in">this</span>.imgPath = imgPath;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="编写图书模块的Dao和测试Dao"><a href="#编写图书模块的Dao和测试Dao" class="headerlink" title="编写图书模块的Dao和测试Dao"></a>编写图书模块的Dao和测试Dao</h2><p>BookDao</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.dao;<br><br><br><span class="hljs-keyword">import</span> com.atguigu.pojo.Book;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BookDao</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">addBook</span><span class="hljs-params">(Book book)</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">deleteBookById</span><span class="hljs-params">(Integer id)</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">updateBook</span><span class="hljs-params">(Book book)</span>;<br>    <span class="hljs-keyword">public</span> Book <span class="hljs-title function_">queryBookById</span><span class="hljs-params">(Integer id)</span>;<br>    <span class="hljs-keyword">public</span> List&lt;Book&gt; <span class="hljs-title function_">queryBooks</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>BookDaoImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.dao.impl;<br><br><span class="hljs-keyword">import</span> com.atguigu.dao.BookDao;<br><span class="hljs-keyword">import</span> com.atguigu.pojo.Book;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseDao</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookDao</span> &#123;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">addBook</span><span class="hljs-params">(Book book)</span> &#123;<br>        String sql=<span class="hljs-string">&quot;insert into t_book (name,author,price,sales,stock,img_path) values(?,?,?,?,?,?)&quot;</span>;<br>        <span class="hljs-keyword">return</span> update(sql,book.getName(),book.getAuthor(),book.getPrice(),book.getSales(),book.getStock(),book.getImgPath());<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">deleteBookById</span><span class="hljs-params">(Integer id)</span> &#123;<br>        String sql=<span class="hljs-string">&quot;delete from t_book where id=?&quot;</span>;<br>        <span class="hljs-keyword">return</span> update(sql,id);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">updateBook</span><span class="hljs-params">(Book book)</span> &#123;<br>        String sql=<span class="hljs-string">&quot;update t_book set name=?,author=?,price=?,sales=?,stock=?,img_path=? where id=?&quot;</span>;<br><br>        <span class="hljs-keyword">return</span> update(sql,book.getName(),book.getAuthor(),book.getPrice(),book.getSales(),book.getStock(),book.getImgPath(),book.getId());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Book <span class="hljs-title function_">queryBookById</span><span class="hljs-params">(Integer id)</span> &#123;<br>        String sql=<span class="hljs-string">&quot;select * from t_book where id=?&quot;</span>;<br>        <span class="hljs-keyword">return</span> queryForOne(Book.class,sql,id);<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;Book&gt; <span class="hljs-title function_">queryBooks</span><span class="hljs-params">()</span> &#123;<br>        String sql=<span class="hljs-string">&quot;select * from t_book&quot;</span>;<br>        <span class="hljs-keyword">return</span> queryForList(Book.class,sql);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>BookDaoTest</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.test;<br><br><span class="hljs-keyword">import</span> com.atguigu.dao.BookDao;<br><span class="hljs-keyword">import</span> com.atguigu.dao.impl.BookDaoImpl;<br><span class="hljs-keyword">import</span> com.atguigu.pojo.Book;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoTest</span> &#123;<br><span class="hljs-keyword">private</span> BookDao bookDao=<span class="hljs-keyword">new</span> <span class="hljs-title class_">BookDaoImpl</span>();<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addBook</span><span class="hljs-params">()</span> &#123;<br>        bookDao.addBook(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-literal">null</span>,<span class="hljs-string">&quot;国哥为什么这么帅！&quot;</span>, <span class="hljs-string">&quot;191125&quot;</span>, <span class="hljs-keyword">new</span><br>                <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-number">9999</span>),<span class="hljs-number">1100000</span>,<span class="hljs-number">0</span>,<span class="hljs-literal">null</span><br>        ));<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteBookById</span><span class="hljs-params">()</span> &#123;<br>        bookDao.deleteBookById(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateBook</span><span class="hljs-params">()</span> &#123;<br>        bookDao.updateBook(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-number">21</span>,<span class="hljs-string">&quot;国哥&quot;</span>, <span class="hljs-string">&quot;191125&quot;</span>, <span class="hljs-keyword">new</span><br>                <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-number">9999</span>),<span class="hljs-number">1100000</span>,<span class="hljs-number">0</span>,<span class="hljs-literal">null</span><br>        ));<br><br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">queryBookById</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(bookDao.queryBookById(<span class="hljs-number">21</span>));<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">queryBooks</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (Book queryBook : bookDao.queryBooks()) &#123;<br>            System.out.println(queryBook);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="编写图书模块的Service和测试Service"><a href="#编写图书模块的Service和测试Service" class="headerlink" title="编写图书模块的Service和测试Service"></a>编写图书模块的Service和测试Service</h2><p>BookSevice</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.service;<br><br><span class="hljs-keyword">import</span> com.atguigu.pojo.Book;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BookService</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addBook</span><span class="hljs-params">(Book book)</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteBookById</span><span class="hljs-params">(Integer id)</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateBook</span><span class="hljs-params">(Book book)</span>;<br>    <span class="hljs-keyword">public</span> Book <span class="hljs-title function_">queryBookById</span><span class="hljs-params">(Integer id)</span>;<br>    <span class="hljs-keyword">public</span> List&lt;Book&gt; <span class="hljs-title function_">queryBooks</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>BookService的实现是基于BookDao的</p><p>BookServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.service.impl;<br><br><span class="hljs-keyword">import</span> com.atguigu.dao.BookDao;<br><span class="hljs-keyword">import</span> com.atguigu.dao.impl.BookDaoImpl;<br><span class="hljs-keyword">import</span> com.atguigu.pojo.Book;<br><span class="hljs-keyword">import</span> com.atguigu.service.BookService;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookService</span> &#123;<br>    <span class="hljs-keyword">private</span> BookDao bookDao=<span class="hljs-keyword">new</span> <span class="hljs-title class_">BookDaoImpl</span>();<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addBook</span><span class="hljs-params">(Book book)</span> &#123;<br>        bookDao.addBook(book);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteBookById</span><span class="hljs-params">(Integer id)</span> &#123;<br>bookDao.deleteBookById(id);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateBook</span><span class="hljs-params">(Book book)</span> &#123;<br>bookDao.updateBook(book);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Book <span class="hljs-title function_">queryBookById</span><span class="hljs-params">(Integer id)</span> &#123;<br>        <span class="hljs-keyword">return</span> bookDao.queryBookById(id);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;Book&gt; <span class="hljs-title function_">queryBooks</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> bookDao.queryBooks();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>BookServiceImplTest测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.test;<br><br><span class="hljs-keyword">import</span> com.atguigu.pojo.Book;<br><span class="hljs-keyword">import</span> com.atguigu.service.BookService;<br><span class="hljs-keyword">import</span> com.atguigu.service.impl.BookServiceImpl;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.junit.Assert.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookServiceImplTest</span> &#123;<br><br>    <span class="hljs-keyword">private</span> BookService bookService=<span class="hljs-keyword">new</span> <span class="hljs-title class_">BookServiceImpl</span>();<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addBook</span><span class="hljs-params">()</span> &#123;<br>        bookService.addBook(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;java从入门到放弃&quot;</span>,<span class="hljs-string">&quot;国歌&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-number">80</span>),<span class="hljs-number">9999</span>,<span class="hljs-number">9</span>,<span class="hljs-string">&quot;static/img/default.jpg&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteBookById</span><span class="hljs-params">()</span> &#123;<br>        bookService.deleteBookById(<span class="hljs-number">21</span>);<br><br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateBook</span><span class="hljs-params">()</span> &#123;<br>        bookService.updateBook(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-number">22</span>,<span class="hljs-string">&quot;黑涩会国歌&quot;</span>,<span class="hljs-string">&quot;122&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-number">100000</span>),<span class="hljs-number">100000</span>,<span class="hljs-number">0</span>,<span class="hljs-literal">null</span>));<br><br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">queryBookById</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(bookService.queryBookById(<span class="hljs-number">22</span>));<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">queryBooks</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (Book queryBook : bookService.queryBooks()) &#123;<br>            System.out.println(queryBook);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="编写图书模块的web层，和页面联调测试"><a href="#编写图书模块的web层，和页面联调测试" class="headerlink" title="编写图书模块的web层，和页面联调测试"></a>编写图书模块的web层，和页面联调测试</h2><p>流程</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210061437693.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221006143704164"></p><p>这个是manager.jsp页面</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210061502338.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221006150206650"></p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210061502737.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221006150241618"></p><p>点一下这个是进入book_manager.jsp是</p><p>步骤</p><p>在bookServlet中添加这个方法</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk">protected void list(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;<br>    <span class="hljs-regexp">//</span><span class="hljs-number">1</span>.通过BookService查询全部图书<br>    List&lt;Book&gt; books = bookService.queryBooks();<br>    <span class="hljs-regexp">//</span><span class="hljs-number">2</span>.把全部图书保存到request域中<br>    req.setAttribute(<span class="hljs-string">&quot;books&quot;</span>,books);<br>    System.out.println(<span class="hljs-number">1</span>);<br>    <span class="hljs-regexp">//</span><span class="hljs-number">3</span>.请求转发到<span class="hljs-regexp">/pages/m</span>anager/book_manager.jsp<br>    req.getRequestDispatcher(<span class="hljs-string">&quot;/pages/manager/book_manager.jsp&quot;</span>).forward(req,resp);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="D:\img\image-20221006160611067.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221006160611067"></p><p>在book_manager.jsp中进行图书信息遍历输出</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ taglib prefix=<span class="hljs-string">&quot;c&quot;</span> uri=<span class="hljs-string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>&lt;title&gt;图书管理&lt;/title&gt;<br>   &lt;!--使用静态包含引入css样式jQuery和base标签--&gt;<br>   &lt;%@ include file=<span class="hljs-string">&quot;/pages/common/head.jsp&quot;</span>%&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>   <br>   &lt;div id=<span class="hljs-string">&quot;header&quot;</span>&gt;<br>         &lt;img class=<span class="hljs-string">&quot;logo_img&quot;</span> alt=<span class="hljs-string">&quot;&quot;</span> src=<span class="hljs-string">&quot;static/img/logo.gif&quot;</span> &gt;<br>         &lt;span class=<span class="hljs-string">&quot;wel_word&quot;</span>&gt;图书管理系统&lt;/span&gt;<br>      &lt;!--引入manager_menu.jsp内容--&gt;<br>      &lt;%<span class="hljs-meta">@include</span> file=<span class="hljs-string">&quot;/pages/common/manager_menu.jsp&quot;</span>%&gt;<br>   &lt;/div&gt;<br>   <br>   &lt;div id=<span class="hljs-string">&quot;main&quot;</span>&gt;<br>      &lt;table&gt;<br>         &lt;tr&gt;<br>            &lt;td&gt;名称&lt;/td&gt;<br>            &lt;td&gt;价格&lt;/td&gt;<br>            &lt;td&gt;作者&lt;/td&gt;<br>            &lt;td&gt;销量&lt;/td&gt;<br>            &lt;td&gt;库存&lt;/td&gt;<br>            &lt;td colspan=<span class="hljs-string">&quot;2&quot;</span>&gt;操作&lt;/td&gt;<br>         &lt;/tr&gt;<br>         &lt;c:forEach items=<span class="hljs-string">&quot;$&#123;requestScope.books&#125;&quot;</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;book&quot;</span>&gt;<br>            &lt;tr&gt;<br>               &lt;td&gt;$&#123;book.name&#125;&lt;/td&gt;<br>               &lt;td&gt;$&#123;book.price&#125;&lt;/td&gt;<br>               &lt;td&gt;$&#123;book.author&#125;&lt;/td&gt;<br>               &lt;td&gt;$&#123;book.sales&#125;&lt;/td&gt;<br>               &lt;td&gt;$&#123;book.stock&#125;&lt;/td&gt;<br>               &lt;td&gt;&lt;a href=<span class="hljs-string">&quot;book_edit.jsp&quot;</span>&gt;修改&lt;/a&gt;&lt;/td&gt;<br>               &lt;td&gt;&lt;a href=<span class="hljs-string">&quot;#&quot;</span>&gt;删除&lt;/a&gt;&lt;/td&gt;<br>            &lt;/tr&gt;<br>         &lt;/c:forEach&gt;<br><br><br>         &lt;tr&gt;<br>            &lt;td&gt;&lt;/td&gt;<br>            &lt;td&gt;&lt;/td&gt;<br>            &lt;td&gt;&lt;/td&gt;<br>            &lt;td&gt;&lt;/td&gt;<br>            &lt;td&gt;&lt;/td&gt;<br>            &lt;td&gt;&lt;/td&gt;<br>            &lt;td&gt;&lt;a href=<span class="hljs-string">&quot;book_edit.jsp&quot;</span>&gt;添加图书&lt;/a&gt;&lt;/td&gt;<br>         &lt;/tr&gt;  <br>      &lt;/table&gt;<br>   &lt;/div&gt;<br><br>   &lt;!--静态包含页脚的代码--&gt;<br>   &lt;%<span class="hljs-meta">@include</span> file=<span class="hljs-string">&quot;/pages/common/footer.jsp&quot;</span> %&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>还有一个改动</p><p>在BaseServlet添加doGet方法并在其中调用doPost方法</p><p>因为</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;manager/BookServlet?action=list&quot;</span>&gt;</span>图书管理<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>进行的是get传参，来调用list方法，所以得有一个doGet方法来调用doPost</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.web;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        doPost(req,resp);<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br><br>        String parameter=req.getParameter(<span class="hljs-string">&quot;action&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//通过反射获取对应的方法，因为设定获取的action的参数值和调用方法的名字相同</span><br>            <span class="hljs-type">Method</span> <span class="hljs-variable">parameter1</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getClass().getDeclaredMethod(parameter,HttpServletRequest.class,HttpServletResponse.class);<br>            <span class="hljs-comment">//执行目标业务方法</span><br>            parameter1.invoke(<span class="hljs-built_in">this</span>,req,resp);<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br><br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="前后端的简单介绍"><a href="#前后端的简单介绍" class="headerlink" title="前后端的简单介绍"></a>前后端的简单介绍</h2><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210061624028.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221006162446765"></p><h2 id="添加图书功能的实现"><a href="#添加图书功能的实现" class="headerlink" title="添加图书功能的实现"></a>添加图书功能的实现</h2><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210061626283.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221006162625516"></p><p>book_edit是这个界面，用来添加图书的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;pages/manager/book_edit.jsp&quot;</span>&gt;</span>添加图书<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br></code></pre></td></tr></table></figure><p>党点击添加图书跳转到book_edit界面</p><p>先修改book_edit界面的表单，表单项中的name属性一定要和javabean类中的属性名一样，否则不能用BeanUtils注入</p><p>将action改为manager&#x2F;BookServlet，添加了一个表单项value为add来调用add方法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;manager/BookServlet&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;action&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;add&quot;</span>/&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>名称<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>价格<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>作者<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>销量<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>库存<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>操作<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>     <br>      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;时间简史&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;price&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;30.00&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;author&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;霍金&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sales&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;200&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;stock&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;300&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>  <br>   <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>修改BookServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//使用BeanUtils生成Book对象</span><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">parameterMap</span> <span class="hljs-operator">=</span> req.getParameterMap();<br>        Book book= WebUtils.copyParamToBean(parameterMap,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>());<br>        <span class="hljs-comment">//保存图书</span><br>        bookService.addBook(book);<br><br>        <span class="hljs-comment">//使用这个方法是有bug的</span><br>        <span class="hljs-comment">//造成表单的重复提交，当用户提交完请求，浏览器会记录下最后一次请求的全部信息，当用户按下功能键f5，就会发起浏览器记录的最后一次请求</span><br><br>       <span class="hljs-comment">// req.getRequestDispatcher(&quot;/manager/BookServlet?action=list&quot;).forward(req,resp);</span><br><br>        <span class="hljs-comment">//这里要使用重定向</span><br>resp.sendRedirect(req.getContextPath()+<span class="hljs-string">&quot;/manager/BookServlet?action=list&quot;</span>);<br><br><br>    &#125;<br></code></pre></td></tr></table></figure><p>造成表单的重复提交，当用户提交完请求，浏览器会记录下最后一次请求的全部信息，当用户按下功能键f5，就会发起浏览器记录的最后一次请求</p><p>请求转发是一次请求，重定向是两次请求，就是如果请求转发则从提交表单开始到最后都是一次请求，但重定向则是两次，第二次是请求那个jsp页面，所以对于重定向来讲，浏览器存储的最后一次请求就是请求那个jsp页面，便不会重复添加</p><h2 id="删除图书功能的实现"><a href="#删除图书功能的实现" class="headerlink" title="删除图书功能的实现"></a>删除图书功能的实现</h2><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210061838738.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221006183829761"></p><p>修改book_editmanager中的</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">&lt;td&gt;&lt;a <span class="hljs-keyword">class</span>=&quot;<span class="hljs-symbol">deleteClass</span>&quot; <span class="hljs-symbol">href</span>=&quot;<span class="hljs-symbol">manager</span>/<span class="hljs-symbol">BookServlet</span>?<span class="hljs-symbol">action</span>=<span class="hljs-symbol">delete</span>&amp;<span class="hljs-symbol">id</span>=$&#123;book.id&#125;<span class="hljs-string">&quot;&gt;删除&lt;/a&gt;&lt;/td&gt;</span><br></code></pre></td></tr></table></figure><p>在book_editmanager中加一个点击事件，来获取要删除的书的名字，来提醒用户是否删错</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br><br>   $(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>   $(<span class="hljs-string">&quot;a.deleteClass&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><br>      <span class="hljs-comment">/*</span><br><span class="hljs-comment">      confirm是确认提示框函数</span><br><span class="hljs-comment">      参数是他的提示内容</span><br><span class="hljs-comment">      它有两个按扭，一个确认，一个是取消。</span><br><span class="hljs-comment">       返回true表示点击了确认，返回false表示点击了取消</span><br><span class="hljs-comment">       */</span><br>      <span class="hljs-comment">//在事件的function函数总有一个this对象是当前正在响应事件的dom对象</span><br>      <span class="hljs-comment">//将dom转换为jQuery对象获得父标签的父标签tr再得到子标签td中的第一个里面的文本内容</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-title function_">confirm</span>(<span class="hljs-string">&quot;你确定要删除[&quot;</span>+$(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">parent</span>().<span class="hljs-title function_">parent</span>().<span class="hljs-title function_">find</span>(<span class="hljs-string">&quot;td:first&quot;</span>).<span class="hljs-title function_">text</span>()+<span class="hljs-string">&quot;]?&quot;</span>);<br>      <span class="hljs-comment">/*</span><br><span class="hljs-comment">      return false会阻止元素的默认行为，不提交请求</span><br><span class="hljs-comment">       */</span><br>      &#125;);<br>   &#125;);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>在WebUtils中增加的字符串转数字的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 将字符串转换成为int类型的数据</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> strInt  这个是要转换为数字的字符串</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> defaultValue   如果没有转换成功返回默认值</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">parseInt</span><span class="hljs-params">(String strInt,<span class="hljs-type">int</span> defaultValue)</span>&#123;<br>        <span class="hljs-keyword">if</span>(strInt!=<span class="hljs-literal">null</span>)<br>    <span class="hljs-keyword">return</span> Integer.parseInt(strInt);<br>        <span class="hljs-keyword">return</span> defaultValue;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>在BookServlet中增加的delete方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">// 1、获取请求的参数 id，图书编程</span><br>        <span class="hljs-type">int</span> id=WebUtils.parseInt(req.getParameter(<span class="hljs-string">&quot;id&quot;</span>),<span class="hljs-number">0</span>);<br><span class="hljs-comment">// 2、调用 bookService.deleteBookById();删除图书</span><br>        bookService.deleteBookById(id);<br><span class="hljs-comment">// 3、重定向回图书列表管理页面</span><br><span class="hljs-comment">// /book/manager/bookServlet?action=list</span><br>        resp.sendRedirect(req.getContextPath() + <span class="hljs-string">&quot;/manager/BookServlet?action=list&quot;</span>);<br><br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="修改图书功能的实现"><a href="#修改图书功能的实现" class="headerlink" title="修改图书功能的实现"></a>修改图书功能的实现</h2><h3 id="让修改界面变成要修改的书的信息"><a href="#让修改界面变成要修改的书的信息" class="headerlink" title="让修改界面变成要修改的书的信息"></a>让修改界面变成要修改的书的信息</h3><p>改变  修改选项的请求信息</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;manager/BookServlet?action=getBook&amp;id=$</span></span></span><span class="hljs-template-variable">&#123;book.id&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>修改<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>在BookServlet中添加了一个getBook的方法</p><p>这里使用请求转发，是因为请求是在页面显示要修改的book的内容，即使用户按了f5再次请求也无伤大雅</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getBook</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    <span class="hljs-comment">//获取图书编号</span><br>    <span class="hljs-type">int</span> id=WebUtils.parseInt(req.getParameter(<span class="hljs-string">&quot;id&quot;</span>),<span class="hljs-number">0</span>);<br>    <span class="hljs-comment">//调用BookService中的方法查找到这个book的信息</span><br>    <span class="hljs-type">Book</span> <span class="hljs-variable">book</span> <span class="hljs-operator">=</span> bookService.queryBookById(id);<br>    <span class="hljs-comment">//把图书保存到request域中</span><br>    req.setAttribute(<span class="hljs-string">&quot;book&quot;</span>,book);<br>    <span class="hljs-comment">//请求转发</span><br>    req.getRequestDispatcher(<span class="hljs-string">&quot;/pages/manager/book_edit.jsp&quot;</span>).forward(req,resp);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>在book_edit页面中修改显示的信息</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;tr&gt;<br>   &lt;td&gt;&lt;input name=<span class="hljs-string">&quot;name&quot;</span> type=<span class="hljs-string">&quot;text&quot;</span> value=<span class="hljs-string">&quot;$&#123;requestScope.book.name&#125;&quot;</span>/&gt;&lt;/td&gt;<br>   &lt;td&gt;&lt;input name=<span class="hljs-string">&quot;price&quot;</span> type=<span class="hljs-string">&quot;text&quot;</span> value=<span class="hljs-string">&quot;$&#123;requestScope.book.price&#125;&quot;</span>/&gt;&lt;/td&gt;<br>   &lt;td&gt;&lt;input name=<span class="hljs-string">&quot;author&quot;</span> type=<span class="hljs-string">&quot;text&quot;</span> value=<span class="hljs-string">&quot;$&#123;requestScope.book.author&#125;&quot;</span>/&gt;&lt;/td&gt;<br>   &lt;td&gt;&lt;input name=<span class="hljs-string">&quot;sales&quot;</span> type=<span class="hljs-string">&quot;text&quot;</span> value=<span class="hljs-string">&quot;$&#123;requestScope.book.sales&#125;&quot;</span>/&gt;&lt;/td&gt;<br>   &lt;td&gt;&lt;input name=<span class="hljs-string">&quot;stock&quot;</span> type=<span class="hljs-string">&quot;text&quot;</span> value=<span class="hljs-string">&quot;$&#123;requestScope.book.stock&#125;&quot;</span>/&gt;&lt;/td&gt;<br>   &lt;td&gt;&lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;提交&quot;</span>/&gt;&lt;/td&gt;<br>&lt;/tr&gt;<br></code></pre></td></tr></table></figure><h2 id="提交给服务器保存修改"><a href="#提交给服务器保存修改" class="headerlink" title="提交给服务器保存修改"></a>提交给服务器保存修改</h2><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210061941586.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221006194122535"></p><p>在BookServlet中添加update方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>   <span class="hljs-comment">//请求参数，封装为Book对象</span><br>    <span class="hljs-type">Map</span> <span class="hljs-variable">parameterMap</span> <span class="hljs-operator">=</span> req.getParameterMap();<br>    Book book=WebUtils.copyParamToBean(parameterMap,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>());<br>    <span class="hljs-comment">//调用BookService的方法修改图书</span><br>    bookService.updateBook(book);<br>    <span class="hljs-comment">//将信息重定向到book_edit页面</span><br>    resp.sendRedirect(req.getContextPath()+<span class="hljs-string">&quot;/manager/BookServlet?action=list&quot;</span>);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>这里使用重定向是因为如果使用请求转发，客户端按下f5则会修改两次</p><p>改变修改按钮的指向地址，这是为了点击修改之后book_edit页面中能显示要修改的book的信息</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;manager/BookServlet?action=getBook&amp;id=$</span></span></span><span class="hljs-template-variable">&#123;book.id&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>修改<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>解决book_edit页面既要实现add又要实现update的问题</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;!--通过判断是否存在参数id来绝顶value是add还是update--&gt;<br>&lt;input type=<span class="hljs-string">&quot;hidden&quot;</span> name=<span class="hljs-string">&quot;action&quot;</span> value=<span class="hljs-string">&quot;$&#123;empty param.id?&quot;</span>add<span class="hljs-string">&quot;:&quot;</span>update<span class="hljs-string">&quot;&#125;&quot;</span>/&gt;<br>&lt;input type=<span class="hljs-string">&quot;hidden&quot;</span> name=<span class="hljs-string">&quot;id&quot;</span> value=<span class="hljs-string">&quot;$&#123;requestScope.book.id&#125;&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><p>第二行代码是因为修改book需要id</p><h2 id="图书分页的分析"><a href="#图书分页的分析" class="headerlink" title="图书分页的分析"></a>图书分页的分析</h2><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210070854556.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221007085428323"></p><h3 id="分页模型page的抽取"><a href="#分页模型page的抽取" class="headerlink" title="分页模型page的抽取"></a>分页模型page的抽取</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.pojo;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">Page是分页的模型对象</span><br><span class="hljs-comment">&lt;T&gt;是具体的模块的javaBean类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Page</span> &lt;T&gt;&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Integer PAGE_SIZE=<span class="hljs-number">4</span>;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getPageNo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> pageNo;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPageNo</span><span class="hljs-params">(Integer pageNo)</span> &#123;<br>        <span class="hljs-built_in">this</span>.pageNo = pageNo;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getPageTotal</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> pageTotal;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Page&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;pageNo=&quot;</span> + pageNo +<br>                <span class="hljs-string">&quot;, pageTotal=&quot;</span> + pageTotal +<br>                <span class="hljs-string">&quot;, pageSize=&quot;</span> + pageSize +<br>                <span class="hljs-string">&quot;, pageTotalCount=&quot;</span> + pageTotalCount +<br>                <span class="hljs-string">&quot;, items=&quot;</span> + items +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPageTotal</span><span class="hljs-params">(Integer pageTotal)</span> &#123;<br>        <span class="hljs-built_in">this</span>.pageTotal = pageTotal;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getPageSize</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> pageSize;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPageSize</span><span class="hljs-params">(Integer pageSize)</span> &#123;<br>        <span class="hljs-built_in">this</span>.pageSize = pageSize;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getPageTotalCount</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> pageTotalCount;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPageTotalCount</span><span class="hljs-params">(Integer pageTotalCount)</span> &#123;<br>        <span class="hljs-built_in">this</span>.pageTotalCount = pageTotalCount;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> List&lt;T&gt; <span class="hljs-title function_">getItems</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> items;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setItems</span><span class="hljs-params">(List&lt;T&gt; items)</span> &#123;<br>        <span class="hljs-built_in">this</span>.items = items;<br>    &#125;<br><br>    <span class="hljs-comment">//当前页码</span><br>    <span class="hljs-keyword">private</span> Integer pageNo;<br>    <span class="hljs-comment">//总页码</span><br>    <span class="hljs-keyword">private</span> Integer pageTotal;<br>    <span class="hljs-comment">//当前页的显示数量</span><br>    <span class="hljs-keyword">private</span> Integer pageSize=PAGE_SIZE;<br>    <span class="hljs-comment">//总记录数</span><br>    <span class="hljs-keyword">private</span> Integer pageTotalCount;<br>    <span class="hljs-comment">//当前页数据</span><br>    <span class="hljs-keyword">private</span> List&lt;T&gt; items;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Page</span><span class="hljs-params">(Integer pageNo, Integer pageTotal, Integer pageSize, Integer pageTotalCount, List&lt;T&gt; items)</span> &#123;<br>        <span class="hljs-built_in">this</span>.pageNo = pageNo;<br>        <span class="hljs-built_in">this</span>.pageTotal = pageTotal;<br>        <span class="hljs-built_in">this</span>.pageSize = pageSize;<br>        <span class="hljs-built_in">this</span>.pageTotalCount = pageTotalCount;<br>        <span class="hljs-built_in">this</span>.items = items;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Page</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="分页的初步实现"><a href="#分页的初步实现" class="headerlink" title="分页的初步实现"></a>分页的初步实现</h3><p>图书管理这个地方改成分页操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;a href=<span class="hljs-string">&quot;manager/BookServlet?action=page&quot;</span>&gt;图书管理&lt;/a&gt;<br></code></pre></td></tr></table></figure><p>BookServlet</p><p>在其中添加了分页功能，利用了bookService的page方法      就是生成页面对象的方法，页面对象包括页面的数据条数，多少页等等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">处理分页功能</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">page</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    <span class="hljs-comment">//1。获取请求的参数，pageNo和pageSize</span><br>    <span class="hljs-comment">//用户没有点击第几页，就默认显示第一页，所以第二个参数是1</span><br>    <span class="hljs-type">int</span> pageNo=WebUtils.parseInt(req.getParameter(<span class="hljs-string">&quot;pageNo&quot;</span>),<span class="hljs-number">1</span>);<br>    <span class="hljs-type">int</span> pageSize=WebUtils.parseInt(req.getParameter(<span class="hljs-string">&quot;pageSize&quot;</span>), Page.PAGE_SIZE);<br><br>    <span class="hljs-comment">//2。调用BookService.page(pageNo,pageSize):Page对象</span><br>    Page&lt;Book&gt; page=bookService.page(pageNo,pageSize);<br>    <span class="hljs-comment">//3.保存Page对象到request域中</span><br>    req.setAttribute(<span class="hljs-string">&quot;page&quot;</span>,page);<br>    <span class="hljs-comment">//4.请求转发到pages/manager/book_manager.jsp</span><br>    req.getRequestDispatcher(<span class="hljs-string">&quot;/pages/manager/book_manager.jsp&quot;</span>).forward(req,resp);<br>&#125;<br></code></pre></td></tr></table></figure><p>BookService</p><p>在BookService中添加了page方法，生成page对象，用到了BookDao的queryForPageTotalCount()方法和queryFotPageItems()方法</p><p>为了得到总记录数和当前页数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Page&lt;Book&gt; <span class="hljs-title function_">page</span><span class="hljs-params">(<span class="hljs-type">int</span> pageNo, <span class="hljs-type">int</span> pageSize)</span> &#123;<br>    Page&lt;Book&gt; page=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;();<br>    <span class="hljs-comment">//设置page对象的当前页</span><br>    page.setPageNo(pageNo);<br>    <span class="hljs-comment">//设置每页显示的数量</span><br>    page.setPageSize(pageSize);<br>    <span class="hljs-comment">//求总记录数</span><br>    Integer pageTotalCount=bookDao.queryForPageTotalCount();<br>    <span class="hljs-comment">//设置总记录数</span><br>    page.setPageTotalCount(pageTotalCount);<br>    <span class="hljs-comment">//求总页码</span><br>    Integer pageTotal=pageTotalCount/pageSize;<br>    <span class="hljs-keyword">if</span>(pageTotalCount%pageSize&gt;<span class="hljs-number">0</span>)&#123;<br>        pageTotal+=<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-comment">//设置总页码</span><br>    page.setPageTotal(pageTotal);<br>    <span class="hljs-comment">//求当前页面开始的索引</span><br>    <span class="hljs-type">int</span> begin=(page.getPageNo()-<span class="hljs-number">1</span>)*pageSize;<br>    <span class="hljs-comment">//求当前页数据</span><br>    List&lt;Book&gt; items=bookDao.queryForPageItems(begin,pageSize);<br>    <span class="hljs-comment">//设置当前页数据</span><br>    page.setItems(items);<br>    <span class="hljs-keyword">return</span> page;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>BookDao</p><p>在BookDao中增加了queryForPageItems和queryForPageTotalCount方法</p><p>为了得到总记录数和当前页数据</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@Override<br>public Integer query<span class="hljs-constructor">ForPageTotalCount()</span> &#123;<br>    String sql=<span class="hljs-string">&quot;select count(*) from t_book&quot;</span>;<br>    Number count=(Number)query<span class="hljs-constructor">ForSingleValue(<span class="hljs-params">sql</span>)</span>;<br>    return count.<span class="hljs-built_in">int</span><span class="hljs-constructor">Value()</span>;<br>&#125;<br><br>@Override<br>public List&lt;Book&gt; query<span class="hljs-constructor">ForPageItems(<span class="hljs-params">int</span> <span class="hljs-params">begin</span>, <span class="hljs-params">int</span> <span class="hljs-params">pageSize</span>)</span> &#123;<br>    String sql=<span class="hljs-string">&quot;select id,name,author,price,sales,stock,img_path from t_book limit ?,? &quot;</span>;<br>    return query<span class="hljs-constructor">ForList(Book.<span class="hljs-params">class</span>,<span class="hljs-params">sql</span>,<span class="hljs-params">begin</span>,<span class="hljs-params">pageSize</span>)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">ScalarHandler用来获得聚合函数的值,返回类型是Object,用Number来接收比较好<br>Number num=qr.query(cntSql.append(whereSql).<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>,<span class="hljs-keyword">new</span> ScalarHandler&lt;&gt;<span class="hljs-literal">()</span>,params.<span class="hljs-keyword">to</span><span class="hljs-constructor">Array()</span>);<br>然后调用<span class="hljs-built_in">int</span><span class="hljs-constructor">Value()</span>方法<br><span class="hljs-built_in">int</span> tr=num.<span class="hljs-built_in">int</span><span class="hljs-constructor">Value()</span>即可!<br></code></pre></td></tr></table></figure><p>book_manager.jsp中增加了换页框</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;div id=<span class="hljs-string">&quot;page_nav&quot;</span>&gt;<br>   &lt;a href=<span class="hljs-string">&quot;#&quot;</span>&gt;首页&lt;/a&gt;<br>   &lt;a href=<span class="hljs-string">&quot;#&quot;</span>&gt;上一页&lt;/a&gt;<br>   &lt;a href=<span class="hljs-string">&quot;#&quot;</span>&gt;<span class="hljs-number">3</span>&lt;/a&gt;<br>   【$&#123;requestScope.page.pageNo&#125;】<br>   &lt;a href=<span class="hljs-string">&quot;#&quot;</span>&gt;<span class="hljs-number">5</span>&lt;/a&gt;<br>   &lt;a href=<span class="hljs-string">&quot;#&quot;</span>&gt;下一页&lt;/a&gt;<br>   &lt;a href=<span class="hljs-string">&quot;#&quot;</span>&gt;末页&lt;/a&gt;<br>   共$&#123;requestScope.page.pageTotal&#125;页，$&#123;requestScope.page.pageTotalCount&#125;条记录 到第&lt;input value=<span class="hljs-string">&quot;4&quot;</span> name=<span class="hljs-string">&quot;pn&quot;</span> id=<span class="hljs-string">&quot;pn_input&quot;</span>/&gt;页<br>   &lt;input type=<span class="hljs-string">&quot;button&quot;</span> value=<span class="hljs-string">&quot;确定&quot;</span>&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>book_manager.jsp中还改变了遍历的数据项requestScope.page.items</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;c:forEach items=<span class="hljs-string">&quot;$&#123;requestScope.page.items&#125;&quot;</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;book&quot;</span>&gt;<br>   &lt;tr&gt;<br>      &lt;td&gt;$&#123;book.name&#125;&lt;/td&gt;<br>      &lt;td&gt;$&#123;book.price&#125;&lt;/td&gt;<br>      &lt;td&gt;$&#123;book.author&#125;&lt;/td&gt;<br>      &lt;td&gt;$&#123;book.sales&#125;&lt;/td&gt;<br>      &lt;td&gt;$&#123;book.stock&#125;&lt;/td&gt;<br>      &lt;td&gt;&lt;a href=<span class="hljs-string">&quot;manager/BookServlet?action=getBook&amp;id=$&#123;book.id&#125;&quot;</span>&gt;修改&lt;/a&gt;&lt;/td&gt;<br>      &lt;td&gt;&lt;a class=<span class="hljs-string">&quot;deleteClass&quot;</span> href=<span class="hljs-string">&quot;manager/BookServlet?action=delete&amp;id=$&#123;book.id&#125;&quot;</span>&gt;删除&lt;/a&gt;&lt;/td&gt;<br>   &lt;/tr&gt;<br>&lt;/c:forEach&gt;<br></code></pre></td></tr></table></figure><h3 id="首页上一页，下一页，末页的实现"><a href="#首页上一页，下一页，末页的实现" class="headerlink" title="首页上一页，下一页，末页的实现"></a>首页上一页，下一页，末页的实现</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;div id=<span class="hljs-string">&quot;page_nav&quot;</span>&gt;<br>   &lt;%--大于首页才显示上一页按钮--%&gt;<br>   &lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;$&#123;requestScope.page.pageNo&gt;1&#125;&quot;</span>&gt;<br>      &lt;a href=<span class="hljs-string">&quot;manager/BookServlet?action=page&amp;pageNo=1&quot;</span>&gt;首页&lt;/a&gt;<br>      &lt;a href=<span class="hljs-string">&quot;manager/BookServlet?action=page&amp;pageNo=$&#123;requestScope.page.pageNo-1&#125;&quot;</span>&gt;上一页&lt;/a&gt;<br>   &lt;/c:<span class="hljs-keyword">if</span>&gt;<br>   &lt;a href=<span class="hljs-string">&quot;manager/BookServlet?action=page&amp;pageNo=$&#123;requestScope.page.pageNo-1&#125;&quot;</span>&gt;$&#123;requestScope.page.pageNo-<span class="hljs-number">1</span>&#125;&lt;/a&gt;<br>   【$&#123;requestScope.page.pageNo&#125;】<br>   &lt;a href=<span class="hljs-string">&quot;manager/BookServlet?action=page&amp;pageNo=$&#123;requestScope.page.pageNo+1&#125;&quot;</span>&gt;$&#123;requestScope.page.pageNo+<span class="hljs-number">1</span>&#125;&lt;/a&gt;<br>      &lt;%--如果已经是最后一页则不显示下一页和末页--%&gt;<br>      &lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;$&#123;requestScope.page.pageNo&lt;requestScope.page.pageTotal&#125;&quot;</span>&gt;<br>         &lt;a href=<span class="hljs-string">&quot;manager/BookServlet?action=page&amp;pageNo=$&#123;requestScope.page.pageNo+1&#125;&quot;</span>&gt;下一页&lt;/a&gt;<br>         &lt;a href=<span class="hljs-string">&quot;manager/BookServlet?action=page&amp;pageNo=$&#123;requestScope.page.pageTotal&#125;&quot;</span>&gt;末页&lt;/a&gt;<br>      &lt;/c:<span class="hljs-keyword">if</span>&gt;<br>   共$&#123;requestScope.page.pageTotal&#125;页，$&#123;requestScope.page.pageTotalCount&#125;条记录 到第&lt;input value=<span class="hljs-string">&quot;$&#123;requestScope.page.pageNo&#125;&quot;</span> name=<span class="hljs-string">&quot;pn&quot;</span> id=<span class="hljs-string">&quot;pn_input&quot;</span>/&gt;页<br>   &lt;input type=<span class="hljs-string">&quot;button&quot;</span> value=<span class="hljs-string">&quot;确定&quot;</span>&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><h3 id="分页模块中跳转到指定页数功能实现"><a href="#分页模块中跳转到指定页数功能实现" class="headerlink" title="分页模块中跳转到指定页数功能实现"></a>分页模块中跳转到指定页数功能实现</h3><p>这个是head.jsp文件，把路径保存在pageContext域中，方便在book_manager.jsp文件中获取</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">&lt;%<br>    String basePath=request.get<span class="hljs-constructor">Scheme()</span>+<span class="hljs-string">&quot;://&quot;</span>+request.get<span class="hljs-constructor">ServerName()</span>+<span class="hljs-string">&quot;:&quot;</span>+request.get<span class="hljs-constructor">ServerPort()</span>+request.get<span class="hljs-constructor">ContextPath()</span>+<span class="hljs-string">&quot;/&quot;</span>;<br>    pageContext.set<span class="hljs-constructor">Attribute(<span class="hljs-string">&quot;basePath&quot;</span>,<span class="hljs-params">basePath</span>)</span>;<br>%&gt;<br></code></pre></td></tr></table></figure><p>给确定键按钮加了一个点击事件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">共$&#123;requestScope.page.pageTotal&#125;页，$&#123;requestScope.page.pageTotalCount&#125;条记录 到第&lt;input value=<span class="hljs-string">&quot;$&#123;requestScope.page.pageNo&#125;&quot;</span> name=<span class="hljs-string">&quot;pn&quot;</span> id=<span class="hljs-string">&quot;pn_input&quot;</span>/&gt;页<br>&lt;input type=<span class="hljs-string">&quot;button&quot;</span> id=<span class="hljs-string">&quot;searchPageBtn&quot;</span> value=<span class="hljs-string">&quot;确定&quot;</span>&gt;<br>&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>$(function()&#123;<br>$(<span class="hljs-string">&quot;#searchPageBtn&quot;</span>).click(function()&#123;<br><br><span class="hljs-keyword">var</span> pageNo=$(<span class="hljs-string">&quot;#pn_input&quot;</span>).val();<br><span class="hljs-comment">//javascript语言中提供了一个location地址栏</span><br><span class="hljs-comment">//他有一个属性叫href，它可以获取浏览器地址栏中的地址</span><br><span class="hljs-comment">//href属性可读可写</span><br>location.href=<span class="hljs-string">&quot;$&#123;pageScope.basePath&#125;manager/BookServlet?action=page&amp;pageNo=&quot;</span>+pageNo;<br>&#125;);<br><br>&#125;);<br><br><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="数据有效边境检查"><a href="#数据有效边境检查" class="headerlink" title="数据有效边境检查"></a>数据有效边境检查</h3><p>前端jsp,加了一个前端的校验，如果当前要转的页码大于最大页码或者小于零就返回false，阻止事件发生</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>   $(function()&#123;<br>      $(<span class="hljs-string">&quot;#searchPageBtn&quot;</span>).click(function()&#123;<br><br>         <span class="hljs-keyword">var</span> pageNo=$(<span class="hljs-string">&quot;#pn_input&quot;</span>).val();<br><br>         <span class="hljs-keyword">var</span> pageTotal=$&#123;requestScope.page.pageTotal&#125;;<br>         <span class="hljs-keyword">if</span>(pageNo&gt;pageTotal||pageNo&lt;=<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>         &#125;<br><br>         <span class="hljs-comment">//javascript语言中提供了一个location地址栏</span><br>         <span class="hljs-comment">//他有一个属性叫href，它可以获取浏览器地址栏中的地址</span><br>         <span class="hljs-comment">//href属性可读可写</span><br>         location.href=<span class="hljs-string">&quot;$&#123;pageScope.basePath&#125;manager/BookServlet?action=page&amp;pageNo=&quot;</span>+pageNo;<br>      &#125;);<br><br>   &#125;);<br><br><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>服务器端检查数据边界，因为在地址栏中使用get传参可以跳过前端验证</p><p>直接在setPageNo的方法中设置，只要pageNo不合法，直接替换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPageNo</span><span class="hljs-params">(Integer pageNo)</span> &#123;<br>    <span class="hljs-comment">//设置数据的边界值</span><br>    <span class="hljs-keyword">if</span>(pageNo&lt;<span class="hljs-number">1</span>)&#123;<br>        pageNo=<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(pageNo&gt;pageTotal)&#123;<br>        pageNo=pageTotal;<br>    &#125;<br><br>    <span class="hljs-built_in">this</span>.pageNo = pageNo;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="分页条形码的输出"><a href="#分页条形码的输出" class="headerlink" title="分页条形码的输出"></a>分页条形码的输出</h3><p>分页模块中，页码 1,2,【3】,4,5 的显示，要显示 5 个页 码，并且页码可以点击跳转。</p><p>需求：显示 5 个连续的页码，而且当前页码在中间。除了当前页码之外，每个页码都可以点击跳到指定页。</p><p>如果总页码</p><p>优化后</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;%--页码输出的开始--%&gt;<br>&lt;c:choose&gt;<br>   &lt;%--情况 <span class="hljs-number">1</span>：如果总页码小于等于 <span class="hljs-number">5</span> 的情况，页码的范围是：<span class="hljs-number">1</span>-总页码--%&gt;<br>   &lt;c:when test=<span class="hljs-string">&quot;$&#123; requestScope.page.pageTotal &lt;= 5 &#125;&quot;</span>&gt;<br>      &lt;c:set <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;begin&quot;</span> value=<span class="hljs-string">&quot;1&quot;</span>/&gt;<br>      &lt;c:set <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;end&quot;</span> value=<span class="hljs-string">&quot;$&#123;requestScope.page.pageTotal&#125;&quot;</span>/&gt;<br>   &lt;/c:when&gt;<br>   &lt;%--情况 <span class="hljs-number">2</span>：总页码大于 <span class="hljs-number">5</span> 的情况--%&gt;<br>   &lt;c:when test=<span class="hljs-string">&quot;$&#123;requestScope.page.pageTotal &gt; 5&#125;&quot;</span>&gt;<br>      &lt;c:choose&gt;<br>         &lt;%--小情况 <span class="hljs-number">1</span>：当前页码为前面 <span class="hljs-number">3</span> 个：<span class="hljs-number">1</span>，<span class="hljs-number">2</span>，<span class="hljs-number">3</span> 的情况，页码范围是：<span class="hljs-number">1</span>-<span class="hljs-number">5.</span>--%&gt;<br>         &lt;c:when test=<span class="hljs-string">&quot;$&#123;requestScope.page.pageNo &lt;= 3&#125;&quot;</span>&gt;<br>            &lt;%--记录begin和end--%&gt;<br>            &lt;c:set <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;begin&quot;</span> value=<span class="hljs-string">&quot;1&quot;</span>/&gt;<br>            &lt;c:set <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;end&quot;</span> value=<span class="hljs-string">&quot;5&quot;</span>/&gt;<br>         &lt;/c:when&gt;<br>         &lt;%--小情况 <span class="hljs-number">2</span>：当前页码为最后 <span class="hljs-number">3</span> 个，<span class="hljs-number">8</span>，<span class="hljs-number">9</span>，<span class="hljs-number">10</span>，页码范围是：总页码减 <span class="hljs-number">4</span> - 总页码--%&gt;<br>         &lt;c:when test=<span class="hljs-string">&quot;$&#123;requestScope.page.pageNo &gt; requestScope.page.pageTotal-3&#125;&quot;</span>&gt;<br>            &lt;%--记录begin和end--%&gt;<br>            &lt;c:set <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;begin&quot;</span> value=<span class="hljs-string">&quot;$&#123;requestScope.page.pageTotal-4&#125;&quot;</span>/&gt;<br>            &lt;c:set <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;end&quot;</span> value=<span class="hljs-string">&quot;$&#123;requestScope.page.pageTotal&#125;&quot;</span>/&gt;<br>         &lt;/c:when&gt;<br>         &lt;%--小情况 <span class="hljs-number">3</span>：<span class="hljs-number">4</span>，<span class="hljs-number">5</span>，<span class="hljs-number">6</span>，<span class="hljs-number">7</span>，页码范围是：当前页码减 <span class="hljs-number">2</span> - 当前页码加 <span class="hljs-number">2</span>--%&gt;<br>         &lt;c:otherwise&gt;<br>            &lt;c:set <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;begin&quot;</span> value=<span class="hljs-string">&quot;$&#123;requestScope.page.pageNo-2&#125;&quot;</span>/&gt;<br>            &lt;c:set <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;end&quot;</span> value=<span class="hljs-string">&quot;$&#123;requestScope.page.pageNo+2&#125;&quot;</span>/&gt;<br>         &lt;/c:otherwise&gt;<br>      &lt;/c:choose&gt;<br>   &lt;/c:when&gt;<br>&lt;/c:choose&gt;<br>&lt;c:forEach begin=<span class="hljs-string">&quot;$&#123;begin&#125;&quot;</span> end=<span class="hljs-string">&quot;$&#123;end&#125;&quot;</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;i&quot;</span>&gt;<br>   &lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;$&#123;i == requestScope.page.pageNo&#125;&quot;</span>&gt;<br>      【$&#123;i&#125;】<br>   &lt;/c:<span class="hljs-keyword">if</span>&gt;<br>   &lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;$&#123;i != requestScope.page.pageNo&#125;&quot;</span>&gt;<br>      &lt;a href=<span class="hljs-string">&quot;manager/BookServlet?action=page&amp;pageNo=$&#123;i&#125;&quot;</span>&gt;$&#123;i&#125;&lt;/a&gt;<br>   &lt;/c:<span class="hljs-keyword">if</span>&gt;<br>&lt;/c:forEach&gt;<br>&lt;%--页码输出的结束--%&gt;<br></code></pre></td></tr></table></figure><pre><code class="hljs">  &lt;c:set var=&quot;begin&quot; value=&quot;1&quot;/&gt;  &lt;c:set var=&quot;end&quot; value=&quot;$&#123;requestScope.page.pageTotal&#125;&quot;/&gt;</code></pre><p>这个是设置begin和end的value值</p><p>然后等到&lt;c:choose&gt;执行完之后再执行forEach</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;c:forEach begin=<span class="hljs-string">&quot;$&#123;begin&#125;&quot;</span> end=<span class="hljs-string">&quot;$&#123;end&#125;&quot;</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;i&quot;</span>&gt;<br>   &lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;$&#123;i == requestScope.page.pageNo&#125;&quot;</span>&gt;<br>      【$&#123;i&#125;】<br>   &lt;/c:<span class="hljs-keyword">if</span>&gt;<br>   &lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;$&#123;i != requestScope.page.pageNo&#125;&quot;</span>&gt;<br>      &lt;a href=<span class="hljs-string">&quot;manager/BookServlet?action=page&amp;pageNo=$&#123;i&#125;&quot;</span>&gt;$&#123;i&#125;&lt;/a&gt;<br>   &lt;/c:<span class="hljs-keyword">if</span>&gt;<br>&lt;/c:forEach&gt;<br></code></pre></td></tr></table></figure><h3 id="修改分页对原来增删改的影响"><a href="#修改分页对原来增删改的影响" class="headerlink" title="修改分页对原来增删改的影响"></a>修改分页对原来增删改的影响</h3><p>这个是把BookServlet中原本action&#x3D;list都改为action&#x3D;page</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">resp.send<span class="hljs-constructor">Redirect(<span class="hljs-params">req</span>.<span class="hljs-params">getContextPath</span>()</span>+<span class="hljs-string">&quot;/manager/BookServlet?action=page&quot;</span>);<br></code></pre></td></tr></table></figure><p><strong>添加图书的影响</strong></p><p>book_manager</p><p>添加图书的时候带着pageTotal</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;pages/manager/book_edit.jsp?pageNo=$</span></span></span><span class="hljs-template-variable">&#123;requestScope.page.pageTotal&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>添加图书<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>book_edit</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">加了这一行，来传接收到的pageNo参数<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;input <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;pageNo&quot;</span> <span class="hljs-attribute">value</span>=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;param.pageNo&#125;</span>&quot;</span>/&gt;;<br></code></pre></td></tr></table></figure><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;manager/BookServlet&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-comment">&lt;!--通过判断是否存在参数id来绝顶value是add还是update--&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;action&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="language-xquery"><span class="hljs-built_in">&#123;empty</span> param<span class="hljs-built_in">.id</span>?<span class="hljs-string">&quot;add&quot;</span>:<span class="hljs-string">&quot;update&quot;</span>&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="language-xquery">&#123;requestScope.book<span class="hljs-built_in">.id</span>&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pageNo&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="language-xquery">&#123;param.pageNo&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span>;</span><br></code></pre></td></tr></table></figure><p>BookServlet中的add方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-type">int</span> pageNo=WebUtils.parseInt(req.getParameter(<span class="hljs-string">&quot;pageNo&quot;</span>),<span class="hljs-number">0</span>);<br>        pageNo+=<span class="hljs-number">1</span>;<br>        <span class="hljs-comment">//使用BeanUtils生成Book对象</span><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">parameterMap</span> <span class="hljs-operator">=</span> req.getParameterMap();<br>        Book book= WebUtils.copyParamToBean(parameterMap,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>());<br>        <span class="hljs-comment">//保存图书</span><br>        bookService.addBook(book);<br><br>        <span class="hljs-comment">//使用这个方法是有bug的</span><br>        <span class="hljs-comment">//造成表单的重复提交，当用户提交完请求，浏览器会记录下最后一次请求的全部信息，当用户按下功能键f5，就会发起浏览器记录的最后一次请求</span><br><br>       <span class="hljs-comment">// req.getRequestDispatcher(&quot;/manager/BookServlet?action=list&quot;).forward(req,resp);</span><br><br>        <span class="hljs-comment">//这里要使用重定向</span><br>resp.sendRedirect(req.getContextPath()+<span class="hljs-string">&quot;/manager/BookServlet?action=page&amp;pageNo=&quot;</span>+pageNo);<br><br><br>    &#125;<br></code></pre></td></tr></table></figure><pre><code class="hljs">    int pageNo=WebUtils.parseInt(req.getParameter(&quot;pageNo&quot;),0);    pageNo+=1;</code></pre><p>让pageNo为最后一页的下一页（因为永远不会越界，前面有所设定）</p><p>然后重定向</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">resp.send<span class="hljs-constructor">Redirect(<span class="hljs-params">req</span>.<span class="hljs-params">getContextPath</span>()</span>+<span class="hljs-string">&quot;/manager/BookServlet?action=page&amp;pageNo=&quot;</span>+pageNo);<br></code></pre></td></tr></table></figure><p><strong>删除的影响</strong></p><p>book_manager.jsp</p><p>带着pageNo参数</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;td&gt;&lt;a class=<span class="hljs-string">&quot;deleteClass&quot;</span> href=<span class="hljs-string">&quot;manager/BookServlet?action=delete&amp;id=$&#123;book.id&#125;&amp;pageNo=$&#123;requestScope.page.pageNo&#125;&quot;</span>&gt;删除&lt;/a&gt;&lt;/td&gt;<br></code></pre></td></tr></table></figure><p>BookServlet中的delete方法</p><p>带着pageNo请求BookServlet的page方法，来显示删除之后的界面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">resp.sendRedirect(req.getContextPath() + <span class="hljs-string">&quot;/manager/BookServlet?action=page&amp;pageNo=&quot;</span>+req.getParameter(<span class="hljs-string">&quot;pageNo&quot;</span>));<br></code></pre></td></tr></table></figure><p><strong>修改的影响</strong></p><p>修改的影响和删除的影响相同</p><h3 id="前台分页的初步实现"><a href="#前台分页的初步实现" class="headerlink" title="前台分页的初步实现"></a>前台分页的初步实现</h3><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210080908482.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221008090816089"></p><p>所以先将index.jsp的内容复制到client下的index.jsp然后，web下的index.jsp只做一件事就是请求转发Servlet</p><p>注意这个<a href="jsp:forward">jsp:forward</a>和</jsp:forward>必须是在一行上，要不会报错</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;%--只负责请求转发--%&gt;<br>&lt;jsp:forward page=<span class="hljs-string">&quot;/client/ClientBookServlet?action=page&quot;</span>&gt;&lt;/jsp:forward&gt;<br></code></pre></td></tr></table></figure><p>然后是ClientBookServlet，请求转发到client下的index.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs jsp"><span class="hljs-keyword">package</span> com.atguigu.web;<br><br><span class="hljs-keyword">import</span> com.atguigu.pojo.Book;<br><span class="hljs-keyword">import</span> com.atguigu.pojo.Page;<br><span class="hljs-keyword">import</span> com.atguigu.service.BookService;<br><span class="hljs-keyword">import</span> com.atguigu.service.impl.BookServiceImpl;<br><span class="hljs-keyword">import</span> com.atguigu.utils.WebUtils;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClientBookServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseServlet</span>&#123;<br>    BookService bookService=<span class="hljs-keyword">new</span> <span class="hljs-title class_">BookServiceImpl</span>();<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">page</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//1。获取请求的参数，pageNo和pageSize</span><br>        <span class="hljs-comment">//用户没有点击第几页，就默认显示第一页，所以第二个参数是1</span><br>        System.out.println(<span class="hljs-string">&quot;经过了前台的Servlet程序&quot;</span>);<br>        <span class="hljs-type">int</span> pageNo= WebUtils.parseInt(req.getParameter(<span class="hljs-string">&quot;pageNo&quot;</span>),<span class="hljs-number">1</span>);<br>        <span class="hljs-type">int</span> pageSize=WebUtils.parseInt(req.getParameter(<span class="hljs-string">&quot;pageSize&quot;</span>), Page.PAGE_SIZE);<br>        <span class="hljs-comment">//2。调用BookService.page(pageNo,pageSize):Page对象</span><br>        Page&lt;Book&gt; page=bookService.page(pageNo,pageSize);<br><br>        <span class="hljs-comment">//3.保存Page对象到request域中</span><br>        req.setAttribute(<span class="hljs-string">&quot;page&quot;</span>,page);<br><br>        <span class="hljs-comment">//4.请求转发到pages/manager/book_manager.jsp</span><br>        req.getRequestDispatcher(<span class="hljs-string">&quot;/pages/client/index.jsp&quot;</span>).forward(req,resp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>client下的index.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ taglib prefix=<span class="hljs-string">&quot;c&quot;</span> uri=<span class="hljs-string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;title&gt;书城首页&lt;/title&gt;<br>    &lt;!--使用静态包含引入css样式jQuery和base标签--&gt;<br>    &lt;%@ include file=<span class="hljs-string">&quot;/pages/common/head.jsp&quot;</span>%&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br><br>&lt;div id=<span class="hljs-string">&quot;header&quot;</span>&gt;<br>    &lt;img class=<span class="hljs-string">&quot;logo_img&quot;</span> alt=<span class="hljs-string">&quot;&quot;</span> src=<span class="hljs-string">&quot;/img/logo.gif&quot;</span> &gt;<br>    &lt;span class=<span class="hljs-string">&quot;wel_word&quot;</span>&gt;网上书城&lt;/span&gt;<br>    &lt;div&gt;<br>        &lt;a href=<span class="hljs-string">&quot;pages/user/login.jsp&quot;</span>&gt;登录&lt;/a&gt; |<br>        &lt;a href=<span class="hljs-string">&quot;pages/user/regist.jsp&quot;</span>&gt;注册&lt;/a&gt; &amp;nbsp;&amp;nbsp;<br>        &lt;a href=<span class="hljs-string">&quot;pages/cart/cart.jsp&quot;</span>&gt;购物车&lt;/a&gt;<br>        &lt;a href=<span class="hljs-string">&quot;pages/manager/manager.jsp&quot;</span>&gt;后台管理&lt;/a&gt;<br>    &lt;/div&gt;<br>&lt;/div&gt;<br>&lt;div id=<span class="hljs-string">&quot;main&quot;</span>&gt;<br>    &lt;div id=<span class="hljs-string">&quot;book&quot;</span>&gt;<br>        &lt;div class=<span class="hljs-string">&quot;book_cond&quot;</span>&gt;<br>            &lt;form action=<span class="hljs-string">&quot;&quot;</span> method=<span class="hljs-string">&quot;get&quot;</span>&gt;<br>                价格：&lt;input id=<span class="hljs-string">&quot;min&quot;</span> type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;min&quot;</span> value=<span class="hljs-string">&quot;&quot;</span>&gt; 元 -<br>                &lt;input id=<span class="hljs-string">&quot;max&quot;</span> type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;max&quot;</span> value=<span class="hljs-string">&quot;&quot;</span>&gt; 元<br>                &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;查询&quot;</span> /&gt;<br>            &lt;/form&gt;<br>        &lt;/div&gt;<br>        &lt;div style=<span class="hljs-string">&quot;text-align: center&quot;</span>&gt;<br>            &lt;span&gt;您的购物车中有<span class="hljs-number">3</span>件商品&lt;/span&gt;<br>            &lt;div&gt;<br>                您刚刚将&lt;span style=<span class="hljs-string">&quot;color: red&quot;</span>&gt;时间简史&lt;/span&gt;加入到了购物车中<br>            &lt;/div&gt;<br>        &lt;/div&gt;<br>        &lt;c:forEach items=<span class="hljs-string">&quot;$&#123;requestScope.page.items&#125;&quot;</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;book&quot;</span>&gt;<br>        &lt;div class=<span class="hljs-string">&quot;b_list&quot;</span>&gt;<br>            &lt;div class=<span class="hljs-string">&quot;img_div&quot;</span>&gt;<br>                &lt;img class=<span class="hljs-string">&quot;book_img&quot;</span> alt=<span class="hljs-string">&quot;&quot;</span> src=<span class="hljs-string">&quot;$&#123;book.imgPath&#125;&quot;</span> /&gt;<br>            &lt;/div&gt;<br>            &lt;div class=<span class="hljs-string">&quot;book_info&quot;</span>&gt;<br>                &lt;div class=<span class="hljs-string">&quot;book_name&quot;</span>&gt;<br>                    &lt;span class=<span class="hljs-string">&quot;sp1&quot;</span>&gt;书名:&lt;/span&gt;<br>                    &lt;span class=<span class="hljs-string">&quot;sp2&quot;</span>&gt;$&#123;book.name&#125;&lt;/span&gt;<br>                &lt;/div&gt;<br>                &lt;div class=<span class="hljs-string">&quot;book_author&quot;</span>&gt;<br>                    &lt;span class=<span class="hljs-string">&quot;sp1&quot;</span>&gt;作者:&lt;/span&gt;<br>                    &lt;span class=<span class="hljs-string">&quot;sp2&quot;</span>&gt;$&#123;book.author&#125;&lt;/span&gt;<br>                &lt;/div&gt;<br>                &lt;div class=<span class="hljs-string">&quot;book_price&quot;</span>&gt;<br>                    &lt;span class=<span class="hljs-string">&quot;sp1&quot;</span>&gt;价格:&lt;/span&gt;<br>                    &lt;span class=<span class="hljs-string">&quot;sp2&quot;</span>&gt;$&#123;book.price&#125;&lt;/span&gt;<br>                &lt;/div&gt;<br>                &lt;div class=<span class="hljs-string">&quot;book_sales&quot;</span>&gt;<br>                    &lt;span class=<span class="hljs-string">&quot;sp1&quot;</span>&gt;销量:&lt;/span&gt;<br>                    &lt;span class=<span class="hljs-string">&quot;sp2&quot;</span>&gt;$&#123;book.sales&#125;&lt;/span&gt;<br>                &lt;/div&gt;<br>                &lt;div class=<span class="hljs-string">&quot;book_amount&quot;</span>&gt;<br>                    &lt;span class=<span class="hljs-string">&quot;sp1&quot;</span>&gt;库存:&lt;/span&gt;<br>                    &lt;span class=<span class="hljs-string">&quot;sp2&quot;</span>&gt;$&#123;book.stock&#125;&lt;/span&gt;<br>                &lt;/div&gt;<br>                &lt;div class=<span class="hljs-string">&quot;book_add&quot;</span>&gt;<br>                    &lt;button&gt;加入购物车&lt;/button&gt;<br>                &lt;/div&gt;<br>            &lt;/div&gt;<br>        &lt;/div&gt;<br>        &lt;/c:forEach&gt;<br><br><br><br><br><br>        &lt;div id=<span class="hljs-string">&quot;page_nav&quot;</span>&gt;<br>            &lt;%--大于首页才显示上一页按钮--%&gt;<br>            &lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;$&#123;requestScope.page.pageNo&gt;1&#125;&quot;</span>&gt;<br>                &lt;a href=<span class="hljs-string">&quot;client/ClientBookServlet?action=page&amp;pageNo=1&quot;</span>&gt;首页&lt;/a&gt;<br>                &lt;a href=<span class="hljs-string">&quot;client/ClientBookServlet?action=page&amp;pageNo=$&#123;requestScope.page.pageNo-1&#125;&quot;</span>&gt;上一页&lt;/a&gt;<br>            &lt;/c:<span class="hljs-keyword">if</span>&gt;<br><br><br><br><br>            &lt;%--页码输出的开始--%&gt;<br>            &lt;c:choose&gt;<br>                &lt;%--情况 <span class="hljs-number">1</span>：如果总页码小于等于 <span class="hljs-number">5</span> 的情况，页码的范围是：<span class="hljs-number">1</span>-总页码--%&gt;<br>                &lt;c:when test=<span class="hljs-string">&quot;$&#123; requestScope.page.pageTotal &lt;= 5 &#125;&quot;</span>&gt;<br>                    &lt;c:set <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;begin&quot;</span> value=<span class="hljs-string">&quot;1&quot;</span>/&gt;<br>                    &lt;c:set <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;end&quot;</span> value=<span class="hljs-string">&quot;$&#123;requestScope.page.pageTotal&#125;&quot;</span>/&gt;<br>                &lt;/c:when&gt;<br>                &lt;%--情况 <span class="hljs-number">2</span>：总页码大于 <span class="hljs-number">5</span> 的情况--%&gt;<br>                &lt;c:when test=<span class="hljs-string">&quot;$&#123;requestScope.page.pageTotal &gt; 5&#125;&quot;</span>&gt;<br>                    &lt;c:choose&gt;<br>                        &lt;%--小情况 <span class="hljs-number">1</span>：当前页码为前面 <span class="hljs-number">3</span> 个：<span class="hljs-number">1</span>，<span class="hljs-number">2</span>，<span class="hljs-number">3</span> 的情况，页码范围是：<span class="hljs-number">1</span>-<span class="hljs-number">5.</span>--%&gt;<br>                        &lt;c:when test=<span class="hljs-string">&quot;$&#123;requestScope.page.pageNo &lt;= 3&#125;&quot;</span>&gt;<br>                            &lt;%--记录begin和end--%&gt;<br>                            &lt;c:set <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;begin&quot;</span> value=<span class="hljs-string">&quot;1&quot;</span>/&gt;<br>                            &lt;c:set <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;end&quot;</span> value=<span class="hljs-string">&quot;5&quot;</span>/&gt;<br>                        &lt;/c:when&gt;<br>                        &lt;%--小情况 <span class="hljs-number">2</span>：当前页码为最后 <span class="hljs-number">3</span> 个，<span class="hljs-number">8</span>，<span class="hljs-number">9</span>，<span class="hljs-number">10</span>，页码范围是：总页码减 <span class="hljs-number">4</span> - 总页码--%&gt;<br>                        &lt;c:when test=<span class="hljs-string">&quot;$&#123;requestScope.page.pageNo &gt; requestScope.page.pageTotal-3&#125;&quot;</span>&gt;<br>                            &lt;%--记录begin和end--%&gt;<br>                            &lt;c:set <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;begin&quot;</span> value=<span class="hljs-string">&quot;$&#123;requestScope.page.pageTotal-4&#125;&quot;</span>/&gt;<br>                            &lt;c:set <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;end&quot;</span> value=<span class="hljs-string">&quot;$&#123;requestScope.page.pageTotal&#125;&quot;</span>/&gt;<br>                        &lt;/c:when&gt;<br>                        &lt;%--小情况 <span class="hljs-number">3</span>：<span class="hljs-number">4</span>，<span class="hljs-number">5</span>，<span class="hljs-number">6</span>，<span class="hljs-number">7</span>，页码范围是：当前页码减 <span class="hljs-number">2</span> - 当前页码加 <span class="hljs-number">2</span>--%&gt;<br>                        &lt;c:otherwise&gt;<br>                            &lt;c:set <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;begin&quot;</span> value=<span class="hljs-string">&quot;$&#123;requestScope.page.pageNo-2&#125;&quot;</span>/&gt;<br>                            &lt;c:set <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;end&quot;</span> value=<span class="hljs-string">&quot;$&#123;requestScope.page.pageNo+2&#125;&quot;</span>/&gt;<br>                        &lt;/c:otherwise&gt;<br>                    &lt;/c:choose&gt;<br>                &lt;/c:when&gt;<br>            &lt;/c:choose&gt;<br>            &lt;c:forEach begin=<span class="hljs-string">&quot;$&#123;begin&#125;&quot;</span> end=<span class="hljs-string">&quot;$&#123;end&#125;&quot;</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;i&quot;</span>&gt;<br>                &lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;$&#123;i == requestScope.page.pageNo&#125;&quot;</span>&gt;<br>                    【$&#123;i&#125;】<br>                &lt;/c:<span class="hljs-keyword">if</span>&gt;<br>                &lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;$&#123;i != requestScope.page.pageNo&#125;&quot;</span>&gt;<br>                    &lt;a href=<span class="hljs-string">&quot;client/ClientBookServlet?action=page&amp;pageNo=$&#123;i&#125;&quot;</span>&gt;$&#123;i&#125;&lt;/a&gt;<br>                &lt;/c:<span class="hljs-keyword">if</span>&gt;<br>            &lt;/c:forEach&gt;<br>            &lt;%--页码输出的结束--%&gt;<br><br><br><br>            &lt;%--如果已经是最后一页则不显示下一页和末页--%&gt;<br>            &lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;$&#123;requestScope.page.pageNo&lt;requestScope.page.pageTotal&#125;&quot;</span>&gt;<br>                &lt;a href=<span class="hljs-string">&quot;client/ClientBookServlet?action=page&amp;pageNo=$&#123;requestScope.page.pageNo+1&#125;&quot;</span>&gt;下一页&lt;/a&gt;<br>                &lt;a href=<span class="hljs-string">&quot;client/ClientBookServlet?action=page&amp;pageNo=$&#123;requestScope.page.pageTotal&#125;&quot;</span>&gt;末页&lt;/a&gt;<br>            &lt;/c:<span class="hljs-keyword">if</span>&gt;<br>            共$&#123;requestScope.page.pageTotal&#125;页，$&#123;requestScope.page.pageTotalCount&#125;条记录 到第&lt;input value=<span class="hljs-string">&quot;$&#123;requestScope.page.pageNo&#125;&quot;</span> name=<span class="hljs-string">&quot;pn&quot;</span> id=<span class="hljs-string">&quot;pn_input&quot;</span>/&gt;页<br>            &lt;input type=<span class="hljs-string">&quot;button&quot;</span> value=<span class="hljs-string">&quot;确定&quot;</span>&gt;<br>            共$&#123;requestScope.page.pageTotal&#125;页，$&#123;requestScope.page.pageTotalCount&#125;条记录 到第&lt;input value=<span class="hljs-string">&quot;$&#123;requestScope.page.pageNo&#125;&quot;</span> name=<span class="hljs-string">&quot;pn&quot;</span> id=<span class="hljs-string">&quot;pn_input&quot;</span>/&gt;页<br>            &lt;input type=<span class="hljs-string">&quot;button&quot;</span> id=<span class="hljs-string">&quot;searchPageBtn&quot;</span> value=<span class="hljs-string">&quot;确定&quot;</span>&gt;<br>            &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>                $(function()&#123;<br>                    $(<span class="hljs-string">&quot;#searchPageBtn&quot;</span>).click(function()&#123;<br><br>                        <span class="hljs-keyword">var</span> pageNo=$(<span class="hljs-string">&quot;#pn_input&quot;</span>).val();<br>                        <span class="hljs-comment">//javascript语言中提供了一个location地址栏</span><br>                        <span class="hljs-comment">//他有一个属性叫href，它可以获取浏览器地址栏中的地址</span><br>                        <span class="hljs-comment">//href属性可读可写</span><br>                        location.href=<span class="hljs-string">&quot;$&#123;pageScope.basePath&#125;client/ClientBookServlet?action=page&amp;pageNo=&quot;</span>+pageNo;<br>                    &#125;);<br><br>                &#125;);<br><br><br>            &lt;/script&gt;<br>        &lt;/div&gt;<br><br><br><br><br><br>&lt;/div&gt;<br><br>&lt;!--静态包含页脚的代码--&gt;<br>&lt;%<span class="hljs-meta">@include</span> file=<span class="hljs-string">&quot;/pages/common/footer.jsp&quot;</span> %&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>在页面遍历内容</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">c:forEach</span> <span class="hljs-attr">items</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;requestScope.page.items&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> <span class="hljs-attr">var</span>=<span class="hljs-string">&quot;book&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;b_list&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;img_div&quot;</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;book_img&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;book.imgPath&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> /&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;book_info&quot;</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;book_name&quot;</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sp1&quot;</span>&gt;</span>书名:<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sp2&quot;</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;book.name&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;book_author&quot;</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sp1&quot;</span>&gt;</span>作者:<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sp2&quot;</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;book.author&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;book_price&quot;</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sp1&quot;</span>&gt;</span>价格:<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sp2&quot;</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;book.price&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;book_sales&quot;</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sp1&quot;</span>&gt;</span>销量:<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sp2&quot;</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;book.sales&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;book_amount&quot;</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sp1&quot;</span>&gt;</span>库存:<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sp2&quot;</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;book.stock&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;book_add&quot;</span>&gt;</span></span><br><span class="language-xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>加入购物车<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">c:forEach</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>同时把后台的那个分页条复制到这个文件中，然后还要改一下路径</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nsis">client/ClientBookServlet?action=<span class="hljs-keyword">page</span>&amp;pageNo=<span class="hljs-variable">$&#123;i&#125;</span><br></code></pre></td></tr></table></figure><h3 id="分页条抽取"><a href="#分页条抽取" class="headerlink" title="分页条抽取"></a>分页条抽取</h3><p>在Page中直接添加一个url属性，代表分页条的跳转</p><p>然后在client的index.jsp中做一个替换</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;requestScope.page.url&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&amp;pageNo=$</span></span></span><span class="hljs-template-variable">&#123;requestScope.page.pageNo+1&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>下一页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>BookServlet的page方法中加这是后台的分页条跳转</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">page.setUrl(<span class="hljs-string">&quot;manager/BookServlet?action=page&quot;</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>ClientBookServlet中page加  这是首页的分页条跳转</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">page.setUrl(<span class="hljs-string">&quot;client/ClientBookServlet?action=page&quot;</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>这种改变之后，首页和后台的分页条都差不多可以抽取到page_nv.jsp</p><p>然后静态引入</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">&lt;%@include <span class="hljs-keyword">file</span>=<span class="hljs-string">&quot;/pages/common/page_nav.jsp&quot;</span>%&gt;<br></code></pre></td></tr></table></figure><h3 id="价格区间搜索"><a href="#价格区间搜索" class="headerlink" title="价格区间搜索"></a>价格区间搜索</h3><p>这个操作和前面的设置分页类似s</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210081051708.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221008105121268"></p><p>先对client中的index.jsp的表单进行了修改</p><p>改了提交地址，和value设置为pageByPrice</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;form action=<span class="hljs-string">&quot;client/ClientBookServlet&quot;</span> method=<span class="hljs-string">&quot;get&quot;</span>&gt;<br>    &lt;input type=<span class="hljs-string">&quot;hidden&quot;</span> name=<span class="hljs-string">&quot;action&quot;</span> value=<span class="hljs-string">&quot;pageByPrice&quot;</span>/&gt;<br>    价格：&lt;input id=<span class="hljs-string">&quot;min&quot;</span> type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;min&quot;</span> value=<span class="hljs-string">&quot;&quot;</span>&gt; 元 -<br>    &lt;input id=<span class="hljs-string">&quot;max&quot;</span> type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;max&quot;</span> value=<span class="hljs-string">&quot;&quot;</span>&gt; 元<br>    &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;查询&quot;</span> /&gt;<br>&lt;/form&gt;<br></code></pre></td></tr></table></figure><p>在ClientBookServlet中创建pageByPrice方法，用了bookService的pageByPrice方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pageByPrice</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    <span class="hljs-comment">//1。获取请求的参数，pageNo和pageSize</span><br>    <span class="hljs-comment">//用户没有点击第几页，就默认显示第一页，所以第二个参数是1</span><br>    System.out.println(<span class="hljs-number">100</span>);<br>    <span class="hljs-type">int</span> pageNo= WebUtils.parseInt(req.getParameter(<span class="hljs-string">&quot;pageNo&quot;</span>),<span class="hljs-number">1</span>);<br>    <span class="hljs-type">int</span> pageSize=WebUtils.parseInt(req.getParameter(<span class="hljs-string">&quot;pageSize&quot;</span>), Page.PAGE_SIZE);<br><br>    <span class="hljs-comment">//获取最小价格min和最大价格max两个参数</span><br>    <span class="hljs-type">int</span> min=WebUtils.parseInt(req.getParameter(<span class="hljs-string">&quot;min&quot;</span>),<span class="hljs-number">1</span>);<br>    <span class="hljs-type">int</span> max=WebUtils.parseInt(req.getParameter(<span class="hljs-string">&quot;max&quot;</span>),<span class="hljs-number">100</span>);<br><br>    Page&lt;Book&gt; page=bookService.pageByPrice(pageNo,pageSize,min,max);<br>    req.setAttribute(<span class="hljs-string">&quot;page&quot;</span>,page);<br>    page.setUrl(<span class="hljs-string">&quot;client/ClientBookServlet?action=pageByPrice&quot;</span>);<br>    req.getRequestDispatcher(<span class="hljs-string">&quot;/pages/client/index.jsp&quot;</span>).forward(req,resp);<br>&#125;<br></code></pre></td></tr></table></figure><p>BookService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Page&lt;Book&gt; <span class="hljs-title function_">pageByPrice</span><span class="hljs-params">(<span class="hljs-type">int</span> pageNo, <span class="hljs-type">int</span> pageSize, <span class="hljs-type">int</span> min, <span class="hljs-type">int</span> max)</span> &#123;<br>    Page&lt;Book&gt; page=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;();<br><br>    <span class="hljs-comment">//设置每页显示的数量</span><br>    page.setPageSize(pageSize);<br>    <span class="hljs-comment">//求总记录数</span><br>    Integer pageTotalCount=bookDao.queryForPageTotalCountByPrice(min,max);<br>    <span class="hljs-comment">//设置总记录数</span><br>    page.setPageTotalCount(pageTotalCount);<br>    <span class="hljs-comment">//求总页码</span><br>    Integer pageTotal=pageTotalCount/pageSize;<br>    <span class="hljs-keyword">if</span>(pageTotalCount%pageSize&gt;<span class="hljs-number">0</span>)&#123;<br>        pageTotal+=<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-comment">//设置总页码</span><br>    page.setPageTotal(pageTotal);<br>    <span class="hljs-comment">//设置page对象的当前页</span><br>    page.setPageNo(pageNo);<br>    <span class="hljs-comment">//求当前页面开始的索引</span><br>    <span class="hljs-type">int</span> begin=(page.getPageNo()-<span class="hljs-number">1</span>)*pageSize;<br>    <span class="hljs-comment">//求当前页数据</span><br>    List&lt;Book&gt; items=bookDao.queryForPageItemsByPrice(begin,pageSize,min,max);<br>    <span class="hljs-comment">//设置当前页数据</span><br>    page.setItems(items);<br>    <span class="hljs-keyword">return</span> page;<br>&#125;<br></code></pre></td></tr></table></figure><p>用了BookDao中的queryForPageItemsByPrice和queryForPageTotalCountByPrice</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">queryForPageTotalCountByPrice</span><span class="hljs-params">(<span class="hljs-type">int</span> min, <span class="hljs-type">int</span> max)</span> &#123;<br>    String sql=<span class="hljs-string">&quot;select count(*) from t_book where price between ? and ?&quot;</span>;<br>    Number count=(Number)queryForSingleValue(sql,min,max);<br>    <span class="hljs-keyword">return</span> count.intValue();<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;Book&gt; <span class="hljs-title function_">queryForPageItemsByPrice</span><span class="hljs-params">(<span class="hljs-type">int</span> begin, <span class="hljs-type">int</span> pageSize, <span class="hljs-type">int</span> min, <span class="hljs-type">int</span> max)</span> &#123;<br>    String sql=<span class="hljs-string">&quot;select id,name,author,price,sales,stock,img_path imgPath from t_book where price between ? and ? limit ?,? &quot;</span>;<br>    <span class="hljs-keyword">return</span> queryForList(Book.class,sql,min,max,begin,pageSize);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="搜索完成后显示区间范围"><a href="#搜索完成后显示区间范围" class="headerlink" title="搜索完成后显示区间范围"></a>搜索完成后显示区间范围</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsp">价格：&lt;input id=<span class="hljs-string">&quot;min&quot;</span> type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;min&quot;</span> value=<span class="hljs-string">&quot;$&#123;param.min&#125;&quot;</span>&gt; 元 -<br>&lt;input id=<span class="hljs-string">&quot;max&quot;</span> type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;max&quot;</span> value=<span class="hljs-string">&quot;$&#123;param.max&#125;&quot;</span>&gt; 元<br></code></pre></td></tr></table></figure><p>点了提交之后一直是一次请求，因为中间用的是请求转发，所以提交的min和max参数可以通过param获取</p><p>实现每个页面都能显示搜索区间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">StringBuilder sb=<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;client/ClientBookServlet?action=pageByPrice&quot;</span>);<br><span class="hljs-keyword">if</span>(req.getParameter(<span class="hljs-string">&quot;min&quot;</span>)!=<span class="hljs-literal">null</span>)&#123;<br>    sb.append(<span class="hljs-string">&quot;&amp;min=&quot;</span>).append(req.getParameter(<span class="hljs-string">&quot;min&quot;</span>));<br>&#125;<br><span class="hljs-keyword">if</span>(req.getParameter(<span class="hljs-string">&quot;max&quot;</span>)!=<span class="hljs-literal">null</span>)&#123;<br>    sb.append(<span class="hljs-string">&quot;&amp;max=&quot;</span>).append(req.getParameter(<span class="hljs-string">&quot;max&quot;</span>));<br>&#125;<br>page.setUrl(sb.toString());<br></code></pre></td></tr></table></figure><h1 id="Cookie-amp-Session"><a href="#Cookie-amp-Session" class="headerlink" title="Cookie&amp;Session"></a>Cookie&amp;Session</h1><p>什么是Cookie</p><p>1、Cookie 翻译过来是饼干的意思。 </p><p>2、Cookie 是服务器通知客户端保存键值对的一种技术。 </p><p>3、客户端有了 Cookie 后，每次请求都发送给服务器。</p><p> 4、每个 Cookie 大小不能超过4kb</p><h2 id="cookie的创建"><a href="#cookie的创建" class="headerlink" title="cookie的创建"></a>cookie的创建</h2><p><strong>创建是服务器创建cookie发送给客户端</strong></p><p>给cookie.html加上base标签</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;base <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;http://localhost:8079/cookie/&quot;</span>&gt;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;CookieServlet?action=createCookie&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;target&quot;</span>&gt;</span>Cookie的创建<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br></code></pre></td></tr></table></figure><p>给cookie创建的连接修改</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210081416473.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221008141614363"></p><p>CookieServlet程序</p><p>可以一次性创建多个cookie</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.Cookie;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CookieServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseServlet</span>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createCookie</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//1.创建cookie对象</span><br>        Cookie cookie=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;key1&quot;</span>,<span class="hljs-string">&quot;value1&quot;</span>);<br>        <span class="hljs-comment">//2.通知客户端保存cookie</span><br>        resp.addCookie(cookie);<br><br>        <span class="hljs-comment">//1.创建cookie对象</span><br>        Cookie cookie1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;key2&quot;</span>,<span class="hljs-string">&quot;value2&quot;</span>);<br>        <span class="hljs-comment">//2.通知客户端保存cookie</span><br>        resp.addCookie(cookie1);<br><br>        resp.getWriter().write(<span class="hljs-string">&quot;Cookie创建成功&quot;</span>);<br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>BaseServlet</p><p>在BaseServlet的最开头加上这句代码能避免响应的中文乱码</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>解决post请求中文乱码问题<br><span class="hljs-regexp">//</span>一定要在获取请求参数之前调用才有效<br><span class="hljs-regexp">//</span>req.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br><span class="hljs-regexp">//</span>解决响应的中文乱码问题<br>resp.setContentType(<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>);<br></code></pre></td></tr></table></figure><p>可以在下面图片中的位置看到cookie</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210081425879.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221008142554199"></p><h2 id="服务器获取Cookie"><a href="#服务器获取Cookie" class="headerlink" title="服务器获取Cookie"></a>服务器获取Cookie</h2><p>服务器获取客户端的 Cookie 只需要一行代码：req.getCookies():Cookie[]</p><p>cookie.html</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;CookieServlet?action=getCookie&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;target&quot;</span>&gt;</span>Cookie的获取<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br></code></pre></td></tr></table></figure><p>查看请求头中的cookie</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210081429390.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221008142922022"></p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210081431879.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221008143106444"></p><p>获取全部cookie的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getCookie</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br><br>        Cookie[] cookies = req.getCookies();<br><br>        <span class="hljs-keyword">for</span> (Cookie cookie : cookies) &#123;<br>            <span class="hljs-comment">//getName方法返回cookie的名称</span><br>            resp.getWriter().write(<span class="hljs-string">&quot;Cookie[&quot;</span>+cookie.getName()+<span class="hljs-string">&quot;=&quot;</span>+cookie.getValue()+<span class="hljs-string">&quot;]&lt;br/&gt;&quot;</span>);<br>        &#125;<br><br>Cookie iWantCookie= CookieUtils.findCookie(<span class="hljs-string">&quot;key1&quot;</span>,cookies);<br>        <span class="hljs-keyword">if</span>(iWantCookie!=<span class="hljs-literal">null</span>)&#123;<br>            resp.getWriter().write(<span class="hljs-string">&quot;找到了需要的cookie&quot;</span>);<br>        &#125;<br><br>       <span class="hljs-comment">// for (Cookie cookie : cookies) &#123;</span><br>            <span class="hljs-comment">//getName方法返回cookie的名称</span><br>           <span class="hljs-comment">// resp.getWriter().write(&quot;Cookie[&quot;+cookie.getName()+&quot;=&quot;+cookie.getValue()+&quot;]&lt;br/&gt;&quot;);</span><br>           <span class="hljs-comment">// if(&quot;key1&quot;.equals(cookie.getName()))&#123;</span><br>               <span class="hljs-comment">// iWantCookie=cookie;</span><br>              <span class="hljs-comment">//  break;</span><br>           <span class="hljs-comment">// &#125;</span><br>        <span class="hljs-comment">//&#125;</span><br>        <span class="hljs-comment">//如果不等于null,说明附过值，也就是找到了需要的cookie</span><br>       <span class="hljs-comment">// if(iWantCookie!=null)&#123;</span><br>          <span class="hljs-comment">//  resp.getWriter().write(&quot;找到了需要的cookie&quot;);</span><br>       <span class="hljs-comment">//&#125;</span><br><br>    &#125;<br></code></pre></td></tr></table></figure><p>封装的获取指定cookie的方法</p><p>传入要找到的cookie的名字，和全部的cookie就可以</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.util;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.Cookie;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">查找指定名称的cookie对象</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CookieUtils</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Cookie <span class="hljs-title function_">findCookie</span><span class="hljs-params">(String name,Cookie[] cookies)</span>&#123;<br>        <span class="hljs-keyword">if</span>(name==<span class="hljs-literal">null</span>||cookies==<span class="hljs-literal">null</span>||cookies.length==<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (Cookie cookie : cookies) &#123;<br>            <span class="hljs-keyword">if</span>(name.equals(cookie.getName()))&#123;<br>                <span class="hljs-keyword">return</span> cookie;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Cookie值的修改"><a href="#Cookie值的修改" class="headerlink" title="Cookie值的修改"></a>Cookie值的修改</h2><p>方案一：1、先创建一个要修改的同名（指的就是 key）的 Cookie 对象</p><p>​                2、在构造器，同时赋于新的 Cookie 值。</p><p>​                3、调用 response.addCookie( Cookie );</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">protected void update<span class="hljs-constructor">Cookie(HttpServletRequest <span class="hljs-params">req</span>, HttpServletResponse <span class="hljs-params">resp</span>)</span> throws ServletException, IOException &#123;<br>   <span class="hljs-comment">// 1、先创建一个要修改的同名（指的就是 key）的 Cookie 对象</span><br>           <span class="hljs-comment">//2、在构造器，同时赋于新的 Cookie 值。</span><br>    Cookie cookie=<span class="hljs-keyword">new</span> <span class="hljs-constructor">Cookie(<span class="hljs-string">&quot;key1&quot;</span>,<span class="hljs-string">&quot;newvalue1&quot;</span>)</span>;<br>       <span class="hljs-comment">// 3、调用 response.addCookie( Cookie );</span><br>        resp.add<span class="hljs-constructor">Cookie(<span class="hljs-params">cookie</span>)</span>;<br>        resp.get<span class="hljs-constructor">Writer()</span>.write(<span class="hljs-string">&quot;key1的值已经修改好了&quot;</span>);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>方案二： 1、先查找到需要修改的 Cookie 对象 </p><p>​                2、调用 setValue()方法赋于新的 Cookie 值。 </p><p>​                3、调用 response.addCookie()通知客户端保存修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateCookie</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    <span class="hljs-comment">//1、先查找到需要修改的 Cookie 对象</span><br>    Cookie cookie=CookieUtils.findCookie(<span class="hljs-string">&quot;key1&quot;</span>,req.getCookies());<br>          <span class="hljs-comment">//2、调用 setValue()方法赋于新的 Cookie 值。</span><br>          cookie.setValue(<span class="hljs-string">&quot;new1Value&quot;</span>);<br>         <span class="hljs-comment">//3、调用 response.addCookie()通知客户端保存修改</span><br>          resp.addCookie(cookie);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>这个value的值是不支持中文的</strong></p><h2 id="各种浏览器查看cookie"><a href="#各种浏览器查看cookie" class="headerlink" title="各种浏览器查看cookie"></a>各种浏览器查看cookie</h2><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210081457131.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221008145752001"></p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210081458089.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221008145809906"></p><h2 id="Cookie生命周期"><a href="#Cookie生命周期" class="headerlink" title="Cookie生命周期"></a>Cookie生命周期</h2><p>Cookie 的生命控制指的是如何管理 Cookie 什么时候被销毁（删除）</p><p>setMaxAge() </p><p>正数，表示在指定的秒数后过期 </p><p>负数，表示浏览器一关，Cookie 就会被删除（默认值是-1） </p><p>零，表示马上删除 Cooki</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 默认级别的cookie会话，设置为-1是浏览器关闭才消失</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> req</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> resp</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> ServletException</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">defaultLife</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    Cookie cookie=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;defaultLife&quot;</span>,<span class="hljs-string">&quot;defaultLife&quot;</span>);<br>    cookie.setMaxAge(-<span class="hljs-number">1</span>);<span class="hljs-comment">//设置存活时间</span><br>    resp.addCookie(cookie);<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">立即删除</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteNow</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br><span class="hljs-comment">//先找到你要删除的cookie对象</span><br>    Cookie cookie=CookieUtils.findCookie(<span class="hljs-string">&quot;key1&quot;</span>,req.getCookies());<br><span class="hljs-comment">//调用setMaxAge(0);</span><br>    <span class="hljs-keyword">if</span>(cookie!=<span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-comment">//马上删除</span><br>        cookie.setMaxAge(<span class="hljs-number">0</span>);<br><br>    &#125;<br>    <span class="hljs-comment">//response.addCookie(cookie);</span><br>    resp.addCookie(cookie);<br>    resp.getWriter().write(<span class="hljs-string">&quot;key1的cookie已经被删除&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">指定cookie再存货一段时间</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">life3600</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    Cookie cookie=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;life3600&quot;</span>,<span class="hljs-string">&quot;life3600&quot;</span>);<br>    cookie.setMaxAge(<span class="hljs-number">60</span>*<span class="hljs-number">60</span>);<br>    resp.addCookie(cookie);<br>    resp.getWriter().write(<span class="hljs-string">&quot;已经创建了一个存货一小时的cookie&quot;</span>);<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Cookie的Path设置"><a href="#Cookie的Path设置" class="headerlink" title="Cookie的Path设置"></a>Cookie的Path设置</h2><p>Cookie 的 path 属性可以有效的过滤哪些 Cookie 可以发送给服务器。哪些不发。</p><p>path 属性是通过请求的地址来进行有效的过滤</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210081522915.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221008152207806"></p><p>只要能匹配cookie路径的请求地址都是可以发送的，就是cookie路径是请求地址的子串</p><p>·</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">/*</span><br><span class="hljs-comment">带路径的cookie的测试</span><br><span class="hljs-comment"> */</span><br>protected void test<span class="hljs-constructor">Path(HttpServletRequest <span class="hljs-params">req</span>, HttpServletResponse <span class="hljs-params">resp</span>)</span> throws ServletException, IOException &#123;<br>      Cookie cookie=<span class="hljs-keyword">new</span> <span class="hljs-constructor">Cookie(<span class="hljs-string">&quot;path&quot;</span>,<span class="hljs-string">&quot;path&quot;</span>)</span>;<br>      <span class="hljs-comment">//getContextPath()==&gt;&gt;得到工程路径</span><br>      cookie.set<span class="hljs-constructor">Path(<span class="hljs-params">req</span>.<span class="hljs-params">getContextPath</span>()</span>+<span class="hljs-string">&quot;/abc&quot;</span>);<br>      <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(req.get<span class="hljs-constructor">ContextPath()</span>+<span class="hljs-string">&quot;/abc&quot;</span>);<br>      resp.add<span class="hljs-constructor">Cookie(<span class="hljs-params">cookie</span>)</span>;<br>      resp.get<span class="hljs-constructor">Writer()</span>.write(<span class="hljs-string">&quot;创建了一个带有Path路径的cookie&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>访问它是不会给你pathcookie的</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8079</span><span class="hljs-regexp">/cookie/</span>cookie.html<br></code></pre></td></tr></table></figure><p>访问它可以给你cookie</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8079</span><span class="hljs-regexp">/cookie/</span>abc/cookie.html<br></code></pre></td></tr></table></figure><h2 id="免输入用户名登录"><a href="#免输入用户名登录" class="headerlink" title="免输入用户名登录"></a>免输入用户名登录</h2><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210081607971.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221008160750840"></p><p>login.jsp</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&lt;%<span class="hljs-comment">--</span><br>  Created <span class="hljs-keyword">by</span> IntelliJ IDEA.<br>  <span class="hljs-keyword">User</span>: #赵梓皓&amp;<br>  <span class="hljs-type">Date</span>: <span class="hljs-number">2022</span>/<span class="hljs-number">10</span>/<span class="hljs-number">8</span><br>  <span class="hljs-type">Time</span>: <span class="hljs-number">16</span>:<span class="hljs-number">08</span><br>  <span class="hljs-keyword">To</span> change this <span class="hljs-keyword">template</span> use File | Settings | File Templates.<br><span class="hljs-comment">--%&gt;</span><br>&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; <span class="hljs-keyword">language</span>=&quot;java&quot; %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;form action=&quot;http://localhost:8079/cookie/LoginServlet&quot; <span class="hljs-keyword">method</span>=&quot;get&quot;&gt;<br>  用户名:  &lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;text&quot; <span class="hljs-type">name</span>=&quot;username&quot; <span class="hljs-keyword">value</span>=&quot;$&#123;cookie.username.value&#125;&quot;&gt;&lt;br&gt;<br>    密码:  &lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;password&quot; <span class="hljs-type">name</span>=&quot;password&quot;&gt;&lt;br&gt;<br>          &lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;submit&quot; <span class="hljs-keyword">value</span>=&quot;登录&quot;&gt;<br>&lt;/form&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">获取cookie的名称:$</span><span class="hljs-template-variable">&#123;cookie.JSESSIONID.name&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br><span class="language-xml">获取Cookie的值：$</span><span class="hljs-template-variable">&#123;cookie.JSESSIONID.value&#125;</span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>JESSIONID是一个cookie的名字</p><p>LoginServlet</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">package</span> com.atguigu.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.<span class="hljs-type">ServletException</span>;<br><span class="hljs-keyword">import</span> javax.servlet.http.<span class="hljs-type">Cookie</span>;<br><span class="hljs-keyword">import</span> javax.servlet.http.<span class="hljs-type">HttpServlet</span>;<br><span class="hljs-keyword">import</span> javax.servlet.http.<span class="hljs-type">HttpServletRequest</span>;<br><span class="hljs-keyword">import</span> javax.servlet.http.<span class="hljs-type">HttpServletResponse</span>;<br><span class="hljs-keyword">import</span> java.io.<span class="hljs-type">IOException</span>;<br><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> void doGet(<span class="hljs-type">HttpServletRequest</span> req, <span class="hljs-type">HttpServletResponse</span> resp) <span class="hljs-keyword">throws</span> <span class="hljs-type">ServletException</span>, <span class="hljs-type">IOException</span> &#123;<br>        <span class="hljs-type">String</span> username=req.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>        <span class="hljs-type">String</span> password=req.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;zzh&quot;</span>.equals(username)&amp;&amp;<span class="hljs-string">&quot;123456&quot;</span>.equals(password))&#123;<br>            <span class="hljs-comment">//登陆成功</span><br>            <span class="hljs-type">Cookie</span> cookie=<span class="hljs-keyword">new</span> <span class="hljs-type">Cookie</span>(<span class="hljs-string">&quot;username&quot;</span>,username);<br>            cookie.setMaxAge(<span class="hljs-number">60</span>*<span class="hljs-number">60</span>*<span class="hljs-number">24</span>*<span class="hljs-number">7</span>);<br>            resp.addCookie(cookie);<br>            <span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;登录成功&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>             <span class="hljs-comment">//登陆失败</span><br>            <span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;登陆失败&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>第一次登陆成功之后</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210081624379.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221008162433707"></p><p>服务器发送了一个响应头中有cookie的值，cookie中保存了username</p><p>但是此时浏览器的cookie中还没有zzh&#x3D;username</p><p>第二次发起请求的时候   用户名上就有用户名</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210081625152.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221008162540520"></p><p>第二次请求的时候</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210081626087.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221008162609091"></p><p>请求头中就有cookie为username&#x3D;zzh，所以这时就是浏览器有cookie请求服务器时就会带着cookie一起</p><h2 id="Session的创建"><a href="#Session的创建" class="headerlink" title="Session的创建"></a>Session的创建</h2><p>什么是 Session 会话?</p><p>1、Session 就一个接口（HttpSession）。</p><p> 2、Session 就是会话。它是用来维护一个客户端和服务器之间关联的一种技术。 </p><p>3、<strong>每个客户端都有自己的一个 Session 会话。</strong> </p><p>4、<strong>Session 会话中，我们经常用来保存用户登录之后的信息。</strong></p><p><strong>Session是保存在服务器上</strong></p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210081640351.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221008164027353"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SessionServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseServlet</span>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createorGetSession</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//创建和获取Session会话对象</span><br>        HttpSession session=req.getSession();<br>        <span class="hljs-comment">//判断当前session会话，是否是新创建出来的</span><br>        <span class="hljs-type">boolean</span> isNew=session.isNew();<br>        <span class="hljs-comment">//获取Session会话的唯一标识</span><br>        String id=session.getId();<br><br>        resp.getWriter().write(<span class="hljs-string">&quot;得到的Session的id是&quot;</span>+id+<span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>);<br>        resp.getWriter().write(<span class="hljs-string">&quot;这个Session是否是新创建的&quot;</span>+isNew+<span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;li&gt;&lt;a href=<span class="hljs-string">&quot;http://localhost:8079/cookie/SessionServlet?action=createorGetSession&quot;</span> target=<span class="hljs-string">&quot;target&quot;</span>&gt;Session的创建和获取（id号、是否为新创建）&lt;/a&gt;&lt;/li&gt;<br></code></pre></td></tr></table></figure><h2 id="Session域中数据的存储"><a href="#Session域中数据的存储" class="headerlink" title="Session域中数据的存储"></a>Session域中数据的存储</h2><p>在SessionServlet中增加的方法</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">/*</span><br><span class="hljs-comment">往session域中存储数据</span><br><span class="hljs-comment"> */</span><br>protected void set<span class="hljs-constructor">Attribute(HttpServletRequest <span class="hljs-params">req</span>, HttpServletResponse <span class="hljs-params">resp</span>)</span> throws ServletException, IOException &#123;<br>    req.get<span class="hljs-constructor">Session()</span>.set<span class="hljs-constructor">Attribute(<span class="hljs-string">&quot;key1&quot;</span>,<span class="hljs-string">&quot;value1&quot;</span>)</span>;<br>    resp.get<span class="hljs-constructor">Writer()</span>.write(<span class="hljs-string">&quot;已经往session中保存了数据&quot;</span>);<br><br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">从session域中获取数据</span><br><span class="hljs-comment"> */</span><br>protected void get<span class="hljs-constructor">Attribute(HttpServletRequest <span class="hljs-params">req</span>, HttpServletResponse <span class="hljs-params">resp</span>)</span> throws ServletException, IOException &#123;<br>    Object attribute=req.get<span class="hljs-constructor">Session()</span>.get<span class="hljs-constructor">Attribute(<span class="hljs-string">&quot;key1&quot;</span>)</span>;<br>    resp.get<span class="hljs-constructor">Writer()</span>.write(<span class="hljs-string">&quot;从session域中获取的key1的值是&quot;</span>+attribute);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Session的生命周期的控制"><a href="#Session的生命周期的控制" class="headerlink" title="Session的生命周期的控制"></a>Session的生命周期的控制</h2><p>public void setMaxInactiveInterval(int interval) 设置 Session 的超时时间（以秒为单位），超过指定的时长，Session 就会被销毁。 </p><p><strong>session是基于cookie的，关闭浏览器cookie没了，session自然也就消失了</strong></p><p>停服务器之后session也会没</p><p>值为正数的时候，设定 Session 的超时时长。 </p><p>负数表示永不超时（极少使用）</p><p>public int getMaxInactiveInterval()获取 Session 的超时时间</p><p>public void invalidate() 让当前 Session 会话马上超时无效。</p><p>Session 默认的超时时长是多少！ </p><p>Session 默认的超时时间长为 30 分钟。</p><p>因为在 Tomcat 服务器的配置文件 web.xml中默认有以下的配置，它就表示配置了当前 Tomcat 服务器下所有的 Session 超时配置默认时长为：30 分钟</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml">    <span class="hljs-tag">&lt;<span class="hljs-name">session-config</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">session-timeout</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">session-timeout</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">session-config</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210081723894.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221008172357583"></p><p>如果你想只修改个别 Session 的超时时长。就可以使用上面的 API。setMaxInactiveInterval(int interval)来进行单独的设 置。</p><p>session.setMaxInactiveInterval(int interval)单独设置超时时长。</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210081736612.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221008173643421"></p><p>当你间隔一秒二秒访问的时候这个timeout又会被重置为3</p><p>在SessionServlet中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    获取Session的默认存在时长</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">defaultLife</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//获取了Session的默认的超时时长</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">maxInactiveInterval</span> <span class="hljs-operator">=</span> req.getSession().getMaxInactiveInterval();<br><br>        <span class="hljs-comment">//</span><br>        resp.getWriter().write(<span class="hljs-string">&quot;Session的默认超时时长为&quot;</span>+maxInactiveInterval+<span class="hljs-string">&quot;秒&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    规定Session3秒之后超时</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">life3</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//先获取session</span><br>        HttpSession session=req.getSession();<br>        <span class="hljs-comment">//设置当前session3秒之后消失</span><br>        session.setMaxInactiveInterval(<span class="hljs-number">3</span>);<br>        resp.getWriter().write(<span class="hljs-string">&quot;当前Session已经被设置3秒之后超时&quot;</span>);<br><br>    &#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">让当前Session立即超时</span><br><span class="hljs-comment"> */</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteNow</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//先获取session</span><br>        HttpSession session=req.getSession();<br>        <span class="hljs-comment">//设置当前session3秒之后消失</span><br>        session.invalidate();<br>        resp.getWriter().write(<span class="hljs-string">&quot;当前Session已经被设置为无效&quot;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><p>在Session.html中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://localhost:8079/cookie/SessionServlet?action=defaultLife&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;target&quot;</span>&gt;</span>Session的默认超时及配置<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://localhost:8079/cookie/SessionServlet?action=life3&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;target&quot;</span>&gt;</span>Session3秒超时销毁<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://localhost:8079/cookie/SessionServlet?action=deleteNow&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;target&quot;</span>&gt;</span>Session马上销毁<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="浏览器合Session之间关联的内幕"><a href="#浏览器合Session之间关联的内幕" class="headerlink" title="浏览器合Session之间关联的内幕"></a>浏览器合Session之间关联的内幕</h2><p>Session 技术，底层其实是基于 Cookie 技术来实现的。</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210090841083.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221009084103182"></p><h1 id="书城项目第六阶段"><a href="#书城项目第六阶段" class="headerlink" title="书城项目第六阶段"></a>书城项目第六阶段</h1><h2 id="显示登陆的用户名"><a href="#显示登陆的用户名" class="headerlink" title="显示登陆的用户名"></a>显示登陆的用户名</h2><p>UserServlet    中在sesseion中保存了用户信息</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>如果用户名和密码正确<br><span class="hljs-keyword">else</span><br>&#123;<br>    <span class="hljs-regexp">//</span>保存用户的登录信息<br>    <span class="hljs-regexp">//</span>因为每一个登陆成功页面都会显示名字，所以不能用request，request只有在一次请求中有效，再请求别的页面就无效了<br>    <span class="hljs-regexp">//</span>所以用Session<br>    req.getSession().setAttribute(<span class="hljs-string">&quot;user&quot;</span>,loginUser);<br>    req.getRequestDispatcher(<span class="hljs-string">&quot;/pages/user/login_success.jsp&quot;</span>).forward(req,resp);<br>&#125;<br></code></pre></td></tr></table></figure><p>在login_success_menu页面显示，出我登陆之后的用户名</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>欢迎<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;um_span&quot;</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;sessionScope.user.username&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>光临尚硅谷书城<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;pages/order/order.jsp&quot;</span>&gt;</span>我的订单<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;index.jsp&quot;</span>&gt;</span>注销<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;index.jsp&quot;</span>&gt;</span>返回<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>client下的index.jsp，分为登录和没登陆两种显示</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"> <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">       &lt;%--如果用户没有注册--%&gt;</span><br><span class="language-xml">       <span class="hljs-tag">&lt;<span class="hljs-name">c:if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;empty sessionScope.user&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span></span><br><span class="language-xml">           <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;pages/user/login.jsp&quot;</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> |</span><br><span class="language-xml">           <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;pages/user/regist.jsp&quot;</span>&gt;</span>注册<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">       <span class="hljs-tag">&lt;/<span class="hljs-name">c:if</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span></span><br><span class="language-xml">           <span class="hljs-tag">&lt;<span class="hljs-name">c:if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;not empty sessionScope.user&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">               <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>欢迎<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;um_span&quot;</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;sessionScope.user.username&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>光临尚硅谷书城<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">               <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;pages/order/order.jsp&quot;</span>&gt;</span>我的订单<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">               <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;index.jsp&quot;</span>&gt;</span>注销<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span></span><br><span class="language-xml">           <span class="hljs-tag">&lt;/<span class="hljs-name">c:if</span>&gt;</span></span><br><span class="language-xml">       <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;pages/cart/cart.jsp&quot;</span>&gt;</span>购物车<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">       <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;pages/manager/manager.jsp&quot;</span>&gt;</span>后台管理<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><h2 id="注销登录"><a href="#注销登录" class="headerlink" title="注销登录"></a>注销登录</h2><p>1、销毁 Session 中用户登录的信息（或者销毁 Session）</p><p>2、重定向到首页（或登录页面）。</p><p>在UserServlet中添加方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">logout</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    <span class="hljs-comment">//销毁session中的用户登录信息（或者销毁session）</span><br>    req.getSession().invalidate();<br>    <span class="hljs-comment">//重定向到首页</span><br>   resp.sendRedirect(req.getContextPath());<br>&#125;<br></code></pre></td></tr></table></figure><p>将client的index.jsp和login_success_menu.jsp的注销都换成</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;UserServlet?action=logout&quot;</span>&gt;</span>注销<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><br></code></pre></td></tr></table></figure><h2 id="表单重复提交之验证码"><a href="#表单重复提交之验证码" class="headerlink" title="表单重复提交之验证码"></a>表单重复提交之验证码</h2><p>表单重复提交有三种常见的情况： ‘</p><p>一：提交完表单。服务器使用请求转来进行页面跳转。这个时候，用户按下功能键 F5，就会发起最后一次的请求。 造成表单重复提交问题。          解决方法：使用重定向来进行跳转 </p><p>二：用户正常提交服务器，但是由于网络延迟等原因，迟迟未收到服务器的响应，这个时候，用户以为提交失败， 就会着急，然后多点了几次提交操作，也会造成表单重复提交。 </p><p>三：用户正常提交服务器。服务器也没有延迟，但是提交完成后，用户回退浏览器。重新提交。也会造成表单重复 提交</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210090958948.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221009095834306"></p><p>RegistServlet中1.是获取Session中验证码，并删除Session的验证码</p><p>就是第一次访问regist.jsp的时候，服务器给一个验证码，保存到session域中，然后用户提交表单之后，保存Session中验证码之后，将Session域中验证码删除，然后将它和用户提交的验证码进行比较，第一次如果相同则运许，重复提交则会阻止</p><h2 id="谷歌验证码的使用"><a href="#谷歌验证码的使用" class="headerlink" title="谷歌验证码的使用"></a>谷歌验证码的使用</h2><p>谷歌验证码 kaptcha 使用步骤如下： </p><p>1、导入谷歌验证码的 jar 包 </p><p>​            kaptcha-2.3.2.jar</p><p>2、在 web.xml 中去配置用于生成验证码的 Servlet 程序</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>KaptchaServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.google.code.kaptcha.servlet.KaptchaServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>KaptchaServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/kaptcha.jpg<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3、在表单中使用 img 标签去显示验证码图片并使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://localhost:8080/tmp/registServlet&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span><br>  用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> &gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>  验证码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 60px;&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;code&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://localhost:8080/tmp/kaptcha.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 100px; height: 28px;&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;登录&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>4、在服务器获取谷歌生成的验证码和客户端发送过来的验证码比较使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> com.google.code.kaptcha.Constants.KAPTCHA_SESSION_KEY;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RegistServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">// 获取Session中的验证码</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> (String) req.getSession().getAttribute(KAPTCHA_SESSION_KEY);<br>        <span class="hljs-comment">// 删除 Session中的验证码</span><br>        req.getSession().removeAttribute(KAPTCHA_SESSION_KEY);<br><br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;code&quot;</span>);<br>        <span class="hljs-comment">// 获取用户名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br><br>        <span class="hljs-keyword">if</span> (token != <span class="hljs-literal">null</span> &amp;&amp; token.equalsIgnoreCase(code)) &#123;<br>            System.out.println(<span class="hljs-string">&quot;保存到数据库：&quot;</span> + username);<br>            resp.sendRedirect(req.getContextPath() + <span class="hljs-string">&quot;/ok.jsp&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;请不要重复提交表单&quot;</span>);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="在书城中用验证码"><a href="#在书城中用验证码" class="headerlink" title="在书城中用验证码"></a>在书城中用验证码</h2><p>1、导入谷歌验证码的 jar 包 </p><p>​            kaptcha-2.3.2.jar</p><p>2、在 web.xml 中去配置用于生成验证码的 Servlet 程序</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>KaptchaServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.google.code.kaptcha.servlet.KaptchaServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>KaptchaServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/kaptcha.jpg<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3、在表单中使用 img 标签去显示验证码图片并使用</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;label&gt;验证码：&lt;/label&gt;<br>&lt;input class<span class="hljs-operator">=</span><span class="hljs-string">&quot;itxt&quot;</span> type<span class="hljs-operator">=</span><span class="hljs-string">&quot;text&quot;</span> name<span class="hljs-operator">=</span><span class="hljs-string">&quot;code&quot;</span> style<span class="hljs-operator">=</span><span class="hljs-string">&quot;width: 100px;&quot;</span> id<span class="hljs-operator">=</span><span class="hljs-string">&quot;code&quot;</span>/&gt;<br>&lt;img alt<span class="hljs-operator">=</span><span class="hljs-string">&quot;&quot;</span> src<span class="hljs-operator">=</span><span class="hljs-string">&quot;kaptcha.jpg&quot;</span> style<span class="hljs-operator">=</span><span class="hljs-string">&quot;float: right; margin-right: 40px;width:100px;height:28px &quot;</span>&gt;<br></code></pre></td></tr></table></figure><p>4.在服务器获取谷歌生成的验证码和客户端发送过来的验证码比较使用</p><p>修改的UserServlet中的regist方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">regist</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br><br>    <span class="hljs-comment">// 获取Session中的验证码</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> (String) req.getSession().getAttribute(KAPTCHA_SESSION_KEY);<br>    <span class="hljs-comment">// 删除 Session中的验证码</span><br>    req.getSession().removeAttribute(KAPTCHA_SESSION_KEY);<br><br>    <span class="hljs-comment">//1.获取请求的参数</span><br>    <span class="hljs-comment">//这个getParameter方法是通过那个属性的name得到的</span><br>    String username=req.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>    String password=req.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br>    String email=req.getParameter(<span class="hljs-string">&quot;email&quot;</span>);<br>    String code=req.getParameter(<span class="hljs-string">&quot;code&quot;</span>);<br>    <span class="hljs-comment">//2.检查 验证码是否正确,先把验证码写死，要求为abcde</span><br>    <span class="hljs-keyword">if</span>(token.equalsIgnoreCase(code)&amp;&amp;token!=<span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-comment">//验证码正确</span><br>        <span class="hljs-comment">//检查用户名是否可用</span><br>        <span class="hljs-keyword">if</span>(userService.existsUsername(username))&#123;<br>            System.out.println(<span class="hljs-string">&quot;用户名&quot;</span>+username+<span class="hljs-string">&quot;已存在&quot;</span>);<br><br>            req.setAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;用户名已存在&quot;</span>);<br>            req.setAttribute(<span class="hljs-string">&quot;username&quot;</span>,username);<br>            req.setAttribute(<span class="hljs-string">&quot;email&quot;</span>,email);<br>            <span class="hljs-comment">//跳回到注册页面</span><br>            req.getRequestDispatcher(<span class="hljs-string">&quot;/pages/user/regist.jsp&quot;</span>).forward(req,resp);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-comment">//可用</span><br>            <span class="hljs-comment">//调用Sercice保存到数据库</span><br>          Map map=req.getParameterMap();<br>          User user= WebUtils.copyParamToBean(map,<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>());<br><br>            userService.registerUser(user);<br>            <span class="hljs-comment">//注册成功后，跳转到注册成功页面</span><br>            req.getRequestDispatcher(<span class="hljs-string">&quot;/pages/user/regist_success.jsp&quot;</span>).forward(req,resp);<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-comment">//把回显信息保存到request域中</span><br>        req.setAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;用户验证码错误&quot;</span>);<br>        req.setAttribute(<span class="hljs-string">&quot;username&quot;</span>,username);<br>        req.setAttribute(<span class="hljs-string">&quot;email&quot;</span>,email);<br><br>        System.out.println(<span class="hljs-string">&quot;验证码&quot;</span>+code+<span class="hljs-string">&quot;错误&quot;</span>);<br>        <span class="hljs-comment">//验证码不正确</span><br>        <span class="hljs-comment">//跳回注册页面，因为还是申请服务器中文件所以/还是工程目录下的</span><br>        req.getRequestDispatcher(<span class="hljs-string">&quot;/pages/user/regist.jsp&quot;</span>).forward(req,resp);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="验证码的切换"><a href="#验证码的切换" class="headerlink" title="验证码的切换"></a>验证码的切换</h2><p>切换指的是点击验证码，会切换一个图片</p><p>给图片添加一个单击事件，这种方法在ie和火狐浏览器只能重新生成一个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">$(function()&#123;<br>   <span class="hljs-comment">/*</span><br><span class="hljs-comment">   给验证码的图片绑定单击事件</span><br><span class="hljs-comment">    */</span><br>   $(<span class="hljs-string">&quot;#codeimg&quot;</span>).click(function()&#123;<br>      <span class="hljs-comment">//在事件响应的function函数中有一个this对象，是当前正在响应事件的dom对象</span><br>      <span class="hljs-comment">//src属性表示验证码img标签的  图片路径，它可读，它可写</span><br>      <span class="hljs-comment">//下面给它赋值之后，就会自动再生成一个图片</span><br>      <span class="hljs-built_in">this</span>.src=<span class="hljs-string">&quot;$&#123;basePath&#125;&quot;</span>+<span class="hljs-string">&quot;/kaptcha.jpg&quot;</span>;<br><br>   &#125;);<br></code></pre></td></tr></table></figure><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210091116183.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221009111638892"></p><p>在重新生成验证码的路径后面加一个get传参，然后这个参数每次都不一样，所以拿时间戳作为参数是最好的选择</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>   <span class="hljs-comment">/*</span><br><span class="hljs-comment">   给验证码的图片绑定单击事件</span><br><span class="hljs-comment">    */</span><br>   $(<span class="hljs-string">&quot;#codeimg&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>      <span class="hljs-comment">//在事件响应的function函数中有一个this对象，是当前正在响应事件的dom对象</span><br>      <span class="hljs-comment">//src属性表示验证码img标签的  图片路径，它可读，它可写</span><br>      <span class="hljs-comment">//下面给它赋值之后，就会自动再生成一个图片</span><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">src</span>=<span class="hljs-string">&quot;$&#123;basePath&#125;kaptcha.jpg?d=&quot;</span>+<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br><br>   &#125;);<br></code></pre></td></tr></table></figure><h2 id="购物车模块"><a href="#购物车模块" class="headerlink" title="购物车模块"></a>购物车模块</h2><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210091450789.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221009145003269"></p><p>点击添加至购物车时（带着图书的id），就是先调用CartServlet中的方法（将图书转换为商品项），然后CartServlt中的方法调用Cart对象中的功能方法，然后再把Cart购物车展示</p><p>购物车商品项</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.pojo;<br><br><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">购物车的商品项</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CartItem</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer count;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;CartItem&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, count=&quot;</span> + count +<br>                <span class="hljs-string">&quot;, price=&quot;</span> + price +<br>                <span class="hljs-string">&quot;, totalPrice=&quot;</span> + totalPrice +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(Integer id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getCount</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCount</span><span class="hljs-params">(Integer count)</span> &#123;<br>        <span class="hljs-built_in">this</span>.count = count;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> BigDecimal <span class="hljs-title function_">getPrice</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> price;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPrice</span><span class="hljs-params">(BigDecimal price)</span> &#123;<br>        <span class="hljs-built_in">this</span>.price = price;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> BigDecimal <span class="hljs-title function_">getTotalPrice</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> totalPrice;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTotalPrice</span><span class="hljs-params">(BigDecimal totalPrice)</span> &#123;<br>        <span class="hljs-built_in">this</span>.totalPrice = totalPrice;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CartItem</span><span class="hljs-params">(Integer id, String name, Integer count, BigDecimal price, BigDecimal totalPrice)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.count = count;<br>        <span class="hljs-built_in">this</span>.price = price;<br>        <span class="hljs-built_in">this</span>.totalPrice = totalPrice;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> BigDecimal price;<br>    <span class="hljs-keyword">private</span> BigDecimal totalPrice;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CartItem</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>购物车对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.pojo;<br><br><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cart</span> &#123;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getTotalCount</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> totalCount;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Cart&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;totalCount=&quot;</span> + totalCount +<br>                <span class="hljs-string">&quot;, totalPrice=&quot;</span> + totalPrice +<br>                <span class="hljs-string">&quot;, items=&quot;</span> + items +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTotalCount</span><span class="hljs-params">(Integer totalCount)</span> &#123;<br>        <span class="hljs-built_in">this</span>.totalCount = totalCount;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> BigDecimal <span class="hljs-title function_">getTotalPrice</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> totalPrice;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTotalPrice</span><span class="hljs-params">(BigDecimal totalPrice)</span> &#123;<br>        <span class="hljs-built_in">this</span>.totalPrice = totalPrice;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> List&lt;CartItem&gt; <span class="hljs-title function_">getItems</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> items;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setItems</span><span class="hljs-params">(List&lt;CartItem&gt; items)</span> &#123;<br>        <span class="hljs-built_in">this</span>.items = items;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> Integer totalCount;<br>    <span class="hljs-keyword">private</span> BigDecimal totalPrice;<br>    <span class="hljs-keyword">private</span> List&lt;CartItem&gt; items=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;CartItem&gt;();<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="购物车的功能方法"><a href="#购物车的功能方法" class="headerlink" title="购物车的功能方法"></a>购物车的功能方法</h2><p>Cart</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.pojo;<br><br><span class="hljs-keyword">import</span> com.sun.javafx.collections.MappingChange;<br><br><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.LinkedHashMap;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cart</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Integer totalCount;<br>    <span class="hljs-keyword">private</span> BigDecimal totalPrice;<br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getTotalCount</span><span class="hljs-params">()</span> &#123;<br>        totalCount=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(Map.Entry&lt;Integer,CartItem&gt; entry : items.entrySet())&#123;<br>            totalCount+=entry.getValue().getCount();<br>        &#125;<br>        <span class="hljs-keyword">return</span> totalCount;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Cart&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;totalCount=&quot;</span> + getTotalCount() +<br>                <span class="hljs-string">&quot;, totalPrice=&quot;</span> + getTotalPrice() +<br>                <span class="hljs-string">&quot;, items=&quot;</span> + items +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> BigDecimal <span class="hljs-title function_">getTotalPrice</span><span class="hljs-params">()</span> &#123;<br>        totalPrice=<span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">for</span>(Map.Entry&lt;Integer,CartItem&gt; entry : items.entrySet())&#123;<br>            totalPrice=totalPrice.add(entry.getValue().getTotalPrice());<br>        &#125;<br>        <span class="hljs-keyword">return</span> totalPrice;<br>    &#125;<br><br><br><br>    <span class="hljs-keyword">public</span> Map&lt;Integer, CartItem&gt; <span class="hljs-title function_">getItems</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> items;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setItems</span><span class="hljs-params">(Map&lt;Integer, CartItem&gt; items)</span> &#123;<br>        <span class="hljs-built_in">this</span>.items = items;<br>    &#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    Map类型，key是商品编号，value是商品信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Map&lt;Integer,CartItem&gt; items=<span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashMap</span>&lt;Integer,CartItem&gt;();<br><br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    添加商品项</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addItem</span><span class="hljs-params">(CartItem carItem)</span>&#123;<br>        <span class="hljs-comment">//先看商品中是否已经添加过此商品，如果已经添加，则数量累加，总金额更新，如果没有添加过，直接放到集合中即可</span><br>        <span class="hljs-type">CartItem</span> <span class="hljs-variable">item</span> <span class="hljs-operator">=</span> items.get(carItem.getId());<br>         <span class="hljs-keyword">if</span>(item==<span class="hljs-literal">null</span>)&#123;<br>             <span class="hljs-comment">//如果之前没有添加过,则直接添加</span><br>             items.put(carItem.getId(),carItem);<br>         &#125;<br>         <span class="hljs-keyword">else</span><br>         &#123;<br>             <span class="hljs-comment">//之前添加过</span><br>             <span class="hljs-comment">//数量累加</span><br>             item.setCount(item.getCount()+<span class="hljs-number">1</span>);<br>             <span class="hljs-comment">//两个BigDecimal之间才能相乘，所以把count改为BigDecimal类型的</span><br>             item.setTotalPrice(item.getPrice().multiply(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(item.getCount())));<br><br>         &#125;<br><br>    &#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    删除商品项</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteItem</span><span class="hljs-params">(Integer id)</span>&#123;<br>          items.remove(id);<br>    &#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    清空购物车</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clear</span><span class="hljs-params">()</span>&#123;<br>items.clear();<br>    &#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    修改商品数量</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateCount</span><span class="hljs-params">(Integer id,Integer count)</span>&#123;<br>    <span class="hljs-comment">//先查看购物车中是否有此商品，如果有，就修改商品数量，更新总金额</span><br>        CartItem item=items.get(id);<br>        <span class="hljs-keyword">if</span>(item!=<span class="hljs-literal">null</span>)&#123;<br>            item.setCount(count);<br>            item.setTotalPrice(item.getPrice().multiply(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(item.getCount())));<br>        &#125;<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="添加商品到购物车"><a href="#添加商品到购物车" class="headerlink" title="添加商品到购物车"></a>添加商品到购物车</h2><p>使用请求转发是在request域中存储东西的时候用的</p><p>CartServlet中加一个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> BookService bookService=<span class="hljs-keyword">new</span> <span class="hljs-title class_">BookServiceImpl</span>();<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">加入购物车</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addItem</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    <span class="hljs-comment">//获取请求的参数，商品编号</span><br>    <span class="hljs-type">int</span> id= WebUtils.parseInt(req.getParameter(<span class="hljs-string">&quot;id&quot;</span>),<span class="hljs-number">0</span>);<br>    <span class="hljs-comment">//调用bookService.queryBookById(id):得到Book的信息</span><br>    <span class="hljs-type">Book</span> <span class="hljs-variable">book</span> <span class="hljs-operator">=</span> bookService.queryBookById(id);<br>    <span class="hljs-comment">//把图书信息转化成为CartItem商品项</span><br>    CartItem cartItem=<span class="hljs-keyword">new</span> <span class="hljs-title class_">CartItem</span>(book.getId(),book.getName(),<span class="hljs-number">1</span>,book.getPrice(),book.getPrice());<br><br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    用session存储cart信息</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-type">Cart</span> <span class="hljs-variable">cart</span> <span class="hljs-operator">=</span> (Cart) req.getSession().getAttribute(<span class="hljs-string">&quot;cart&quot;</span>);<br>    <span class="hljs-keyword">if</span>(cart==<span class="hljs-literal">null</span>)&#123;<br>        cart=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Cart</span>();<br>        req.getSession().setAttribute(<span class="hljs-string">&quot;cart&quot;</span>,cart);<br>    &#125;<br>    <span class="hljs-comment">//调用Cart.addItem(CartItem)添加商品项</span><br>    cart.addItem(cartItem);<br>    System.out.println(cart);<br>    <span class="hljs-comment">//重定向回商品列表页面</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    req.getHeader(&quot;Referer&quot;)获取请求服务器的地址，然后下面再跳回到这个地址</span><br><span class="hljs-comment">     */</span><br>    resp.sendRedirect(req.getHeader(<span class="hljs-string">&quot;Referer&quot;</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p>client中的index.jsp</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">bookId</span>=<span class="hljs-string">$</span></span></span><span class="hljs-template-variable">&#123;book.id&#125;</span><span class="language-xml"><span class="hljs-tag"> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;addToCart&quot;</span>&gt;</span>加入购物车<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>给加入购物车加一个bookId属性，用来保存要加入购物车的书的id</p><p>那加入购物车的点击的事件</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>   $(function()&#123;<br>       $(<span class="hljs-string">&quot;button.addToCart&quot;</span>).click(function()&#123;<br><br>           <span class="hljs-comment">/**</span><br><span class="hljs-comment">            * 在事件响应的function函数中有一个this对象，就是是当前正在响应事件的dom对象，就是那个标签的dom对象，</span><br><span class="hljs-comment">            * <span class="hljs-doctag">@type</span> &#123;*|jQuery&#125;</span><br><span class="hljs-comment">            */</span><br>           <span class="hljs-comment">/*</span><br><span class="hljs-comment">           先把this改为jQery对象然后获取属性值</span><br><span class="hljs-comment">            */</span><br>           <span class="hljs-keyword">var</span> bookId=$(<span class="hljs-built_in">this</span>).attr(<span class="hljs-string">&quot;bookId&quot;</span>);<br>           <span class="hljs-comment">//跳转到</span><br>          location.href=<span class="hljs-string">&quot;http://localhost:8087/book2/CartServlet?action=addItem&amp;id=&quot;</span>+bookId;<br>       &#125;);<br><br><br>   &#125;);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210091644544.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221009164438915"></p><p>这个图意思就是点击加入购物车的时候，返回的地址是不一样的</p><p>但是可以通过Referer获取请求发起时，浏览器地址栏中的地址发给服务器，然后获取这个地址之后，再跳转回去</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">req.get<span class="hljs-constructor">Header(<span class="hljs-string">&quot;Referer&quot;</span>)</span><br></code></pre></td></tr></table></figure><h2 id="购物车展示"><a href="#购物车展示" class="headerlink" title="购物车展示"></a>购物车展示</h2><p>cart.jsp是购物车界面</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ taglib prefix=<span class="hljs-string">&quot;c&quot;</span> uri=<span class="hljs-string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>&lt;title&gt;购物车&lt;/title&gt;<br>&lt;!--使用静态包含引入css样式jQuery和base标签--&gt;<br>&lt;%@ include file=<span class="hljs-string">&quot;/pages/common/head.jsp&quot;</span>%&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br><br>&lt;div id=<span class="hljs-string">&quot;header&quot;</span>&gt;<br>&lt;img class=<span class="hljs-string">&quot;logo_img&quot;</span> alt=<span class="hljs-string">&quot;&quot;</span> src=<span class="hljs-string">&quot;static/img/logo.gif&quot;</span> &gt;<br>&lt;span class=<span class="hljs-string">&quot;wel_word&quot;</span>&gt;购物车&lt;/span&gt;<br>&lt;!--静态包含jsp文件--&gt;<br>&lt;%@ include file=<span class="hljs-string">&quot;/pages/common/login_success_menu.jsp&quot;</span>%&gt;<br>&lt;/div&gt;<br><br>&lt;div id=<span class="hljs-string">&quot;main&quot;</span>&gt;<br><br>&lt;table&gt;<br>&lt;tr&gt;<br>&lt;td&gt;商品名称&lt;/td&gt;<br>&lt;td&gt;数量&lt;/td&gt;<br>&lt;td&gt;单价&lt;/td&gt;<br>&lt;td&gt;金额&lt;/td&gt;<br>&lt;td&gt;操作&lt;/td&gt;<br>&lt;/tr&gt;<br>&lt;%--空的时候输出--%&gt;<br>&lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;$&#123;empty sessionScope.cart.items&#125;&quot;</span>&gt;<br>&lt;tr&gt;<br>&lt;td colspan=<span class="hljs-string">&quot;5&quot;</span>&gt;&lt;a href=<span class="hljs-string">&quot;index.jsp&quot;</span>&gt;亲，当前购物车为空快去浏览商品吧&lt;/a&gt;&lt;/td&gt;<br><br>&lt;/tr&gt;<br>&lt;/c:<span class="hljs-keyword">if</span>&gt;<br><br><br>&lt;%--非空的时候输出--%&gt;<br>&lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;$&#123;not empty sessionScope.cart.items&#125;&quot;</span>&gt;<br>&lt;c:forEach items=<span class="hljs-string">&quot;$&#123;sessionScope.cart.items&#125;&quot;</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;entry&quot;</span>&gt;<br>&lt;tr&gt;<br>&lt;td&gt;$&#123;entry.value.name&#125;&lt;/td&gt;<br>&lt;td&gt;$&#123;entry.value.count&#125;&lt;/td&gt;<br>&lt;td&gt;$&#123;entry.value.price&#125;&lt;/td&gt;<br>&lt;td&gt;$&#123;entry.value.totalPrice&#125;&lt;/td&gt;<br>&lt;td&gt;&lt;a href=<span class="hljs-string">&quot;#&quot;</span>&gt;删除&lt;/a&gt;&lt;/td&gt;<br>&lt;/tr&gt;<br>&lt;/c:forEach&gt;<br><br>&lt;/c:<span class="hljs-keyword">if</span>&gt;<br><br>&lt;/table&gt;<br><br>&lt;%--如果购物车是非空才输出下面的内容--%&gt;<br>&lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;$&#123;not empty sessionScope.cart.items&#125;&quot;</span>&gt;<br>&lt;div class=<span class="hljs-string">&quot;cart_info&quot;</span>&gt;<br>&lt;span class=<span class="hljs-string">&quot;cart_span&quot;</span>&gt;购物车中共有&lt;span class=<span class="hljs-string">&quot;b_count&quot;</span>&gt;$&#123;sessionScope.cart.totalCount&#125;&lt;/span&gt;件商品&lt;/span&gt;<br>&lt;span class=<span class="hljs-string">&quot;cart_span&quot;</span>&gt;总金额&lt;span class=<span class="hljs-string">&quot;b_price&quot;</span>&gt;$&#123;sessionScope.cart.totalPrice&#125;&lt;/span&gt;元&lt;/span&gt;<br>&lt;span class=<span class="hljs-string">&quot;cart_span&quot;</span>&gt;&lt;a href=<span class="hljs-string">&quot;#&quot;</span>&gt;清空购物车&lt;/a&gt;&lt;/span&gt;<br>&lt;span class=<span class="hljs-string">&quot;cart_span&quot;</span>&gt;&lt;a href=<span class="hljs-string">&quot;pages/cart/checkout.jsp&quot;</span>&gt;去结账&lt;/a&gt;&lt;/span&gt;<br>&lt;/div&gt;<br>&lt;/c:<span class="hljs-keyword">if</span>&gt;<br><br><br>&lt;/div&gt;<br><br>&lt;!--静态包含页脚的代码--&gt;<br>&lt;%<span class="hljs-meta">@include</span> file=<span class="hljs-string">&quot;/pages/common/footer.jsp&quot;</span> %&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fortran">$&#123;<span class="hljs-built_in">entry</span>.<span class="hljs-keyword">value</span>.<span class="hljs-keyword">name</span>&#125;<br></code></pre></td></tr></table></figure><p>这个entry应该是Map.Entry对象，所以可以用entry.value取得value的值</p><h2 id="删除购物车中的商品"><a href="#删除购物车中的商品" class="headerlink" title="删除购物车中的商品"></a>删除购物车中的商品</h2><p>改删除的这个链接</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;CartServlet?action=deleteItem&amp;id=$</span></span></span><span class="hljs-template-variable">&#123;entry.value.id&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>给链接加一个单击事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>   $(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>      <span class="hljs-comment">//给删除绑定一个单击事件</span><br>      $(<span class="hljs-string">&quot;a.deleteItem&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><br>         <span class="hljs-comment">//返回true是单击事件发生，返回false是单击事件不发生</span><br>         <span class="hljs-keyword">return</span> <span class="hljs-title function_">confirm</span>(<span class="hljs-string">&quot;你确定要删除&quot;</span>+$(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">parent</span>().<span class="hljs-title function_">parent</span>().<span class="hljs-title function_">find</span>(<span class="hljs-string">&quot;td:first&quot;</span>).<span class="hljs-title function_">text</span>()+<span class="hljs-string">&quot;】吗&quot;</span>);<br>      &#125;);<br><br>   &#125;);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>给a标签绑定单击事件，如果返回false就不会跳转了</p><p>confirm是崩出一个确认的弹框，有true和false两个选项，点true就返回true，点false就返回false</p><p>在js中return false的作用一般是用来取消默认动作的。比如你单击一个链接除了触发你（指定的）的onclick事件以外还要触发一个默认事件就是执行页面的跳转。所以如果你想取消对象的默认动作就可以return false。</p><p>比如表单的提交，如果有一个单击事件返回false，那么会阻止表单提交</p><p>CartServlet中添加一个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteItem</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br><br>    <span class="hljs-comment">//获取请求的参数，商品编号</span><br>    <span class="hljs-type">int</span> id= WebUtils.parseInt(req.getParameter(<span class="hljs-string">&quot;id&quot;</span>),<span class="hljs-number">0</span>);<br>    <span class="hljs-type">Cart</span> <span class="hljs-variable">cart</span> <span class="hljs-operator">=</span> (Cart) req.getSession().getAttribute(<span class="hljs-string">&quot;cart&quot;</span>);<br>    <span class="hljs-keyword">if</span>(cart!=<span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-comment">//删除 了购物车商品项</span><br>        cart.deleteItem(id);<br>    &#125;<br>    <span class="hljs-comment">//重定向到请求的那个地址</span><br>    resp.sendRedirect(req.getHeader(<span class="hljs-string">&quot;Referer&quot;</span>));<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="清空购物车的实现"><a href="#清空购物车的实现" class="headerlink" title="清空购物车的实现"></a>清空购物车的实现</h2><p>CartServlet中加一个clear()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clear</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    <span class="hljs-comment">//1.获取购物车对象</span><br>    <span class="hljs-type">Cart</span> <span class="hljs-variable">cart</span> <span class="hljs-operator">=</span> (Cart)req.getSession().getAttribute(<span class="hljs-string">&quot;cart&quot;</span>);<br>    <span class="hljs-keyword">if</span>(cart!=<span class="hljs-literal">null</span>)&#123;<br>        cart.clear();<br>        <span class="hljs-comment">//重定向会原来购物车展示的页面</span><br>        resp.sendRedirect(req.getHeader(<span class="hljs-string">&quot;Referer&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>清空购物车选项改一下链接</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cart_span&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;deleteAll&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;CartServlet?action=clear&quot;</span>&gt;</span>清空购物车<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><p>给清空购物车定义一个单击事件，用来确认是否全部删除</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>   $(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>      <span class="hljs-comment">//给删除绑定一个单击事件</span><br>      $(<span class="hljs-string">&quot;a.deleteItem&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><br>         <span class="hljs-comment">//返回true是单击事件发生，返回false是单击事件不发生</span><br>         <span class="hljs-keyword">return</span> <span class="hljs-title function_">confirm</span>(<span class="hljs-string">&quot;你确定要删除&quot;</span>+$(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">parent</span>().<span class="hljs-title function_">parent</span>().<span class="hljs-title function_">find</span>(<span class="hljs-string">&quot;td:first&quot;</span>).<span class="hljs-title function_">text</span>()+<span class="hljs-string">&quot;】吗&quot;</span>);<br>      &#125;);<br><br>              <span class="hljs-comment">//给清空购物车邦单击事件</span><br>      $(<span class="hljs-string">&quot;a.deleteAll&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>         <span class="hljs-keyword">return</span> <span class="hljs-title function_">confirm</span>(<span class="hljs-string">&quot;你确定要删除全部的图书么&quot;</span>);<br>      &#125;);<br>   &#125;);<br><br><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="修改购物车商品数量"><a href="#修改购物车商品数量" class="headerlink" title="修改购物车商品数量"></a>修改购物车商品数量</h2><p>CartServlet中添加一个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateCount</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    <span class="hljs-comment">//获取请求的参数，商品编号，商品数量</span><br>    <span class="hljs-type">int</span> id=WebUtils.parseInt(req.getParameter(<span class="hljs-string">&quot;id&quot;</span>),<span class="hljs-number">0</span>);<br>    <span class="hljs-type">int</span> count=WebUtils.parseInt(req.getParameter(<span class="hljs-string">&quot;count&quot;</span>),<span class="hljs-number">1</span>);<br>    <span class="hljs-comment">//获取购物车对象</span><br>    Cart cart=(Cart)req.getSession().getAttribute(<span class="hljs-string">&quot;cart&quot;</span>);<br>    <span class="hljs-comment">//修改商品数量</span><br>    <span class="hljs-keyword">if</span>(cart!=<span class="hljs-literal">null</span>) &#123;<br>        cart.updateCount(id, count);<br>        <span class="hljs-comment">//重定向会原来购物车展示的页面</span><br>        resp.sendRedirect(req.getHeader(<span class="hljs-string">&quot;Referer&quot;</span>));<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>cart.jsp中给输入框加一个内容改变事件</p><p>获得count是图书数量要改变成得值，num是书的名字，id是那本书的id，然后带着count和id访问CartServlet</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;.updateCount&quot;</span>).<span class="hljs-title function_">change</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">var</span> num=$(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">parent</span>().<span class="hljs-title function_">parent</span>().<span class="hljs-title function_">find</span>(<span class="hljs-string">&quot;td:first&quot;</span>).<span class="hljs-title function_">text</span>();<br><span class="hljs-keyword">var</span> count=<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>;<br><span class="hljs-keyword">var</span> id=$(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;bookId&#x27;</span>);<br><span class="hljs-keyword">if</span>( <span class="hljs-title function_">confirm</span>(<span class="hljs-string">&quot;你确定要将这本【&quot;</span>+num+<span class="hljs-string">&quot;】的数量改编为【&quot;</span>+count+<span class="hljs-string">&quot;】&quot;</span>))&#123;<br><span class="hljs-comment">//发起请求给服务器保存修改</span><br>location.<span class="hljs-property">href</span>=<span class="hljs-string">&quot;http://localhost:8087/book2/CartServlet?               action=updateCount&amp;count=&quot;</span>+count+<span class="hljs-string">&quot;&amp;id=&quot;</span>+id;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//this.defaultValue它是表单项dom对象的属性，它表示默认的value属性值</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>=<span class="hljs-variable language_">this</span>.<span class="hljs-property">defaultValue</span>;<br>&#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>把书的数量那里变一个输入框</p><p>bookId记录要改得书的id，value是书的数量要改成的值</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;c:forEach items=<span class="hljs-string">&quot;$&#123;sessionScope.cart.items&#125;&quot;</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;entry&quot;</span>&gt;<br>   &lt;tr&gt;<br>      &lt;td&gt;$&#123;entry.value.name&#125;&lt;/td&gt;<br>      &lt;td&gt;<br>         &lt;input class=<span class="hljs-string">&quot;updateCount&quot;</span> style=<span class="hljs-string">&quot;width: 80px;&quot;</span><br>               bookId=<span class="hljs-string">&quot;$&#123;entry.value.id&#125;&quot;</span><br>               type=<span class="hljs-string">&quot;text&quot;</span> value=<span class="hljs-string">&quot;$&#123;entry.value.count&#125;&quot;</span>&gt;<br>      &lt;/td&gt;<br>      &lt;td&gt;$&#123;entry.value.price&#125;&lt;/td&gt;<br>      &lt;td&gt;$&#123;entry.value.totalPrice&#125;&lt;/td&gt;<br>      &lt;td&gt;&lt;a class=<span class="hljs-string">&quot;deleteItem&quot;</span> href=<span class="hljs-string">&quot;CartServlet?action=deleteItem&amp;id=$&#123;entry.value.id&#125;&quot;</span>&gt;删除&lt;/a&gt;&lt;/td&gt;<br>   &lt;/tr&gt;<br>&lt;/c:forEach&gt;<br></code></pre></td></tr></table></figure><h2 id="首页购物车数据展示"><a href="#首页购物车数据展示" class="headerlink" title="首页购物车数据展示"></a>首页购物车数据展示</h2><p>再CartServlet中的addItem方法添加这一行，来存储最新的加入购物车书的名称</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">req.get<span class="hljs-constructor">Session()</span>.set<span class="hljs-constructor">Attribute(<span class="hljs-string">&quot;lastName&quot;</span>,<span class="hljs-params">cartItem</span>.<span class="hljs-params">getName</span>()</span>);<br></code></pre></td></tr></table></figure><p>分为购物车为空和购物车不为空</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">c:if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;empty sessionScope.cart.items&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span></span><br><span class="language-xml">    &lt;%--购物车为空的输出--%&gt;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: red&quot;</span>&gt;</span>当前购物车为空<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">c:if</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">c:if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;not empty sessionScope.cart.items&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">    &lt;%--购物车不为空的输出--%&gt;</span><br><span class="language-xml"> </span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>您的购物车中有$</span><span class="hljs-template-variable">&#123;sessionScope.cart.totalCount&#125;</span><span class="language-xml">件商品<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">   &lt;%--这是用来获取session中存储的最后添加的书的名字--%&gt;</span><br><span class="language-xml">        您刚刚将<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: red&quot;</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;sessionScope.lastName&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>加入到了购物车中</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">c:if</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h1 id="书城项目第七阶段"><a href="#书城项目第七阶段" class="headerlink" title="书城项目第七阶段"></a>书城项目第七阶段</h1><h2 id="订单模块的分析"><a href="#订单模块的分析" class="headerlink" title="订单模块的分析"></a>订单模块的分析</h2><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210101439819.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221010143914019"></p><p>订单项是订单的物品的详细信息，一个购物车属于是一个订单</p><h2 id="创建数据库表"><a href="#创建数据库表" class="headerlink" title="创建数据库表"></a>创建数据库表</h2><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"> use book<span class="hljs-comment">;</span><br>    create table t_order(<br>`order_id` varchar(<span class="hljs-number">50</span>) primary key,<br>`create_time` datetime,<br>            `price` decimal(<span class="hljs-number">11</span>,<span class="hljs-number">2</span>),<br>`status` int,<br>            `user_id` int,<br>    foreign key(`user_id`) references t_user(`id`)<br>            )<span class="hljs-comment">;</span><br>    create table t_order_item(<br>`id` int primary key auto_increment,<br>`name` varchar(<span class="hljs-number">100</span>),<br>`count` int,<br>            `price` decimal(<span class="hljs-number">11</span>,<span class="hljs-number">2</span>),<br>`total_price` decimal(<span class="hljs-number">11</span>,<span class="hljs-number">2</span>),<br>`order_id` varchar(<span class="hljs-number">50</span>),<br>    foreign key(`order_id`) references t_order(`order_id`)<br>            )<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>  foreign key(<code>order_id</code>) references t_order(<code>order_id</code>)建立外键</p><h2 id="编写订单两个模块的数据模型"><a href="#编写订单两个模块的数据模型" class="headerlink" title="编写订单两个模块的数据模型"></a>编写订单两个模块的数据模型</h2><p>Order</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs typescript">package com.<span class="hljs-property">atguigu</span>.<span class="hljs-property">pojo</span>;<br><br><span class="hljs-keyword">import</span> java.<span class="hljs-property">math</span>.<span class="hljs-property">BigDecimal</span>;<br><span class="hljs-keyword">import</span> java.<span class="hljs-property">util</span>.<span class="hljs-property">Date</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Order</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> orderId;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">Date</span> createTime;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getOrderId</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> orderId;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setOrderId</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> orderId</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">orderId</span> = orderId;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Order&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;orderId=&#x27;&quot;</span> + orderId + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, createTime=&quot;</span> + createTime +<br>                <span class="hljs-string">&quot;, price=&quot;</span> + price +<br>                <span class="hljs-string">&quot;, status=&quot;</span> + status +<br>                <span class="hljs-string">&quot;, userId=&quot;</span> + userId +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Order</span>() &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Date</span> <span class="hljs-title function_">getCreateTime</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> createTime;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setCreateTime</span>(<span class="hljs-params"><span class="hljs-built_in">Date</span> createTime</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">createTime</span> = createTime;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">BigDecimal</span> <span class="hljs-title function_">getPrice</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> price;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setPrice</span>(<span class="hljs-params">BigDecimal price</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">price</span> = price;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Integer</span> <span class="hljs-title function_">getStatus</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> status;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setStatus</span>(<span class="hljs-params">Integer status</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">status</span> = status;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Integer</span> <span class="hljs-title function_">getUserId</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> userId;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setUserId</span>(<span class="hljs-params">Integer userId</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">userId</span> = userId;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">BigDecimal</span> price;<br>    <span class="hljs-comment">//0未发货，1已发货，2表示以签收</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">Integer</span> status=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">Integer</span> userId;<br>&#125;<br></code></pre></td></tr></table></figure><p>OrderItem</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.pojo;<br><br><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderItem</span> &#123;<br><span class="hljs-keyword">private</span> Integer id;<br><span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">OrderItem</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(Integer id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getCount</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCount</span><span class="hljs-params">(Integer count)</span> &#123;<br>        <span class="hljs-built_in">this</span>.count = count;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> BigDecimal <span class="hljs-title function_">getPrice</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> price;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPrice</span><span class="hljs-params">(BigDecimal price)</span> &#123;<br>        <span class="hljs-built_in">this</span>.price = price;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getOrderId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> orderId;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setOrderId</span><span class="hljs-params">(String orderId)</span> &#123;<br>        <span class="hljs-built_in">this</span>.orderId = orderId;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;OrderItem&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, count=&quot;</span> + count +<br>                <span class="hljs-string">&quot;, price=&quot;</span> + price +<br>                <span class="hljs-string">&quot;, orderId=&#x27;&quot;</span> + orderId + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">OrderItem</span><span class="hljs-params">(Integer id, String name, Integer count, BigDecimal price, String orderId)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.count = count;<br>        <span class="hljs-built_in">this</span>.price = price;<br>        <span class="hljs-built_in">this</span>.orderId = orderId;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> Integer count;<br><span class="hljs-keyword">private</span> BigDecimal price;<br><span class="hljs-keyword">private</span> String orderId;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="编写Dao"><a href="#编写Dao" class="headerlink" title="编写Dao"></a>编写Dao</h2><p>OrderDao</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.dao;<br><br><span class="hljs-keyword">import</span> com.atguigu.pojo.Order;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">OrderDao</span> &#123;<br>    <span class="hljs-comment">//保存订单</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">saveOrder</span><span class="hljs-params">(Order order)</span>;<br>    <span class="hljs-comment">//查询全部订单</span><br>    <span class="hljs-keyword">public</span> List&lt;Order&gt; <span class="hljs-title function_">queryOrders</span><span class="hljs-params">()</span>;<br>      <span class="hljs-comment">//改变订单状态</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">changeStatus</span><span class="hljs-params">(<span class="hljs-type">int</span> orderId, <span class="hljs-type">int</span> status)</span>;<br>    <span class="hljs-comment">//根据用户id查找订单</span><br>    <span class="hljs-keyword">public</span> List&lt;Order&gt; <span class="hljs-title function_">queryOrdersByUserId</span><span class="hljs-params">(<span class="hljs-type">int</span> userId)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>OrderDaoImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.dao.impl;<br><br><span class="hljs-keyword">import</span> com.atguigu.dao.OrderDao;<br><span class="hljs-keyword">import</span> com.atguigu.pojo.Order;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderDaoImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseDao</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">OrderDao</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">saveOrder</span><span class="hljs-params">(Order order)</span> &#123;<br>        String sql=<span class="hljs-string">&quot;insert into t_order(order_id,create_time,price,status,user_id) values(?,?,?,?,?)&quot;</span>;<br>       <span class="hljs-keyword">return</span> update(sql,order.getOrderId(),order.getCreateTime(),order.getPrice(),order.getStatus(),order.getUserId());<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;Order&gt; <span class="hljs-title function_">queryOrders</span><span class="hljs-params">()</span> &#123;<br>        String sql=<span class="hljs-string">&quot;select order_id orderId,create_time createTime,price,status,user_Id userId  from t_order&quot;</span>;<br>       <span class="hljs-keyword">return</span> queryForList(Order.class,sql);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">changeStatus</span><span class="hljs-params">(<span class="hljs-type">int</span> orderId, <span class="hljs-type">int</span> status)</span> &#123;<br>        String sql=<span class="hljs-string">&quot;update t_order set status=? where order_id=?&quot;</span>;<br>        <span class="hljs-keyword">return</span> update(sql,status,orderId);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;Order&gt; <span class="hljs-title function_">queryOrdersByUserId</span><span class="hljs-params">(<span class="hljs-type">int</span> userId)</span> &#123;<br>        String sql=<span class="hljs-string">&quot;select order_id orderId,create_time createTime,price,status,user_id userId from t_order where user_id=?&quot;</span>;<br>        <span class="hljs-keyword">return</span> queryForList(Order.class,sql,userId);<br><br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>在使用queryForList和queryForOne来获得javaBean对象的时候，这个javaBean类中属性的名字必须和select后面的列名相同，或者是起名让他相同</p><p>sql的update语句完全可以只改变一两个属性</p><p>OrderItemDao</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">package</span> com.atguigu.dao;<br><br><span class="hljs-keyword">import</span> com.atguigu.pojo.OrderItem;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">OrderItemDao</span> </span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    保存订单项</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">saveOrderItem</span><span class="hljs-params">(OrderItem orderItem)</span></span>;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    根据订单号查询订单明细</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function">OrderItem <span class="hljs-title">queryOrderItemsByOrderId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> orderId)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>OrderItemDaoImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.dao.impl;<br><br><span class="hljs-keyword">import</span> com.atguigu.dao.OrderItemDao;<br><span class="hljs-keyword">import</span> com.atguigu.pojo.OrderItem;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderItemDaoImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseDao</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">OrderItemDao</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">saveOrderItem</span><span class="hljs-params">(OrderItem orderItem)</span> &#123;<br>        String sql=<span class="hljs-string">&quot;insert into t_order_item(name,count,price,total_price,order_id) values(?,?,?,?,?)&quot;</span>;<br>        <span class="hljs-keyword">return</span> update(sql,orderItem.getName(),orderItem.getCount(),orderItem.getPrice(),orderItem.getTotalPrice(),orderItem.getOrderId());<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> OrderItem <span class="hljs-title function_">queryOrderItemsByOrderId</span><span class="hljs-params">(<span class="hljs-type">int</span> orderId)</span> &#123;<br>        String sql=<span class="hljs-string">&quot;select id,name,count,price,total_price totalPrice,order_id orderId from t_order_item where order_id=?&quot;</span>;<br>        <span class="hljs-keyword">return</span>  queryForOne(OrderItem.class,sql,orderId);<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Service的编写"><a href="#Service的编写" class="headerlink" title="Service的编写"></a>Service的编写</h2><p>OrderService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.service;<br><br><span class="hljs-keyword">import</span> com.atguigu.pojo.Cart;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">OrderService</span> &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">createOrder</span><span class="hljs-params">(Cart cart, <span class="hljs-type">int</span> userId)</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showAllOrders</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendOrder</span><span class="hljs-params">(<span class="hljs-type">int</span> orderId)</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showOrderDetail</span><span class="hljs-params">(<span class="hljs-type">int</span> orderId)</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showMyOrders</span><span class="hljs-params">(<span class="hljs-type">int</span> userId)</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">receiveOrder</span><span class="hljs-params">(<span class="hljs-type">int</span> orderId)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>OrderServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.service.impl;<br><br><span class="hljs-keyword">import</span> com.atguigu.dao.impl.OrderDaoImpl;<br><span class="hljs-keyword">import</span> com.atguigu.dao.impl.OrderItemDaoImpl;<br><span class="hljs-keyword">import</span> com.atguigu.pojo.Cart;<br><span class="hljs-keyword">import</span> com.atguigu.pojo.CartItem;<br><span class="hljs-keyword">import</span> com.atguigu.pojo.Order;<br><span class="hljs-keyword">import</span> com.atguigu.pojo.OrderItem;<br><span class="hljs-keyword">import</span> com.atguigu.service.OrderService;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">OrderService</span> &#123;<br>         <span class="hljs-keyword">private</span> OrderDaoImpl orderDao=<span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderDaoImpl</span>();<br>         <span class="hljs-keyword">private</span> OrderItemDaoImpl orderItemDao=<span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderItemDaoImpl</span>();<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">createOrder</span><span class="hljs-params">(Cart cart, <span class="hljs-type">int</span> userId)</span> &#123;<br>        <span class="hljs-comment">//订单号，唯一性  用时间戳加userId保证唯一性</span><br>        String orderId=System.currentTimeMillis()+<span class="hljs-string">&quot;&quot;</span>+userId;<br>        <span class="hljs-comment">//创建一个订单对象</span><br>        Order order=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Order</span>(orderId,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(),cart.getTotalPrice(),<span class="hljs-number">0</span>,userId);<br>        <span class="hljs-comment">//保存订单</span><br>        orderDao.saveOrder(order);<br><br>        <span class="hljs-comment">//遍历购物车中每一个商品转换成为订单项保存到数据库</span><br>        <span class="hljs-keyword">for</span>(Map.Entry&lt;Integer, CartItem&gt;entry:cart.getItems().entrySet())&#123;<br>            <span class="hljs-comment">//获取每一个购物车中的商品项</span><br>            CartItem cartItem=entry.getValue();<br>           <span class="hljs-comment">//然后转化为每一个订单项</span><br>            OrderItem orderItem=<span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderItem</span>(<span class="hljs-literal">null</span>,cartItem.getName(),cartItem.getTotalPrice(),cart.getTotalCount(),cartItem.getPrice(),orderId);<br>            <span class="hljs-comment">//保存到数据库</span><br>            orderItemDao.saveOrderItem(orderItem);<br>        &#125;<br>        <span class="hljs-comment">//清空购物车</span><br>        cart.clear();<br>        <span class="hljs-keyword">return</span> orderId;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showAllOrders</span><span class="hljs-params">()</span> &#123;<br>        List&lt;Order&gt; orders = orderDao.queryOrders();<br>        <span class="hljs-keyword">for</span> (Order order : orders) &#123;<br>            System.out.println(order);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendOrder</span><span class="hljs-params">(<span class="hljs-type">int</span> orderId)</span> &#123;<br>orderDao.changeStatus(orderId,<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showOrderDetail</span><span class="hljs-params">(<span class="hljs-type">int</span> orderId)</span> &#123;<br>        <span class="hljs-type">OrderItem</span> <span class="hljs-variable">orderItem</span> <span class="hljs-operator">=</span> orderItemDao.queryOrderItemsByOrderId(orderId);<br>    System.out.println(orderItem);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showMyOrders</span><span class="hljs-params">(<span class="hljs-type">int</span> userId)</span> &#123;<br>        List&lt;Order&gt; orders = orderDao.queryOrdersByUserId(userId);<br>        <span class="hljs-keyword">for</span> (Order order : orders) &#123;<br>            System.out.println(order);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">receiveOrder</span><span class="hljs-params">(<span class="hljs-type">int</span> orderId)</span> &#123;<br>orderDao.changeStatus(orderId,<span class="hljs-number">2</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="结账功能实现"><a href="#结账功能实现" class="headerlink" title="结账功能实现"></a>结账功能实现</h2><p>改一下Service中的createOrder方法</p><p>实现结账后同时更新库存和销量</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@Override<br>public String create<span class="hljs-constructor">Order(Cart <span class="hljs-params">cart</span>, <span class="hljs-params">int</span> <span class="hljs-params">userId</span>)</span> &#123;<br>    <span class="hljs-comment">//订单号，唯一性  用时间戳加userId保证唯一性</span><br>    String orderId=<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>current<span class="hljs-constructor">TimeMillis()</span>+<span class="hljs-string">&quot;&quot;</span>+userId;<br>    <span class="hljs-comment">//创建一个订单对象</span><br>    Order order=<span class="hljs-keyword">new</span> <span class="hljs-constructor">Order(<span class="hljs-params">orderId</span>,<span class="hljs-params">new</span> Date()</span>,cart.get<span class="hljs-constructor">TotalPrice()</span>,<span class="hljs-number">0</span>,userId);<br>    <span class="hljs-comment">//保存订单</span><br>    orderDao.save<span class="hljs-constructor">Order(<span class="hljs-params">order</span>)</span>;<br><br>    <span class="hljs-comment">//遍历购物车中每一个商品转换成为订单项保存到数据库</span><br>    <span class="hljs-keyword">for</span>(Map.Entry&lt;Integer, CartItem&gt;entry:cart.get<span class="hljs-constructor">Items()</span>.entry<span class="hljs-constructor">Set()</span>)&#123;<br>        <span class="hljs-comment">//获取每一个购物车中的商品项</span><br>        CartItem cartItem=entry.get<span class="hljs-constructor">Value()</span>;<br>       <span class="hljs-comment">//然后转化为每一个订单项</span><br>        OrderItem orderItem=<span class="hljs-keyword">new</span> <span class="hljs-constructor">OrderItem(<span class="hljs-params">null</span>,<span class="hljs-params">cartItem</span>.<span class="hljs-params">getName</span>()</span>,cartItem.get<span class="hljs-constructor">TotalPrice()</span>,cart.get<span class="hljs-constructor">TotalCount()</span>,cartItem.get<span class="hljs-constructor">Price()</span>,orderId);<br>        <span class="hljs-comment">//保存到数据库</span><br>        orderItemDao.save<span class="hljs-constructor">OrderItem(<span class="hljs-params">orderItem</span>)</span>;<br><br>        <span class="hljs-comment">//更新库存和销量</span><br>        Book book=bookDao.query<span class="hljs-constructor">BookById(<span class="hljs-params">cartItem</span>.<span class="hljs-params">getId</span>()</span>);<br>        book.set<span class="hljs-constructor">Sales(<span class="hljs-params">book</span>.<span class="hljs-params">getSales</span>()</span>+cartItem.get<span class="hljs-constructor">Count()</span>);<br>        book.set<span class="hljs-constructor">Stock(<span class="hljs-params">book</span>.<span class="hljs-params">getStock</span>()</span>-cartItem.get<span class="hljs-constructor">Count()</span>);<br>    &#125;<br>    <span class="hljs-comment">//清空购物车</span><br>    cart.clear<span class="hljs-literal">()</span>;<br>    return orderId;<br>&#125;<br></code></pre></td></tr></table></figure><p>OrderServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.web;<br><br><span class="hljs-keyword">import</span> com.atguigu.pojo.Cart;<br><span class="hljs-keyword">import</span> com.atguigu.pojo.User;<br><span class="hljs-keyword">import</span> com.atguigu.service.OrderService;<br><span class="hljs-keyword">import</span> com.atguigu.service.impl.OrderServiceImpl;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseServlet</span>&#123;<br>    <span class="hljs-keyword">private</span> OrderService orderService=<span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderServiceImpl</span>();<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    生成订单</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createOrder</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>            <span class="hljs-comment">//先获取Cart购物车对象</span><br>             Cart cart=(Cart)req.getSession().getAttribute(<span class="hljs-string">&quot;cart&quot;</span>);<br>        <span class="hljs-comment">//获取Userid</span><br>        User loginUser=(User)req.getSession().getAttribute(<span class="hljs-string">&quot;user&quot;</span>);<br>        <span class="hljs-comment">//如果没有注册就去注册一下</span><br>        <span class="hljs-keyword">if</span>(loginUser==<span class="hljs-literal">null</span>)&#123;<br>            req.getRequestDispatcher(<span class="hljs-string">&quot;/pages/user/login.jsp&quot;</span>).forward(req,resp);<br>        &#125;<br>        Integer userId=loginUser.getId();<br><br>        <span class="hljs-comment">//调用orderService.createOrder(Cart,Userid)</span><br>         <span class="hljs-comment">//得到获得的订单号</span><br>         String orderId=orderService.createOrder(cart,userId);<br>         <span class="hljs-comment">//将订单号保存在session域中</span><br>         req.getSession().setAttribute(<span class="hljs-string">&quot;orderId&quot;</span>,orderId);<br>         <span class="hljs-comment">//请求转发</span><br>          resp.sendRedirect(req.getContextPath()+<span class="hljs-string">&quot;/pages/cart/checkout.jsp&quot;</span>);<br>         <span class="hljs-keyword">return</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>checkout.jsp</p><p>显示订单的号</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>你的订单已结算，订单号为$</span><span class="hljs-template-variable">&#123;sessionScope.orderId&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>cart.jsp</p><p>改去结账的链接</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">&lt;span <span class="hljs-keyword">class</span>=&quot;<span class="hljs-symbol">cart_span</span>&quot;&gt;&lt;<span class="hljs-symbol">a</span> <span class="hljs-symbol">href</span>=&quot;<span class="hljs-symbol">OrderServlet</span>?<span class="hljs-symbol">action</span>=<span class="hljs-symbol">createOrder</span>&quot;&gt;去结账&lt;/<span class="hljs-symbol">a</span>&gt;&lt;/<span class="hljs-symbol">span</span>&gt;<br></code></pre></td></tr></table></figure><p>一开始一直不行，经过我的不断测试发现其实userId是空的，然后看到UserServlet中的保存user的时候，保存的是没有id的</p><p>于是对这个保存id的操作修改，用userDao从数据库中找到了有id的user，保存到session域中</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">//用Dao找到那个有id的<span class="hljs-keyword">User</span>而不是用loginUser这个没id的<span class="hljs-keyword">User</span><br>            <span class="hljs-keyword">User</span> <span class="hljs-keyword">user</span>=userDao.queryByUsername(username);<br></code></pre></td></tr></table></figure><p>UserServlet</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"> <span class="hljs-keyword">private</span> UserService userService=<span class="hljs-keyword">new</span> <span class="hljs-constructor">UserServiceImpl()</span>;<br>    <span class="hljs-keyword">private</span> UserDao userDao=<span class="hljs-keyword">new</span> <span class="hljs-constructor">UserDaoImpl()</span>;<br>    protected void login(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;<br><span class="hljs-comment">//获取用户名和密码参数</span><br>        String username=req.get<span class="hljs-constructor">Parameter(<span class="hljs-string">&quot;username&quot;</span>)</span>;<br>        String password=req.get<span class="hljs-constructor">Parameter(<span class="hljs-string">&quot;password&quot;</span>)</span>;<br>        User loginUser=<span class="hljs-keyword">new</span> <span class="hljs-constructor">User(<span class="hljs-params">null</span>,<span class="hljs-params">username</span>,<span class="hljs-params">password</span>,<span class="hljs-params">null</span>)</span>;<br>        <span class="hljs-comment">//如果用户名或密码错误</span><br>        <span class="hljs-keyword">if</span>(userService.login(loginUser)==null)&#123;<br>            <span class="hljs-comment">//把错误信息，和回显的表单项信息，保存到request域中</span><br>            req.set<span class="hljs-constructor">Attribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;用户名或者密码错误&quot;</span>)</span>;<br>            req.set<span class="hljs-constructor">Attribute(<span class="hljs-string">&quot;username&quot;</span>,<span class="hljs-params">username</span>)</span>;<br>            req.get<span class="hljs-constructor">RequestDispatcher(<span class="hljs-string">&quot;/pages/user/login.jsp&quot;</span>)</span>.forward(req,resp);<br>        &#125;<br>        <span class="hljs-comment">//如果用户名和密码正确</span><br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-comment">//用Dao找到那个有id的User而不是用loginUser这个没id的User</span><br>            User user=userDao.query<span class="hljs-constructor">ByUsername(<span class="hljs-params">username</span>)</span>;<br>            <span class="hljs-comment">//保存用户的登录信息</span><br>            <span class="hljs-comment">//因为每一个登陆成功页面都会显示名字，所以不能用request，request只有在一次请求中有效，再请求别的页面就无效了</span><br>            <span class="hljs-comment">//所以用Session</span><br>            req.get<span class="hljs-constructor">Session()</span>.set<span class="hljs-constructor">Attribute(<span class="hljs-string">&quot;user&quot;</span>,<span class="hljs-params">user</span>)</span>;<br>            req.get<span class="hljs-constructor">RequestDispatcher(<span class="hljs-string">&quot;/pages/user/login_success.jsp&quot;</span>)</span>.forward(req,resp);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="Filter过滤器"><a href="#Filter过滤器" class="headerlink" title="Filter过滤器"></a>Filter过滤器</h1><p>1、Filter 过滤器它是 JavaWeb 的三大组件之一。三大组件分别是：Servlet 程序、Listener 监听器、Filter 过滤器 </p><p>2、Filter 过滤器它是 JavaEE 的规范。也就是接口 </p><p>3、Filter 过滤器它的作用是：拦截请求，过滤响应。</p><p>拦截请求常见的应用场景有： 1、权限检查 2、日记操作 3、事务管理 ……等等</p><h2 id="Filter初体验"><a href="#Filter初体验" class="headerlink" title="Filter初体验"></a>Filter初体验</h2><p>要求：在你的 web 工程下，有一个 admin 目录。这个 admin 目录下的所有资源（html 页面、jpg 图片、jsp 文件、等等）都必 须是用户登录之后才允许访问。</p><p>思考：根据之前我们学过内容。我们知道，用户登录之后都会把用户登录的信息保存到 Session 域中。所以要检查用户是否 登录，可以判断 Session 中否包含有用户登录的信息即可！！！</p><p>实现一</p><p>如果用户没有用户名，也就是没登录，跳转到登录页面</p><p>局限：只有jsp文件才有</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&lt;%<br>    <span class="hljs-keyword">Object</span> <span class="hljs-keyword">user</span>=<span class="hljs-keyword">session</span>.getAttribute(&quot;user&quot;);<br>    //如果等于<span class="hljs-keyword">null</span>，说明还没有登陆<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">user</span>==<span class="hljs-keyword">null</span>)&#123;<br>        request.getRequestDispatcher(&quot;/login.jsp&quot;).forward(request,response);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>%&gt;<br></code></pre></td></tr></table></figure><p>用Filter实现这个功能</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210102222785.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221010222228487"></p><p>AdminFilter实现Filter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.filter;<br><br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpSession;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AdminFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br><br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    doFilter方法，专门用于拦截请求，可以做权限检查</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>       System.out.println(<span class="hljs-string">&quot;foFilter&quot;</span>);<br>        <span class="hljs-comment">//获取Session</span><br>        HttpServletRequest httpServletRequest=(HttpServletRequest) servletRequest;<br>       HttpSession session=httpServletRequest.getSession();<br>        Object user=session.getAttribute(<span class="hljs-string">&quot;user&quot;</span>);<br>        <span class="hljs-comment">//如果等于null，说明还没有登陆</span><br>        <span class="hljs-keyword">if</span>(user==<span class="hljs-literal">null</span>)&#123;<br>            servletRequest.getRequestDispatcher(<span class="hljs-string">&quot;/login.jsp&quot;</span>).forward(servletRequest,servletResponse);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-comment">//让程序继续往下访问用户的目标资源</span><br>            filterChain.doFilter(servletRequest,servletResponse);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-comment">&lt;!--filter标签用于配置一个Filter过滤器--&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>     <span class="hljs-comment">&lt;!--给filter起一个别名--&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span><br>         AdminFilter<br>     <span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>     <span class="hljs-comment">&lt;!--配置filter全类名--&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span><br>         com.atguigu.filter.AdminFilter<br>     <span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br><br><br> <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br> <span class="hljs-comment">&lt;!--filter-mapping配置Filter过滤器的拦截路径--&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>     <span class="hljs-comment">&lt;!--filter-name表示当前的拦截路径给哪个filter使用--&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span><br>AdminFilter<br>     <span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>     <span class="hljs-comment">&lt;!--url-pattern配置拦截路径  /admin/*  表示请求地址为web目录下admin下的全部 --&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span><br>         /admin/*<br>     <span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><p>a.sjp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--<br>  Created by IntelliJ IDEA.<br>  User: #赵梓皓&amp;<br>  Date: <span class="hljs-number">2022</span>/<span class="hljs-number">10</span>/<span class="hljs-number">10</span><br>  Time: <span class="hljs-number">19</span>:<span class="hljs-number">58</span><br>  To change <span class="hljs-built_in">this</span> template use File | Settings | File Templates.<br>--%&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;%<br>    System.out.println(<span class="hljs-string">&quot;a.jsp页面执行了&quot;</span>);<br>    Object user=session.getAttribute(<span class="hljs-string">&quot;user&quot;</span>);<br>    <span class="hljs-comment">//如果等于null，说明还没有登陆</span><br>    <span class="hljs-keyword">if</span>(user==<span class="hljs-literal">null</span>)&#123;<br>        request.getRequestDispatcher(<span class="hljs-string">&quot;/login.jsp&quot;</span>).forward(request,response);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>%&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">[Title](http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/Filter/</span>admin/a.jsp)<br>访问这个的时候会访问不到，被Filter拦截，跳到login.jsp<br></code></pre></td></tr></table></figure><h2 id="完整的用户登录和权限检查"><a href="#完整的用户登录和权限检查" class="headerlink" title="完整的用户登录和权限检查"></a>完整的用户登录和权限检查</h2><p>Filter 过滤器的使用步骤： </p><p>1、编写一个类去实现 Filter 接口 </p><p>2、实现过滤方法 doFilter() </p><p>3、到 web.xml 中去配置 Filter 的拦截路径</p><p>login.jsp</p><figure class="highlight mojolicious"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs mojolicious"><span class="language-xml">&lt;%</span><span class="language-perl">--</span><br><span class="language-perl">  Created by IntelliJ IDEA.</span><br><span class="language-perl">  User: <span class="hljs-comment">#赵梓皓&amp;</span></span><br><span class="language-perl">  Date: <span class="hljs-number">2022</span>/<span class="hljs-number">10</span>/<span class="hljs-number">10</span></span><br><span class="language-perl">  Time: <span class="hljs-number">20</span>:08</span><br><span class="language-perl">  To change this template <span class="hljs-keyword">use</span> File | Settings | File Templates.</span><br><span class="language-perl">--</span><span class="language-xml">%&gt;</span><br><span class="language-xml">&lt;%</span><span class="language-perl">@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> </span><span class="language-xml">%&gt;</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://localhost:8080/Filter/loginServlet&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span></span><br><span class="language-xml">    用户名 <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br><span class="language-xml">    密码  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">tyep</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>/&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>LoginServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//解决相应乱码问题</span><br>        resp.setContentType(<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>);<br>        String username=req.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>        String password=req.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br><br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;wzg168&quot;</span>.equals(username)&amp;&amp;<span class="hljs-string">&quot;123456&quot;</span>.equals(password))&#123;<br>            req.getSession().setAttribute(<span class="hljs-string">&quot;user&quot;</span>,username);<br>              resp.getWriter().write(<span class="hljs-string">&quot;登陆成功&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            req.getRequestDispatcher(<span class="hljs-string">&quot;/login.jsp&quot;</span>).forward(req,resp);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>登录之后就可以访问admin下面的内容了</p><h2 id="Filter的生命周期"><a href="#Filter的生命周期" class="headerlink" title="Filter的生命周期"></a>Filter的生命周期</h2><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210111119042.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221011111954101"></p><h2 id="FilterConfig类"><a href="#FilterConfig类" class="headerlink" title="FilterConfig类"></a>FilterConfig类</h2><p>FilterConfig 类见名知义，它是 Filter 过滤器的配置文件类。 </p><p>Tomcat 每次创建 Filter 的时候，也会同时创建一个 FilterConfig 类，这里包含了 Filter 配置文件的配置信息</p><p>FilterConfig 类的作用是获取 filter 过滤器的配置内容</p><p> 1、获取 Filter 的名称 filter-name 的内容 </p><p>2、获取在 Filter 中配置的 init-param 初始化参数 </p><p>3、获取 ServletContext 对象</p><p>测试FilterConfig类</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"> @Override<br>    <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> init(FilterConfig filterConfig) throws ServletException &#123;<br>       // <span class="hljs-number">1</span>、获取 <span class="hljs-keyword">Filter</span> 的名称 <span class="hljs-keyword">filter</span>-<span class="hljs-type">name</span> 的内容<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;2.Filter的init(FilterConfig filterConfig)初始化&quot;);<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;filter-name的值&quot;+filterConfig.getFilterName());<br>        //<span class="hljs-number">2</span>、获取在 web,<span class="hljs-type">xml</span>  <span class="hljs-keyword">Filter</span> 中配置的 init-param 初始化参数<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;初始化参数username的值&quot;+filterConfig.getInitParameter(&quot;username&quot;));<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;初始化参数url的值&quot;+filterConfig.getInitParameter(&quot;url&quot;));<br>        //<span class="hljs-number">3</span>、获取 ServletContext 对象<br>       <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(filterConfig.getServletContext());<br>    &#125;<br></code></pre></td></tr></table></figure><p>web.xml文件中加上init-param参数</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-comment">&lt;!--filter标签用于配置一个Filter过滤器--&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>     <span class="hljs-comment">&lt;!--给filter起一个别名--&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span><br>         AdminFilter<br>     <span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>     <span class="hljs-comment">&lt;!--配置filter全类名--&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span><br>         com.atguigu.filter.AdminFilter<br>     <span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br><br>     <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>username<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>root<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>url<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>jdbc:mysql:localhost3306/test<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><br> <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br> <span class="hljs-comment">&lt;!--filter-mapping配置Filter过滤器的拦截路径--&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>     <span class="hljs-comment">&lt;!--filter-name表示当前的拦截路径给哪个filter使用--&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span><br>AdminFilter<br>     <span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>     <span class="hljs-comment">&lt;!--url-pattern配置拦截路径  /admin/*  表示请求地址为web目录下admin下的全部 --&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span><br>         /admin/*<br>     <span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br> <br> <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span><br>         LoginServlet<br>     <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span><br>         com.atguigu.servlet.LoginServlet<br>     <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>LoginServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/loginServlet<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="FilterChain过滤链"><a href="#FilterChain过滤链" class="headerlink" title="FilterChain过滤链"></a>FilterChain过滤链</h2><p>是doFilter方法的第三个参数FilterChain filterChain</p><p>前两个参数是request和response</p><p>Filter 过滤器 </p><p>Chain 链，链</p><p>条 FilterChain 就是过滤器链（多个过滤器如何一起工作）</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210111403411.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221011140336097"></p><p>如果通过了两个doFilter方法的guolv</p><p>代码执行就是</p><p>Filter1前置代码    Filter2前置代码   目标资源被访问啦  Filter2后置代码  Filter1后置代码</p><p>如果Filter2过滤不通过</p><p>代码执行是</p><p>FilTer1前置代码 Filter2 前置代码  Filter1后置代码</p><p>如果Filter2过滤不通过</p><p>Filter1前置代码</p><p>Thread.getCurrentThread().getName()得到当前线程的名字</p><h2 id="Filter过滤器的三种拦截路径"><a href="#Filter过滤器的三种拦截路径" class="headerlink" title="Filter过滤器的三种拦截路径"></a>Filter过滤器的三种拦截路径</h2><p>路径后面加参数都是可以匹配的</p><p>—精确匹配</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs aspectj">/<span class="hljs-keyword">target</span>.jsp<br></code></pre></td></tr></table></figure><p>以上配置的路径，表示请求地址必须为：<a href="http://ip:port/工程路径/target.jsp">http://ip:port/工程路径/target.jsp</a></p><p>后面可以加参数都是无所谓的</p><p>–目录匹配</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/admin/</span>*<br></code></pre></td></tr></table></figure><p>以上配置的路径，表示请求地址必须为：<a href="http://ip:port/工程路径/admin/">http://ip:port/工程路径/admin/</a>*</p><p>–后缀名匹配</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210111423656.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221011142351490"></p><h1 id="书城项目第八阶段"><a href="#书城项目第八阶段" class="headerlink" title="书城项目第八阶段"></a>书城项目第八阶段</h1><p><strong>1.使用 Filter 过滤器拦截&#x2F;pages&#x2F;manager&#x2F;所有内容，实 现权限检查</strong></p><p>加一个过滤器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.filter;<br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpSession;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ManagerFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>  <span class="hljs-comment">//获得session</span><br>        <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">servletRequest1</span> <span class="hljs-operator">=</span> (HttpServletRequest) servletRequest;<br>        <span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> servletRequest1.getSession();<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> session.getAttribute(<span class="hljs-string">&quot;user&quot;</span>);<br>        <span class="hljs-keyword">if</span>(user==<span class="hljs-literal">null</span>)&#123;<br>            servletRequest1.getRequestDispatcher(<span class="hljs-string">&quot;/pages/user/login.jsp&quot;</span>).forward(servletRequest,servletResponse);<br>        &#125;<span class="hljs-keyword">else</span><br>        &#123;<br>            filterChain.doFilter(servletRequest,servletResponse);<br>        &#125;<br><br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在web.xml中加上一个filter的过滤器</p><p>两个路径，因为通过&#x2F;manager&#x2F;BookServlet?action&#x3D;page也可以访问后台，所以两个都要过滤掉</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>ManagetFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>com.atguigu.filter.ManagerFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>ManagetFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/pages/manager/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/manager/BookServlet<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="ThreadLocal使用介绍"><a href="#ThreadLocal使用介绍" class="headerlink" title="ThreadLocal使用介绍"></a>ThreadLocal使用介绍</h2><p>ThreadLocal 的作用，它可以解决多线程的数据安全问题。</p><p>ThreadLocal 它可以给当前线程关联一个数据（可以是普通变量，可以是对象，也可以是数组，集合）</p><p>ThreadLocal 的特点： </p><p>1、ThreadLocal 可以为当前线程关联一个数据。（它可以像 Map 一样存取数据，key 为当前线程） </p><p>2、每一个 ThreadLocal 对象，只能为当前线程关联一个数据，如果要为当前线程关联多个数据，就需要使用多个 ThreadLocal 对象实例。 </p><p>3、每个 ThreadLocal 对象实例定义的时候，一般都是 static 类型 </p><p>4、ThreadLocal 中保存数据，在线程销毁后。会由 JVM 虚拟自动释放</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">package com.atguigu.test;<br><br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-keyword">class</span> OrderService &#123;<br>    <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> createOrder()&#123;<br>        String <span class="hljs-type">name</span> = Thread.currentThread().getName();<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;OrderService 当前线程[&quot; + <span class="hljs-type">name</span> + &quot;]中保存的数据是：&quot; +<br>                ThreadLocalTest.threadLocal.<span class="hljs-keyword">get</span>());<br>        <span class="hljs-built_in">new</span> OrderDao().saveOrder();<br>    &#125;<br>&#125;<br> <span class="hljs-keyword">class</span> OrderDao &#123;<br>    <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> saveOrder()&#123;<br>        String <span class="hljs-type">name</span> = Thread.currentThread().getName();<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;OrderDao 当前线程[&quot; + <span class="hljs-type">name</span> + &quot;]中保存的数据是：&quot; +<br>                ThreadLocalTest.threadLocal.<span class="hljs-keyword">get</span>());<br>    &#125;<br>&#125;<br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> ThreadLocalTest &#123;<br>    // <span class="hljs-built_in">public</span> static Map&lt;String,<span class="hljs-keyword">Object</span>&gt; data = <span class="hljs-built_in">new</span> Hashtable&lt;String,<span class="hljs-keyword">Object</span>&gt;();<br>    <span class="hljs-built_in">public</span> static ThreadLocal&lt;<span class="hljs-keyword">Object</span>&gt; threadLocal = <span class="hljs-built_in">new</span> ThreadLocal&lt;<span class="hljs-keyword">Object</span>&gt;();<br>    private static Random random = <span class="hljs-built_in">new</span> Random();<br>    <span class="hljs-built_in">public</span> static <span class="hljs-keyword">class</span> Task implements Runnable &#123;<br>        @Override<br>        <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> run() &#123;<br>// 在 Run 方法中，随机生成一个变量（线程要关联的数据），然后以当前线程名为 key 保存到 map 中<br>            <span class="hljs-type">Integer</span> i = random.nextInt(<span class="hljs-number">1000</span>);<br>// 获取当前线程名<br>            String <span class="hljs-type">name</span> = Thread.currentThread().getName();<br>            <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;线程[&quot;+<span class="hljs-type">name</span>+&quot;]生成的随机数是：&quot; + i);<br>// data.put(<span class="hljs-type">name</span>,i);<br>            threadLocal.<span class="hljs-keyword">set</span>(i);<br>            try &#123;<br>                Thread.sleep(<span class="hljs-number">3000</span>);<br>            &#125; catch (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            //这个也是为验证取出的同一线程相关联的数都是相同的<br>            <span class="hljs-built_in">new</span> OrderService().createOrder();<br>// 在 Run 方法结束之前，以当前线程名获取出数据并打印。查看是否可以取出操作<br>// <span class="hljs-keyword">Object</span> o = data.<span class="hljs-keyword">get</span>(<span class="hljs-type">name</span>);<br>            <span class="hljs-keyword">Object</span> o = threadLocal.<span class="hljs-keyword">get</span>();<br>            <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;在线程[&quot;+<span class="hljs-type">name</span>+&quot;]快结束时取出关联的数据是：&quot; + o);<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)&#123;<br>            <span class="hljs-built_in">new</span> Thread(<span class="hljs-built_in">new</span> Task()).<span class="hljs-keyword">start</span>();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="使用-Filter-和-ThreadLocal-组合管理事务"><a href="#使用-Filter-和-ThreadLocal-组合管理事务" class="headerlink" title="使用 Filter 和 ThreadLocal 组合管理事务"></a>使用 Filter 和 ThreadLocal 组合管理事务</h2><p><strong>查询时不需要提交事务的</strong></p><p>保存订单和保存订单项还有更新销量要么都成功，要么都失败</p><p><strong>可以用到事务</strong></p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210111614323.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221011161446635"></p><p>JDBCUtils</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.utils;<br><br><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSource;<br><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JdbcUtils</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> DruidDataSource dataSource;<br>    <span class="hljs-comment">//用ThreadLocal保存conn链接</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ThreadLocal&lt;Connection&gt; conns=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;Connection&gt;();<br><span class="hljs-keyword">static</span> &#123;<br>    <span class="hljs-keyword">try</span>&#123;<br>      Properties properties=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>      InputStream inputStream=JdbcUtils.class.getClassLoader().getResourceAsStream(<span class="hljs-string">&quot;druid.properties&quot;</span>);<br><br>      properties.load(inputStream);<br>      dataSource= (DruidDataSource) DruidDataSourceFactory.createDataSource(properties);<br>    &#125;<br>    <span class="hljs-keyword">catch</span>(Exception e)&#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//获取数据库连接池中的连接，如果返回null就是获取失败，有值就是获取成功</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title function_">getConnection</span><span class="hljs-params">()</span>&#123;<br>Connection conn=conns.get();<br><span class="hljs-keyword">if</span>(conn==<span class="hljs-literal">null</span>)&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        conn=dataSource.getConnection();<span class="hljs-comment">//从数据库连接池中获取链接</span><br>        conns.set(conn);<span class="hljs-comment">//保存到ThreadLocal对象中，供后面的jdbc操作使用</span><br>        conn.setAutoCommit(<span class="hljs-literal">false</span>);<span class="hljs-comment">//设置为手动管理事务</span><br>    &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">return</span> conn;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">提交事务，并释放连接</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">commitAndColose</span><span class="hljs-params">()</span>  &#123;<br>    <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> conns.get();<br>    <span class="hljs-keyword">if</span>(connection!=<span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-comment">//如果不等于null，说明之前使用过链接操作过数据库</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            connection.commit();<span class="hljs-comment">//提交事务</span><br>        &#125;<br><br>           <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>        e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">finally</span>&#123;<br>            <span class="hljs-comment">//关闭链接</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                connection.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//一定要执行remove操作，否则就会出错，因为Tomcat服务器底层用了线程池技术</span><br>    conns.remove();<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">回滚事务，关闭连接</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rollbackAndColose</span><span class="hljs-params">()</span>  &#123;<br>    <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> conns.get();<br>    <span class="hljs-keyword">if</span>(connection!=<span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-comment">//如果不等于null，说明之前使用过链接操作过数据库</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            connection.rollback();<span class="hljs-comment">//提交事务</span><br>        &#125;<br><br>        <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">finally</span>&#123;<br>            <span class="hljs-comment">//关闭链接</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                connection.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//一定要执行remove操作，否则就会出错，因为Tomcat服务器底层用了线程池技术</span><br>    conns.remove();<br>&#125;<br><br><span class="hljs-comment">//关闭连接</span><br>    <span class="hljs-comment">/*public static void close(Connection conn)&#123;</span><br><span class="hljs-comment">    if(conn!=null)&#123;</span><br><span class="hljs-comment">        try&#123;</span><br><span class="hljs-comment">            conn.close();</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        catch(Exception e)&#123;</span><br><span class="hljs-comment">            e.printStackTrace();</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    &#125;*/</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>BaseDao</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.dao.impl;<br><br><span class="hljs-keyword">import</span> com.atguigu.utils.JdbcUtils;<br><span class="hljs-keyword">import</span> org.apache.commons.dbutils.QueryRunner;<br><span class="hljs-keyword">import</span> org.apache.commons.dbutils.handlers.BeanHandler;<br><span class="hljs-keyword">import</span> org.apache.commons.dbutils.handlers.BeanListHandler;<br><span class="hljs-keyword">import</span> org.apache.commons.dbutils.handlers.ScalarHandler;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseDao</span> &#123;<br>    <span class="hljs-comment">//使用DbUtils操作数据库</span><br><span class="hljs-keyword">private</span> QueryRunner queryRunner=<span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryRunner</span>();<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">update()方法用来执行：insert  update  delete语句</span><br><span class="hljs-comment">如果返回-1说明执行失败，  否则返回其他表示影响的行数</span><br><span class="hljs-comment"> */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">update</span><span class="hljs-params">(String sql,Object...args)</span>&#123;<br>        Connection conn= JdbcUtils.getConnection();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> queryRunner.update(conn, sql, args);<br>        &#125;<br>        <span class="hljs-keyword">catch</span>(Exception e)&#123;<br>            e.printStackTrace();<br>            <span class="hljs-comment">//将异常都抛出去</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    查询返回一个javaBean的sql语句   type为返回对象类型，args是sql对应的参数值，sql是执行的sql语句  &lt;T&gt;返回的类型和泛型</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">queryForOne</span><span class="hljs-params">(Class&lt;T&gt; type,String sql,Object...args)</span> &#123;<br>        Connection con=JdbcUtils.getConnection();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> queryRunner.query(con,sql,<span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanHandler</span>&lt;T&gt;(type),args);<br>        &#125;<span class="hljs-keyword">catch</span>(SQLException e)&#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    查询返回多个javaBean的sql语句</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-keyword">public</span> &lt;T&gt; List&lt;T&gt; <span class="hljs-title function_">queryForList</span><span class="hljs-params">(Class&lt;T&gt; type,String sql,Object...args)</span>&#123;<br>        Connection con=JdbcUtils.getConnection();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> queryRunner.query(con,sql,<span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanListHandler</span>&lt;T&gt;(type),args);<br>        &#125;<span class="hljs-keyword">catch</span>(SQLException e)&#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    执行返回一个单元格的sql</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">queryForSingleValue</span><span class="hljs-params">(String sql,Object...args)</span>&#123;<br>        Connection conn=JdbcUtils.getConnection();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> queryRunner.query(conn, sql,<span class="hljs-keyword">new</span> <span class="hljs-title class_">ScalarHandler</span>(), args);<br>        &#125;<br>        <span class="hljs-keyword">catch</span>(SQLException e)&#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>OrderServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>    orderId = orderService.createOrder(cart, userId);<br>   JdbcUtils.commitAndColose();<span class="hljs-comment">//提交事务</span><br>&#125;<br><span class="hljs-keyword">catch</span>(Exception e)&#123;<br>    JdbcUtils.rollbackAndColose();<span class="hljs-comment">//回滚事务</span><br>    e.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure><p>一开始一直不成功，将表的引擎改为Innodb就可以了，以及把mysql默认引擎改为innodb</p><p>mylsam引擎是不支持事务操作的</p><p>右键表的设计表选项</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210122049601.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221012204953374"></p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210122050761.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221012205027761"></p><h2 id="使用Filter统一给所有的Service方法都加上try-catch"><a href="#使用Filter统一给所有的Service方法都加上try-catch" class="headerlink" title="使用Filter统一给所有的Service方法都加上try-catch"></a>使用Filter统一给所有的Service方法都加上try-catch</h2><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210122116980.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221012211622836"></p><p>就是doFilter有除了filterChain.doFilter()方法之外还有前置代码和后置代码，只要给这个工程的所有访问路径加上这个过滤器，然后再在</p><p>filterChain.foFilter后面加上提交事务，和catch 回滚事务，这样访问资源回来之后，可以执行后置代码，这个后置代码就是提交事务，或者捕捉错误之后回滚事务</p><p><strong>TranscationFilter类的代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.filter;<br><br><span class="hljs-keyword">import</span> com.atguigu.utils.JdbcUtils;<br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TranscationServlet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            filterChain.doFilter(servletRequest, servletResponse);<br>            <span class="hljs-comment">//提交事务</span><br>            JdbcUtils.commitAndColose();<br>        &#125;<br>      <span class="hljs-keyword">catch</span>(Exception e)<br><br>        &#123;<span class="hljs-comment">//回滚事务</span><br>            JdbcUtils.rollbackAndColose();<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>web.xml</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;filter&gt;<br>    &lt;filter-name&gt;TranscationServlet&lt;/filter-name&gt;<br>    &lt;filter-class&gt;com.atguigu.filter.TranscationServlet&lt;/filter-class&gt;<br>&lt;/filter&gt;<br>&lt;filter-mapping&gt;<br>    &lt;filter-name&gt;TranscationServlet&lt;/filter-name&gt;<br>    &lt;!--表示当前工程下的所有请求--&gt;<br>    &lt;url-pattern&gt;<span class="hljs-comment">/*&lt;/url-pattern&gt;</span><br><span class="hljs-comment">&lt;/filter-mapping&gt;</span><br></code></pre></td></tr></table></figure><p>BaseServlet</p><p>把BaseServlet中的异常抛出</p><p><strong>就是过程中的异常都应该抛出，如果异常没被Filter捕获就不能回滚事务了</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.web;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        doPost(req,resp);<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        resp.setContentType(<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>);<br>        String parameter=req.getParameter(<span class="hljs-string">&quot;action&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//通过反射获取对应的方法，因为设定获取的action的参数值和调用方法的名字相同</span><br>            <span class="hljs-comment">//this是指调用该post方法的对象</span><br>            <span class="hljs-type">Method</span> <span class="hljs-variable">parameter1</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getClass().getDeclaredMethod(parameter,HttpServletRequest.class,HttpServletResponse.class);<br>            <span class="hljs-comment">//执行目标业务方法</span><br>            parameter1.invoke(<span class="hljs-built_in">this</span>,req,resp);<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>();<span class="hljs-comment">//把异常抛给Filter过滤器</span><br>        &#125;<br><br><br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="使用Tomcat统一管理，展示友好的错误页面"><a href="#使用Tomcat统一管理，展示友好的错误页面" class="headerlink" title="使用Tomcat统一管理，展示友好的错误页面"></a>使用Tomcat统一管理，展示友好的错误页面</h2><p>在 web.xml 中我们可以通过错误页面配置来进行管理</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--error-page 标签配置，服务器出错之后，自动跳转的页面--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">error-page</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--error-code 是错误类型--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">error-code</span>&gt;</span>500<span class="hljs-tag">&lt;/<span class="hljs-name">error-code</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--location 标签表示。要跳转去的页面路径--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">location</span>&gt;</span>/pages/error/error500.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">location</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">error-page</span>&gt;</span><br><span class="hljs-comment">&lt;!--error-page 标签配置，服务器出错之后，自动跳转的页面--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">error-page</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--error-code 是错误类型--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">error-code</span>&gt;</span>404<span class="hljs-tag">&lt;/<span class="hljs-name">error-code</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--location 标签表示。要跳转去的页面路径--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">location</span>&gt;</span>/pages/error/error404.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">location</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">error-page</span>&gt;</span><br></code></pre></td></tr></table></figure><p>error500.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--<br>  Created by IntelliJ IDEA.<br>  User: #赵梓皓&amp;<br>  Date: <span class="hljs-number">2022</span>/<span class="hljs-number">10</span>/<span class="hljs-number">13</span><br>  Time: <span class="hljs-number">15</span>:<span class="hljs-number">18</span><br>  To change <span class="hljs-built_in">this</span> template use File | Settings | File Templates.<br>--%&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>这是错误页面<br>&lt;a href=<span class="hljs-string">&quot;index.jsp&quot;</span>&gt;返回首页&lt;/a&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>TranscationServlet</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs scss">  <span class="hljs-built_in">catch</span>(Exception e)<br><br>    &#123;<span class="hljs-comment">//回滚事务</span><br>        JdbcUtils<span class="hljs-selector-class">.rollbackAndColose</span>();<br>        e<span class="hljs-selector-class">.printStackTrace</span>();<br>        throw new <span class="hljs-built_in">RuntimeException</span>();<span class="hljs-comment">//继续抛异常，让tomcat服务器收到异常</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>回滚事务之后还是抛出异常，让tomcat服务器接收异常</p><h1 id="Json和Ajax"><a href="#Json和Ajax" class="headerlink" title="Json和Ajax"></a>Json和Ajax</h1><h2 id="Json"><a href="#Json" class="headerlink" title="Json"></a>Json</h2><p>JSON (JavaScript Object Notation) 是一种轻量级的数据交换格式。易于人阅读和编写。同时也易于机器解析和生成。JSON 采用完全独立于语言的文本格式，而且很多语言都提供了对 json 的支持（包括 C, C++, C#, Java, JavaScript, Perl, Python 等）。 这样就使得 JSON 成为理想的数据交换格式</p><p>json 是一种轻量级的数据交换格式。</p><p>轻量级指的是跟 xml 做比较</p><p>数据交换指的是客户端和服务器之间业务数据的传递格式</p><h2 id="Json在javascript的使用"><a href="#Json在javascript的使用" class="headerlink" title="Json在javascript的使用"></a>Json在javascript的使用</h2><p><strong>json定义</strong></p><p>json 是由键值对组成，并且由花括号（大括号）包围。每个键由引号引起来，键和值之间使用冒号进行分隔， 多组键值对之间进行逗号进行分隔。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-comment">// json的定义</span><br><span class="hljs-comment">//vlaue可以使字符串，数组，布尔，数字，json对象，有json对象的数组</span><br><span class="hljs-keyword">var</span> jsonobj=&#123;<br>    <span class="hljs-string">&quot;key1&quot;</span>:<span class="hljs-number">12</span>, <br>   <span class="hljs-string">&quot;key2&quot;</span>:<span class="hljs-string">&quot;abc&quot;</span>,<br>   <span class="hljs-string">&quot;key3&quot;</span>:<span class="hljs-literal">true</span>,<br>   <span class="hljs-string">&quot;key4&quot;</span>:[<span class="hljs-number">11</span>,<span class="hljs-string">&quot;arr&quot;</span>,<span class="hljs-literal">false</span>],<br>   <span class="hljs-string">&quot;key5&quot;</span>:&#123;<br>       <span class="hljs-string">&quot;key5_1&quot;</span>:<span class="hljs-number">12</span>,<br>      <span class="hljs-string">&quot;key5_2&quot;</span>:<span class="hljs-string">&quot;value&quot;</span><br>   &#125;,<br>   <span class="hljs-string">&quot;key6&quot;</span>:[&#123;<span class="hljs-string">&quot;key1&quot;</span>:<span class="hljs-string">&quot;12&quot;</span>&#125;,&#123;<span class="hljs-string">&quot;key1&quot;</span>:<span class="hljs-number">123</span>&#125;]<br>   <br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>json的访问</strong></p><p>json 本身是一个对象。 </p><p>json 中的 key 我们可以理解为是对象中的一个属性。 </p><p>json 中的 key 访问就跟访问对象的属性一样： json</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// json的定义</span><br><span class="hljs-comment">//vlaue可以使字符串，数组，布尔，数字，json对象，有json对象的数组</span><br><span class="hljs-keyword">var</span> jsonobj=&#123;<br>    <span class="hljs-string">&quot;key1&quot;</span>:<span class="hljs-number">12</span>,<br>   <span class="hljs-string">&quot;key2&quot;</span>:<span class="hljs-string">&quot;abc&quot;</span>,<br>   <span class="hljs-string">&quot;key3&quot;</span>:<span class="hljs-literal">true</span>,<br>   <span class="hljs-string">&quot;key4&quot;</span>:[<span class="hljs-number">11</span>,<span class="hljs-string">&quot;arr&quot;</span>,<span class="hljs-literal">false</span>],<br>   <span class="hljs-string">&quot;key5&quot;</span>:&#123;<br>       <span class="hljs-string">&quot;key5_1&quot;</span>:<span class="hljs-number">12</span>,<br>      <span class="hljs-string">&quot;key5_2&quot;</span>:<span class="hljs-string">&quot;value&quot;</span><br>   &#125;,<br>   <span class="hljs-string">&quot;key6&quot;</span>:[&#123;<span class="hljs-string">&quot;key1&quot;</span>:<span class="hljs-string">&quot;12&quot;</span>&#125;,&#123;<span class="hljs-string">&quot;key1&quot;</span>:<span class="hljs-number">123</span>&#125;]<br><br>&#125;;<br><span class="hljs-comment">//json就是一个对象</span><br>alert(typeof(jsonobj))<br><span class="hljs-comment">// json的访问</span><br>         alert(jsonobj.key1);<br>alert(jsonobj.key2);<br>alert(jsonobj.key3);<br><span class="hljs-comment">//数组遍历</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;jsonobj.key4.length;i++)&#123;<br>   alert(jsonobj.key4[i]);<br>&#125;<br>alert(jsonobj.key5.key5_1);<br>alert(jsonobj.key5.key5_2);<br>alert(jsonobj.key6);<br><span class="hljs-comment">//key6存储的就是json对象的数组，所以变量json被赋了个json对象</span><br><span class="hljs-keyword">var</span> json=jsonobj.key6[<span class="hljs-number">0</span>];<br></code></pre></td></tr></table></figure><p><strong>json两个常用方法</strong></p><p>json 的存在有两种形式。</p><p> 一种是：对象的形式存在，我们叫它 json 对象。 </p><p>一种是：字符串的形式存在，我们叫它 json 字符串。 </p><p>一般我们要操作 json 中的数据的时候，需要 json 对象的格式。 </p><p>一般我们要在客户端和服务器之间进行数据交换的时候，使用 json 字符串。</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-comment">// json对象转字符串</span><br><span class="hljs-keyword">var</span> jsonstring=<span class="hljs-built_in">JSON</span>.stringify(jsonobj);<span class="hljs-comment">//特别象java中对象的toString方法</span><br>alert(jsonstring)<br><span class="hljs-comment">// json字符串转json对象</span><br><span class="hljs-keyword">var</span> json2=<span class="hljs-built_in">JSON</span>.parse(jsonstring);<br>alert(<span class="hljs-keyword">typeof</span>(json2));<br></code></pre></td></tr></table></figure><h2 id="json在java中使用"><a href="#json在java中使用" class="headerlink" title="json在java中使用"></a>json在java中使用</h2><p><strong>json和javaBean的互转</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">    <span class="hljs-comment">//javaBean和json互相转化</span><br>    @Test<br>    public void test1<span class="hljs-literal">()</span>&#123;<br>Person person=<span class="hljs-keyword">new</span> <span class="hljs-constructor">Person(1,<span class="hljs-string">&quot;好帅&quot;</span>)</span>;<br><span class="hljs-comment">//创建Gson对象实例</span><br>Gson gson=<span class="hljs-keyword">new</span> <span class="hljs-constructor">Gson()</span>;<br><span class="hljs-comment">///toJson方法可以把java对象转换成为json字符串</span><br>        String personJsonString = gson.<span class="hljs-keyword">to</span><span class="hljs-constructor">Json(<span class="hljs-params">person</span>)</span>;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(personJsonString);<br><br>        <span class="hljs-comment">//fromJson把json字符串转换为java对象</span><br>        <span class="hljs-comment">//第一个参数是json字符串，第二个参数是转换回去的java对象类型</span><br>        <span class="hljs-comment">//看好是哪个方法选择第一个参数是字符串的fromJson方法</span><br>        Person person1 = gson.from<span class="hljs-constructor">Json(<span class="hljs-params">personJsonString</span>, Person.<span class="hljs-params">class</span>)</span>;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(person1);<br>    &#125;<br></code></pre></td></tr></table></figure><p>List 和 json互转</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">//list集合和<span class="hljs-type">json</span>转换<br>@Test<br><span class="hljs-built_in">public</span> <span class="hljs-type">void</span> test2()&#123;<br>    ArrayList&lt;Person&gt; personList = <span class="hljs-built_in">new</span> ArrayList&lt;&gt;();<br>    personList.<span class="hljs-keyword">add</span>(<span class="hljs-built_in">new</span> Person(<span class="hljs-number">1</span>,&quot;哥&quot;));<br>    personList.<span class="hljs-keyword">add</span>(<span class="hljs-built_in">new</span> Person(<span class="hljs-number">2</span>,&quot;第&quot;));<br>    Gson gson=<span class="hljs-built_in">new</span> Gson();<br>    //把List转换为<span class="hljs-type">Json</span>字符串<br>    String personListJsonString = gson.toJson(personList);<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(personListJsonString);//[&#123;&quot;id&quot;:<span class="hljs-number">1</span>,&quot;name&quot;:&quot;哥&quot;&#125;,&#123;&quot;id&quot;:<span class="hljs-number">2</span>,&quot;name&quot;:&quot;第&quot;&#125;]<br><br>    //第二个参数不能是personList.getClass(),这样得到的集合里面存储的是map对象不能转换为Person对象，所以用这个方法<br>    ArrayList&lt;Person&gt; arrayList = gson.fromJson(personListJsonString, <span class="hljs-built_in">new</span> PersonListType().getType());<br>    Person person = arrayList.<span class="hljs-keyword">get</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(person);<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">package</span> com.atguigu.json;<br><br><span class="hljs-keyword">import</span> com.atguigu.pojo.<span class="hljs-type">Person</span>;<br><span class="hljs-keyword">import</span> com.google.gson.reflect.<span class="hljs-type">TypeToken</span>;<br><br><span class="hljs-keyword">import</span> java.util.<span class="hljs-type">ArrayList</span>;<br><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PersonListType</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">TypeToken&lt;ArrayList&lt;Person&gt;&gt;</span> </span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>json和Map集合相互转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//map和json的互转</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span>&#123;<br>    Map&lt;Integer,Person&gt;  personMap=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    personMap.put(<span class="hljs-number">1</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;国歌&quot;</span>));<br>    personMap.put(<span class="hljs-number">2</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;康师傅&quot;</span>));<br>    Gson gson=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Gson</span>();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">personMapJsonString</span> <span class="hljs-operator">=</span> gson.toJson(personMap);<br>    System.out.println(personMapJsonString);<span class="hljs-comment">//&#123;&quot;1&quot;:&#123;&quot;id&quot;:1,&quot;name&quot;:&quot;国歌&quot;&#125;,&quot;2&quot;:&#123;&quot;id&quot;:2,&quot;name&quot;:&quot;康师傅&quot;&#125;&#125;</span><br><br>    Map&lt;Integer,Person&gt; personMap1 = gson.fromJson(personMapJsonString, <span class="hljs-keyword">new</span><br>            <span class="hljs-title class_">PersonMapType</span>().getType());<br>    <span class="hljs-comment">//使用匿名内部类的方式，这样就不用多创建java的class   TypeToken泛型中是你要返回的类型</span><br>  <span class="hljs-comment">//  Map&lt;Integer,Person&gt; personMap1 = gson.fromJson(personMapJsonString, new TypeToken&lt;HashMap&lt;Integer,Person&gt;&gt;()&#123;&#125;.getType());</span><br>    System.out.println(personMap1);<br>   Person p=personMap1.get(<span class="hljs-number">1</span>);<br>   System.out.println(p);<br>&#125;<br></code></pre></td></tr></table></figure><p>如果Map的value存储的是一个实体类对象，那么json对象.key取出的也就是一个json对象</p><p>​                                             如果是一个正常的12，字符串或者布尔，可以直接取出，</p><p>Map的key就是json对象的key</p><h2 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h2><p>ajax是单线程异步的</p><p>AJAX 即“Asynchronous Javascript And XML”（异步 JavaScript 和 XML），是指一种创建交互式网页应用的网页开发 技术。</p><p>ajax 是一种浏览器通过 js 异步发起请求，局部更新页面的技术（地址栏不发生变化，页面局部更新，其他地方不变）</p><p>同步是指你调了一个什么方法，这个线程就一直在这等着，这个方法调用完往下走，异步是指接着往下走先调用下面的代码，等那个方法服务器返回再执行</p><p>异步就是等服务器回应的时候，接着执行下面的代码</p><p><strong>Ajax 请求的局部更新，浏览器地址栏不会发生变化</strong> </p><p>局部更新不会舍弃原来页面的内容</p><h2 id="原生Ajax请求实例"><a href="#原生Ajax请求实例" class="headerlink" title="原生Ajax请求实例"></a>原生Ajax请求实例</h2><p>BaseServlet</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">package</span> com.atguigu.web;<br><br><span class="hljs-keyword">import</span> javax.servlet.<span class="hljs-type">ServletException</span>;<br><span class="hljs-keyword">import</span> javax.servlet.http.<span class="hljs-type">HttpServlet</span>;<br><span class="hljs-keyword">import</span> javax.servlet.http.<span class="hljs-type">HttpServletRequest</span>;<br><span class="hljs-keyword">import</span> javax.servlet.http.<span class="hljs-type">HttpServletResponse</span>;<br><span class="hljs-keyword">import</span> java.io.<span class="hljs-type">IOException</span>;<br><span class="hljs-keyword">import</span> java.lang.reflect.<span class="hljs-type">Method</span>;<br><br>public <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BaseServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> void doGet(<span class="hljs-type">HttpServletRequest</span> req, <span class="hljs-type">HttpServletResponse</span> resp) <span class="hljs-keyword">throws</span> <span class="hljs-type">ServletException</span>, <span class="hljs-type">IOException</span> &#123;<br>        doPost(req,resp);<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> void doPost(<span class="hljs-type">HttpServletRequest</span> req, <span class="hljs-type">HttpServletResponse</span> resp) <span class="hljs-keyword">throws</span> <span class="hljs-type">ServletException</span>, <span class="hljs-type">IOException</span> &#123;<br>    <span class="hljs-comment">//解决返回中文时的乱码问题</span><br>        resp.setContentType(<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>);<br>        <span class="hljs-type">String</span> parameter=req.getParameter(<span class="hljs-string">&quot;action&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//通过反射获取对应的方法，因为设定获取的action的参数值和调用方法的名字相同</span><br>            <span class="hljs-comment">//this是指调用该post方法的对象</span><br>            <span class="hljs-type">Method</span> parameter1 = <span class="hljs-keyword">this</span>.getClass().getDeclaredMethod(parameter,<span class="hljs-type">HttpServletRequest</span>.<span class="hljs-keyword">class</span>,<span class="hljs-type">HttpServletResponse</span>.<span class="hljs-keyword">class</span>);<br>            <span class="hljs-comment">//执行目标业务方法</span><br>            parameter1.invoke(<span class="hljs-keyword">this</span>,req,resp);<br><br>        &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-type">Exception</span> e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br><br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>AjaxServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.servlet;<br><br><span class="hljs-keyword">import</span> com.atguigu.pojo.Person;<br><span class="hljs-keyword">import</span> com.google.gson.Gson;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AjaxServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseServlet</span>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">javascriptAjax</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>      System.out.println(<span class="hljs-string">&quot;Ajax请求过来啦&quot;</span>);<br>      Person person=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;国歌&quot;</span>);<br>      <span class="hljs-comment">//json格式的字符串</span><br>        Gson gson=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Gson</span>();<br>        <span class="hljs-comment">//服务器响应一个person对象，用json字符串传送</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">personJsonString</span> <span class="hljs-operator">=</span> gson.toJson(person);<br>        resp.getWriter().write(personJsonString);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>ajax.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;pragma&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;no-cache&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;cache-control&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;no-cache&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Expires&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;0&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Insert title here<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">         <span class="hljs-comment">//在这里使用javascript语言发起Ajax请求，访问服务器AjaxServlet中javascriptAjax</span></span><br><span class="language-javascript">         <span class="hljs-keyword">function</span> <span class="hljs-title function_">ajaxRequest</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript"><span class="hljs-comment">//              1、我们首先要创建XMLHttpRequest </span></span><br><span class="language-javascript">                    <span class="hljs-keyword">var</span> xmlhttpreqest =<span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();</span><br><span class="language-javascript"><span class="hljs-comment">//              2、调用open方法设置请求参数</span></span><br><span class="language-javascript">             <span class="hljs-comment">//第一个参数是请求的方法，第二个参数是请求的地址，第三个参数是请求是否是异步</span></span><br><span class="language-javascript">                    xmlhttpreqest.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;GET&quot;</span>,<span class="hljs-string">&quot;http://localhost:8080/jsonajax/AjaxServlet?action=javascriptAjax&quot;</span>,<span class="hljs-literal">true</span>);</span><br><span class="language-javascript"><span class="hljs-comment">//              3、调用send方法发送请求</span></span><br><span class="language-javascript">             xmlhttpreqest.<span class="hljs-title function_">send</span>();</span><br><span class="language-javascript"><span class="hljs-comment">//              4、在send方法前绑定onreadystatechange事件，处理请求完成后的操作。</span></span><br><span class="language-javascript">            <span class="hljs-comment">//这个事件是响应值做好被处理准备之后调用</span></span><br><span class="language-javascript">            xmlhttpreqest.<span class="hljs-property">onreadystatechange</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">               <span class="hljs-comment">//满足这两个条件，才能用responseText</span></span><br><span class="language-javascript">               <span class="hljs-keyword">if</span>(xmlhttpreqest.<span class="hljs-property">readyState</span>==<span class="hljs-number">4</span>&amp;&amp;xmlhttpreqest.<span class="hljs-property">status</span>==<span class="hljs-number">200</span>)&#123;</span><br><span class="language-javascript">                   <span class="hljs-comment">//转成json对象</span></span><br><span class="language-javascript">                  <span class="hljs-keyword">var</span> jsonobj = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(xmlhttpreqest.<span class="hljs-property">responseText</span>);</span><br><span class="language-javascript">                  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;div01&quot;</span>).<span class="hljs-property">innerHTML</span>=<span class="hljs-string">&quot;编号&quot;</span>+jsonobj.<span class="hljs-property">id</span>+<span class="hljs-string">&quot;，姓名&quot;</span>+jsonobj.<span class="hljs-property">name</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">               &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">         &#125;</span><br><span class="language-javascript">      </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span> <br>      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;ajaxRequest()&quot;</span>&gt;</span>ajax request<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;div01&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Ajax请求的特点说明"><a href="#Ajax请求的特点说明" class="headerlink" title="Ajax请求的特点说明"></a>Ajax请求的特点说明</h2><h2 id="jQuery中的ajax方法"><a href="#jQuery中的ajax方法" class="headerlink" title="jQuery中的ajax方法"></a>jQuery中的ajax方法</h2><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210121705320.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221012170550006"></p><p><strong>回调函数的参数获取服务器返回的数据</strong>  </p><p>这是$.ajax演示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// ajax请求</span><br>$(<span class="hljs-string">&quot;#ajaxBtn&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>   <br>   $.<span class="hljs-title function_">ajax</span>(&#123;<br>      <span class="hljs-attr">url</span>:<span class="hljs-string">&quot;http://localhost:8080/jsonajax/AjaxServlet&quot;</span>,<br>      <span class="hljs-attr">data</span>:&#123;<span class="hljs-attr">action</span>:<span class="hljs-string">&quot;jQueryAjax&quot;</span>&#125;,<br>      <span class="hljs-comment">//data:&quot;action=jQueryAjax&quot;,</span><br>      <span class="hljs-attr">type</span>:<span class="hljs-string">&quot;Get&quot;</span>,<br>      <span class="hljs-attr">success</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">msg</span>)&#123;<span class="hljs-comment">//参数获取服务器返回的数据</span><br>         <span class="hljs-comment">//先转成json对象</span><br>         <span class="hljs-keyword">var</span> jsonobj=<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(msg);<br>         $(<span class="hljs-string">&quot;#msg&quot;</span>).<span class="hljs-title function_">html</span>(<span class="hljs-string">&quot;编号&quot;</span>+jsonobj.<span class="hljs-property">id</span>+<span class="hljs-string">&quot;，姓名&quot;</span>+jsonobj.<span class="hljs-property">name</span>);<br>      &#125;,<br>      <span class="hljs-attr">dataType</span>:<span class="hljs-string">&quot;text&quot;</span><br>   &#125;);<br><br>&#125;);<br></code></pre></td></tr></table></figure><p>在AjaxServlet中加方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">jQueryAjax</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    System.out.println(<span class="hljs-string">&quot;jQueryAjax===方法调用了&quot;</span>);<br>    Person person=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;国歌&quot;</span>);<br>    <span class="hljs-comment">//json格式的字符串</span><br>    Gson gson=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Gson</span>();<br>    <span class="hljs-comment">//服务器响应一个person对象，用json字符串传送</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">personJsonString</span> <span class="hljs-operator">=</span> gson.toJson(person);<br>    <span class="hljs-comment">//往客户端返回Json字符串</span><br>    resp.getWriter().write(personJsonString);<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="jQuery中的get和post方法"><a href="#jQuery中的get和post方法" class="headerlink" title="jQuery中的get和post方法"></a>jQuery中的get和post方法</h2><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210121728950.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221012172836113"></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// ajax--get请求</span><br>$(<span class="hljs-string">&quot;#getBtn&quot;</span>).click(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><br>   $.get(<span class="hljs-string">&quot;http://localhost:8080/jsonajax/AjaxServlet&quot;</span>,<span class="hljs-string">&quot;action=jQueryGet&quot;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)&#123;<span class="hljs-comment">//参数获取服务器返回的数据</span><br>      <span class="hljs-comment">//这里不用把data转为json对象，是因为服务器返回数据本来就设置为json对象</span><br>      $(<span class="hljs-string">&quot;#msg&quot;</span>).html(<span class="hljs-string">&quot;get编号&quot;</span>+data.id+<span class="hljs-string">&quot;,姓名&quot;</span>+data.name);<br>   &#125;,<span class="hljs-string">&quot;json&quot;</span>);<br>   <br>&#125;);<br><br><span class="hljs-comment">// ajax--post请求</span><br>$(<span class="hljs-string">&quot;#postBtn&quot;</span>).click(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>   $.post(<span class="hljs-string">&quot;http://localhost:8080/jsonajax/AjaxServlet&quot;</span>,<span class="hljs-string">&quot;action=jQueryPost&quot;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)&#123;<br>      $(<span class="hljs-string">&quot;#msg&quot;</span>).html(<span class="hljs-string">&quot;post编号&quot;</span>+data.id+<span class="hljs-string">&quot;,姓名&quot;</span>+data.name);<br>   &#125;,<span class="hljs-string">&quot;json&quot;</span>);<br>   <br>&#125;);<br></code></pre></td></tr></table></figure><p>Servlet中加的方法</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">protected void j<span class="hljs-constructor">QueryGet(HttpServletRequest <span class="hljs-params">req</span>, HttpServletResponse <span class="hljs-params">resp</span>)</span> throws ServletException, IOException &#123;<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;jQueryget===方法调用了&quot;</span>);<br>    Person person = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Person(1, <span class="hljs-string">&quot;国歌&quot;</span>)</span>;<br>    <span class="hljs-comment">//json格式的字符串</span><br>    Gson gson = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Gson()</span>;<br>    <span class="hljs-comment">//服务器响应一个person对象，用json字符串传送</span><br>    String personJsonString = gson.<span class="hljs-keyword">to</span><span class="hljs-constructor">Json(<span class="hljs-params">person</span>)</span>;<br>    resp.get<span class="hljs-constructor">Writer()</span>.write(personJsonString);<br>&#125;<br><br>protected void j<span class="hljs-constructor">QueryPost(HttpServletRequest <span class="hljs-params">req</span>, HttpServletResponse <span class="hljs-params">resp</span>)</span> throws ServletException, IOException &#123;<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;jQuerypost===方法调用了&quot;</span>);<br>    Person person = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Person(1, <span class="hljs-string">&quot;国歌&quot;</span>)</span>;<br>    <span class="hljs-comment">//json格式的字符串</span><br>    Gson gson = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Gson()</span>;<br>    <span class="hljs-comment">//服务器响应一个person对象，用json字符串传送</span><br>    String personJsonString = gson.<span class="hljs-keyword">to</span><span class="hljs-constructor">Json(<span class="hljs-params">person</span>)</span>;<br>    resp.get<span class="hljs-constructor">Writer()</span>.write(personJsonString);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="jQuery的getJson方法"><a href="#jQuery的getJson方法" class="headerlink" title="jQuery的getJson方法"></a>jQuery的getJson方法</h2><p>$.getJSON 方法 </p><p>getJSON的返回值都是json对象</p><p>url                             请求的 url 地址 </p><p>data                         发送给服务器的数据 </p><p>callback                   成功的回调函数</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// ajax--getJson请求</span><br>$(<span class="hljs-string">&quot;#getJSONBtn&quot;</span>).click(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>$.getJSON(<span class="hljs-string">&quot;http://localhost:8080/jsonajax/AjaxServlet&quot;</span>,<span class="hljs-string">&quot;action=jQueryGetJson&quot;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)&#123;<br>   $(<span class="hljs-string">&quot;#msg&quot;</span>).html(<span class="hljs-string">&quot;getJson编号&quot;</span>+data.id+<span class="hljs-string">&quot;,姓名&quot;</span>+data.name);<br>&#125;);<br><br>&#125;);<br></code></pre></td></tr></table></figure><p>Servlet中增加的方法</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">protected void j<span class="hljs-constructor">QueryGetJson(HttpServletRequest <span class="hljs-params">req</span>, HttpServletResponse <span class="hljs-params">resp</span>)</span> throws ServletException, IOException &#123;<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;jQuerygetJson===方法调用了&quot;</span>);<br>    Person person = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Person(1, <span class="hljs-string">&quot;国歌&quot;</span>)</span>;<br>    <span class="hljs-comment">//json格式的字符串</span><br>    Gson gson = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Gson()</span>;<br>    <span class="hljs-comment">//服务器响应一个person对象，用json字符串传送</span><br>    String personJsonString = gson.<span class="hljs-keyword">to</span><span class="hljs-constructor">Json(<span class="hljs-params">person</span>)</span>;<br>    resp.get<span class="hljs-constructor">Writer()</span>.write(personJsonString);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="jQuery中的serialize-方法"><a href="#jQuery中的serialize-方法" class="headerlink" title="jQuery中的serialize()方法"></a>jQuery中的serialize()方法</h2><p>serialize()可以把表单中所有表单项的内容都获取到，并以 name&#x3D;value&amp;name&#x3D;value</p><p>“action&#x3D;jQuerySerialize&amp;”+$(“#form01”).serialize()         获取表单的所有项再和自己传的参数拼接</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// ajax请求</span><br>$(<span class="hljs-string">&quot;#submit&quot;</span>).click(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>   $.getJSON(<span class="hljs-string">&quot;http://localhost:8080/jsonajax/AjaxServlet&quot;</span>,<span class="hljs-string">&quot;action=jQuerySerialize&amp;&quot;</span>+$(<span class="hljs-string">&quot;#form01&quot;</span>).serialize(),<span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)&#123;<br>      $(<span class="hljs-string">&quot;#msg&quot;</span>).html(<span class="hljs-string">&quot;getJson编号&quot;</span>+data.id+<span class="hljs-string">&quot;,姓名&quot;</span>+data.name);<br>   &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><p>Servlet中加方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">jQuerySerialize</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    System.out.println(<span class="hljs-string">&quot;jQuerySeialize===方法调用了&quot;</span>);<br>    <span class="hljs-comment">//获取serialize从表单中得到的用户名</span><br>    System.out.println(<span class="hljs-string">&quot;用户名&quot;</span>+req.getParameter(<span class="hljs-string">&quot;username&quot;</span>));<br>    <span class="hljs-comment">//获取serialize从表单中或得到的密码</span><br>    System.out.println(<span class="hljs-string">&quot;密码&quot;</span>+req.getParameter(<span class="hljs-string">&quot;password&quot;</span>));<br>    <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;国歌&quot;</span>);<br>    <span class="hljs-comment">//json格式的字符串</span><br>    <span class="hljs-type">Gson</span> <span class="hljs-variable">gson</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Gson</span>();<br>    <span class="hljs-comment">//服务器响应一个person对象，用json字符串传送</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">personJsonString</span> <span class="hljs-operator">=</span> gson.toJson(person);<br>    resp.getWriter().write(personJsonString);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="书城项目第九阶段"><a href="#书城项目第九阶段" class="headerlink" title="书城项目第九阶段"></a>书城项目第九阶段</h1><h2 id="使用-AJAX请求验证用户名是否可用"><a href="#使用-AJAX请求验证用户名是否可用" class="headerlink" title="使用 AJAX请求验证用户名是否可用"></a>使用 AJAX请求验证用户名是否可用</h2><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210121915291.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221012191515996"></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs arcade">$(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><br>   <span class="hljs-comment">//给用户名绑定失去焦点事件</span><br>   $(<span class="hljs-string">&quot;#username&quot;</span>).blur(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>      <span class="hljs-comment">//1.获取用户名</span><br>      <span class="hljs-keyword">var</span> username=this.value;<br>      <span class="hljs-comment">//获得JSON，并得到json对象</span><br>      $.getJSON(<span class="hljs-string">&quot;http://localhost:8087/book2/UserServlet&quot;</span>,<span class="hljs-string">&quot;action=ajaxExistUsername&amp;username=&quot;</span>+username,<span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)&#123;<br>         <span class="hljs-keyword">if</span>(data.existsUsername)&#123;<br>            $(<span class="hljs-string">&quot;span.errorMsg&quot;</span>).<span class="hljs-built_in">text</span>(<span class="hljs-string">&quot;用户名已存在&quot;</span>);<br>         &#125;<br>         <span class="hljs-keyword">else</span><br>         &#123;<br>            $(<span class="hljs-string">&quot;span.errorMsg&quot;</span>).<span class="hljs-built_in">text</span>(<span class="hljs-string">&quot;用户名可用&quot;</span>);<br>         &#125;<br>      &#125;);<br><br>   &#125;);<br></code></pre></td></tr></table></figure><p>上面这个是regisr.jsp</p><p>这个是UserServlet加了一个方法</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">protected void ajax<span class="hljs-constructor">ExistUsername(HttpServletRequest <span class="hljs-params">req</span>, HttpServletResponse <span class="hljs-params">resp</span>)</span> throws ServletException, IOException &#123;<br>    <span class="hljs-comment">//获取请求的参数</span><br>    String username=req.get<span class="hljs-constructor">Parameter(<span class="hljs-string">&quot;username&quot;</span>)</span>;<br>    <span class="hljs-comment">//调用userService.exsitsUsername()</span><br>    boolean b = userService.exists<span class="hljs-constructor">Username(<span class="hljs-params">username</span>)</span>;<br>    <span class="hljs-comment">//把返回的结果封装成为Map对象</span><br>    Map&lt;String,Object&gt; resultMap=<span class="hljs-keyword">new</span> HashMap&lt;String,Object&gt;<span class="hljs-literal">()</span>;<br>    resultMap.put(<span class="hljs-string">&quot;existsUsername&quot;</span>,b);<br>    <span class="hljs-comment">//将Map转成json字符串</span><br>    Gson gson=<span class="hljs-keyword">new</span> <span class="hljs-constructor">Gson()</span>;<br>    String s = gson.<span class="hljs-keyword">to</span><span class="hljs-constructor">Json(<span class="hljs-params">resultMap</span>)</span>;<br>    <span class="hljs-comment">//回传给客户端</span><br>resp.get<span class="hljs-constructor">Writer()</span>.write(s);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="使用Ajax修改把商品添加到购物车"><a href="#使用Ajax修改把商品添加到购物车" class="headerlink" title="使用Ajax修改把商品添加到购物车"></a>使用Ajax修改把商品添加到购物车</h2><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202210122000255.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20221012200033931"></p><p>index.jsp</p><p>把原本的添加到购物车的按钮的点击事件给改了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">   $(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">       $(<span class="hljs-string">&quot;button.addToCart&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript">           <span class="hljs-comment">/**</span></span><br><span class="hljs-comment"><span class="language-javascript">            * 在事件响应的function函数中有一个this对象，就是是当前正在响应事件的dom对象，就是那个标签的dom对象，</span></span><br><span class="hljs-comment"><span class="language-javascript">            * <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">*|jQuery</span>&#125;</span></span><br><span class="hljs-comment"><span class="language-javascript">            */</span></span><br><span class="language-javascript">           <span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="language-javascript">           先把this改为jQery对象然后获取属性值</span></span><br><span class="hljs-comment"><span class="language-javascript">            */</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> bookId=$(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;bookId&quot;</span>);</span><br><span class="language-javascript">           <span class="hljs-comment">//跳转到</span></span><br><span class="language-javascript">         <span class="hljs-comment">/* location.href=&quot;http://localhost:8087/book2/CartServlet?action=addItem&amp;id=&quot;+bookId;*/</span></span><br><span class="language-javascript">           $.<span class="hljs-title function_">getJSON</span>(<span class="hljs-string">&quot;http://localhost:8087/book2/CartServlet&quot;</span>,<span class="hljs-string">&quot;action=ajaxAddItem&amp;id=&quot;</span>+bookId,<span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)&#123;</span><br><span class="language-javascript">               <span class="hljs-comment">//法Ajax请求，添加商品到购物车</span></span><br><span class="language-javascript">               $(<span class="hljs-string">&quot;#cartTotalCount&quot;</span>).<span class="hljs-title function_">text</span>(<span class="hljs-string">&quot;您的购物车中有&quot;</span>+data.<span class="hljs-property">totalCount</span>+<span class="hljs-string">&quot;件商品&quot;</span>);</span><br><span class="language-javascript">               $(<span class="hljs-string">&quot;#cartLastName&quot;</span>).<span class="hljs-title function_">text</span>(data.<span class="hljs-property">lastName</span>);</span><br><span class="language-javascript">           &#125;);</span><br><span class="language-javascript">       &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">   &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>CartServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ajaxAddItem</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    <span class="hljs-comment">//获取请求的参数，商品编号</span><br>    <span class="hljs-type">int</span> id= WebUtils.parseInt(req.getParameter(<span class="hljs-string">&quot;id&quot;</span>),<span class="hljs-number">0</span>);<br>    <span class="hljs-comment">//调用bookService.queryBookById(id):得到Book的信息</span><br>    <span class="hljs-type">Book</span> <span class="hljs-variable">book</span> <span class="hljs-operator">=</span> bookService.queryBookById(id);<br>    <span class="hljs-comment">//把图书信息转化成为CartItem商品项</span><br>    CartItem cartItem=<span class="hljs-keyword">new</span> <span class="hljs-title class_">CartItem</span>(book.getId(),book.getName(),<span class="hljs-number">1</span>,book.getPrice(),book.getPrice());<br><br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    用session存储cart信息</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-type">Cart</span> <span class="hljs-variable">cart</span> <span class="hljs-operator">=</span> (Cart) req.getSession().getAttribute(<span class="hljs-string">&quot;cart&quot;</span>);<br>    <span class="hljs-keyword">if</span>(cart==<span class="hljs-literal">null</span>)&#123;<br>        cart=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Cart</span>();<br>        req.getSession().setAttribute(<span class="hljs-string">&quot;cart&quot;</span>,cart);<br>    &#125;<br>    <span class="hljs-comment">//调用Cart.addItem(CartItem)添加商品项</span><br>    cart.addItem(cartItem);<br>    System.out.println(cart);<br>    <span class="hljs-comment">//重定向回商品列表页面</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    req.getHeader(&quot;Referer&quot;)获取请求服务器的地址，然后下面再跳回到这个地址</span><br><span class="hljs-comment">     */</span><br>    req.getSession().setAttribute(<span class="hljs-string">&quot;lastName&quot;</span>,cartItem.getName());<br><br>    <span class="hljs-comment">//返回购物车总的商品数量和最后一个添加的商品</span><br>    HashMap&lt;String, Object&gt; resultMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    resultMap.put(<span class="hljs-string">&quot;totalCount&quot;</span>,cart.getTotalCount());<br>    resultMap.put(<span class="hljs-string">&quot;lastName&quot;</span>,cartItem.getName());<br><br>    Gson gson=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Gson</span>();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">resultMapJsonString</span> <span class="hljs-operator">=</span> gson.toJson(resultMap);<br>    resp.getWriter().write(resultMapJsonString);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>index.jsp中的html代码</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;$&#123;empty sessionScope.cart.items&#125;&quot;</span>&gt;<br>    &lt;%--购物车为空的输出--%&gt;<br>    &lt;span id=<span class="hljs-string">&quot;cartTotalCount&quot;</span>&gt;&lt;/span&gt;<br>    &lt;div&gt;<br>        &lt;span id=<span class="hljs-string">&quot;cartLastName&quot;</span> style=<span class="hljs-string">&quot;color: red&quot;</span>&gt;当前购物车为空&lt;/span&gt;<br>    &lt;/div&gt;<br>&lt;/c:<span class="hljs-keyword">if</span>&gt;<br>&lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;$&#123;not empty sessionScope.cart.items&#125;&quot;</span>&gt;<br><br>    &lt;%--购物车为空的输出--%&gt;<br>    &lt;span id=<span class="hljs-string">&quot;cartTotalCount&quot;</span>&gt;您的购物车中有$&#123;sessionScope.cart.totalCount&#125;件商品&lt;/span&gt;<br>    &lt;div&gt;<br><br>        您刚刚将&lt;span id=<span class="hljs-string">&quot;cartLastName&quot;</span> style=<span class="hljs-string">&quot;color: red&quot;</span>&gt;$&#123;sessionScope.lastName&#125;&lt;/span&gt;加入到了购物车中<br>    &lt;/div&gt;<br><br>&lt;/c:<span class="hljs-keyword">if</span>&gt;<br></code></pre></td></tr></table></figure><p>给标签加上了id   cartTotalCount   cartLastName</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>java</title>
    <link href="/2022/09/29/java/"/>
    <url>/2022/09/29/java/</url>
    
    <content type="html"><![CDATA[<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>在Java中，<a href="https://so.csdn.net/so/search?q=%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F&spm=1001.2101.3001.7020">静态变量</a>和实例变量可以统称为成员变量。首先，明白什么是静态变量，什么是实例变量，他们定义的形式。静态变量也叫做类变量，独立于方法之外的变量，有static修饰。实例变量同样独立也是独立于方法之外 的变量，但没有static修饰。</p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>&lt;&lt;：是逻辑左移，右边补0，符号位和其他位一样要移动。</p><p>数学意义：在数字没有溢出的前提下，对于正数和负数，左移一位都相当于乘以2的1次方，左移n位就相当于乘以2的n次方。</p><p>计算：3 &lt;&lt; 2</p><p>3 &lt;&lt; 2，则是将数字3左移2位</p><p>1、首先把3转换为二进制数字0000 0000 0000 0000 0000 0000 0000 0011</p><p>2、然后把该数字高位（左侧）的两个零移出，其他的数字都朝左平移2位，最后在低位（右侧）的两个空位补零。</p><p>3、则得到的最终结果是0000 0000 0000 0000 0000 0000 0000 1100，则转换为十进制是12。<img src="https://iknow-pic.cdn.bcebos.com/9a504fc2d5628535e649906f9def76c6a6ef63d6?x-bce-process=image/resize,m_lfit,w_600,h_800,limit_1/quality,q_85/format,f_auto" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="img"></p><blockquote><blockquote><p>（右移运算符）</p></blockquote></blockquote><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918048.jpeg" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="img"></p><p>位运算符</p><blockquote><p>凡位运算符都是把值先转换成二进制再进行后续的处理，5的二进制位是0000 0101，右移两位就是把101左移后为0000 0001，正数左边第一位补0，负数补1，等于除于2的n次方，结果为1   ，<strong>只保留了结果的整数部分</strong></p></blockquote><p>&amp;（按位与）</p><blockquote><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918057.jpeg" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="img"></p></blockquote><p>位运算符</p><blockquote><p>&amp;按位与的运算规则是将两边的数转换为二进制位，然后运算最终值，运算规则即(两个为真才为真)1&amp;1&#x3D;1 , 1&amp;0&#x3D;0 , 0&amp;1&#x3D;0 , 0&amp;0&#x3D;0</p><p>3的二进制位是0000 0011 ， 5的二进制位是0000 0101 ， 那么就是011 &amp; 101，由按位与运算规则得知，001 &amp; 101等于0000 0001，最终值为1</p><p>7的二进制位是0000 0111，那就是111 &amp; 101等于101，也就是0000 0101，故值为5</p></blockquote><p>|（按位或）</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918996.jpeg" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="img"></p><p>位运算符</p><blockquote><p>|按位或和&amp;按位与计算方式都是转换二进制再计算，不同的是运算规则(一个为真即为真)1|0 &#x3D; 1 , 1|1 &#x3D; 1 , 0|0 &#x3D; 0 , 0|1 &#x3D; 1</p><p>6的二进制位0000 0110 , 2的二进制位0000 0010 , 110|010为110，最终值0000 0110，故6|2等于6</p></blockquote><p>^（异或运算符）</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918730.jpeg" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="img"></p><p>位运算符</p><blockquote><p>^异或运算符顾名思义，异就是不同，其运算规则为1^0 &#x3D; 1 , 1^1 &#x3D; 0 , 0^1 &#x3D; 1 , 0^0 &#x3D; 0</p><p>5的二进制位是0000 0101 ， 9的二进制位是0000 1001，也就是0101 ^ 1001,结果为1100 , 00001100的十进制位是12</p></blockquote><p>~（取反运算符）</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918232.jpeg" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="img"></p><p>位运算符</p><blockquote><p>取反就是1为0,0为1,5的二进制位是0000 0101，取反后为1111 1010，值为-6</p></blockquote><blockquote><blockquote><blockquote><p>（无符号右移运算符）</p></blockquote></blockquote></blockquote><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918203.jpeg" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="img"></p><p>正数无符号右移</p><p>无符号右移运算符和右移运算符的主要区别在于负数的计算，因为无符号右移是高位补0，移多少位补多少个0。</p><p>15的二进制位是0000 1111 ， 右移2位0000 0011，结果为3</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918319.jpeg" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="img"></p><p>负数无符号右移</p><p>-6的二进制是6的二进制取反再加1,6的二进制也就是0000 0000 0000 0000 0000 0000 0000 0110，取反后加1为1111 1111 1111 1111 1111 1111 1111 1010，右移三位0001 1111 1111 1111 1111 1111 1111 1111</p><p>二进制正值转负值</p><p>a.最高位改成1<br>    b.除了最高位，其他位<a href="https://so.csdn.net/so/search?q=%E5%8F%96%E5%8F%8D&spm=1001.2101.3001.7020">取反</a><br>    c.结果+1<br>    d.得到的结果就是对应的负值</p><h3 id="java-lang包"><a href="#java-lang包" class="headerlink" title="java.lang包"></a>java.lang包</h3><p>java.lang包是java语言的核心，它提供了java中的基础类。包括基本Object类、Class类、String类、基本类型的包装类、基本的数学类等等最基本的类。我们介绍一下Java 8中的java.lang包。主要类如下图：</p><p>类 由   域(变量) 方法  组成</p><p>常量叫做直接量</p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>基本数据类型:整形:短整型，整形，长整型，字节型<br>空数组<br>引用数据类型:类，接口，数组</p><p>字符’       ‘<br>字符串”  “</p><p>一个字节八比特，一个byte八位</p><p>byte 1字节     short2字节    int  4字节    long 8字节 float  4字节 double  8字节 char 2字节  boolean  1位</p><h2 id="类方法与实例方法的区别"><a href="#类方法与实例方法的区别" class="headerlink" title="类方法与实例方法的区别"></a>类方法与实例方法的区别</h2><h3 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h3><p>类方法：static修饰的方法<br>实例方法：由类创建实例调用</p><p>对象变量:指类中不加static的成员变量</p><h3 id="区别："><a href="#区别：" class="headerlink" title="区别："></a>区别：</h3><ol><li>类方法中不能引用对象变量；实例方法可以引用对象变量，也可以引用类变量。<img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918419.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="在这里插入图片描述"></li><li>类方法不能直接调用实例方法；实例方法可以直接调用类方法<img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918448.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="在这里插入图片描述"></li><li>类方法中不能使用super、this关键字；实例方法可以使用。<img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918539.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="在这里插入图片描述"></li><li>类方法不能被覆盖。</li></ol><p>5.实例方法不能通过类名调用，当类的字节码文件被加载到内存时，类的实例方法不会被分配入口地址，当该类创建对象后，类中的实例方法才分配入口地址，从而实例方法可以被类创建的任何对象调用执行。</p><p>6.类方法可以通过类名调用，类方法在该类被加载到内存时，就分配了相应的入口地址。从而类方法不仅可以被类创建的任何对象调用执行，也可以直接通过类名调用。类方法的入口地址直到程序退出时才被取消。</p><p>类名.方法名()</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918672.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220502173211818"></p><p>子类中出现和父类相同的方法，就是覆盖，子类的对象就无法访问父类的那个被覆盖的方法，覆盖方法和被覆盖的方法要么都是类方法，要么都是实例方法，不能一个是类方法，一个是实例方法</p><p>private方法不支持重写</p><p>如果父类方法是private，即使子类中定义一个与父类private方法相同的方法名，相同的参数列表依然不是重写，只是在子类里重新定义了一个新的方法</p><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p>标识符命名规则：<br>1，只能由字母数字，_或$<br>2.必须以字母，_或$开头<br>3.大小写敏感，无长度限制<br>4，不能是java的关键字和保留字</p><p>标识符规则<br>标识符常量用大写字母，变量用小写字母开始，类以大写字母开始<br>标识符不能与关键字同名<br>标识符最好见名知义</p><h2 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h2><p>在子类方法中调用父类中被覆盖的方法，则可以使用super（被覆盖的是实例方法），或者父类类名来调用父类中被覆盖的函数（被覆盖的是类方法）</p><h2 id="继承和多态"><a href="#继承和多态" class="headerlink" title="继承和多态"></a>继承和多态</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Hello;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span> &#123;<br><span class="hljs-keyword">public</span> String s;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> a;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Hello</span><span class="hljs-params">()</span> &#123;<br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Hello</span><span class="hljs-params">(String s,<span class="hljs-type">int</span> a)</span> &#123;<br><span class="hljs-built_in">this</span>.s=s;<br><span class="hljs-built_in">this</span>.a=a;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;123&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print2</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;1234&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>Hello a=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hello</span>();<br>Hello b=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hello</span>(<span class="hljs-string">&quot;as&quot;</span>,<span class="hljs-number">1</span>);<br>System.out.print(b.s);<br>System.out.print(a.s);<br>Hello c=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hello</span>();<br>Hello d=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hell</span>();<br>c.print();<br>d.print();<br>d.print2();<br>((Hell)d).print3();<br><br>&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Hell</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Hello</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>System.out.print(<span class="hljs-string">&quot;234&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print3</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;12345&quot;</span>);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>静态初始化块，和初始化块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Hello;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span> &#123;<br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> a;<br><span class="hljs-type">int</span> b;<br><span class="hljs-keyword">static</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;静态初始化块&quot;</span>);<br>a=<span class="hljs-number">6</span>;<br><span class="hljs-comment">// b=2;这个地方会报错</span><br>&#125;<br>&#123;<br><span class="hljs-type">int</span> b=<span class="hljs-number">6</span>;<br><span class="hljs-keyword">if</span> (b&gt;<span class="hljs-number">4</span>)<br>&#123;<br>System.out.println(<span class="hljs-string">&quot;lss&quot;</span>);<br>&#125;<br>System.out.println(a);<br>&#125;<br><br><br>&#123;<br>System.out.println(<span class="hljs-string">&quot;第二个构造器&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Hello</span><span class="hljs-params">()</span> &#123;<br><br>System.out.println(<span class="hljs-string">&quot;构造器&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>Hello a=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hello</span>();<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>数字转字符串</p><p>String b&#x3D;5+””;</p><p>equals和&#x3D;&#x3D;的使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Hello;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name)</span> &#123;<br><span class="hljs-built_in">this</span>.name=name;<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>Person p=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span> (<span class="hljs-string">&quot;123&quot;</span>);<br>System.out.println(p.toString());<br>System.out.println(p); <br>System.out.println(p+<span class="hljs-string">&quot;123&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">it</span> <span class="hljs-operator">=</span><span class="hljs-number">65</span>;<br><span class="hljs-type">float</span> fl=<span class="hljs-number">65.0f</span>;<br><span class="hljs-type">char</span> ch=<span class="hljs-string">&#x27;A&#x27;</span>;<br><span class="hljs-keyword">if</span>(it==fl) &#123;<br>System.out.print(<span class="hljs-string">&quot;相等&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(ch==it) &#123;<br>System.out.println(<span class="hljs-string">&quot;相等&quot;</span>);<br>&#125;<br>Hello a=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hello</span>();<br>Hello b=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hello</span>();<br><span class="hljs-keyword">if</span>(a==b) &#123;<br>System.out.println(<span class="hljs-string">&quot;相等&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;不相等&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(a.equals(b)) &#123;<br>System.out.println(<span class="hljs-string">&quot;相等&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;不相等&quot;</span>);<br>&#125;<br>String H=<span class="hljs-string">&quot;123&quot;</span>;<br>String G=<span class="hljs-string">&quot;345&quot;</span>;<br>String I=<span class="hljs-string">&quot;123345&quot;</span>;<br>String T=H+G;<br>String R=<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;123&quot;</span>);<br><span class="hljs-keyword">if</span>(H==R) &#123;<br>System.out.println(<span class="hljs-string">&quot;相等1&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(T==I) &#123;<br>System.out.println(<span class="hljs-string">&quot;相等2&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(H.equals(R)) &#123;<br>System.out.println(<span class="hljs-string">&quot;相等1&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(T.equals(I)) &#123;<br>System.out.println(<span class="hljs-string">&quot;相等2&quot;</span>);<br>&#125;<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">O</span>:<span class="hljs-number">12</span>:<span class="hljs-string">&quot;Road_is_Long&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;string&quot;</span>;O:<span class="hljs-number">13</span>:<span class="hljs-string">&quot;Make_a_Change&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;effort&quot;</span>;O:<span class="hljs-number">13</span>:<span class="hljs-string">&quot;Try_Work_Hard&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;var&quot;</span>;s:<span class="hljs-number">52</span>:<span class="hljs-string">&quot;php://filter/convert.base64-encode/resource=flag.php&quot;</span>;&#125;&#125;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;page&quot;</span>;O:<span class="hljs-number">12</span>:<span class="hljs-string">&quot;Road_is_Long&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;string&quot;</span>;N;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;page&quot;</span>;N;&#125;&#125;<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">O</span>:<span class="hljs-number">12</span>:<span class="hljs-string">&quot;Road_is_Long&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;string&quot;</span>;N;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;page&quot;</span>;O:<span class="hljs-number">12</span>:<span class="hljs-string">&quot;Road_is_Long&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;string&quot;</span>;O:<span class="hljs-number">13</span>:<span class="hljs-string">&quot;Make_a_Change&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;effort&quot;</span>;O:<span class="hljs-number">13</span>:<span class="hljs-string">&quot;Try_Work_Hard&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;var&quot;</span>;s:<span class="hljs-number">52</span>:<span class="hljs-string">&quot;php://filter/convert.base64-encode/resource=flag.php&quot;</span>;&#125;&#125;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;page&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;aaa&quot;</span>;&#125;&#125;<br></code></pre></td></tr></table></figure><h2 id="final的使用"><a href="#final的使用" class="headerlink" title="final的使用"></a>final的使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Hello;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> a=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> c=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> d;<br><span class="hljs-keyword">static</span>&#123;<br>a=<span class="hljs-number">2</span>;<br><span class="hljs-comment">//b=2;</span><br>d=<span class="hljs-number">1</span>;<br><br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name)</span> &#123;<br><span class="hljs-built_in">this</span>.name=name;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">final</span> <span class="hljs-type">int</span> h=<span class="hljs-number">1</span>;<br><span class="hljs-comment">//public int y=1;</span><br><span class="hljs-type">int</span> x=<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print1</span><span class="hljs-params">(<span class="hljs-keyword">final</span> <span class="hljs-type">int</span> i)</span> &#123;<br> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> a=<span class="hljs-number">1</span>;<br> <span class="hljs-comment">//i=1;</span><br>&#125;<br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br><br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(String name)</span> &#123;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>Person b=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;1&quot;</span>);<br>System.out.println(b.a);<br>System.out.println(Person.a);<br><span class="hljs-keyword">final</span> <span class="hljs-type">int</span>[] iArr= &#123;<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">12</span>,<span class="hljs-number">9</span>&#125;;<br>iArr[<span class="hljs-number">2</span>]=<span class="hljs-number">10</span>;<br><span class="hljs-comment">//iArr=null;</span><br>        <span class="hljs-keyword">final</span> Person p=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;1&quot;</span>);<br>        p.a=<span class="hljs-number">123</span>;<br>        String str2=<span class="hljs-string">&quot;java&quot;</span>;<br>        String str3=<span class="hljs-string">&quot;com&quot;</span>;<br>        <span class="hljs-keyword">final</span> String str=<span class="hljs-string">&quot;java&quot;</span>;<br>        <span class="hljs-keyword">final</span> String str1=<span class="hljs-string">&quot;com&quot;</span>;<br>        String s1=<span class="hljs-string">&quot;javacom&quot;</span>;<br>        System.out.println(str+str1==s1);<br>        System.out.println(str2+str3==s1);<br>        <br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="有关强制类型转换"><a href="#有关强制类型转换" class="headerlink" title="有关强制类型转换"></a>有关强制类型转换</h2><p><strong>基本类型之间的转换只能在数值类型之间间进行，这里所说的数值类型包括整数型，字符型和浮点型，但数值类型和字符串类型和布尔类型是不能进行类型转换的</strong></p><p>总结：父类引用可以指向子类对象，子类引用不能指向父类对象。把子类对象直接赋给父类引用叫做向上转型，向上转型不用强制转型，如Father f1&#x3D;new Son()，把指向子类对象的父类引用赋给子类引用叫做向下转型，要强制转型，如Son s1 &#x3D; (Son)f1。向上转型会丢失子类特有的方法，但是子类overriding父类的方法，子类方法有效。 </p><p>   <strong>将一种类型的数据赋给另外一种类型变量时，满足下列两种要求将执行自动类型转换：1.两种类型是兼容的；2.目的类型的范围比来源类型大。</strong>  </p><p>   <strong>数据值类型按照范围从小到大为：byte，short，char，int，long，float，double</strong></p><p>   例如int类型比所有byte合法类型大，因此不要求显式强制类型转换。对于数字类型，整型和浮点型都是彼此兼容的，但是数字类型和字符类型和布尔类型是不兼容的，字符类型和布尔类型也不是互相兼容的。</p><p>   自动类型转换不能满足所有的转换需求，比如int型变量赋值给byte型变量，这种转换不会自动进行，因为byte型比int型范围小。为了完成两种不兼容类型转换，需要用到强制类型转换。</p><p>   目标类型指定了要转换成为的类型。例如果将int型转为byte型，int型取值范围大于byte型，它的值将堆byte型范围进行取模。而把浮点型赋值给整数型，就会出现截断，截取掉小数部分。从其他数值类型转换为char类型时，必须进行强制转换<strong>。将char类型转换为其他数值类型时，除了byte、short必须强制转换之外，int、long、float、double都不用强制转换。</strong></p><p><strong><a href="https://so.csdn.net/so/search?q=%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2&spm=1001.2101.3001.7020">类型转换</a>都是小范围向大范围转换的，大范围往小范围转化需要用到强制转换，转换后的值会有所损失。</strong></p><h2 id="String-与其他数据类型的转换"><a href="#String-与其他数据类型的转换" class="headerlink" title="String 与其他数据类型的转换"></a>String 与其他数据类型的转换</h2><p><strong>String  to  int</strong>     </p><p>int i&#x3D;Integer.parseInt(str);</p><p><strong>int to String</strong></p><p>String s&#x3D;String.valueOf(i);</p><p><strong>String to Array</strong></p><p>char []a&#x3D;str.toCharArray();</p><p>char []a&#x3D;str.getChars(0,str.length,anArray,0);</p><p><strong>Array toString</strong></p><p>String str&#x3D;new String(anArray);</p><p><strong>char to String</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">   <span class="hljs-built_in">char</span> b=<span class="hljs-character">&#x27;2&#x27;</span>;<br>String a=<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">String</span>.</span></span>value<span class="hljs-constructor">Of(<span class="hljs-params">b</span>)</span>;<br>   <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(a);<br></code></pre></td></tr></table></figure><p><strong>String to char</strong></p><p>charAt()和toCharArray()</p><h1 id="java的Big数字类"><a href="#java的Big数字类" class="headerlink" title="java的Big数字类"></a>java的Big数字类</h1><h2 id="java的BigDecimal类"><a href="#java的BigDecimal类" class="headerlink" title="java的BigDecimal类"></a>java的BigDecimal类</h2><p>方法声明<br>public BigDecimal add (BigDecinal value) 加法运算</p><p>public BigDecimal subtract (BigDecimal value)减法运算</p><p>public BigDecimal multiply(BigDecimal value)乘法运算</p><p>public BigDecimal divide (BigDecimal value)除法运算</p><p>精确的计算小数之间的加减乘除</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> void main(<span class="hljs-keyword">String</span> []args)&#123;<br>        Scanner <span class="hljs-keyword">in</span>=<span class="hljs-keyword">new</span> <span class="hljs-type">Scanner</span>(System.<span class="hljs-keyword">in</span>);<br>        <span class="hljs-keyword">while</span>(<span class="hljs-keyword">in</span>.hasNext())&#123;<br>            <span class="hljs-keyword">String</span> a=<span class="hljs-keyword">in</span>.next();<br>            <span class="hljs-keyword">String</span> b=<span class="hljs-keyword">in</span>.next();<br>            BigDecimal a1=<span class="hljs-keyword">new</span> <span class="hljs-type">BigDecimal</span>(a);<br>            BigDecimal a2=<span class="hljs-keyword">new</span> <span class="hljs-type">BigDecimal</span>(b);<br>            System.out.println(a2.add(a1));<span class="hljs-comment">//求两个相加</span><br>            System.out.println(a2.multiply(a1));<span class="hljs-comment">//求两个的乘积</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h2 id="java的BigInteger类"><a href="#java的BigInteger类" class="headerlink" title="java的BigInteger类"></a>java的BigInteger类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.math.BigInteger;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span>&#123;<br>        BigInteger a=<span class="hljs-keyword">new</span> <span class="hljs-title class_">BigInteger</span>(<span class="hljs-string">&quot;0&quot;</span>);<br>        Scanner in=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>      <span class="hljs-keyword">while</span>(in.hasNext()) &#123;<br>      <br><br>      String key=in.nextLine();<br>      <span class="hljs-keyword">if</span>(key.equalsIgnoreCase(<span class="hljs-string">&quot;e&quot;</span>))<br>      &#123;<br>      <span class="hljs-keyword">break</span>;<br>      &#125;<br>                  a=a.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BigInteger</span>(key));<span class="hljs-comment">//求相加</span><br><br>&#125;<br>      System.out.println(a);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>一.BigInteger简介</p><p>BigInteger类所在的包</p><p>java中可以使用BigInteger操作大整数，也可以转换进制。如果在操作的时候一个整型数据已经超过了整数的最大类型长度long的话，则此数据就无法装入，所以，此时要使用BigInteger类进行操作。这些大数都会以字符串的形式传入。</p><p>二.BigInteger类常用方法</p><p>1.BigInteger(String value)：构造方法，将value字符串变成BigInteger类型数据。</p><p>2.BigInteger add(BigInteger value)：加法，求两个BigInteger类型数据的和。</p><p>3.BigInteger subtract(BigInteger value)：减法，求两个BigInteger类型数据的差。</p><p>4.BigInteger multiply(BigInteger value)：乘法，求两个BigInteger类型数据的积。</p><p>5.BigInteger divide(BigInteger divisor)：除法，求两个BigInteger类型数据的商。</p><p>6.BigInteger modInverse(BigInteger m)：求模，求BigInteger类型数据对m求模。</p><p>7.BigInteger remainder(BigInteger divisor)：求余数，求BigInteger类型数据除以divisor的余数。</p><p>8.BigInteger max(BigInteger value)：最大数，求两个BigInteger类型数据的最大值。</p><p>9.BigInteger min(BigInteger value)：最小数，求两个BigInteger类型数据的最小值。</p><p>10.BigInteger gcd(BigInteger value)：最大公约数，求两个BigInteger类型数据的最大公约数。</p><p>11.BigInteger abs()：绝对值，求BigInteger类型数据的绝对值。</p><p>12.BigInteger negate()：相反数，求BigInteger类型数据的相反数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-type">BigInteger</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigInteger</span>(<span class="hljs-string">&quot;15&quot;</span>);<br><span class="hljs-type">BigInteger</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigInteger</span>(<span class="hljs-string">&quot;10&quot;</span>);<br><span class="hljs-type">BigInteger</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigInteger</span>(<span class="hljs-string">&quot;-10&quot;</span>);<br><span class="hljs-type">BigInteger</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigInteger</span>(<span class="hljs-string">&quot;2&quot;</span>);<br><br><br><span class="hljs-type">BigInteger</span> <span class="hljs-variable">add_result</span> <span class="hljs-operator">=</span> a.add(b);<br><span class="hljs-type">BigInteger</span> <span class="hljs-variable">subtract_result</span> <span class="hljs-operator">=</span> a.subtract(b);<br><span class="hljs-type">BigInteger</span> <span class="hljs-variable">multiply_result</span> <span class="hljs-operator">=</span> a.multiply(b);<br><span class="hljs-type">BigInteger</span> <span class="hljs-variable">divide_result</span> <span class="hljs-operator">=</span> a.divide(b);<br><span class="hljs-type">BigInteger</span> <span class="hljs-variable">modinverse_result</span> <span class="hljs-operator">=</span> a.modInverse(d);<br><span class="hljs-type">BigInteger</span> <span class="hljs-variable">remainder_result</span> <span class="hljs-operator">=</span> a.remainder(b);<br><span class="hljs-type">BigInteger</span> <span class="hljs-variable">max_result</span> <span class="hljs-operator">=</span> a.max(b);<br><span class="hljs-type">BigInteger</span> <span class="hljs-variable">min_result</span> <span class="hljs-operator">=</span> a.min(b);<br><span class="hljs-type">BigInteger</span> <span class="hljs-variable">gcd_result</span> <span class="hljs-operator">=</span> a.gcd(b);<br><span class="hljs-type">BigInteger</span> <span class="hljs-variable">abs_result</span> <span class="hljs-operator">=</span> c.abs();<br><span class="hljs-type">BigInteger</span> <span class="hljs-variable">negate_result</span> <span class="hljs-operator">=</span> a.negate();<br><br><br>Log.d(<span class="hljs-string">&quot;TAG&quot;</span>, <span class="hljs-string">&quot;15+10=&quot;</span> + add_result);<br>Log.d(<span class="hljs-string">&quot;TAG&quot;</span>, <span class="hljs-string">&quot;15-10=&quot;</span> + subtract_result);<br>Log.d(<span class="hljs-string">&quot;TAG&quot;</span>, <span class="hljs-string">&quot;15*10=&quot;</span> + multiply_result);<br>Log.d(<span class="hljs-string">&quot;TAG&quot;</span>, <span class="hljs-string">&quot;15/10=&quot;</span> + divide_result);<br>Log.d(<span class="hljs-string">&quot;TAG&quot;</span>, <span class="hljs-string">&quot;15对2求模=&quot;</span> + modinverse_result);<br>Log.d(<span class="hljs-string">&quot;TAG&quot;</span>, <span class="hljs-string">&quot;15/10余数=&quot;</span> + remainder_result);<br>Log.d(<span class="hljs-string">&quot;TAG&quot;</span>, <span class="hljs-string">&quot;15和10最大数=&quot;</span> + max_result);<br>Log.d(<span class="hljs-string">&quot;TAG&quot;</span>, <span class="hljs-string">&quot;15和10最小数=&quot;</span> + min_result);<br>Log.d(<span class="hljs-string">&quot;TAG&quot;</span>, <span class="hljs-string">&quot;15和10最大公约数=：&quot;</span> + gcd_result);<br>Log.d(<span class="hljs-string">&quot;TAG&quot;</span>, <span class="hljs-string">&quot;-10的绝对值=&quot;</span> + abs_result);<br>Log.d(<span class="hljs-string">&quot;TAG&quot;</span>, <span class="hljs-string">&quot;15的相反数=&quot;</span> + negate_result);<br></code></pre></td></tr></table></figure><h1 id="Java-String类"><a href="#Java-String类" class="headerlink" title="Java String类"></a>Java String类</h1><h3 id="总序"><a href="#总序" class="headerlink" title="总序"></a>总序</h3><p>java中的字符串分为两类，字符串常量和字符串变量</p><p>字符串常量：包括直接字符串常量和String类的对象；字符串常量的值一旦创建不会再改动</p><p>字符串变量：指的是StringBuffer类的对象，创建之后允许对其进行修改</p><p>字符串文本</p><ol><li></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">String str1=<span class="hljs-string">&quot;java&quot;</span>; 相当于    <br><br>   <span class="hljs-type">char</span> cstr[]= &#123;<span class="hljs-string">&#x27;J&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;v&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>&#125;;<br>      String str=<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(cstr);<br>      System.out.println(str);<br><br>把字符数组转变为字符串的一个方法<br></code></pre></td></tr></table></figure><p>2.String str1&#x3D;new String(“hello”);</p><p>3.使用数组方式</p><p>char str[]&#x3D;{‘h’,’e’,’l’,’l’,’0’};</p><p>String str[]&#x3D;{“hello”,”word”,”!”}</p><h3 id="String类的构造方法"><a href="#String类的构造方法" class="headerlink" title="String类的构造方法"></a>String类的构造方法</h3><p><img src="C:\Users%23赵梓皓&\AppData\Roaming\Typora\typora-user-images\image-20220613180744555.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220613180744555"></p><p>例子</p><p>n在String类提供的构造方法中，可以由字符数组、字节数组以及字符串缓冲区来构成字符串，如下面的代码所示。</p><p> char cDeomo[]&#x3D; {‘2’,’3’,’4’,’5’};<br>    char cDeomo1[]&#x3D; {‘1’,’2’,’3’,’4’,’5’};<br>    String strDemo1&#x3D;new String(cDeomo);<br>    String strDemo2&#x3D;new String(cDeomo1,1,4);&#x2F;&#x2F;从cDeomo1的下标1元素到下标为4的元素<br>    System.out.println(strDemo1);<br>   System.out.println(strDemo2);</p><p>利用上面的两个构造方法生成的字符串实例的内容均为“2345”。</p><p>n下面例子说明如何利用字节数组生成字符串：</p><p>byte cDemo[]&#x3D; {66,67,68};<br>byte cDemo1[]&#x3D; {65,66,67,68};<br>String strDemo1&#x3D;new String(cDemo);<br>String strDemo2&#x3D;new String(cDemo1,1,3);&#x2F;&#x2F;从下标1到下标3      都包括刚开始第一个下标的那个字符<br>System.out.println(strDemo1);<br>System.out.println(strDemo2);&#x2F;&#x2F;会把数字转换为unicode编码的字符</p><p>利用上面的两个构造方法生成的字符串实例的内容均为”BCD”</p><h3 id="length方法"><a href="#length方法" class="headerlink" title="length方法"></a>length方法</h3><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs abnf">String str<span class="hljs-operator">=</span><span class="hljs-string">&quot;java&quot;</span><span class="hljs-comment">;</span><br>System.out.println(str.length())<span class="hljs-comment">;</span><br><br>获取字符串长度<br></code></pre></td></tr></table></figure><h3 id="getChars方法"><a href="#getChars方法" class="headerlink" title="getChars方法"></a>getChars方法</h3><p>public void getChars(int start,int end,char c[],int offset)</p><p>​     该方法的作用是将当前<a href="https://so.csdn.net/so/search?q=%E5%AD%97%E7%AC%A6%E4%B8%B2&spm=1001.2101.3001.7020">字符串</a>从start到end-1位置上的字符复制到字符数组c中，并从c的offset处开始存放</p><p>就是将字符串从下标为start到下标为end-1的字符从c字符数组的offset下标处开始存放</p><p>String str&#x3D;”java”;<br>char dstch[]&#x3D;new char[20];<br>int n&#x3D;str.length();<br>str.getChars(0, n, dstch, 0);<br>System.out.println(dstch);          都包括第一个下标开始的那个字符</p><h3 id="compareTo方法"><a href="#compareTo方法" class="headerlink" title="compareTo方法"></a>compareTo方法</h3><p><strong>String类是默认实现的comparable接口的compareTo方法</strong></p><p>用于字符串比较</p><p>  int compareTo(String str)</p><p>例如:字符串A和字符串B进行比较,如果A大于B,返回大于0的值;如果A等于B,返回0; 如果A小于B,返回小于0的值。</p><p>​    A.compareTo(B);</p><p> 即参与比较的两个字符串如果首字符相同，则比较下一个字符，直到有不同的为止，返回该不同的字符的ASCII码差值；</p><p>是A字符串字符的ascii编码减去B字符串字符的ascii编码</p><p> 如果两个字符串不一样长，可以参与比较的字符又完全一样，则返回两个字符串的长度差值</p><p>String str&#x3D;”abcde”;<br>System.out.println(str.compareTo(“boy”));<br>System.out.println(str.compareTo(“aba”));<br>System.out.println(str.compareTo(“abcdefghi”));</p><p>运行结果</p><p>-1<br>2<br>-4</p><p>使用例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Student o1)</span> &#123;<br><span class="hljs-keyword">if</span>(o1.getScore()==<span class="hljs-built_in">this</span>.getScore()) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.id.compareTo(o1.id);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> o1.getScore()-<span class="hljs-built_in">this</span>.getScore();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>先按成绩降序排序，当成绩相同的时候按照id来自然排序</p><h3 id="concat方法"><a href="#concat方法" class="headerlink" title="concat方法"></a>concat方法</h3><p>n将调用该方法的字符串与指定字符串连接，返回新的字符串。</p><p>String str1&#x3D;”java”;<br>String str2&#x3D;”world”;<br>String str3;<br>str3&#x3D;str1.concat(str2);<br>System.out.println(str3);&#x2F;&#x2F;javaworld</p><h3 id="substring方法"><a href="#substring方法" class="headerlink" title="substring方法"></a>substring方法</h3><p>n用于提取调用方法的字符串中的子串。</p><p>  String substring (int begin, int end)；</p><p>  <strong>提取从begin到end-1处的字符。就是第二个参数是下标减一</strong></p><p>String str1&#x3D;”java”,str2&#x3D;”world”,str3;<br>str3&#x3D;str1.concat(str2);<br>System.out.println(str3.substring(0,3)+” “+str3.substring(4,9));</p><p>运行结果：jav world</p><p>当substring方法只有一个参数的时候</p><p>它是此字符串的一个子字符串。该子字符串从指定索引处的字符开始，直到此字符串末尾。</p><p>String str1&#x3D;”java”,str2&#x3D;”world”,str3;<br>str3&#x3D;str1.concat(str2);<br>System.out.println(str3.substring(2));</p><p>运行结果：vaworld         包括这个第一个下标开始的那个字符</p><h3 id="replace方法"><a href="#replace方法" class="headerlink" title="replace方法"></a>replace方法</h3><p>返回一个新字符串</p><p>n用于替换调用方法在字符串中的某个<strong>字符</strong>，返回替换后的新字符串。</p><p>String replace(char oldChar, char newChar)；</p><p>String str1&#x3D;”java world”,str3;<br>str3&#x3D;str1.replace(‘a’,’b’);<br>System.out.println(str3);</p><p>运行结果：</p><p>jbvb world</p><h3 id="trim方法"><a href="#trim方法" class="headerlink" title="trim方法"></a>trim方法</h3><p>返回一个新字符串</p><p>npublic String trim()</p><p>  一个字符串s 通过调用方法trim()得到一个字符串对象,该字符串对象是s去掉前后空格后的字符串。</p><p>  如下面的代码所示：</p><p>String s&#x3D;”I mist theep “;<br>String temp&#x3D;s.replace(‘t’, ‘s’);<br>String a&#x3D;” i am a student “;<br>String tema&#x3D;s.trim();<br>System.out.println(temp);<br>System.out.println(tema);</p><h3 id="indexOf方法"><a href="#indexOf方法" class="headerlink" title="indexOf方法"></a>indexOf方法</h3><p>indexOf, lastIndexOf: 这两个方法用于对字符串建立索引，返回字符串的位置；</p><p>  int indexOf(String str)；&#x2F;&#x2F;这个是返回第一个遇到的索引，两个都是返回匹配的字符串的第一个字符的索引值</p><p>  int lastIndexOf(String str);&#x2F;&#x2F;这个是返回从最后开始遇到的索引</p><p>String str1&#x3D;”java world or”;<br>String str2&#x3D;”or”;<br>int v1&#x3D;str1.indexOf(str2);<br>int v2&#x3D;str1.lastIndexOf(str2);<br>System.out.println(v1+” “+v2);</p><p>运行结果：6 11</p><h3 id="equals方法"><a href="#equals方法" class="headerlink" title="equals方法"></a>equals方法</h3><p>在String类中equals()定义如下：</p><p>  public boolean equals(String s)</p><p>  该方法用来比较当前字符串对象的实体是否与参数指定的字符串s的实体是否相同。例如</p><p>  String tom&#x3D;new String( “we are students”);</p><p>  String boy&#x3D;new String( “We are students”);</p><p>  String jerry&#x3D; new String(“we are students”);</p><p>  tom.equals(boy)的值是false，tom.equals(jerry)的值是true</p><p>而且字符串之间进行比较不能够用&#x3D;&#x3D;，因为&#x3D;&#x3D;是比较两个字符串的地址是否相同，而equals是比较两个字符串的内容是否是相等的</p><p>&#x3D;&#x3D;比较引用，<a href="https://so.csdn.net/so/search?q=equals&spm=1001.2101.3001.7020">equals</a> 比较值</p><p>1、java中<a href="https://so.csdn.net/so/search?q=%E5%AD%97%E7%AC%A6%E4%B8%B2&spm=1001.2101.3001.7020">字符串</a>的比较：&#x3D;&#x3D;</p><p>我们经常习惯性的写上if(str1&#x3D;&#x3D;str2)，这种写法在java中可能会带来问题</p><p> example1:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">String <span class="hljs-attribute">a</span>=<span class="hljs-string">&quot;abc&quot;</span>;String <span class="hljs-attribute">b</span>=<span class="hljs-string">&quot;abc&quot;</span><br></code></pre></td></tr></table></figure><p>那么a&#x3D;&#x3D;b将返回true。因为在java中字符串的值是不可改变的，相同的字符串在<a href="https://so.csdn.net/so/search?q=%E5%86%85%E5%AD%98&spm=1001.2101.3001.7020">内存</a>中只会存</p><p> 一份，所以a和b指向的是同一个对象；</p><p>example2：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">String</span> a=<span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>(<span class="hljs-string">&quot;abc&quot;</span>); <span class="hljs-built_in">String</span> b=<span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>(<span class="hljs-string">&quot;abc&quot;</span>);<br></code></pre></td></tr></table></figure><p> 那么a&#x3D;&#x3D;b将返回false，此时a和b指向不同的对象。</p><p> 2、用equals方法比较的是字符串的内容是否相同，</p><p>example：</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-built_in">String</span> a=<span class="hljs-literal">new</span> <span class="hljs-built_in">String</span>(<span class="hljs-string">&quot;abc&quot;</span>); <br><span class="hljs-built_in">String</span> b=<span class="hljs-literal">new</span> <span class="hljs-built_in">String</span>(<span class="hljs-string">&quot;abc&quot;</span>);<br> a.<span class="hljs-keyword">equals</span>(b);<br></code></pre></td></tr></table></figure><p>将返回true。</p><h3 id="equalsIgnoreCase-方法"><a href="#equalsIgnoreCase-方法" class="headerlink" title="equalsIgnoreCase()方法"></a>equalsIgnoreCase()方法</h3><p>n在String类中equalsIgnoreCase ()定义如下：</p><p>  <strong>public</strong> <strong>boolean</strong> <strong>equalsIgnoreCase</strong><strong>(String s)</strong></p><p>  字符串对象调用比较当前字符串对象是否与参数指定的字符串s 相同,比较时忽略大小写。例如：</p><p>String tom&#x3D;new String(“ABC”);<br>String Jerry&#x3D;new String(“abc”);<br>System.out.println(tom.equals(Jerry));</p><p>   tom.equalsIgnoreCase(Jerry)的值是true。</p><h3 id="split方法"><a href="#split方法" class="headerlink" title="split方法"></a>split方法</h3><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span>[] <span class="hljs-built_in">split</span>(<span class="hljs-built_in">String</span> regex, <span class="hljs-type">int</span> limit)<br></code></pre></td></tr></table></figure><p>根据第一个参数的字符串将字符串分割为第二个参数的份数变成字符串数组</p><p>第一个参数一定是一个字符串用双引号</p><p> String [] c&#x3D;b[i].split(“：”);用冒号将字符串分割为字符串数组afd</p><p>Integer.parseInt将字符串转换为数字</p><h3 id="startsWith方法"><a href="#startsWith方法" class="headerlink" title="startsWith方法"></a>startsWith方法</h3><ul><li><strong>prefix</strong> – 前缀。</li><li><strong>toffset</strong> – 字符串中开始查找的位置。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">startsWith</span><span class="hljs-params">(String prefix, <span class="hljs-type">int</span> toffset)</span><br><br>或<br><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">startsWith</span><span class="hljs-params">(String prefix)</span><br></code></pre></td></tr></table></figure><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918826.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220812101529560"></p><h3 id="toUpperCase"><a href="#toUpperCase" class="headerlink" title="toUpperCase()"></a>toUpperCase()</h3><p>String cc &#x3D; “aBc123”.toUpperCase(); 结果就是：ABC123</p><h1 id="Java中StringBuffer类"><a href="#Java中StringBuffer类" class="headerlink" title="Java中StringBuffer类"></a>Java中StringBuffer类</h1><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>StringBuffer中提供了三种构造方法</p><p>   public StringBuffer() </p><p>   构造一个不包含字符的字符串缓冲区，其初始的容量设为 16 个字符。</p><p>   public StringBuffer(int) </p><p>  构造一个不包含字符的字符串缓冲区，其初始容量由参数设定。 </p><p>   public StringBuffer(String) </p><p>  构造一个字符串缓冲区，来表示和字符串参数相同的字符序列。 字符串缓冲区的初始容量为16加上字符串参数的长度。</p><h3 id="capacity方法"><a href="#capacity方法" class="headerlink" title="capacity方法"></a>capacity方法</h3><p>n用来计算StringBuffer的容量，返回容量大小的整型值。</p><p>StringBuffer sb&#x3D;new StringBuffer(100);<br>int x&#x3D;sb.capacity();<br>System.out.println(x);</p><p>运算结果：100</p><p>容量是一开始那个有的那个，而不是有内容的，可以是空的默认值</p><h3 id="append方法"><a href="#append方法" class="headerlink" title="append方法"></a>append方法</h3><p>n将指定的字符串的内容连接到StringBuffer对象中内容的后边，并返回连接后的的StringBuffer对象。</p><p>  StringBuffer append(String str);</p><p>StringBuffer sb1&#x3D;new StringBuffer(“Hello”);<br>StringBuffer sb2&#x3D;new StringBuffer(“all”);<br>String str&#x3D;”_good”;<br>sb2&#x3D;sb1.append(str);<br>System.out.println(sb2);</p><p>运行结果：Hello_good</p><h3 id="insert方法"><a href="#insert方法" class="headerlink" title="insert方法"></a>insert方法</h3><p>n将指定的字符ch插入到StringBuffer对象的offset处，并返回修改后的StringBuffer对象。</p><p>  StringBuffer insert（int offset, char ch）</p><pre><code class="hljs">    StringBuffer sb1=new StringBuffer(&quot;Hello&quot;);    char c=&#39;2&#39;;    StringBuffer sb2=new StringBuffer(100);    sb2=sb1.insert(1,c);    System.out.println(sb2);</code></pre><p>insert的第一个参数是要插入的字符的下标</p><h3 id="delete方法"><a href="#delete方法" class="headerlink" title="delete方法"></a>delete方法</h3><p>n将StringBuffer对象中的一部分内容删掉，并将删除后的StringBuffer对象返回。</p><p>  StringBuffer delete(int start, int end);</p><p>  从start 删除到 end-1；</p><p>StringBuffer sb1&#x3D;new StringBuffer(“Hello”);<br>StringBuffer sb2&#x3D;new StringBuffer(100);<br>sb2&#x3D;sb1.delete(1, 3);<br>System.out.println(sb2);</p><p>运行结果：Hlo</p><h3 id="reverse方法"><a href="#reverse方法" class="headerlink" title="reverse方法"></a>reverse方法</h3><p>n将StringBuffer中的内容颠倒过来；</p><p>  StringBuffer reverse();</p><p>StringBuffer sb1&#x3D;new StringBuffer(“Hello”);<br>sb1&#x3D;sb1.reverse();<br>System.out.println(sb1);</p><p>结果为：olleH</p><h1 id="java中数组"><a href="#java中数组" class="headerlink" title="java中数组"></a>java中数组</h1><h3 id="数组的声明"><a href="#数组的声明" class="headerlink" title="数组的声明"></a>数组的声明</h3><p>需要提供数组元素的类型和数组的维数。</p><p>例如： int[] k;    &#x2F;&#x2F;int型一维数组</p><p>​        String s[];</p><h3 id="数组声明注意"><a href="#数组声明注意" class="headerlink" title="数组声明注意"></a>数组声明注意</h3><p>test</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Main;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span>&#123;<br>    <br>    <span class="hljs-type">int</span> arr[]= &#123;<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>&#125;;<br>    <span class="hljs-type">int</span> arr2[]= &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;;<br>    arr=arr2;<span class="hljs-comment">//arr 也变成1,2,3,4</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;arr.length;i++)<br>    &#123;<br>    System.out.println(arr[i]);<br>    &#125;<br><br>   arr[<span class="hljs-number">0</span>]=<span class="hljs-number">100</span>;<br>   System.out.println(arr2[<span class="hljs-number">0</span>]);<span class="hljs-comment">//说明arr=arr2之后两个数组指向同一个内存地址</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="创建数组对象"><a href="#创建数组对象" class="headerlink" title="创建数组对象"></a>创建数组对象</h3><p>使用关键字new；</p><p>例如：new int [5];</p><p>​       new String [6][5]; &#x2F;&#x2F;创建String 型二维数组</p><p>创建后，需要将相应类型的数组引用指向该对象，才能对数组对象进行操作。</p><p>  例如：int[] k;    &#x2F;&#x2F;int型一维数组</p><p>​        String[][] s;</p><p>​        k&#x3D;new int [5];</p><p>​        s&#x3D;new String[6][5];</p><h3 id="枚举初始化"><a href="#枚举初始化" class="headerlink" title="枚举初始化"></a>枚举初始化</h3><p>例子：TestArray.java</p><p>循环初始化：TestArray.java</p><p>枚举初始化：</p><p>  例如： int[] i&#x3D;{1,3,5,7,9};</p><p>​        int[] i&#x3D;new int[]{1,3,5,7,9};</p><h3 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h3><p>整个数组排序</p><p>  public static void sort (int[] a)；</p><p>对指定的数组区间进行排序</p><p>  public static void sort (int[] a, int fromIndex, int toIndex)；这个第二个参数是最后一个下标减一</p><p>int a[]&#x3D; {1,2,3,5,4};<br>Arrays.sort(a);<br>for(int i:a)<br>{<br>    System.out.println(i);}<br>    }</p><h3 id="查找指定元素"><a href="#查找指定元素" class="headerlink" title="查找指定元素"></a>查找指定元素</h3><p>nJava中也提供binarySearch方法来帮助开发人员进行查找操作，该方法格式如下所示。</p><p>  public static int binarySearch(int[ ] a,int key)；</p><p>方法的object[]参数是要查找的数组，key参数为要查找的key值。</p><p>方法的返回值有几种：</p><p>1.找到的情况下：如果key在数组中，则返回搜索值的索引。</p><p>2.找不到的情况下：</p><p> [1] 搜索值不是数组元素，且在数组范围内，从1开始计数，得“ - 插入点索引值”；<br> [2] 搜索值是数组元素，从0开始计数，得搜索值的索引值；<br> [3] 搜索值不是数组元素，且大于数组内元素，索引值为 – (length + 1);<br> [4] 搜索值不是数组元素，且小于数组内元素，索引值为 – 1。</p><p>这个binarySearch方法必须是按照从小到大的顺序排的元素才能够算是key在数组中，如果有小的数跟在最后面就是找不到的情况下的第一种情况</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">   <span class="hljs-type">int</span> a[] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[] &#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>&#125;;  <br>        <span class="hljs-type">int</span> <span class="hljs-variable">x1</span> <span class="hljs-operator">=</span> Arrays.binarySearch(a, <span class="hljs-number">5</span>);  <br>        <span class="hljs-type">int</span> <span class="hljs-variable">x2</span> <span class="hljs-operator">=</span> Arrays.binarySearch(a, <span class="hljs-number">4</span>);  <br>        <span class="hljs-type">int</span> <span class="hljs-variable">x3</span> <span class="hljs-operator">=</span> Arrays.binarySearch(a, <span class="hljs-number">0</span>);  <br>        <span class="hljs-type">int</span> <span class="hljs-variable">x4</span> <span class="hljs-operator">=</span> Arrays.binarySearch(a, <span class="hljs-number">10</span>);<br>x1=-<span class="hljs-number">4</span>      x2=<span class="hljs-number">2</span>    x3=-<span class="hljs-number">1</span>    x4=-<span class="hljs-number">7</span>结果<br></code></pre></td></tr></table></figure><h3 id="数组利用比较器排序"><a href="#数组利用比较器排序" class="headerlink" title="数组利用比较器排序"></a>数组利用比较器排序</h3><p>注意点：这个数组必须是Integer这种对象类型的而不是int基本类型</p><p>同时自己设计的比较器需要实现Comparator接口，当下面例子这种形式的时候是从小到大排序</p><p>将第一个if返回值变为-1       第二个elseif返回值变为1就可以实现从大到小排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Main;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Comparator;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">compare</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparator</span>&lt;Integer&gt;&#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Integer o1, Integer o2)</span> &#123;<br><span class="hljs-keyword">if</span>(o1&gt;o2) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(o1&lt;o2) &#123;<br><span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br>Integer []a= &#123;<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>&#125;;<span class="hljs-comment">//这里必须使用Integer</span><br>Comparator c=<span class="hljs-keyword">new</span> <span class="hljs-title class_">compare</span>();<br>Arrays.sort(a,c);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i:a) &#123;<br>System.out.println(i);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Java-Character类中的方法"><a href="#Java-Character类中的方法" class="headerlink" title="Java  Character类中的方法"></a>Java  Character类中的方法</h1><p>Character类在java.lang包下所以不需要自己去导入</p><h3 id="isLower-Upper-Case和to-Upper-Case方法"><a href="#isLower-Upper-Case和to-Upper-Case方法" class="headerlink" title="isLower(Upper)Case和to(Upper)Case方法"></a>isLower(Upper)Case和to(Upper)Case方法</h3><p>作用：是转大小写或者判断是否是大写或者小写</p><p>char cstr[]&#x3D; {‘j’,’a’,’v’,’a’};<br>System.out.println(Character.isUpperCase(cstr[0]));<br>System.out.println(Character.isLowerCase(cstr[0]));<br>cstr[1]&#x3D;Character.toUpperCase(cstr[1]);<br>System.out.println(cstr[1]);<br>cstr[1]&#x3D;Character.toLowerCase(cstr[1]);<br>System.out.println(cstr[1]);</p><p><strong>java.lang包下的类是默认自动导入的，character类就是在java.lang包下，以及java.lang包下的自包还是不可以被默认导入，如果用到里面的类需要自己手动导入</strong></p><p>转大小写的时候不会把原来的字符变为大写或小写，但可以重新赋值</p><h3 id="isDigit方法"><a href="#isDigit方法" class="headerlink" title="isDigit方法"></a>isDigit方法</h3><p>确定指定字符是否为数字</p><pre><code class="hljs">Character a=&#39;2&#39;;System.out.println(Character.isDigit(a));</code></pre><p>输出的结果是true</p><h3 id="isLetter方法"><a href="#isLetter方法" class="headerlink" title="isLetter方法"></a>isLetter方法</h3><p> 确定指定字符是否为字母。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-type">Character</span> a=<span class="hljs-string">&#x27;a&#x27;</span>;<br>      <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-type">Character</span>.isLetter(a));<br><br><br></code></pre></td></tr></table></figure><p>输出结果为true</p><h3 id="equals方法-1"><a href="#equals方法-1" class="headerlink" title="equals方法"></a>equals方法</h3><pre><code class="hljs">  Character a=&#39;a&#39;;    Character b=&#39;b&#39;;    System.out.println(a.equals(b));</code></pre><p>输出结果为faulse</p><p><strong>两个基本类型字符（用char定义的，或者char数组中的）之间可以直接进行&#x3D;&#x3D;，!&#x3D;之间的比较，两个Character对象字符之间不能够用&#x3D;&#x3D; !&#x3D;得用equals</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-type">Character</span> a=<span class="hljs-built_in">new</span> <span class="hljs-type">Character</span>(<span class="hljs-string">&#x27;a&#x27;</span>);<br><span class="hljs-type">Character</span> b=<span class="hljs-built_in">new</span> <span class="hljs-type">Character</span>(<span class="hljs-string">&#x27;a&#x27;</span>);<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(a==b);<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(a.equals(b));<br>结果：<span class="hljs-keyword">false</span><br>     <span class="hljs-keyword">true</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">Character a=<span class="hljs-string">&#x27;a&#x27;</span>;<br>Character b=<span class="hljs-string">&#x27;a&#x27;</span>;<br><span class="hljs-type">char</span> c=<span class="hljs-string">&#x27;a&#x27;</span>;<br><span class="hljs-type">char</span> d=<span class="hljs-string">&#x27;a&#x27;</span>;<br>System.out.println(a==b);<br>System.out.println(a.equals(b));<br>System.out.println(c==d);<br><span class="hljs-comment">//System.out.println(c.equals(d));</span><br>结果：基本类型不能调用很多方法，可以用Character引用变量去指向基本类型<br><span class="hljs-literal">true</span><br><span class="hljs-literal">true</span><br><span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h3 id="字符数组"><a href="#字符数组" class="headerlink" title="字符数组"></a>字符数组</h3><p>String str&#x3D;”java”;<br>char dstch[]&#x3D;new char[20];<br>int n&#x3D;str.length();<br>str.getChars(0, n, dstch, 0);<br>System.out.println(dstch);</p><p>结果：java</p><h1 id="java-random类的使用"><a href="#java-random类的使用" class="headerlink" title="java random类的使用"></a>java random类的使用</h1><p>random类不在java.lang包下，所以需要自己去导入</p><p>import java.util.Random;</p><h3 id="Random类的构造方法"><a href="#Random类的构造方法" class="headerlink" title="Random类的构造方法"></a>Random类的构造方法</h3><p>Random类包含两个构造方法，下面依次进行介绍：<br>（1）public Random()<br>该构造方法使用一个和当前系统时间对应的相对时间有关的数字作为种子数，然后使用这个种子数构造Random对象。<br>（2）public Random(long seed)<br>该构造方法可以通过制定一个种子数进行创建。<br>示例代码：<br>Random r &#x3D; new Random();<br>Random r1 &#x3D; new Random(10);<br>再次强调：种子数只是随机算法的起源数字，和生成的随机数字的区间无关。</p><p>Random有两种<a href="https://so.csdn.net/so/search?q=%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95&spm=1001.2101.3001.7020">构造方法</a>：<br>1.Random()，用于创建一个伪<a href="https://so.csdn.net/so/search?q=%E9%9A%8F%E6%9C%BA%E6%95%B0&spm=1001.2101.3001.7020">随机数</a>生成器，无参构造，每次生成的随机数是不同的。<br>程序示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">Random r=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br><br><span class="hljs-comment">//随机生成10个[0,100)之间的数</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)&#123;<br><br>System.out.println(r.nextInt(<span class="hljs-number">100</span>));<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>每次运行生成的随机数都是不同的</strong></p><p>2.Random(long seed)，使用一个long型的seed种子创建伪随机数生成器 ，有参构造，每次生成的随机数相同。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">Random r=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>(<span class="hljs-number">13</span>);     <span class="hljs-comment">//创建对象时传入种子</span><br><br><span class="hljs-comment">//随机生成10个[0,100)之间的数</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)&#123;<br><br>System.out.println(r.nextInt(<span class="hljs-number">100</span>));<br><br>&#125;<br></code></pre></td></tr></table></figure><p>每次运行生成的随机数都是相同的</p><h3 id="nextBoolan方法"><a href="#nextBoolan方法" class="headerlink" title="nextBoolan方法"></a>nextBoolan方法</h3><p>该方法的作用是生成一个随机的boolean值，生成true和false的值几率相等，也就是都是50%的几率。</p><pre><code class="hljs">Random a=new Random();System.out.println(a.nextBoolean());</code></pre><h3 id="nextDouble方法"><a href="#nextDouble方法" class="headerlink" title="nextDouble方法"></a>nextDouble方法</h3><p>该方法的作用是生成一个随机的double值，数值介于[0,1.0)之间。</p><pre><code class="hljs">Random a=new Random();System.out.println(a.nextDouble());</code></pre><p>也可以自己指定范围生成</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs armasm">（<span class="hljs-number">2</span>）生成[<span class="hljs-number">0</span>,<span class="hljs-number">5</span>.<span class="hljs-number">0</span>)区间的小数<br><span class="hljs-symbol">double</span> <span class="hljs-built_in">d2</span> = r.nextDouble() * <span class="hljs-number">5</span><span class="hljs-comment">;</span><br>因为nextDouble方法生成的数字区间是[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>.<span class="hljs-number">0</span>)，将该区间扩大<span class="hljs-number">5</span>倍即是要求的区间。<br>同理，生成[<span class="hljs-number">0</span>,d)区间的随机小数，d为任意正的小数，则只需要将nextDouble方法的返回值乘以d即可。<br>（<span class="hljs-number">3</span>）生成[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>.<span class="hljs-number">5</span>)区间的小数<br><span class="hljs-symbol">double</span> <span class="hljs-built_in">d3</span> = r.nextDouble() * <span class="hljs-number">1</span>.<span class="hljs-number">5</span> + <span class="hljs-number">1</span><span class="hljs-comment">;</span><br>生成[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>.<span class="hljs-number">5</span>)区间的随机小数，则只需要首先生成[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>.<span class="hljs-number">5</span>)区间的随机数字，然后将生成的随机数区间加<span class="hljs-number">1</span>即可。同理，生成任意非从<span class="hljs-number">0</span>开始的小数区间[<span class="hljs-built_in">d1</span>,<span class="hljs-built_in">d2</span>)范围的随机数字(其中<span class="hljs-built_in">d1</span>不等于<span class="hljs-number">0</span>)，则只需要首先生成[<span class="hljs-number">0</span>,<span class="hljs-built_in">d2</span>-<span class="hljs-built_in">d1</span>)区间的随机数字，然后将生成的随机数字区间加上<span class="hljs-built_in">d1</span>即可。<br></code></pre></td></tr></table></figure><p>就是在原本的基础上乘以多少就可以变成原本的多少倍</p><h3 id="nextInt方法"><a href="#nextInt方法" class="headerlink" title="nextInt方法"></a>nextInt方法</h3><p>该方法的作用是生成一个随机的int值，该值介于int的区间，也就是-231到231-1之间。</p><pre><code class="hljs">Random a=new Random();System.out.println(a.nextInt());</code></pre><p>同时可以自己指定生成整数的范围</p><p>生成[0,10)区间的整数<br>    Random a&#x3D;new Random();<br>    System.out.println(a.nextInt(10));</p><p>生成[0,10]区间的整数<br>  Random a&#x3D;new Random();<br>    System.out.println(a.nextInt(11));</p><p>生成[-3,15)区间的整数<br>    Random a&#x3D;new Random();<br>    System.out.println(a.nextInt(18)-3);</p><h1 id="java中Math类"><a href="#java中Math类" class="headerlink" title="java中Math类"></a>java中Math类</h1><p>不用导入包</p><h3 id="静态常量"><a href="#静态常量" class="headerlink" title="静态常量"></a>静态常量</h3><p>Math 类中包含 E 和 PI 两个静态常量，正如它们名字所暗示的，它们的值分别等于 e（自然对数）和 π（圆周率）。</p><p>调用 Math 类的 E 和 PI 两个常量，并将结果输出。代码如下：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;E 常量的值：&quot; + Math.E);<span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;PI 常量的值：&quot; + Math.PI);<br></code></pre></td></tr></table></figure><p>执行上述代码，输出结果如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">E</span> 常量的值：<span class="hljs-number">2</span>.<span class="hljs-number">718281828459045</span><br><span class="hljs-attribute">PI</span> 常量的值：<span class="hljs-number">3</span>.<span class="hljs-number">141592653589793</span><br></code></pre></td></tr></table></figure><p>System.out.println(Math.E);<br>System.out.println(Math.PI);</p><h3 id="求最大值、最小值和绝对值"><a href="#求最大值、最小值和绝对值" class="headerlink" title="求最大值、最小值和绝对值"></a>求最大值、最小值和绝对值</h3><p>在程序中常见的就是求最大值、最小值和绝对值问题，如果使用 Math 类提供的方法可以很容易实现。这些方法的说明如表 1 所示。</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918971.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220614165454798"></p><p>就是比较的时候两个数字的数字类型一定要相同，这些函数只能是在两个数之间进行比较</p><p>求 10 和 20 的较大值、15.6 和 15 的较小值、-12 的绝对值，代码如下：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">纯文本复制<br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> Test02 &#123;    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;10 和 20 的较大值：&quot; + Math.max(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>));        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;15.6 和 15 的较小值：&quot; + Math.min(<span class="hljs-number">15.6</span>, <span class="hljs-number">15</span>));        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;-12 的绝对值：&quot; + Math.abs(<span class="hljs-number">-12</span>));    &#125;&#125;<br></code></pre></td></tr></table></figure><p>该程序的运行结果如下：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs diff">10和20的较大值：20<br>15.6和15的较小值：15.0<br><span class="hljs-deletion">-12的绝对值：12</span><br></code></pre></td></tr></table></figure><h3 id="求整运算"><a href="#求整运算" class="headerlink" title="求整运算"></a>求整运算</h3><p>Math 类的求整方法有很多，详细说明如表 2 所示。</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918759.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220614165920339"></p><ol><li>&#96;&#96;&#96;<br>import java.util.Scanner;<br>public class Test03 {<br>public static void main(String[] args) {<br>   Scanner input &#x3D; <strong>new</strong> Scanner(System.in);<br>   System.outprintln(“请输入一个数字：”);<br>   double num &#x3D; input.nextDouble();<br>   System.out.println(“大于或等于 “+ num +” 的最小整数：” + Math.ceil(num));<br>   System.out.println(“小于或等于 “+ num +” 的最大整数：” + Math.floor(num));<br>  System.out.println(“将 “+ num +” 加上 0.5 之后最接近的整数：” + Math.round(num));<br>   System.out.println(“最接近 “+num+” 的整数：” + Math.rint(num));<br>   }<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><br>   <span class="hljs-type">Double</span> a=<span class="hljs-number">1.0</span>;<br>       <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(Math.ceil(a));<br>       <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(Math.floor(a));<br>       <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(Math.rint(a));<br>       <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(Math.round(a));//当距离两个整数一样的时候取那个小的<br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br># Java Scanner 类<br><br><span class="hljs-number">2022</span><span class="hljs-number">-01</span><span class="hljs-number">-25</span> <span class="hljs-number">14</span>:<span class="hljs-number">23</span> 更新<br><br>java.util.Scanner是Java5的新特征，我们可以通过 Scanner 类来获取用户的输入。<br><br>下面是创建 Scanner 对象的基本语法：<br><br></code></pre></td></tr></table></figure> Scanner s &#x3D; new Scanner(System.in); <figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scss"><br>接下来我们演示一个最简单的的数据输入，并通过 Scanner 类的 <span class="hljs-built_in">next</span>() 与 <span class="hljs-built_in">nextLine</span>() 方法获取输入的字符串，在读取前我们一般需要 使用 hasNext 与 hasNextLine 判断是否还有输入的数据：<br><br><br><br>### 使用 next 方法：<br><br></code></pre></td></tr></table></figure>import java.util.Scanner;</li></ol><p>public class ScannerDemo {<br>    public static void main(String[] args) {<br>        Scanner scan &#x3D; new Scanner(System.in);<br>        &#x2F;&#x2F; 从键盘接收数据  </p><pre><code class="hljs">    //next方式接收字符串    System.out.println(&quot;next方式接收：&quot;);    // 判断是否还有输入    if(scan.hasNext())&#123;           String str1 = scan.next();        System.out.println(&quot;输入的数据为：&quot;+str1);      &#125;  &#125;  </code></pre><p>} </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs"><br>执行以上程序输出结果为：<br><br></code></pre></td></tr></table></figure><p>$ javac ScannerDemo.java<br>$ java ScannerDemo<br>next方式接收：<br>youj com<br>输入的数据为：youj</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>可以看到 com 字符串并未输出，接下来我们看 nextLine。<br><br>### 使用 nextLine 方法：<br><br></code></pre></td></tr></table></figure><p><code>import java.util.Scanner;  public class ScannerDemo &#123;      public static void main(String[] args) &#123;          Scanner scan = new Scanner(System.in);  // 从键盘接收数据   //nextLine方式接收字符串        System.out.println(&quot;nextLine方式接收：&quot;);        // 判断是否还有输入        if(scan.hasNextLine())&#123;           String str2 = scan.nextLine();        System.out.println(&quot;输入的数据为：&quot;+str2);          &#125;       &#125;   &#125;  </code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><p>执行以上程序输出结果为：<code>$ javac ScannerDemo.java $ java ScannerDemo nextLine方式接收： youj com 输入的数据为：youj com </code>可以看到 com 字符串输出。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs scss"><br><br><br>### <span class="hljs-built_in">next</span>()与<span class="hljs-built_in">nextLine</span>()区别<br><br>**<span class="hljs-built_in">next</span>():**<br><br>- <span class="hljs-number">1</span>、一定要读取到有效字符后才可以结束输入。<br>- <span class="hljs-number">2</span>、对输入有效字符之前遇到的空白，<span class="hljs-built_in">next</span>()方法会自动将其去掉。<br>- <span class="hljs-number">3</span>、只有输入有效字符后才将其后面输入的空白作为分隔符或者结束符。<br>- <span class="hljs-built_in">next</span>()不能得到带有空格的字符串。<br><br>**<span class="hljs-built_in">nextLine</span>()：**<br><br>- <span class="hljs-number">1</span>、以Enter为结束符,也就是说<span class="hljs-built_in">nextLine</span>()方法返回的是输入回车之前的所有字符。<br>- <span class="hljs-number">2</span>、可以获得空白。<br><br>如果要输入int或float类型的数据，在Scanner类中也有支持，但是在输入之前最好先使用 <span class="hljs-built_in">hasNextXxx</span>() 方法进行验证，再使用 <span class="hljs-built_in">nextXxx</span>() 来读取：<br><br></code></pre></td></tr></table></figure><p>import java.util.Scanner;  </p><p>public class ScannerDemo {<br>    public static void main(String[] args) {<br>        Scanner scan &#x3D; new Scanner(System.in);<br>        &#x2F;&#x2F; 从键盘接收数据<br>        int i &#x3D; 0 ;<br>        float f &#x3D; 0.0f ;<br>        System.out.print(“输入整数：”);<br>        if(scan.hasNextInt()){<br>            &#x2F;&#x2F; 判断输入的是否是整数<br>            i &#x3D; scan.nextInt() ;<br>            &#x2F;&#x2F; 接收整数<br>            System.out.println(“整数数据：” + i) ;<br>        }else{<br>            &#x2F;&#x2F; 输入错误的信息<br>            System.out.println(“输入的不是整数！”) ;<br>        }<br>        System.out.print(“输入小数：”);<br>        if(scan.hasNextFloat()){<br>            &#x2F;&#x2F; 判断输入的是否是小数<br>            f &#x3D; scan.nextFloat() ;<br>            &#x2F;&#x2F; 接收小数<br>            System.out.println(“小数数据：” + f) ;<br>        }else{<br>            &#x2F;&#x2F; 输入错误的信息<br>            System.out.println(“输入的不是小数！”) ;<br>        }<br>    }<br>} </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs"><br>执行以上程序输出结果为：<br><br></code></pre></td></tr></table></figure><p>$ javac ScannerDemo.java<br>$ java ScannerDemo<br>输入整数：12<br>整数数据：12<br>输入小数：1.2<br>小数数据：1.2</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><br><br><br>一个字节八比特，一个<span class="hljs-keyword">byte八位</span><br><span class="hljs-keyword"></span><br><br><br><span class="hljs-comment">## java SimpleDateFormat类</span><br><br>**<span class="hljs-number">1</span>、为什么要使用SimpleDateFormat？**<br><br>在<span class="hljs-keyword">Java中，如果我们想获取当前时间，一般会使用Date类的无参构造函数，如下所示，我们获取到当前时间并输出：</span><br><span class="hljs-keyword"></span><br></code></pre></td></tr></table></figure><p>import java.util.Date;<code> </code>public class SimpleDateFormatDemo {<code>  </code>public static void main(String[] args) {<code>    </code>Date currentTime &#x3D; <code>new` `Date();</code>    <code>System.out.println(currentTime); </code>&#x2F;&#x2F; 输出：Mon Feb 18 10:24:30 CST 2019<code>  </code>}&#96;&#96;}</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs gherkin"><br>此时我们会发现， 输出的格式并不是我们预期的格式，一般情况下，我们希望的格式都是类似于2019-02-18，2019-02-18 10:24:30，2019/02/18这样的，此时我们就需要用到java.text.SimpleDateFormat来自定义格式。<br><br><span class="hljs-symbol">*</span><span class="hljs-symbol">*</span>2.使用format()方法将日期转换为字符串<span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><br><br>使用format()方法，我们可以将日期类型转换为自己自定义的字符串格式，如2019-02-18，2019/02/18，2019-02-18 10:24:30等，自定义格式如下表所示：<br><br><br><br>|<span class="hljs-string"> 格式 </span>|<span class="hljs-string"> 释义           </span>|<span class="hljs-string"> 举例         </span>|<br>|<span class="hljs-string"> ---- </span>|<span class="hljs-string"> -------------- </span>|<span class="hljs-string"> ------------ </span>|<br>|<span class="hljs-string"> yyyy </span>|<span class="hljs-string"> 年             </span>|<span class="hljs-string"> 2019         </span>|<br>|<span class="hljs-string"> MM   </span>|<span class="hljs-string"> 月             </span>|<span class="hljs-string"> 02           </span>|<br>|<span class="hljs-string"> dd   </span>|<span class="hljs-string"> 日             </span>|<span class="hljs-string"> 18           </span>|<br>|<span class="hljs-string"> HH   </span>|<span class="hljs-string"> 小时(24小时制) </span>|<span class="hljs-string"> 13，下午一点 </span>|<br>|<span class="hljs-string"> mm   </span>|<span class="hljs-string"> 分钟           </span>|<span class="hljs-string"> 53           </span>|<br>|<span class="hljs-string"> ss   </span>|<span class="hljs-string"> 秒             </span>|<span class="hljs-string"> 42           </span>|<br>|<span class="hljs-string"> SSS  </span>|<span class="hljs-string"> 毫秒           </span>|<span class="hljs-string"> 629          </span>|<br><br><br><br></code></pre></td></tr></table></figure><p>package com.zwwhnly.springbootdemo;<code> </code>import java.text.SimpleDateFormat;<code>import java.util.Date;` `public class SimpleDateFormatDemo &#123;</code>  <code>public static void main(String[] args) &#123;</code>    <code>Date currentTime = </code>new<code> </code>Date();<code>    </code>System.out.println(currentTime);  <code>// Mon Feb 18 13:53:50 CST 2019` `    </code>SimpleDateFormat simpleDateFormat1 &#x3D; <code>new` `SimpleDateFormat(</code>“yyyy-MM-dd HH:mm:ss.SSS”<code>);</code>    <code>SimpleDateFormat simpleDateFormat2 = </code>new<code> </code>SimpleDateFormat(<code>&quot;yyyy-MM-dd&quot;</code>);<code>    </code>SimpleDateFormat simpleDateFormat3 &#x3D; <code>new` `SimpleDateFormat(</code>“yyyy&#x2F;MM&#x2F;dd”<code>);` `    </code>System.out.println(simpleDateFormat1.format(currentTime)); <code>// 输出2019-02-18 13:53:50.629</code>    <code>System.out.println(simpleDateFormat2.format(currentTime)); </code>&#x2F;&#x2F; 输出2019-02-18<code>    </code>System.out.println(simpleDateFormat3.format(currentTime)); <code>// 输出2019/02/18</code>  <code>&#125;</code>}</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scss"><br>**<span class="hljs-number">3</span>.使用<span class="hljs-built_in">parse</span>()方法将字符串转换为日期**<br><br>在实际开发过程中，我们经常需要将字符串转换为日期类型，以进行后续操作，此时可以使用<span class="hljs-built_in">parse</span>()<br><br>方法，但需要**注意：如果字符串与指定的格式不匹配，会报java<span class="hljs-selector-class">.text</span><span class="hljs-selector-class">.ParseException</span>异常**。<br><br></code></pre></td></tr></table></figure><p><img src="E:\临时\20190218\snipaste_20190218_141555.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="snipaste_20190218_141555">package com.zwwhnly.springbootdemo;<code> </code>import java.text.ParseException;<code>import java.text.SimpleDateFormat;</code>import java.util.Date;<code> </code>public class SimpleDateFormatDemo {<code>  </code>public static void main(String[] args) {<code> </code>    <code>try` `&#123;</code>      <code>SimpleDateFormat simpleDateFormat1 = </code>new<code> </code>SimpleDateFormat(<code>&quot;yyyy-MM-dd HH:mm&quot;</code>);<code> </code>      <code>String strDate1 = </code>“2019-02-18 13:58”<code>;</code>      <code>String strDate2 = </code>“2019-02-18”<code>;` `      </code>Date date1 &#x3D; simpleDateFormat1.parse(strDate1);<code>      </code>System.out.println(date1);<code>      </code>Date date2 &#x3D; simpleDateFormat1.parse(strDate2);<code>      </code>System.out.println(date2);<code>    </code>} <code>catch` `(ParseException e) &#123;</code>      <code>e.printStackTrace();</code>    <code>&#125;</code>  <code>&#125;</code>}</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><br>运行结果如下图所示：<br>![img](https:<span class="hljs-comment">//zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918082.png)</span><br>由此我们可以看到，strDate1格式匹配能正常转换为Date类型，而strDate2由于格式不匹配，抛出java.text.ParseException，正是因为如此，以上的代码才必须包括在<span class="hljs-keyword">try</span>,<span class="hljs-keyword">catch</span>语句中，否则IDEA会提示错误，代码也编译不通过，如下图所示：<br>![img](https:<span class="hljs-comment">//zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918064.png)</span><br><br><span class="hljs-meta">## 抽象类和接口</span><br><br><br><br>package Shape;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Shape</span> &#123;<br><br>&#123;<br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;执行Shapes初始化块..&quot;</span>);<br>&#125;<br><span class="hljs-keyword">private</span> String color;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-built_in">double</span> <span class="hljs-title">calPerimeter</span>()</span>;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> String <span class="hljs-title">getType</span>()</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Shape</span>()</span> &#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Shape</span>(<span class="hljs-params">String color</span>)</span> &#123;<br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;执行Shape的构造器&quot;</span>);<br><span class="hljs-keyword">this</span>.color=color;<br>&#125;<br><br>​<br><br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">Output</span>&#123;<br><span class="hljs-built_in">int</span> MAX_CACHE_LINE=<span class="hljs-number">50</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">out</span>()</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getData</span>(<span class="hljs-params">String msg</span>)</span>;<br><span class="hljs-function"><span class="hljs-literal">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span>(<span class="hljs-params">String...msgs</span>)</span> &#123;<br><span class="hljs-keyword">for</span> (String msg :msgs)<br>&#123;<br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;默认的test()方法&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-literal">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span>()</span> &#123;<br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;test方法&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">static</span> String <span class="hljs-title">staticTest</span>()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;接口里的类方法&quot;</span>;<br>&#125;<br><br>&#125;<br>&#125;<br><br><br><br>多入参方式<br><br></code></pre></td></tr></table></figure><p>public static void main(String[] args) {<br>        System.out.println(“test1:”);<br>        test(“a”,”b”,”c”);<br>        System.out.println(“test2:”);<br>        test(new String[] {“a”, “b”, “c”});<br>    }</p><pre><code class="hljs">/** * 测试方法 * @param params 参数 * */  public static void test(String... params)&#123;    //遍历参数内容    for(String temp : params)&#123;        System.out.println(temp);    &#125;    System.out.println();</code></pre><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><br>定义这种类型的入参必须放到最后一个才可以，也就是说<span class="hljs-type">int</span>入参需要放到可变入参的前面，同时再test1处增加一个<span class="hljs-type">String</span>进行测试，看一下代码。<br><br></code></pre></td></tr></table></figure><p>public static void main(String[] args) {<br>        System.out.println(“test1:”);<br>        test(1,”a”,”b”,”c”,”d”);<br>        System.out.println(“test2:”);<br>        test(2,new String[] {“a”, “b”, “c”});<br>    }</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><br>​<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 测试方法</span><br><span class="hljs-comment">     * @param params 参数</span><br><span class="hljs-comment">     * */</span><br><br><br>​    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> intParam,String... <span class="hljs-keyword">params</span></span>)</span>&#123;<br>​    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;int:&quot;</span>+intParam);<br>​        <span class="hljs-comment">//遍历参数内容</span><br>​        <span class="hljs-keyword">for</span>(String temp : <span class="hljs-keyword">params</span>)&#123;<br>​            System.<span class="hljs-keyword">out</span>.println(temp);<br>​        &#125;<br>​        System.<span class="hljs-keyword">out</span>.println();<br>​    &#125;<br><br><span class="hljs-meta"># java的内部类</span><br><br><span class="hljs-meta">## 非静态内部类</span><br><br></code></pre></td></tr></table></figure><p>package Shape;</p><p>public class Shape{<br>    private String prop&#x3D;”外部类的实例变量”;<br>    private class InClass{<br>        private String prop&#x3D;”内部类的实例变量”;<br>        public void info() {<br>            String prop&#x3D;”局部变量”;<br>            System.out.println(Shape.this.prop);<br>            System.out.println(this.prop);<br>            System.out.println(prop);<br>        }<br>    }<br>    public void test() {<br>        InClass a&#x3D;new InClass();<br>        a.info();<br>    }<br>    public static void main(String[] args)<br>    {<br>        new Shape().test();<br>        }<br>    }</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>## 静态内部类<br><br></code></pre></td></tr></table></figure><p>package Shape;</p><p>public class Shape{<br>    private int a&#x3D;1;<br>    private static int b&#x3D;2;<br>    static class show{</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> age=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> c=<span class="hljs-number">3</span>;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">accessOuterProp</span>()</span> &#123;<br><span class="hljs-comment">//System.out.println(a);</span><br>System.<span class="hljs-keyword">out</span>.println(b);<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] args</span>)</span><br>&#123;<br>System.<span class="hljs-keyword">out</span>.println(show.age);<br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">new</span> show().c);<br>&#125;<br>&#125;<br><br><span class="hljs-meta">## 在外部类以外使用非静态内部类</span><br><br></code></pre></td></tr></table></figure><p>package Shape;</p><p>class Out{<br>    class In{<br>        public In(String msg){<br>            System.out.println(msg);<br>        }<br>    }<br>}<br>public class Shape{<br>    public static void main(String[] args)<br>    {<br>        Out.In in&#x3D;new Out().new In(“测试信息”);</p><pre><code class="hljs">    &#125;</code></pre><p>}</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>## 在外部类以外使用静态内部类<br><br></code></pre></td></tr></table></figure><p>package Shape;</p><p>class StaticOut{<br>    static class StaticIn{<br>        public StaticIn() {<br>            System.out.println(“静态类内部的构造器”);<br>        }<br>    }<br>}<br>public class Shape{<br>    public static void main(String[] args)<br>    {<br>        StaticOut.StaticIn in&#x3D;new StaticOut.StaticIn();</p><pre><code class="hljs">    &#125;</code></pre><p>}</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><br><span class="hljs-meta">## 使用静态内部类注意事项</span><br><br>```java<br>package Shape;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title">StaticOut</span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> a=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> h=<span class="hljs-number">2</span>;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title">StaticIn</span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">StaticIn</span>()</span> &#123;<br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;静态类内部的构造器&quot;</span>);<br><span class="hljs-comment">//System.out.println(a);</span><br>StaticOut b= <span class="hljs-keyword">new</span> StaticOut();<br>System.<span class="hljs-keyword">out</span>.println(b.a);<br>System.<span class="hljs-keyword">out</span>.println(h);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Shape</span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] args</span>)</span><br>&#123;<br>StaticOut.StaticIn <span class="hljs-keyword">in</span>=<span class="hljs-keyword">new</span> StaticOut.StaticIn();<br><br><br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Shape;<br><br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Product</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getPrice</span><span class="hljs-params">()</span>;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shape</span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> age=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(Product P)</span><br>&#123;<br>System.out.println(<span class="hljs-string">&quot;购买了一个&quot;</span>+P.getName()+<span class="hljs-string">&quot;,花掉了&quot;</span>+P.getPrice());<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>&#123;<br>Shape a=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Shape</span>();<br>a.test(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Product</span>() &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getPrice</span><span class="hljs-params">()</span> &#123;<br>System.out.println(age);<br><span class="hljs-keyword">return</span> <span class="hljs-number">567.8</span>;<br>&#125;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Agp显卡&quot;</span>;<br>&#125;<br><br>&#125;);<br><br>&#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs typescript">可以替代上面的匿名内部类<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">product1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Product</span><br><br>&#123;<br><br><span class="hljs-keyword">public</span> double <span class="hljs-title function_">getPrice</span>(<span class="hljs-params"></span>)&#123;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">56.7</span>;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getName</span>(<span class="hljs-params"></span>)&#123;<br><br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;agp显卡&quot;</span>;<br><br>&#125;<br><br>&#125;<br>a.<span class="hljs-title function_">test</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_">product1</span>());<br></code></pre></td></tr></table></figure><h2 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Shape;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Eatable</span><br>&#123;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">taste</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Flyable</span>&#123;<br><br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">fly</span><span class="hljs-params">(String weather)</span>;<br><br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Addable</span>&#123;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span>;<br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shape</span>&#123;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">(Eatable e)</span><br>&#123;<br>System.out.println(e);<br>e.taste();<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">drive</span><span class="hljs-params">(Flyable f)</span> &#123;<br><br>System.out.println(<span class="hljs-string">&quot;我正在驾驶&quot;</span>+f);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(Addable add)</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;5域3的和位&quot;</span>+add.add(<span class="hljs-number">5</span>,<span class="hljs-number">3</span>));<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>Shape lq=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Shape</span>();<br>lq.eat(()-&gt;System.out.println(<span class="hljs-string">&quot;okok&quot;</span>));<br>lq.drive(weather-&gt;&#123;System.out.println(<span class="hljs-string">&quot;今天的天气是&quot;</span>+weather);&#125;);<br>lq.test((a,b)-&gt;a+b);<br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> hello;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">like</span>&#123;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br>like l=()-&gt;&#123;<br>System.out.println(<span class="hljs-string">&quot;1&quot;</span>);<br>&#125;;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="引用类方法"><a href="#引用类方法" class="headerlink" title="引用类方法"></a>引用类方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Shape;<br><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Converter</span>&#123;<br>Integer <span class="hljs-title function_">convert</span><span class="hljs-params">(String from)</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shape</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>Converter converter1=from-&gt;Integer.valueOf(from);<br>Converter converter2=Integer::valueOf;<br>&#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="引用特定对象的实例方法"><a href="#引用特定对象的实例方法" class="headerlink" title="引用特定对象的实例方法"></a>引用特定对象的实例方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Shape;<br><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Converter</span>&#123;<br>Integer <span class="hljs-title function_">convert</span><span class="hljs-params">(String from)</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shape</span>&#123;<br>Converter converter2=from-&gt;<span class="hljs-string">&quot;fkit.org&quot;</span>.indexOf(from);<br>Converter converter1=<span class="hljs-string">&quot;fkit.org&quot;</span>::indexOf;<br><span class="hljs-type">int</span> value=converter1.convert(<span class="hljs-string">&quot;1&quot;</span>);<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>System.out.println(value);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>}</p><h2 id="引用某类对象的实例方法"><a href="#引用某类对象的实例方法" class="headerlink" title="引用某类对象的实例方法"></a>引用某类对象的实例方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Shape;<br><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Mytest</span>&#123;<br>String <span class="hljs-title function_">test</span><span class="hljs-params">(String a,<span class="hljs-type">int</span> b ,<span class="hljs-type">int</span> c)</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shape</span>&#123;<br><span class="hljs-type">Mytest</span> <span class="hljs-variable">mt</span> <span class="hljs-operator">=</span>(a,b,c)-&gt;a.substring(b,c);<br>Mytest mt1=String::substring;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>String str=mt.test(<span class="hljs-string">&quot;java i love you&quot;</span>,<span class="hljs-number">3</span>,<span class="hljs-number">9</span>);<br>System.out.println(str);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>&#123;<br>Shape a=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Shape</span>();<br>a.print();<br><br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="引用构造器"><a href="#引用构造器" class="headerlink" title="引用构造器"></a>引用构造器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Shape;<br><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">YourTest</span>&#123;<br>JFrame <span class="hljs-title function_">win</span><span class="hljs-params">(String title)</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shape</span>&#123;<br>YourTest yt=(String a)-&gt;<span class="hljs-keyword">new</span> <span class="hljs-title class_">JFrame</span>(a);<br>YourTest yt1=JFrame::<span class="hljs-keyword">new</span>;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>JFrame jf=yt.win(<span class="hljs-string">&quot;我的窗口&quot;</span>);<br>System.out.println(jf);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>&#123;<br>Shape a=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Shape</span>();<br>a.print();<br><br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Shape;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JFrame</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">JFrame</span><span class="hljs-params">(String a)</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;a&quot;</span>);<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Shape;<br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">SeasonEnum</span>&#123;<br>SPRING,SUMMER,FALL,WINTER;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shape</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">judge</span><span class="hljs-params">(SeasonEnum s)</span><br>&#123;<br>       <span class="hljs-keyword">switch</span> (s)<br>       &#123;<br>       <span class="hljs-keyword">case</span> SPRING:<br>       System.out.println(<span class="hljs-string">&quot;春天&quot;</span>);<br>       <span class="hljs-keyword">break</span>;<br>       <span class="hljs-keyword">case</span> SUMMER:<br>       System.out.println(<span class="hljs-string">&quot;夏天&quot;</span>);<br>       <span class="hljs-keyword">break</span>;<br>       <span class="hljs-keyword">case</span> FALL:<br>       System.out.println(<span class="hljs-string">&quot;秋天&quot;</span>);<br>       <span class="hljs-keyword">break</span>;<br>       <span class="hljs-keyword">case</span> WINTER:<br>       System.out.println(<span class="hljs-string">&quot;冬天&quot;</span>);<br>       <span class="hljs-keyword">break</span>;<br>       <br>       <br><br>       &#125;<br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>&#123;<br><span class="hljs-keyword">for</span> (SeasonEnum s:SeasonEnum.values())<br>&#123;<br>System.out.println(s);<br><br><br>&#125;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Shape</span>().judge(SeasonEnum.SPRING);<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="更合理的枚举类"><a href="#更合理的枚举类" class="headerlink" title="更合理的枚举类"></a>更合理的枚举类</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs typescript">package <span class="hljs-title class_">Shape</span>;<br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Gender</span>&#123;<br><span class="hljs-variable constant_">MALE</span>,<span class="hljs-variable constant_">FEMALE</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> name;<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setName</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> name</span>)<br>&#123;<br><span class="hljs-keyword">switch</span> (<span class="hljs-variable language_">this</span>)<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-attr">MALE</span>:<br><span class="hljs-keyword">if</span>(name.<span class="hljs-title function_">equals</span>(<span class="hljs-string">&quot;男&quot;</span>))<br>&#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>=name;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;参数错误&quot;</span>);<br>&#125;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-attr">FEMALE</span>:<br><span class="hljs-keyword">if</span>(name.<span class="hljs-title function_">equals</span>(<span class="hljs-string">&quot;女&quot;</span>))<br>&#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>=name;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;参数错误&quot;</span>);<br>&#125;<br><span class="hljs-keyword">break</span>;<br><br><br>&#125;<br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getName</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>;<br>&#125;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shape</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>)<br>&#123;<br><span class="hljs-title class_">Gender</span> g=<span class="hljs-title class_">Gender</span>.<span class="hljs-title function_">valueOf</span>(<span class="hljs-string">&quot;FEMALE&quot;</span>);<br>g.<span class="hljs-title function_">setName</span>(<span class="hljs-string">&quot;女&quot;</span>);<br><span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(g+<span class="hljs-string">&quot;代表&quot;</span>+g.<span class="hljs-title function_">getName</span>());<br><span class="hljs-comment">//g.setName(&quot;男&quot;);</span><br><br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="用构造器做的枚举类，更合理"><a href="#用构造器做的枚举类，更合理" class="headerlink" title="用构造器做的枚举类，更合理"></a>用构造器做的枚举类，更合理</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Shape;<br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Gender</span>&#123;<br>MALE(<span class="hljs-string">&quot;男&quot;</span>),FEMALE(<span class="hljs-string">&quot;女&quot;</span>);<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String name;<br><span class="hljs-keyword">private</span> <span class="hljs-title function_">Gender</span><span class="hljs-params">(String name)</span><br>&#123;<br><span class="hljs-built_in">this</span>.name=name;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name;<br>&#125;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shape</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>&#123;<br>Gender g=Gender.valueOf(<span class="hljs-string">&quot;FEMALE&quot;</span>);<br>System.out.println(g.getName());<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="实现接口的枚举类，不同的枚举值重写的函数还不一样"><a href="#实现接口的枚举类，不同的枚举值重写的函数还不一样" class="headerlink" title="实现接口的枚举类，不同的枚举值重写的函数还不一样"></a>实现接口的枚举类，不同的枚举值重写的函数还不一样</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Shape;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">GenderDesc</span><br>&#123;<br>     <span class="hljs-keyword">void</span> <span class="hljs-title function_">info</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Gender</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">GenderDesc</span><br>&#123;<br>MALE(<span class="hljs-string">&quot;男&quot;</span>)<br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">info</span><span class="hljs-params">()</span><br>&#123;<br>System.out.println(<span class="hljs-string">&quot;这个枚举值代表男性&quot;</span>);<br>&#125;<br>&#125;,<br>FEMALE(<span class="hljs-string">&quot;女&quot;</span>)<br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">info</span><span class="hljs-params">()</span><br>&#123;<br>System.out.println(<span class="hljs-string">&quot;这个枚举值代表女性&quot;</span>);<br>&#125;<br>&#125;;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String name;<br><span class="hljs-keyword">private</span> <span class="hljs-title function_">Gender</span><span class="hljs-params">(String name)</span> &#123;<br><span class="hljs-built_in">this</span>.name=name;<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shape</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>&#123;<br>Gender g=Gender.valueOf(<span class="hljs-string">&quot;FEMALE&quot;</span>);<br>g.info();<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java">这个是包含抽象方法的枚举类<br>在对枚举值实例化的时候也是进行了一个方法的重写，类似于匿名内部类，创建了一个Gender子类的实例<br><br><br><br><span class="hljs-keyword">package</span> Shape;<br><br><br><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Gender</span><br>&#123;<br>PLUS<br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">eval</span><span class="hljs-params">(<span class="hljs-type">double</span> x, <span class="hljs-type">double</span> y)</span><br>&#123;<br><span class="hljs-keyword">return</span> x+y;<br>&#125;<br>&#125;,<br>MINUS<br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">eval</span><span class="hljs-params">(<span class="hljs-type">double</span> x,<span class="hljs-type">double</span> y)</span><br>&#123;<br><span class="hljs-keyword">return</span> x-y;<br>&#125;<br>&#125;,<br>TIMES<br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">eval</span><span class="hljs-params">(<span class="hljs-type">double</span> x,<span class="hljs-type">double</span> y)</span><br>&#123;<br><span class="hljs-keyword">return</span> x*y; <br><br>&#125;<br>&#125;,<br>DEVIDE<br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">eval</span><span class="hljs-params">(<span class="hljs-type">double</span> x,<span class="hljs-type">double</span> y)</span><br>&#123;<br><span class="hljs-keyword">return</span> x/y;<br>&#125;<br>&#125;;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-type">double</span> <span class="hljs-title function_">eval</span><span class="hljs-params">(<span class="hljs-type">double</span> x,<span class="hljs-type">double</span> y)</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br><br><br>System.out.println(Gender.PLUS.eval(<span class="hljs-number">5</span>,<span class="hljs-number">4</span>));<br>System.out.println(Gender.PLUS.eval(<span class="hljs-number">5</span>,<span class="hljs-number">4</span>));<br>System.out.println(Gender.PLUS.eval(<span class="hljs-number">5</span>,<span class="hljs-number">4</span>));<br>System.out.println(Gender.PLUS.eval(<span class="hljs-number">5</span>,<span class="hljs-number">4</span>));<br><br>&#125;<br></code></pre></td></tr></table></figure><p>}</p><h1 id="java中的集合"><a href="#java中的集合" class="headerlink" title="java中的集合"></a>java中的集合</h1><h1 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h1><p>这是一个接口，只能new 实现类</p><p><strong>Collection常用方法</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs scss">int <span class="hljs-built_in">size</span>();<br><br>boolean <span class="hljs-built_in">isEmpty</span>();<br><br>boolean <span class="hljs-built_in">contains</span>(Object o);<span class="hljs-comment">//调用o的equals方法和集合中元素比较来判断是否存在</span><br><br>Iterator&lt;E&gt; <span class="hljs-built_in">iterator</span>();<br><br><span class="hljs-selector-tag">Object</span><span class="hljs-selector-attr">[]</span> toArray ();<br><br>boolean <span class="hljs-built_in">add</span>(E o);<br><br>boolean <span class="hljs-built_in">remove</span>(Object o);<br><br>boolean containsAll (Collection&lt;?&gt; c);<span class="hljs-comment">//检查集合c是否在集合里面出现</span><br><br>boolean addAll (Collection&lt;? extends E&gt; c);<br>boolean removeAll (Collection&lt;?&gt; c);<span class="hljs-comment">//</span><br>boolean retainAll (Collection&lt;?&gt; c);<span class="hljs-comment">//保留两个集合交集</span><br>void <span class="hljs-attribute">clear</span>();<br><br>boolean <span class="hljs-built_in">equals</span>(Object o);<br></code></pre></td></tr></table></figure><p><strong>常用方法的使用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Shape;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collection;<br><span class="hljs-keyword">import</span> java.util.HashSet;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shape</span>&#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br><span class="hljs-type">Collection</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>c.add(<span class="hljs-string">&quot;寻悟空&quot;</span>);<br>c.add(<span class="hljs-number">6</span>);<br>c.remove(<span class="hljs-number">6</span>);<br>System.out.println(c.contains(<span class="hljs-string">&quot;寻悟空&quot;</span>));<br>c.add(<span class="hljs-string">&quot;java&quot;</span>);<br>Collection books=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>();<br>books.add(<span class="hljs-string">&quot;轻量级javaee企业实战&quot;</span>);<br>books.add(<span class="hljs-string">&quot;疯狂java将以&quot;</span>);<br>books.add(<span class="hljs-string">&quot;寻悟空&quot;</span>);<br>c.removeAll(books);<span class="hljs-comment">//移除c中和books相同的元素</span><br>c.clear();<span class="hljs-comment">//清除所有元素</span><br>books.retainAll(c);<span class="hljs-comment">//移除books中和c不相同的元素</span><br>System.out.println(books);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用lambda表达式遍历集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Shape;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collection;<br><span class="hljs-keyword">import</span> java.util.HashSet;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shape</span>&#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br>Collection books=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>();<br>books.add(<span class="hljs-string">&quot;轻量级javaee企业实战&quot;</span>);<br>books.add(<span class="hljs-string">&quot;疯狂java讲义&quot;</span>);<br>books.add(<span class="hljs-string">&quot;疯狂安定&quot;</span>);<br>books.forEach(obj-&gt;System.out.println(<span class="hljs-string">&quot;迭代元素集合&quot;</span>+obj));<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Iterator 遍历集合元素</strong></p><p>例一</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Shape;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collection;<br><span class="hljs-keyword">import</span> java.util.HashSet;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shape</span>&#123;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br>Collection books=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>();<br>books.add(<span class="hljs-string">&quot;轻量级javaee企业实战&quot;</span>);<br>books.add(<span class="hljs-string">&quot;疯狂java讲义&quot;</span>);<br>books.add(<span class="hljs-string">&quot;疯狂安定&quot;</span>);<br>     <span class="hljs-type">Iterator</span> <span class="hljs-variable">it</span> <span class="hljs-operator">=</span>books.iterator();<br>     <span class="hljs-keyword">while</span>(it.hasNext())<br>     &#123;<br><br>     String book=(String)it.next();<br>     System.out.println(book);<br>     <span class="hljs-keyword">if</span>(books.equals(<span class="hljs-string">&quot;疯狂java讲义&quot;</span>))<br>     &#123;<br>     it.remove();<span class="hljs-comment">//从集合中删除上一次next()方法返回的元素</span><br>     <span class="hljs-comment">//books.remove();迭代过程中不能使用这个，只有Iterator来remove才行</span><br>     &#125;<br>     book=<span class="hljs-string">&quot;测试字符串&quot;</span>;<span class="hljs-comment">//对book变量赋值，不会改变集合元素本身的</span><br>     System.out.println(books);<br>     it.forEachRemaining(obj-&gt;System.out.println(<span class="hljs-string">&quot;可迭代的元素&quot;</span>+obj));<br>     <br>     <br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>例二</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br>Collection c=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>();<br>c.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;Tom&quot;</span>,<span class="hljs-number">60</span>));<br>c.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;Peter&quot;</span>,<span class="hljs-number">70</span>));<br>c.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;Bob&quot;</span>,<span class="hljs-number">80</span>));<br>Iterator i=c.iterator();<br><span class="hljs-keyword">while</span>(i.hasNext()) &#123;<br>Student s=(Student)i.next();<span class="hljs-comment">//将得到的元素强制转换为（Student）类然后就可以正常使用了</span><br>    <span class="hljs-comment">//如果这里上面的Iterator规定泛型是&lt;Student&gt;就不需要转换了</span><br>    <span class="hljs-comment">//其实其他集合也是一样，因为java无法知道集合中是什么类</span><br>System.out.println(s.getName());<br>&#125;<br><br>&#125;<br><br><br></code></pre></td></tr></table></figure><p><strong>jdk1.5用foreach循环遍历集合</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Shape;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collection;<br><span class="hljs-keyword">import</span> java.util.HashSet;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shape</span>&#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br>Collection books=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>();<br>books.add(<span class="hljs-string">&quot;轻量级javaee企业实战&quot;</span>);<br>books.add(<span class="hljs-string">&quot;疯狂java讲义&quot;</span>);<br>books.add(<span class="hljs-string">&quot;疯狂安定&quot;</span>);<br>    <span class="hljs-keyword">for</span>(Object obj:books)<br>    &#123;<br>    String book=(String)obj;<br>    System.out.println(<span class="hljs-string">&quot;book&quot;</span>);<br>    <span class="hljs-keyword">if</span>(book.equals(<span class="hljs-string">&quot;疯狂java讲义&quot;</span>))<br>    &#123;<br>    books.remove(book);<br>    &#125;<br>    &#125;<br>    System.out.println(books);<br>     <br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Predicate操作集合</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Shape;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collection;<br><span class="hljs-keyword">import</span> java.util.HashSet;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shape</span>&#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br>Collection books=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>();<br>books.add(<span class="hljs-string">&quot;轻量级javaee企业实战&quot;</span>);<br>books.add(<span class="hljs-string">&quot;疯狂java讲义&quot;</span>);<br>books.add(<span class="hljs-string">&quot;疯狂安定&quot;</span>);<br>    books.add(<span class="hljs-string">&quot;疯狂ios讲义&quot;</span>);<br>    books.add(<span class="hljs-string">&quot;疯狂ajax讲义&quot;</span>);<br>    books.add(<span class="hljs-string">&quot;疯狂andriod将以&quot;</span>);<br>    books.removeIf(ele-&gt;((String)ele).length()&lt;<span class="hljs-number">10</span>);<br>    System.out.println(books);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Shape;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collection;<br><span class="hljs-keyword">import</span> java.util.HashSet;<br><span class="hljs-keyword">import</span> java.util.function.Predicate;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shape</span>&#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br><br>Collection books=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>();<br>books.add(<span class="hljs-string">&quot;疯狂java&quot;</span>);<br>books.add(<span class="hljs-string">&quot;疯狂javajavajavajvaa&quot;</span>);<br>System.out.println(calAll(books,ele-&gt;((String)ele).contains(<span class="hljs-string">&quot;疯狂&quot;</span>)));<br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">calAll</span><span class="hljs-params">(Collection books,Predicate p)</span><br>&#123;<br><span class="hljs-type">int</span> total=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(Object obj:books)<br>&#123;<br><span class="hljs-keyword">if</span>(p.test(obj))<br>&#123;<br>total++;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> total;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="List集合"><a href="#List集合" class="headerlink" title="List集合"></a>List集合</h2><p>是一个集合，需要new实现类</p><p>特点：实现该接口的类中的元素**有顺序，可以重复</p><p>List容器中的元素都有一个对应的整数型的序号，用以记录元素在容器中的位置，可以根据序号取元素。**</p><p>主要实现类：ArrayList，LinkedList</p><p>列表：按照一定次序（对象进入的顺序）排列的·对象集，对象之间有次序关系，对象可以重复</p><p>Object get(int index);</p><p>Object set(int index, Object element);</p><p>void add(int index,Object element);</p><p>Object remove(int index);</p><p>int indexOf (Object o);</p><p>int lastIndexOf(Object o);</p><p><strong>常用方法的使用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Hello;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>&#123;<br>List books=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>books.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;轻量级javaee企业应用实战&quot;</span>));<br>books.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span> (<span class="hljs-string">&quot;疯狂java讲义&quot;</span>));<br>books.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;疯狂狂andriod讲义&quot;</span>));<br>System.out.println(books);<br>books.add(<span class="hljs-number">1</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;java讲义&quot;</span>));<span class="hljs-comment">//将新字符串对象插入在第二个位置</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;books.size();i++)<br>&#123;<br>System.out.println(books.get(i));<br>&#125;<br>books.remove(<span class="hljs-number">2</span>);<span class="hljs-comment">//删除第三个元素</span><br>System.out.println(books);<br>System.out.println(books.indexOf(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;java讲义&quot;</span>)));<span class="hljs-comment">//判断指定元素在List集合中的位置，输出1，表明位于第二位</span><br>books.set(<span class="hljs-number">1</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;疯狂java讲义&quot;</span>));<span class="hljs-comment">//将第二个元素替换成新的字符串对象</span><br>System.out.println(books);<br>System.out.println(books.subList(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>));<span class="hljs-comment">//将集合的第二个元素截取成子集合,就是第二个参数减一是结束下标</span><br>&#125;<br></code></pre></td></tr></table></figure><p>}</p><p>addAll方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br><br>ArrayList&lt;String&gt; a=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>ArrayList&lt;String&gt; b=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>a.add(<span class="hljs-string">&quot;a&quot;</span>);<br>a.add(<span class="hljs-string">&quot;b&quot;</span>);<br>a.add(<span class="hljs-string">&quot;c&quot;</span>);<br>b.add(<span class="hljs-string">&quot;a&quot;</span>);<br>b.add(<span class="hljs-string">&quot;b&quot;</span>);<br>b.add(<span class="hljs-string">&quot;c&quot;</span>);<br>a.addAll(b);<br>System.out.println(a);<br><br>&#125;<br><br>结果：[a, b, c, a, b, c]<br></code></pre></td></tr></table></figure><p><strong>LIST集合是通过equals方法判断两个对象是否一样的</strong></p><p>A类重写了equals方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Hello;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>&#123;<br>List books=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>books.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;轻量级javaee企业应用实战&quot;</span>));<br>books.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span> (<span class="hljs-string">&quot;疯狂java讲义&quot;</span>));<br>books.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;疯狂狂andriod讲义&quot;</span>));<br>books.remove(<span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>());<span class="hljs-comment">//会删除第一个元素，因为它和任意元素都可以相等</span><br>books.remove(<span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>());<span class="hljs-comment">//再次删除第一个元素</span><br>System.out.println(books);<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>List两个新增方法sort和replacell()方法</strong></p><p>sort需要一个Comparator对象来控制元素排序，程序可使用Lambda表达式作为参数</p><p>sort方法必须传入构造器</p><p>replaceAll()方法需要一个UnaryOperator来替换所有的集合元素，UnaryOperator是一个函数式接口，也可以使用Lambda作为参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Hello;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>&#123;<br>List books=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>books.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;轻量级javaee企业应用实战&quot;</span>));<br>books.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span> (<span class="hljs-string">&quot;疯狂java讲义&quot;</span>));<br>books.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;疯狂狂andriod讲义&quot;</span>));<br>        <span class="hljs-comment">//使用目标类型为Comparator的Lambda表达式对List集合排序</span><br>books.sort((o1,o2)-&gt;((String)o1).length()-((String)o2).length());<br>System.out.println(books);<br>        <span class="hljs-comment">//使用目标类型为UnaryOperator的Lambda表达式来替换集合中的所有元素</span><br>        <span class="hljs-comment">//该Lambda表达式控制使用每个字符串的长度作为新的集合元素</span><br>books.replaceAll(ele-&gt;((String)ele).length());<br>System.out.println(books);<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Compare</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparator</span>&lt;Integer&gt;&#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Integer o1, Integer o2)</span> &#123;<br><span class="hljs-keyword">return</span> o2-o1;<br>&#125;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br><br>ArrayList&lt;Integer&gt; a=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;();<br>a.add(<span class="hljs-number">1</span>);<br>a.add(<span class="hljs-number">4</span>);<br>a.add(<span class="hljs-number">3</span>);<br>Compare b=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Compare</span>();<br>a.sort(b);<br>System.out.println(a);<br><br><br>&#125;<br><br>&#125;<br>结果：[<span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><p>Arrays.List方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Hello;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>&#123;<br>List books=Arrays.asList(<span class="hljs-string">&quot;轻量级javaee企业应用实战&quot;</span>,<span class="hljs-string">&quot;疯狂java讲义&quot;</span>,<span class="hljs-string">&quot;疯狂狂andriod讲义&quot;</span>);<br>System.out.println(books.getClass());<br>books.forEach(System.out::println);<br><span class="hljs-comment">//books.add(&quot;疯狂java讲义&quot;);</span><br><span class="hljs-comment">//books.add(&quot;疯狂java&quot;);</span><br><br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>将集合转变为数组的方法</p><p>**</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span>** **<span class="hljs-keyword">static</span>** **<span class="hljs-keyword">void</span>** main(String[] args)&#123;<br><br>​    *<span class="hljs-comment">// 创建一个动态数组*</span><br>​    ArrayList&lt;String&gt; sites = **<span class="hljs-keyword">new</span>** ArrayList&lt;&gt;();<br>​    <br>​    sites.add(<span class="hljs-string">&quot;Runoob&quot;</span>);<br>​    sites.add(<span class="hljs-string">&quot;Google&quot;</span>);<br>​    sites.add(<span class="hljs-string">&quot;Wiki&quot;</span>);<br>​    sites.add(<span class="hljs-string">&quot;Taobao&quot;</span>);<br>​    System.out.println(<span class="hljs-string">&quot;网站列表: &quot;</span> + sites);<br><br>​    *<span class="hljs-comment">// 创建一个新的 String 类型的数组*</span><br>​    *<span class="hljs-comment">// 数组长度和 ArrayList 长度一样*</span><br>​    String[] arr = **<span class="hljs-keyword">new</span>** String[sites.size()];<br><br>​    *<span class="hljs-comment">// 将ArrayList对象转换成数组*</span><br>​    sites.toArray(arr);<br><br>​    *<span class="hljs-comment">// 输出所有数组的元素*</span><br>​    System.out.print(<span class="hljs-string">&quot;Array: &quot;</span>);<br>​    **<span class="hljs-keyword">for</span>**(String item:arr) &#123;<br>​      System.out.print(item+<span class="hljs-string">&quot;, &quot;</span>);<br>​    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><h3 id="子类ArrayList"><a href="#子类ArrayList" class="headerlink" title="子类ArrayList"></a>子类ArrayList</h3><p>ArrayList 类是一个可以动态修改的数组，与普通数组的区别就是它是没有固定大小的限制，我们可以添加或删除元素。</p><p>ArrayList 继承了 AbstractList ，并实现了 List 接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span><br>&#123;<br>ArrayList&lt;String&gt; sites=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>sites.add(<span class="hljs-string">&quot;google&quot;</span>);<span class="hljs-comment">//向集合中添加</span><br>sites.add(<span class="hljs-string">&quot;runoob&quot;</span>);<br>sites.add(<span class="hljs-string">&quot;taobao&quot;</span>);<br>System.out.println(sites.get(<span class="hljs-number">1</span>));<span class="hljs-comment">//得到指定下标的元素</span><br>sites.set(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;Wiki&quot;</span>);<span class="hljs-comment">//在指定下标处插入</span><br>sites.remove(<span class="hljs-number">3</span>);<span class="hljs-comment">//移除下标为3的元素</span><br>System.out.println(sites.size());<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;sites.size();i++)<br>&#123;<br>System.out.println(sites.get(i));<br>&#125;<br><span class="hljs-keyword">for</span>(String i:sites)<br>&#123;<br>System.out.println(i);<br>&#125;<br>ArrayList&lt;Integer&gt; myNumbers=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;();<br>myNumbers.add(<span class="hljs-number">10</span>);<br>myNumbers.add(<span class="hljs-number">15</span>);<br>myNumbers.add(<span class="hljs-number">20</span>);<br>myNumbers.add(<span class="hljs-number">25</span>);<br>    System.out.println(myNumbers.size());<span class="hljs-comment">//得到数组中元素的数量</span><br>Collections.sort(sites);<span class="hljs-comment">//排序</span><br><span class="hljs-keyword">for</span>(String i:sites)<br>&#123;<br>System.out.println(i);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>一个ArrayList自己的排序方法</strong></p><p>sort方法中的参数是一个比较器，下面这个例子是按照字母顺序进行排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br>ArrayList&lt;String&gt; name=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>name.add(<span class="hljs-string">&quot;a&quot;</span>);<br>name.add(<span class="hljs-string">&quot;c&quot;</span>);<br>name.add(<span class="hljs-string">&quot;b&quot;</span>);<br>name.sort(Comparator.naturalOrder());<br>System.out.println(name);<br><br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>ArrayList转数组</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br><br><br>ArrayList&lt;String&gt; list=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>list.add(<span class="hljs-string">&quot;a&quot;</span>);<br>list.add(<span class="hljs-string">&quot;b&quot;</span>);<br>list.add(<span class="hljs-string">&quot;c&quot;</span>);<br>list.add(<span class="hljs-string">&quot;d&quot;</span>);<br>list.add(<span class="hljs-string">&quot;e&quot;</span>);<br>list.add(<span class="hljs-string">&quot;f&quot;</span>);<br>list.add(<span class="hljs-string">&quot;g&quot;</span>);<br>String[] array =<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[list.size()];<br>list.toArray(array);<br><span class="hljs-keyword">for</span>(String x:list) &#123;<br>System.out.println(x);<br>&#125;<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h3><p>List接口的实现类。</p><p>特点：跟ArrayList一样，都是可变长的对象数组。</p><p>与ArrayList区别</p><p>①Vector是线程安全的，是可以同步的，运行效率低；</p><p>②ArrayList不同步，适合于单线程环境中。</p><p>public Object elementAt(int index)</p><p>public void addElement(Object obj)</p><p>public void removeElementAt(int index)</p><p>public void insertElementAt(E obj, int index)</p><p>public boolean removeElement(Object obj)</p><p>public void removeAllElements()</p><h4 id="Stack-栈"><a href="#Stack-栈" class="headerlink" title="Stack(栈)"></a>Stack(栈)</h4><p>extends Vector</p><p>后进先出，就是一个底下有底的箱子，只能从上面拿所以是后进先出</p><p>常用方法</p><p>– <strong>public Object push(E item)</strong></p><p>– <strong>public Object pop()</strong></p><p>– <strong>public Object peek()</strong></p><p>– <strong>public</strong> <strong>boolean</strong> <strong>empty()</strong></p><p>– <strong>public int search(Object o)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br>Stack s=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>();<br>s.push(<span class="hljs-string">&quot;hello&quot;</span>);<br>s.push(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<span class="hljs-comment">//往箱子里面放东西</span><br>s.push(<span class="hljs-number">100</span>);<br>s.push(<span class="hljs-number">3.14</span>);<br>System.out.println(<span class="hljs-string">&quot;弹栈前size=&quot;</span>+s.size());<br>System.out.println(s.pop());<span class="hljs-comment">//弹出箱子中最顶上的元素</span><br>System.out.println(<span class="hljs-string">&quot;弹栈后size=&quot;</span>+s.size());<br>System.out.println(s.peek());<span class="hljs-comment">//获得箱子中最顶上的元素，但是不弹出</span><br>System.out.println(<span class="hljs-string">&quot;peek操作后&quot;</span>+s.size());<br><span class="hljs-keyword">while</span>(!s.isEmpty()) &#123;<span class="hljs-comment">//判断箱子中是否是空</span><br>System.out.println(s.pop());<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>把Stack当作普通List用</strong></p><p>失去了Stack所特有的性质</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>Stack&lt;String&gt; s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;String&gt;();<br><br>s.add(<span class="hljs-string">&quot;one&quot;</span>);<br><br>s.add(<span class="hljs-string">&quot;two&quot;</span>);<br><br>s.add(<span class="hljs-string">&quot;three&quot;</span>);<br><br>s.add(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;four&quot;</span>);<br><br>s.add(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;five&quot;</span>);<br><br>System.*out*.println(s);<br><br>s.remove(<span class="hljs-string">&quot;two&quot;</span>);<br><br>System.*out*.println(s);<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="Queue集合"><a href="#Queue集合" class="headerlink" title="Queue集合"></a>Queue集合</h2><p>队列：一种先进先出（FIFO）的容器，从容器的一端放入对象，从另一端取出对象，并且放入和取出的顺序相同</p><p>常用方法</p><p>–offer()：（入队）如果可能，将指定的元素插入此队列。</p><p>–peek()，element()：在不移除的情况下返回队头。peek方法在队列为空时返回null，element方法在队列为空时抛出异常。</p><p>–poll()，remove()：移除并返回队头（出队）。poll方法在队列为空时返回null，remove方法在队头为空时抛出异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">Queue queue=<span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>();<br>queue.offer(<span class="hljs-string">&quot;hello&quot;</span>);<br>queue.offer(<span class="hljs-string">&quot;world&quot;</span>);<br>queue.offer(<span class="hljs-string">&quot;你好&quot;</span>);<br>System.out.println(queue.size());<br>String str;<br>System.out.println(queue.peek());<span class="hljs-comment">//返回当前队头的元素</span><br><span class="hljs-keyword">while</span>((str=(String)queue.poll())!=<span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//移除并返回当前队头的元素</span><br>System.out.println(str);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="PriorityQueue实现类"><a href="#PriorityQueue实现类" class="headerlink" title="PriorityQueue实现类"></a>PriorityQueue实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Hello;<br><br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>&#123;<br>PriorityQueue pq=<span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>();<br>pq.offer(<span class="hljs-number">6</span>);<br>pq.offer(-<span class="hljs-number">3</span>);<br>pq.offer(<span class="hljs-number">20</span>);<br>pq.offer(<span class="hljs-number">18</span>);<br>System.out.println(pq);<br>System.out.println(pq.poll());<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Deque接口与ArrayDeque实现类"><a href="#Deque接口与ArrayDeque实现类" class="headerlink" title="Deque接口与ArrayDeque实现类"></a>Deque接口与ArrayDeque实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Hello;<br><br><span class="hljs-keyword">import</span> java.util.ArrayDeque;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>&#123;<br>ArrayDeque stack=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayDeque</span>();<br>stack.push(<span class="hljs-string">&quot;疯狂java讲义&quot;</span>);<br>stack.push(<span class="hljs-string">&quot;轻量级java ee企业应用实战&quot;</span>);<br>System.out.println(stack.peek());<br>System.out.println(stack.pop());<br>System.out.println(stack);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="LinkedList实现类"><a href="#LinkedList实现类" class="headerlink" title="LinkedList实现类"></a>LinkedList实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Hello;<br><br><span class="hljs-keyword">import</span> java.util.ArrayDeque;<br><span class="hljs-keyword">import</span> java.util.LinkedList;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>&#123;<br>LinkedList books=<span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>();<br>books.offer(<span class="hljs-string">&quot;疯狂java讲义&quot;</span>);<br>books.push(<span class="hljs-string">&quot;轻量级java ee企业级应用实战&quot;</span>);<br>books.offerFirst(<span class="hljs-string">&quot;疯狂andriod讲义&quot;</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;books.size();i++)<br>&#123;<br>System.out.println(<span class="hljs-string">&quot;遍历中&quot;</span>+books.get(i));<br><br>&#125;<br><br>System.out.println(books.peekFirst());<br>System.out.println(books.peekLast());<br>System.out.println(books.pop());<br>System.out.println(books);<br>System.out.println(books.pollLast());<br>System.out.println(books);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>对象唯一，不会重复，元素没有顺序</p><h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><p>元素值可以使null</p><p>HashSet判断两个元素相等的标准是两个对象通过equals方法比较相等，并且两个对象的hashCode方法返回值也相等（重写两个方法的时候最好两者统一）</p><p>先判断hashCode是否相等，如果hashCode相等再去判断equals方法是否为true</p><p>只有用到Hashtable HashMap HashSet LinkedHashMap等时才要注意hashcode方法。</p><h4 id="equals方法重写的方法"><a href="#equals方法重写的方法" class="headerlink" title="equals方法重写的方法"></a>equals方法重写的方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span> &#123;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == obj)<br><br> <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><br><span class="hljs-keyword">if</span> (obj == <span class="hljs-literal">null</span>)<span class="hljs-comment">//先看看参数是不是空</span><br><br> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br><span class="hljs-keyword">if</span> (getClass() != obj.getClass())<span class="hljs-comment">//再看看参数是否是同一个类，getClass()是指获取这个类创建实例的类型，也就是获取当前类这个类型</span><br><br> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<span class="hljs-comment">//getClass方法获得的不是引用变量的类型，而是真正的类型</span><br><br><span class="hljs-keyword">final</span> <span class="hljs-type">Student</span> <span class="hljs-variable">other</span> <span class="hljs-operator">=</span> (Student) obj;<br><br><span class="hljs-keyword">if</span> (no != other.no)<br><br> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br><br> <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;no is : &quot;</span> + no;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>重写equals方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span> &#123;<br><span class="hljs-keyword">if</span>(obj==<span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//先判断是否为空</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(obj <span class="hljs-keyword">instanceof</span> Company) &#123;<span class="hljs-comment">//判断能否向下转型</span><br>Company c=(Company)obj;<br><span class="hljs-keyword">return</span> c.name.equals(name);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h3><p>实现了对Set的排序</p><p><strong>自然排序</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br>TreeSet ts=<span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>();<br>ts.add(<span class="hljs-string">&quot;YaoMing&quot;</span>);<br>ts.add(<span class="hljs-string">&quot;Kobe&quot;</span>);<br>ts.add(<span class="hljs-string">&quot;McGrand&quot;</span>);<br>ts.add(<span class="hljs-string">&quot;Jordan&quot;</span>);<br>System.out.println(ts);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>结果：[Jordan, Kobe, McGrand, YaoMing]         按照字典排序</p><p><strong>定制排序</strong></p><p><a href="http://docs.oracle.com/javase/8/docs/api/java/util/TreeSet.html">TreeSet</a>(<a href="http://docs.oracle.com/javase/8/docs/api/java/util/Comparator.html">Comparator</a>&lt;? super <a href="http://docs.oracle.com/javase/8/docs/api/java/util/TreeSet.html">E</a>&gt; comparator)</p><p>可以自己写一个构造器当作参数</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918665.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220627195256296"></p><h3 id="LinkedSet"><a href="#LinkedSet" class="headerlink" title="LinkedSet"></a>LinkedSet</h3><p>就是按照插入的顺序排列元素</p><h1 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h1><h2 id="java中的Hash表"><a href="#java中的Hash表" class="headerlink" title="java中的Hash表"></a>java中的Hash表</h2><h3 id="Hash表介绍"><a href="#Hash表介绍" class="headerlink" title="Hash表介绍"></a>Hash表介绍</h3><p> 哈希表：能够通过元素快速查获找到元素的存储位置，又称为散列表。</p><p> 哈希表基本原理：通过哈希函数或散列函数将元素的关键字和元素的存储位置关联起来。由哈希函数计算出来的值称为哈希码(Hash Code)或散列索引。</p><p> 哈希表的存储空间称为哈希表的容量(Capacity)。</p><h3 id="hash表分为三类"><a href="#hash表分为三类" class="headerlink" title="hash表分为三类"></a>hash表分为三类</h3><p> java语言提供了java.util.Hashtable, java.util.HashMap, java.util.WeakHashMap三个类来提供哈希存储支持。这三者的元素都是主要由关键字和值两部分组成。</p><p> Hashtable元素的关键字和值都不允许null。HashMap和WeakHashMap的关键字和值都允许null。</p><p> Hashtable支持线程同步， HashMap和WeakHashMap不支持线程同步。</p><p> WeakHashMap会自动按一定规则检查各个元素是否常用，不常用的元素会被去除，从而被系统回收。（WeakHashMap是HashMap的子类）</p><h3 id="k-y相等判断方式"><a href="#k-y相等判断方式" class="headerlink" title="k-y相等判断方式"></a>k-y相等判断方式</h3><p>判断两个value相等，两个对象通过equals方法比较返回true即可，判断两个key相等，那equals放回true    hashcode值也相等</p><h3 id="Map元素遍历"><a href="#Map元素遍历" class="headerlink" title="Map元素遍历"></a>Map元素遍历</h3><p>Set keySet( )获取所有Key的集合</p><p>Collection values( ) 获取所有Value的集合</p><p>Set entrySet( ) 获取所有key-value对的集合</p><p>再用相应的Iterator或者for循环遍历</p><p>例一</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">HashMap&lt;String ,Integer&gt; a=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String,Integer&gt;();<br>a.put(<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-number">1</span>);<br>a.put(<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-number">2</span>);<br>Set b=a.keySet();<br>Iterator&lt;String&gt; i=b.iterator();<br><span class="hljs-keyword">while</span>(i.hasNext()) &#123;<br>String key=i.next();<br>Integer value=a.get(key);<br>System.out.println(key+<span class="hljs-string">&quot;-&quot;</span>+value+<span class="hljs-string">&quot; &quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> []args</span>) &#123;<br><br><span class="hljs-title class_">HashMap</span> &lt;<span class="hljs-title class_">String</span>,<span class="hljs-title class_">Integer</span>&gt;a=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;<span class="hljs-title class_">String</span>,<span class="hljs-title class_">Integer</span>&gt;();<br>a.<span class="hljs-title function_">put</span>(<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-number">1</span>);<br>a.<span class="hljs-title function_">put</span>(<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-number">2</span>);<br>a.<span class="hljs-title function_">put</span>(<span class="hljs-string">&quot;c&quot;</span>,<span class="hljs-number">3</span>);<br><span class="hljs-title class_">Collection</span> b=a.<span class="hljs-title function_">values</span>();<br><span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(b);<br>结果：[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><br>&#125;<br></code></pre></td></tr></table></figure><p>例二</p><p>entrySet方法介绍</p><p> Map的entrySet()方法返回一个实现Map.Entry接口的对象集合。集合中每个对象都是底层Map中一个特定的键&#x2F;值对。通过这个集合的迭代器，获得每一个条目(唯一获取方式)的键或值并对值进行更改。Map.Entry中的常用方法如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">(<span class="hljs-number">1</span>) Object <span class="hljs-title function_">getKey</span><span class="hljs-params">()</span>: 返回条目的关键字<br>　　(<span class="hljs-number">2</span>) Object <span class="hljs-title function_">getValue</span><span class="hljs-params">()</span>: 返回条目的值<br>　　(<span class="hljs-number">3</span>) Object <span class="hljs-title function_">setValue</span><span class="hljs-params">(Object value)</span>: 将相关映像中的值改为value，并且返回旧值<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[]args)</span> &#123;<br>HashMap&lt;String ,Integer&gt; a=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String,Integer&gt;();<br>a.put(<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-number">1</span>);<br>a.put(<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-number">2</span>);<br>Set b=a.entrySet();<br><span class="hljs-keyword">for</span>(Object o:b) &#123;<br>Map.Entry e=(Map.Entry)o;<br>System.out.println(e.getKey()+<span class="hljs-string">&quot;-&quot;</span>+e.getValue()+<span class="hljs-string">&quot; &quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="按照key或者value对map排序的方法"><a href="#按照key或者value对map排序的方法" class="headerlink" title="按照key或者value对map排序的方法"></a>按照key或者value对map排序的方法</h3><p>Map会根据key的大小来自动排序</p><p>因为LinekedHashMap是按照顺序添加的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">compare1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparator</span>&lt;Map.Entry&gt;&#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Map.Entry o1,Map.Entry o2)</span> &#123;<br><span class="hljs-keyword">return</span> (<span class="hljs-type">int</span>)(o2.getValue())-(<span class="hljs-type">int</span>)(o1.getValue());<span class="hljs-comment">//注意这个地方的()缺一不可</span><br>&#125;<br><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span>&#123;<br>    Scanner in=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        String a=in.nextLine();<br>        String b[]=a.split(<span class="hljs-string">&quot; &quot;</span>);<br>        Hashtable&lt;String,Integer&gt; c=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hashtable</span>&lt;String,Integer&gt;();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;b.length;i++) &#123;<br>        <span class="hljs-keyword">if</span>(c.containsKey(b[i])) &#123;<br>        c.put(b[i],c.get(b[i])+<span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>        c.put(b[i],<span class="hljs-number">1</span>);<br>        &#125;<br>        &#125;<br>        <br><br>        List list=<span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>(c.entrySet());<br>        compare1 q=<span class="hljs-keyword">new</span> <span class="hljs-title class_">compare1</span>();<br>        Collections.sort(list,q);<br>        Map sortedMap=<span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashMap</span>();<span class="hljs-comment">//这个地方必须使用LinkedHashMap</span><br>        <span class="hljs-keyword">for</span>(Iterator it=list.iterator();it.hasNext();) &#123;<br>        Map.Entry entry=(Map.Entry)it.next();<span class="hljs-comment">//这里的迭代器如果加泛型&lt;Iterator&gt;,就不用强制转换了</span><br>         sortedMap.put(entry.getKey(), entry.getValue());<br><br>&#125;<br>        Set h=sortedMap.keySet();<br>        Iterator&lt;String&gt; r=h.iterator();<br>        <span class="hljs-keyword">while</span>(r.hasNext()) &#123;<br>        String i=r.next();<br>        System.out.println(i+<span class="hljs-string">&quot;:&quot;</span>+ sortedMap.get(i));<br>        &#125;<br>        <br><br>    &#125;<br><br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>用函数法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">import</span> java.util.Map.Entry;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Compare</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparator</span>&lt;Map.Entry&gt;&#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Map.Entry o1,Map.Entry o2)</span> &#123;<br><span class="hljs-keyword">return</span> (<span class="hljs-type">int</span>)(o2.getValue())-(<span class="hljs-type">int</span>)(o1.getValue());<br>&#125;<br><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Map <span class="hljs-title function_">getMap</span><span class="hljs-params">(Map unsortedMap)</span> &#123;<br>List a=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>(unsortedMap.entrySet());<br>Compare b=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Compare</span>();<br> Collections.sort(a,b);<br>Map sortedMap=<span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashMap</span>();<span class="hljs-comment">//这里必须是LinkedHashMap</span><br>         <span class="hljs-keyword">for</span>(Iterator it=a.iterator();it.hasNext();) &#123;<br>         Map.Entry entry=(Map.Entry)it.next();<br>         sortedMap.put(entry.getKey(), entry.getValue());<br>         &#125;<br><br><span class="hljs-keyword">return</span> sortedMap;<br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br>Scanner in=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>    String a=in.nextLine();<br>    String b[]=a.split(<span class="hljs-string">&quot; &quot;</span>);<br>    Hashtable&lt;String,Integer&gt; c=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hashtable</span>&lt;String,Integer&gt;();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;b.length;i++) &#123;<br>    <span class="hljs-keyword">if</span>(c.containsKey(b[i])) &#123;<br>    c.put(b[i],c.get(b[i])+<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>    c.put(b[i],<span class="hljs-number">1</span>);<br>    &#125;<br>    &#125;<br>    Map n=getMap(c);<br>    Set i=n.keySet();<br>    Iterator&lt;String&gt; e=i.iterator();<br>    <span class="hljs-keyword">while</span>(e.hasNext()) &#123;<br>    String t=e.next();<br>    System.out.println(t+<span class="hljs-string">&quot;:&quot;</span>+n.get(t));<br>    <br>    &#125;<br>&#125;<br><br>&#125;<br>就是java是向下兼容的，如果函数返回类型是Map其实是返回的只要是Map的子类的实例化对象都可以<br>    如果函数的参数类型是Map类型，其实这个参数只要是Map子类的实例化对象都可以<br><br>        <br></code></pre></td></tr></table></figure><p>​    </p><h2 id="Hashtable集合"><a href="#Hashtable集合" class="headerlink" title="Hashtable集合"></a>Hashtable集合</h2><p>不能保证顺序</p><p><strong>Hashtable的构造方法</strong></p><table><thead><tr><th><strong>名称</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><strong>public</strong> <strong>Hashtable</strong><strong>( )</strong></td><td><strong>创建哈希表实例对象，容量为<strong><strong>11</strong></strong>，装填因子为<strong><strong>0.75</strong></strong>。</strong></td></tr><tr><td><strong>public</strong> <strong>Hashtable</strong><strong>( int</strong> <strong>initialCapacity</strong><strong>)</strong></td><td><strong>创建哈希表实例对象，容量为<strong><strong>initialCapacity</strong></strong>，装填因子为<strong><strong>0.75</strong></strong>。</strong></td></tr><tr><td><strong>public Hashtable( int  initialCapacity, float loadFactor)</strong></td><td><strong>创建哈希表实例对象，容量为<strong><strong>initialCapacity</strong></strong>，装填因子为<strong><strong>loadFactor</strong></strong>。</strong></td></tr></tbody></table><p>Hashtable ht1&#x3D;new Hashtable&lt;String, Integer&gt; ( );</p><p>Hashtable ht2&#x3D;new Hashtable( );&#x2F;&#x2F;未指定关键字和键值类型，编译会警告</p><p><strong>java.util.Hashtable的成员方法</strong></p><table><thead><tr><th><strong>名称</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><strong>public V put(K key, V value )</strong></td><td><strong>添加关键字为****key,</strong> <strong>值为<strong><strong>value</strong></strong>的元素</strong></td></tr><tr><td><strong>public V get(Object key)</strong></td><td><strong>获得由参数<strong><strong>key</strong></strong>指定的关键字所对应的元素值</strong></td></tr><tr><td><strong>public void Clear( )</strong></td><td><strong>清空整个<strong><strong>Hash</strong></strong>表</strong></td></tr><tr><td><strong>public</strong> <strong>boolean</strong> <strong>containsKey</strong><strong>(Object key)</strong></td><td><strong>判断表中是否存在关键字****key</strong></td></tr><tr><td><strong>public</strong> <strong>boolean</strong> <strong>containsValue</strong><strong>(Object value)</strong></td><td><strong>判断表中是否存在元素值****value</strong></td></tr><tr><td><strong>public boolean</strong> <strong>contains</strong><strong>(Object value)</strong></td><td><strong>判断表中是否存在元素值****value</strong></td></tr><tr><td><strong>public boolean isEmpty( )</strong></td><td><strong>判断<strong><strong>Hash</strong></strong>表是否为空</strong></td></tr><tr><td><strong>public V remove(Object key)</strong></td><td><strong>删除指定关键字<strong><strong>key</strong></strong>所对应的元素</strong></td></tr><tr><td><strong>public int size( )</strong></td><td><strong>返回<strong><strong>Hash</strong></strong>表元素的个数</strong></td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">例子<br>String []sa= &#123;<span class="hljs-string">&quot;Mary&quot;</span>,<span class="hljs-string">&quot;Tom&quot;</span>,<span class="hljs-string">&quot;John&quot;</span>,<span class="hljs-string">&quot;James&quot;</span>,<span class="hljs-string">&quot;Louis&quot;</span>,<span class="hljs-string">&quot;Jim&quot;</span>,<span class="hljs-string">&quot;Rose&quot;</span>,<span class="hljs-string">&quot;Ann&quot;</span>,<span class="hljs-string">&quot;Liza&quot;</span>,<span class="hljs-string">&quot;Betty&quot;</span>,<span class="hljs-string">&quot;Henry&quot;</span>&#125;;<br>Hashtable &lt;String ,Integer&gt; ht=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hashtable</span>&lt;String ,Integer&gt;();<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;sa.length;i++)<br>&#123;<br>ht.put(sa[i],<span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(i) );<span class="hljs-comment">//将这个key和value放入hash表中</span><br><br>&#125;<br>String s=sa[<span class="hljs-number">5</span>];<br>System.out.println(ht.get(s));<span class="hljs-comment">//获得key为参数所对应的value值</span><br>System.out.println(ht.containsKey(sa[<span class="hljs-number">5</span>]));<br>System.out.println(ht.containsValue(<span class="hljs-number">1</span>));<br>System.out.println(ht.contains(<span class="hljs-number">1</span>));<br>System.out.println(ht.isEmpty());<br>System.out.println(ht.size());<br>ht.remove(sa[<span class="hljs-number">5</span>]);<br>System.out.println(ht.size());<br></code></pre></td></tr></table></figure><p><strong>还有一个方法</strong>就是keySet() ，可以得到集合的key的一个集合**<br>        Set s &#x3D; ht.keySet();**</p><h3 id="Properties集合"><a href="#Properties集合" class="headerlink" title="Properties集合"></a>Properties集合</h3><p><strong>Properties是用来读取配置文件的（结尾为.properties的文件）</strong></p><ul><li><p><code>Properties</code>类表示一组持久的属性。  <code>Properties</code>可以保存到流中或从流中加载。 </p></li><li><p>extends Hashtable&lt;k,v&gt;   implements Map&lt;k,v&gt;</p></li><li><p>Properties集合是一个唯一和IO相结合的集合</p><p>第一条的解释</p></li><li><p>可以使用Properties集合中的方法store，把集合中的临时数据，持久化写入到硬盘中存储</p></li><li><p>可以使用Properties集合中的load，把硬盘保存的文件（键值对），读取到集合中使用</p></li><li><p>属性列表中的每个键及其对应的值都是一个字符串。</p></li><li><p>解释：</p></li><li><p>​           Properties集合是一个双列集合，key和value默认都是字符串</p></li></ul><p>Properties集合存储数据，遍历取出Properties集合中的数据</p><p>Properties结合是一个双列集合，key和value默认都是字符串</p><p>Properties集合有一些操作字符串的特有方法 </p><p>​             Object setProperty(String key,String value)其实就是调用Hashtable的方法put</p><p>​             String  getProperty(String key) 通过key找到value值，相当于Map集合中的get方法</p><p>​              Set<String> stringPropertyNames()   返回此属性列表中的一组键，其中键及其对应的值为字符串，包括默认属性列表中的不同键，如果尚未从主属性列表中找到相同名称的键。相当于Map集合中的keySet方法</p><p><strong>几个方法的基本使用</strong></p><pre><code class="hljs">//创建Properties集合对象Properties prop=new Properties();prop.setProperty(&quot;a&quot;, &quot;1&quot;);prop.setProperty(&quot;b&quot;,&quot;2&quot;);prop.setProperty(&quot;c&quot;,&quot;3&quot;);//使用stringPropertyNames把Properties集合中的键取出，存储到一个Set集合中Set&lt;String&gt; set=prop.stringPropertyNames();for(String key:set) &#123;    String value=prop.getProperty(key);    System.out.println(key+&quot;-&quot;+value);</code></pre><p><strong>Properties集合中的store方法</strong></p><p>void store(OutputStream out,String comments)</p><p>void store(Writer writer,String comments)</p><p>参数： </p><p>​              OutputStream out：字节输出流，不能写入中文</p><p>​              Writer writer  ：字符输出流，可以写中文</p><p>​              String comments：注释，解释说明保存的文件是做什么用的</p><p>​                                 不能使用中文，会产生乱码，默认是Unicode编码，而系统默认编码是GBK</p><p>使用步骤：</p><p>​              1.创建Properties集合对象，添加数据</p><p>​              2.创建字节输出流&#x2F;字符输出流对象，构造方法中绑定要输出的目的地</p><p>​                3.使用Properties集合中的方法store，把集合中的临时数据，持久化写入到硬盘中存储</p><p>​               4.释放资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>show01();<br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show01</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>   <span class="hljs-comment">//1.创建Properties集合对象，添加数据</span><br>Properties prop=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>prop.setProperty(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>);<br>prop.setProperty(<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>);<br>prop.setProperty(<span class="hljs-string">&quot;c&quot;</span>,<span class="hljs-string">&quot;3&quot;</span>);<br><span class="hljs-comment">//.创建字节输出流/字符输出流对象，构造方法中绑定要输出的目的地</span><br>FileWriter fw=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\File.txt&quot;</span>);<br><span class="hljs-comment">// 3.使用Properties集合中的方法store，把集合中的临时数据，持久化写入到硬盘中存储</span><br>prop.store(fw,<span class="hljs-string">&quot;sava data&quot;</span>);<br><span class="hljs-comment">//关闭资源</span><br>fw.close();<br>&#125;<br>文件写入结果：<br>  #sava data<br>#Fri Jul <span class="hljs-number">01</span> <span class="hljs-number">10</span>:<span class="hljs-number">34</span>:<span class="hljs-number">48</span> CST <span class="hljs-number">2022</span><br>a=<span class="hljs-number">1</span><br>b=<span class="hljs-number">2</span><br>c=<span class="hljs-number">3</span><br>上面的时间是自己加的<br></code></pre></td></tr></table></figure><p><strong>Properties集合的load方法</strong></p><p>可以使用Properties集合中的方法load，把硬盘中保存的文件（键值对），读取到集合中使用</p><p>void load(InputStream inStream)</p><p>void load(Reader reader)</p><p>参数：</p><p>​               InputStream inStream：不能读取含有中文的键值对</p><p>​               Reader reader：字符输入流，能读取含有中文的键值对</p><p>使用步骤：</p><p>​                 1.创建Properties集合对象</p><p>​                  2.使用Properites集合对象中的方法load读取到保存键值对的文件</p><p>​                   3.遍历Properties集合</p><p>注意：1.存储键值对的文件中，键与值默认的连接符号可以使用-，空格（其他符号）</p><p>​             2.存储键值对的文件中，可以使用井号进行注释，被注释的键值对不会再被读取</p><p>​              3.存键值对的文件中，键与值都默认是字符串，都不用再加引号</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> <span class="hljs-type">void</span> test2() throws <span class="hljs-keyword">Exception</span> &#123;<br>    Properties pros=<span class="hljs-built_in">new</span> Properties();<br>    FileInputStream fis=<span class="hljs-built_in">new</span> FileInputStream(&quot;./jdbc.properties&quot;);<br>    pros.<span class="hljs-keyword">load</span>(fis);<br>    String <span class="hljs-keyword">user</span>=pros.getProperty(&quot;user&quot;);<br>    String <span class="hljs-keyword">password</span>=pros.getProperty(&quot;password&quot;);<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;user=&quot;+<span class="hljs-keyword">user</span>+&quot;password=&quot;+<span class="hljs-keyword">password</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="HashMap集合"><a href="#HashMap集合" class="headerlink" title="HashMap集合"></a>HashMap集合</h2><p>不能保证顺序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Hello;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>&#123;<br>Map map=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>map.put(<span class="hljs-string">&quot;疯狂Java&quot;</span>,<span class="hljs-number">109</span>);<br>map.put(<span class="hljs-string">&quot;疯狂python&quot;</span>,<span class="hljs-number">10</span>);<br>map.put(<span class="hljs-string">&quot;疯狂ios&quot;</span>,<span class="hljs-number">79</span>);<br>map.put(<span class="hljs-string">&quot;疯狂php&quot;</span>,<span class="hljs-number">99</span>);<br>System.out.println(map.put(<span class="hljs-string">&quot;疯狂python&quot;</span>,<span class="hljs-number">99</span>));<br>System.out.println(map);<br>System.out.println(map.containsKey(<span class="hljs-string">&quot;疯狂python&quot;</span>));<br>System.out.println(map.containsValue(<span class="hljs-number">99</span>));<br><span class="hljs-keyword">for</span>(Object key:map.keySet())<br>&#123;<br>System.out.println(key+<span class="hljs-string">&quot;--&gt;&quot;</span>+map.get(key));<br><br>&#125;<br>map.remove(<span class="hljs-string">&quot;疯狂python&quot;</span>);<br>System.out.println(map);<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="LinkedHashMap实现类"><a href="#LinkedHashMap实现类" class="headerlink" title="LinkedHashMap实现类"></a>LinkedHashMap实现类</h3><p>是一种按照map的添加顺序存储的实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Hello;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.LinkedHashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>&#123;<br>LinkedHashMap scores=<span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashMap</span>();<br>scores.put(<span class="hljs-string">&quot;语文&quot;</span>,<span class="hljs-number">80</span>);<br>scores.put(<span class="hljs-string">&quot;英语&quot;</span>,<span class="hljs-number">82</span>);<br>scores.put(<span class="hljs-string">&quot;数学&quot;</span>,<span class="hljs-number">76</span>);<br>scores.forEach((key,value)-&gt;System.out.println(key+<span class="hljs-string">&quot;--&gt;&quot;</span>+value));<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="实用类"><a href="#实用类" class="headerlink" title="实用类"></a>实用类</h1><h2 id="Collections类"><a href="#Collections类" class="headerlink" title="Collections类"></a>Collections类</h2><p>提供了List容器操作的静态方法</p><p>void sort(List list);&#x2F;&#x2F;对List容器内元素排序，默认升序</p><p>void reverse(List list);&#x2F;&#x2F;对List容器内的对象进行逆序排列</p><p>void copy(List dest,List src);</p><p>&#x2F;&#x2F;把src中List容器内容拷贝到dest List容器</p><p>int binarySearch(List list, Object key);</p><p>&#x2F;&#x2F;对顺序的List容器，用折半查找方法查找指定对象，返回对应key元素的下标</p><p>void shuffle(List);&#x2F;&#x2F;对List容器内的对象进行随机排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[]args)</span> &#123;<br>List list1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>();<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">9</span>;i++) &#123;<br>list1.add(<span class="hljs-string">&quot;a&quot;</span>+i);<br>&#125;<br>System.out.println(list1);<br>Collections.reverse(list1);<br>System.out.println(list1);<br>Collections.shuffle(list1);<br>System.out.println(list1);<br>Collections.sort(list1);<br>System.out.println(Collections.binarySearch(list1,<span class="hljs-string">&quot;a2&quot;</span>));<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Collections-sort-方法"><a href="#Collections-sort-方法" class="headerlink" title="Collections.sort()方法"></a>Collections.sort()方法</h3><p>public static <T> void sort(List<T> list, Comparator&lt;? super T&gt; c)</p><p>List(接口)就是指List类型,那么也就是说只能对集合的具体类的Arraylist和LinkedList这两种类型进行排序,由于接口也能向上转型,光论排序的内容的话其它各种自建类型都行。</p><p>第一种方法</p><p>在日常开发中，很多时候都需要对一些数据进行排序的操作。然而那些数据一般都是放在一个集合中如：Map ，Set ，List 等集合中。他们都提共了一个排序方法 sort()，要对数据排序直接使用这个方法就行，但是要保证集合中的对象是 可比较的。</p><p>怎么让一个对象是 可比较的，那就需要该对象实现 Comparable<T> 接口啦。然后重写里面的<br>compareTo()方法</p><ul><li>&#96;&#96;&#96;<br>public interface Comparable<T><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><br>当实现Comparable类的时候也是不规定泛型就是Object，且下面的compareTo方法中的参数类型要和他一样<br><br><br><br>```java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> implements Comparable&lt;Student&gt; &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> name;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">(<span class="hljs-type">int</span> id, <span class="hljs-type">int</span> age, <span class="hljs-type">String</span> name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>        <span class="hljs-keyword">this</span>.age = age;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br>    @<span class="hljs-function">Override</span><br><span class="hljs-function">    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title">compareTo</span><span class="hljs-params">(Student o)</span> </span>&#123;<br>        <span class="hljs-comment">//降序</span><br>        <span class="hljs-comment">//return o.age - this.age;</span><br>        <span class="hljs-comment">//升序</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.age - o.age;        <br>    &#125;<br>    @<span class="hljs-function">Override</span><br><span class="hljs-function">    <span class="hljs-keyword">public</span> <span class="hljs-type">String</span> <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>调用compareTo方法后负数时，当前对象在前面，正数时当前对象在后面，0时位置不变</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Student o1)</span> &#123;<br><span class="hljs-keyword">if</span>(o1.getScore()==<span class="hljs-built_in">this</span>.getScore()) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.id.compareTo(o1.id);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> o1.getScore()-<span class="hljs-built_in">this</span>.getScore();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>先按照成绩降序排序，成绩相同按照学号升序排序</p><p>第二种方法</p><ul><li>&#96;&#96;&#96;<br>public interface Comparator<T><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><br>实现Comparator接口的时候，如果没有规定泛型默认是Object，同时T必须和下面compare方法中的参数类型一样<br><br>自己搞一个构造器，重写compare方法当作Collections.sort(第二个参数)<br><br>```java<br><span class="hljs-keyword">class</span> <span class="hljs-symbol">compare</span> <span class="hljs-symbol">implements</span> <span class="hljs-symbol">Comparator</span>&lt;<span class="hljs-symbol">Integer</span>&gt;&#123;<br><br>@Override<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> compare(Integer o1, Integer o2) &#123;<br>                   <span class="hljs-keyword">return</span> o1-o2;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>第三种直接倒叙的方法</p><p>Collection.sort的第二个参数</p><p>如果要降序呢?可以传入Collections.reverseOrder(), 返回一个倒叙的Comparator对象,</p><h2 id="Arrays类"><a href="#Arrays类" class="headerlink" title="Arrays类"></a>Arrays类</h2><p>定义了多种数组操作的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">Integer[]a= &#123;<span class="hljs-number">3</span>,<span class="hljs-number">25</span>,<span class="hljs-number">12</span>,<span class="hljs-number">79</span>,<span class="hljs-number">48</span>&#125;;<br>System.out.println(Arrays.toString(a));<span class="hljs-comment">//输出数组</span><br>Arrays.sort(a);<span class="hljs-comment">//对数组中元素进行排序</span><br>System.out.println(Arrays.toString(a));<span class="hljs-comment">//输出数组以[3,25,12,79,48]</span><br><span class="hljs-type">int</span> idx=Arrays.binarySearch(a,<span class="hljs-number">25</span>);<span class="hljs-comment">//返回25元素所对应的下标</span><br>System.out.println(idx);<br>List list=Arrays.asList(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>);<span class="hljs-comment">//将其转换为List集合</span><br>返回值是一个List<br><span class="hljs-comment">//public static &lt;T&gt; List&lt;T&gt; asList(T... a) </span><br>System.out.println(list);<br></code></pre></td></tr></table></figure><p>其实Arrays.toString的本质是调用数组中所有对象的toString方法然后用逗号隔开然后用[   ]框起来</p><h1 id="java异常机制的处理"><a href="#java异常机制的处理" class="headerlink" title="java异常机制的处理"></a>java异常机制的处理</h1><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><p>：指程序中出现的不期而至的各种状况，如文件找不到，网络连接失败，非法参数等等；</p><p>java把异常当作对象来处理，并定义一个基类java.lang.Throwable作为所有异常的超类</p><p>在javaAPI中已经定一个许多异常类，这些异常分为两类，错误Error和异常Exception</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918060.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220615163131796"></p><p>这个图中只是举了例子   </p><ol><li><strong>错误：</strong><br>一般指程序运行时遇到的硬件或操作系统的错误，如内存溢出、不能读取硬盘分区、 硬 件驱动错误等。这是致命的，将导致程序无法运行，<strong>同时也是程序本身不能处理 的。错误大都是jvm的问题</strong></li></ol><p><strong>2.异常：</strong></p><p><strong>异常大都是语法问题；</strong></p><p>运行异常和编译异常。</p><p>运行异常：顾名思义，是程序运行时才会出现的异常。运行异常是java.lang.RuntimeException类及其子类的统称。如NullPointerException（空指针异常）、IndexOutOfBoundsException（数组下标越界异常）等。运行异常一般是由程序逻辑错误导致的，可以通过捕获处理或向上抛出。运行异常的特点是Java编译器不会检查它，也就是说，当程序中可能出现运行异常，也会被编译通过。<br><strong>编译异常：顾名思义，是程序编译时就会出现的异常。编译异常是java.lang.RuntimeException以外的异常。编译异常必须进行处理，如果不处理，程序就不能编译通过。</strong></p><p><strong>异常可以分为两类：1.运行时异常 RuntimeException</strong></p><p><strong>2.其他的异常都属于非运行时异常</strong></p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918813.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220615163444672"></p><h3 id="异常处理机制"><a href="#异常处理机制" class="headerlink" title="异常处理机制"></a>异常处理机制</h3><p>例1</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs abnf">int a<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-comment">;</span><br>   int b<span class="hljs-operator">=</span><span class="hljs-number">0</span><span class="hljs-comment">;</span><br>   try &#123;//try监控区域<br>   System.out.println(a/b)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">&#125;catch(ArithmeticException e)//这个地方的错误必须是和try中出现的错误类型相同，否则没什么用&#123;//catch 捕获异常    System.out.println(&quot;程序出现异常，变量b不能为0&quot;);&#125;finally &#123;//处理善后工作，无论是否报错这个finally都是会执行的，无论怎样都会执行，报其他错也会执行    System.out.println(&quot;finally&quot;);    //finally可以不要finally，假设IO时读取文件关闭资源关闭时可以用&#125;</code></pre><p>例2</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">String</span> args[])</span></span>&#123;<br>   <span class="hljs-type">int</span> a=<span class="hljs-number">1</span>;<br>   <span class="hljs-type">int</span> b=<span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">try</span> &#123;<span class="hljs-comment">//try监控区域</span><br>   <span class="hljs-keyword">new</span> <span class="hljs-built_in">Main</span>().<span class="hljs-built_in">a</span>();<span class="hljs-comment">//这是一个栈溢出的异常</span><br>   <br></code></pre></td></tr></table></figure><pre><code class="hljs">&#125;catch(Error e)//这个地方如果时Error和Throwable都可以，就是根据上面那个表格，cathch括号里错误类型的子类也可以被捕获&#123;//catch 捕获异常    System.out.println(&quot;程序出现异常，变量b不能为0&quot;);&#125;finally &#123;//处理善后工作，无论是否报错这个finally都是会执行的，无论怎样都会执行，报其他错也会执行    System.out.println(&quot;finally&quot;);    //finally可以不要finally，假设IO时读取文件关闭资源关闭时可以用&#125;&#125;public void a() &#123;    b();&#125;public void b() &#123;    a();    &#125;</code></pre><p>例3</p><p>有多个catch的异常处理机制，只能执行一个catch，所以越往下catch括号里的错误类型越高层，从小到大去捕获</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">try</span> &#123;<span class="hljs-comment">//try监控区域</span><br>   <span class="hljs-keyword">new</span> <span class="hljs-type">Main</span>().a();<span class="hljs-comment">//这是一个栈溢出的异常</span><br>   <br></code></pre></td></tr></table></figure><pre><code class="hljs">&#125;catch(Error e)//这个地方的错误必须是和try中出现的错误类型相同，否则没什么用&#123;//catch 捕获异常    System.out.println(&quot;程序出现异常，变量b不能为0&quot;);&#125;catch(Exception e)&#123;    System.out.println(&quot;exception&quot;);&#125;catch(Throwable e)&#123;    System.out.println(&quot;throwable&quot;);&#125;finally &#123;//处理善后工作，无论是否报错这个finally都是会执行的，无论怎样都会执行，报其他错也会执行    System.out.println(&quot;finally&quot;);    //finally可以不要finally，假设IO时读取文件关闭资源关闭时可以用&#125;</code></pre><p>例四</p><p>throw和throws的用法，是用来主动抛出异常</p><pre><code class="hljs">public void test(int a,int b) throws ArithmeticException&#123;//有throws就是在调用这个方法的时候要对这个异常进行捕获，也就是下面使用这个trycatch    /*if(b==0)    &#123;        throw new ArithmeticException();//主动的抛出异常，一般在方法中使用    &#125;*/&#125;public static void main(String[] args) &#123;    try &#123;    new Hello().test(1,0);    &#125;    catch(ArithmeticException e)&#123;        e.printStackTrace();    &#125;&#125;</code></pre><p>不用throws的话就是要在throw那个地方去进行一个异常捕获</p><h3 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h3><p>exception类能被继承的常用方法：</p><p>public void printStackTrace()</p><p>public String toString()</p><p>public String getMessage()</p><p>除内置的异常类可以描述大部分异常情况，除此之外，用户还可以自定义异常，用户自定义异常类，只需继承Exception类即可；</p><p>1.创建自定义异常类</p><p>2.在方法中通过throw关键字抛出异常对象</p><p>3.如果在当前抛出异常的方法中处理异常，可以使用try-catch语句捕获并处理；否则在方法的声明处通过throws关键字指明要抛出给方法调用者的异常，继续进行下一步操作</p><p>4.再出现异常方法的调用者捕获并处理异常</p><p>例子</p><p>自定义的异常类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Main;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Exception</span><br>&#123;<br><span class="hljs-comment">//传递数字大于10</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> detail;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">MyException</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> &#123;<br><span class="hljs-built_in">this</span>.detail=a;<br>&#125;<br><br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;MyException&#123;&quot;</span>+detail+<span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> <span class="hljs-keyword">throws</span> MyException&#123;<br>System.out.println(<span class="hljs-string">&quot;传递的参数为: &quot;</span>+a);<br><span class="hljs-keyword">if</span>(a&gt;<span class="hljs-number">10</span>)<br>&#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyException</span>(a)<span class="hljs-comment">//抛出</span><br>&#125;<br>System.out.println(<span class="hljs-string">&quot;ok&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>&#123;<br><span class="hljs-keyword">try</span> &#123;<br>test(<span class="hljs-number">11</span>);<br>&#125;<br><span class="hljs-keyword">catch</span>(MyException e)&#123;<br>System.out.println(<span class="hljs-string">&quot;MyException=&gt;&quot;</span>+e);<span class="hljs-comment">//这是调用e类中的toString方法</span><br>&#125;<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs scala"><br>### 自定义异常的常用格式<br><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Exception</span></span>&#123;<br><br>public <span class="hljs-type">MyException</span>()&#123;&#125;<br><br>public <span class="hljs-type">MyException</span>(<span class="hljs-type">String</span> msg)&#123;<br><br><span class="hljs-keyword">super</span>(msg);<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>ATM</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package Main;<br>import java.util.Scanner;<br><span class="hljs-keyword">class</span> <span class="hljs-title">NoMoney</span> <span class="hljs-title">extends</span> <span class="hljs-title">Exception</span> &#123;<br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">NoMoney</span>()</span> &#123;<br>            <br><br>            &#125;<br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">NoMoney</span>(<span class="hljs-params">String msg</span>)</span> &#123;<br>            super(msg);<span class="hljs-comment">//构造方法传报错信息</span><br>            &#125;<br>           <span class="hljs-comment">/* public String toString () &#123;</span><br><span class="hljs-comment">            return &quot;您的余额不足，您当前余额为&quot;+Main.money;</span><br><span class="hljs-comment">            &#125;*/</span><br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">double</span> money=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deposit</span>(<span class="hljs-params"><span class="hljs-built_in">double</span> a</span>)</span> &#123;<br><span class="hljs-keyword">this</span>.money+=a;<br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;您的当前余额为&quot;</span>+<span class="hljs-keyword">this</span>.money);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">query</span>()</span> &#123;<br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;您的当前余额为&quot;</span>+<span class="hljs-keyword">this</span>.money);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">withdraw</span>(<span class="hljs-params"><span class="hljs-built_in">double</span> a</span>) throws NoMoney</span> &#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.money&lt;a) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NoMoney(<span class="hljs-string">&quot;余额不足&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String []args</span>)</span> &#123;<br><span class="hljs-built_in">int</span> index=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br><span class="hljs-keyword">if</span>(index==<span class="hljs-number">0</span>) &#123;System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;您可以输入 查询余额,取款,存款,退出&quot;</span>);&#125;<br>index++;<br>Scanner <span class="hljs-keyword">in</span>=<span class="hljs-keyword">new</span> Scanner(System.<span class="hljs-keyword">in</span>);<br>String str=<span class="hljs-keyword">in</span>.nextLine();<br>String str1=<span class="hljs-string">&quot;查询余额&quot;</span>;<br>String str2=<span class="hljs-string">&quot;取款&quot;</span>;<br>String str3=<span class="hljs-string">&quot;存款&quot;</span>;<br>String str4=<span class="hljs-string">&quot;退出&quot;</span>;<br>Main discount =<span class="hljs-keyword">new</span> Main();<br><span class="hljs-keyword">if</span>(str.<span class="hljs-keyword">equals</span>(str1))&#123;<br>discount.query();<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(str.<span class="hljs-keyword">equals</span>(str2))&#123;<br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;您要取出的金额是&quot;</span>);<br><span class="hljs-built_in">double</span> count =<span class="hljs-keyword">in</span>.nextDouble();<br><span class="hljs-keyword">try</span> &#123;<br>discount.withdraw(count);<br>Main.money=Main.money-count;<br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;您当前的余额是&quot;</span>+Main.money);<br>&#125;<br><span class="hljs-keyword">catch</span>(NoMoney e)&#123;<br><span class="hljs-comment">//System.out.println(&quot;您当前的余额不足,您当前的余额是&quot;+Main.money);</span><br><span class="hljs-comment">/*System.out.println(e.toString());</span><br><span class="hljs-comment">continue;*/</span><br>                 e.printStackTrace();<span class="hljs-comment">//打印报错信息和堆栈信息</span><br>                 System.<span class="hljs-keyword">out</span>.println(e.getMessage());<span class="hljs-comment">//打印获得的报错信息</span><br>                                                               <br><br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(str.<span class="hljs-keyword">equals</span>(str3)) &#123;<br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;您要存入的金额是&quot;</span>);<br><span class="hljs-built_in">double</span> count=<span class="hljs-keyword">in</span>.nextDouble();<br>discount.deposit(count);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(str.<span class="hljs-keyword">equals</span>(str4))&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;输入内容有问题&quot;</span>);<br><span class="hljs-keyword">continue</span>;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-meta"># </span><br></code></pre></td></tr></table></figure><h3 id="异常语句的执行顺序分析"><a href="#异常语句的执行顺序分析" class="headerlink" title="异常语句的执行顺序分析"></a>异常语句的执行顺序分析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span>&#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-keyword">return</span> a+b;<br>        &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>            System.out.println(“<span class="hljs-keyword">catch</span> 语句块”);<br>        &#125;<span class="hljs-keyword">finally</span>&#123;<br>            System.out.println(“<span class="hljs-keyword">finally</span> 语句块”);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">Demo</span> <span class="hljs-variable">demo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Demo</span>();<br>        System.out.println(“和是：”+demo.add(<span class="hljs-number">9</span>,<span class="hljs-number">34</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行结果：</p><p>finally 语句块<br>和是：43</p><p>调用add方法之后一直等到finally调用完才返回到主函数</p><h1 id="java中的泛型"><a href="#java中的泛型" class="headerlink" title="java中的泛型"></a>java中的泛型</h1><p>泛型初体验</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//编译期间检查类型</span><br><span class="hljs-comment">//减少了数据类型的转换</span><br>ArrayList&lt;String&gt; strList=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>strList.add(<span class="hljs-string">&quot;a&quot;</span>);<br>strList.add(<span class="hljs-string">&quot;b&quot;</span>);<br>strList.add(<span class="hljs-string">&quot;c&quot;</span>);<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;strList.size();i++)<br>&#123;<br>String s=strList.get(i);<br>System.out.println(s);<br>&#125;<br>ArrayList&lt;Integer&gt; intList=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>intList.add(<span class="hljs-number">100</span>);<br>intList.add(<span class="hljs-number">200</span>);<br>intList.add(<span class="hljs-number">300</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;intList.size();i++)<br>&#123;<br><span class="hljs-type">int</span> num=intList.get(i);<br>System.out.println(num);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="泛型类的创建"><a href="#泛型类的创建" class="headerlink" title="泛型类的创建"></a>泛型类的创建</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*泛型类的定义</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * &lt;T&gt;泛型标识--类型形参</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * T 创建对象的时候里指定具体的数据类型</span><br><span class="hljs-comment">   */</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Generic</span> &lt;T&gt;&#123;<br>   <span class="hljs-comment">//T，是由外部使用类的时候来指定</span><br>         <span class="hljs-keyword">private</span> T key;<br>         <span class="hljs-keyword">public</span> <span class="hljs-title function_">Generic</span><span class="hljs-params">(T key)</span> &#123;<br>         <span class="hljs-built_in">this</span>.key=key;<br>         &#125;<br>         <span class="hljs-keyword">public</span> T <span class="hljs-title function_">getKey</span><span class="hljs-params">()</span> &#123;<br>         <span class="hljs-keyword">return</span> key;<br>         &#125;<br>         <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setKey</span><span class="hljs-params">(T key)</span> &#123;<br>         <span class="hljs-built_in">this</span>.key=key;<br>         &#125;<br><br>         <span class="hljs-meta">@Override</span><br>         <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>         <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Generic&#123;&quot;</span>+<span class="hljs-string">&quot;key=&quot;</span>+key+<span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>         &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>泛型类使用语法：</p><p>类名&lt;具体的数据类型&gt; 对象名&#x3D;new 类名&lt;具体的数据类型&gt;();</p><p>或者   类名&lt;具体的数据类型&gt; 对象名&#x3D;new 类名&lt;&gt;();</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> []args</span>)<br>&#123;<br><span class="hljs-comment">//泛型类在创建对象的时候，来指定操作的具体的数据类型</span><br><span class="hljs-title class_">Generic</span>&lt;<span class="hljs-title class_">String</span>&gt; strGeneric=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Generic</span>&lt;&gt;(<span class="hljs-string">&quot;赵梓皓&quot;</span>);<br><span class="hljs-title class_">String</span> key1=strGeneric.<span class="hljs-title function_">getKey</span>();<br><span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;key1:&quot;</span>+key1);<br></code></pre></td></tr></table></figure><pre><code class="hljs">    Generic&lt;Integer&gt; intGeneric =new Generic&lt;&gt;(123);       int key=intGeneric.getKey();       System.out.println(&quot;key:&quot;+key);      //泛型类在创建对象的时候，没有指定类型，将按照Object类型来操作       Generic generic =new Generic(&quot;ABC&quot;);       Object key3=generic.getKey();       System.out.println(&quot;key3:&quot;+key3);       //泛型类不支持基本数据类型      // Generic &lt;int&gt; generic2=new Generic &lt;int&gt;(100);       //同一泛型类，根据不同的数据类型创建的对象，本质上是同一类型，是Generic类型       System.out.println(intGeneric.getClass());       System.out.println(strGeneric.getClass());       System.out.println(intGeneric.getClass()==strGeneric.getClass());&#125;</code></pre><p>注意事项：泛型类，如果没有指定具体的数据类型，此时，操作类型是Object</p><p>2.泛型的类型参数只能是类类型，不能是基本数据类型</p><p>3.泛型类型在逻辑上可以看成是多个不同的类型，但实际上都是相同类型</p><h3 id="泛型类的使用"><a href="#泛型类的使用" class="headerlink" title="泛型类的使用"></a>泛型类的使用</h3><p><strong>抽奖器泛型类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductGetter</span> &lt;T&gt; &#123;<br>Random random=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br><span class="hljs-comment">//奖品</span><br><span class="hljs-keyword">private</span> T product;<br><span class="hljs-comment">//奖品池</span><br>ArrayList &lt;T&gt; list=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;T&gt;();<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addProduct</span><span class="hljs-params">(T t)</span> &#123;<br>list.add(t);<br>&#125;<br><span class="hljs-comment">//抽奖</span><br><span class="hljs-keyword">public</span> T <span class="hljs-title function_">getProduct</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> list.get(random.nextInt(list.size()));<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>抽奖器使用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br><span class="hljs-keyword">public</span> String b=<span class="hljs-string">&quot;100&quot;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span><br>&#123;<br><span class="hljs-comment">//创建抽奖器对象，指定数据类型</span><br>ProductGetter&lt;String&gt; stringProductGetter=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductGetter</span>&lt;&gt;();<br>String[] strProducts= &#123;<span class="hljs-string">&quot;苹果手机&quot;</span>,<span class="hljs-string">&quot;华为手机&quot;</span>,<span class="hljs-string">&quot;扫地机器人&quot;</span>,<span class="hljs-string">&quot;咖啡机&quot;</span>&#125;;<br><span class="hljs-comment">//给抽奖器中，填充奖品</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;strProducts.length;i++)<br>&#123;<br>stringProductGetter.addProduct(strProducts[i]);<br>&#125;<br><span class="hljs-comment">//抽奖</span><br>String product1=stringProductGetter.getProduct();<br>System.out.println(<span class="hljs-string">&quot;恭喜您，你抽中了&quot;</span>+product1);<br><br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="泛型类派生子类"><a href="#泛型类派生子类" class="headerlink" title="泛型类派生子类"></a>泛型类派生子类</h3><p>1.子类也是泛型类，子类和父类的泛型类型一致</p><p>class ChildGeneric<T> extends Generic<T></p><p>2.子类不是泛型类，父类要明确泛型的数据类型</p><p>class ChildGeneric extends Generic<String></p><p>例一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">父类<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Parent</span> &lt;E&gt; &#123;<br><span class="hljs-keyword">private</span> E value;<br><span class="hljs-keyword">public</span> E <span class="hljs-title function_">getValue</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> value;<br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(E value)</span> &#123;<br><span class="hljs-built_in">this</span>.value=value;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">子类<br>    <span class="hljs-comment">//子类中可以泛型扩展，但必须要有一个泛型和父类中的一样</span><br>    <span class="hljs-comment">//泛型类派生子类，子类也是泛型类的情况时，子类的泛型标识要和父类一致</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChildFirst</span>&lt;T&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Parent</span>&lt;T&gt; &#123;<br>              <span class="hljs-meta">@Override</span><br>              <span class="hljs-keyword">public</span> T <span class="hljs-title function_">getValue</span><span class="hljs-params">()</span> &#123;<br>              <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.getValue();<br>              &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">测试<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span><br>&#123;<br>ChildFirst&lt;String&gt; childFirst=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChildFirst</span>&lt;String&gt;();<br>childFirst.setValue(<span class="hljs-string">&quot;abc&quot;</span>);<br>String value=childFirst.getValue();<br>System.out.println(value);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>例二</p><ul><li>&#96;&#96;&#96;java<br>&#x2F;*<br> 子类<ul><li>当泛型类派生自类的时候，如果子类不是泛型类那么父类要明确数据类型<br>*&#x2F;<br>public class ChildFirst extends Parent<String> {<br>      @Override<br>   public String getValue() {<br>       return super.getValue();<br>   }<br>}<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"> * 测试<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span><br>&#123;<br>ChildFirst childfirst=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChildFirst</span>();<br>childfirst.setValue(<span class="hljs-string">&quot;abc&quot;</span>);<br> String value1=childfirst.getValue();<br> System.out.println(value1);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h3><p> <strong>1.泛型接口的实现类不是泛型类，接口要明确数据类型</strong></p><p> 泛型接口</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">* <span class="hljs-comment">/*</span><br><span class="hljs-comment">   * 泛型接口</span><br><span class="hljs-comment">     */</span><br>     <span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Generator</span>&lt;T&gt; &#123;<br>     T <span class="hljs-title function_">getKey</span><span class="hljs-params">()</span>;<br>     &#125;<br><br></code></pre></td></tr></table></figure><p> 子类</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Apple</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Generator</span>&lt;<span class="hljs-title class_">String</span>&gt;&#123;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 实现泛型接口的类，不是泛型类，需要明确实现泛型接口的数据类型</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getKey</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello generic&quot;</span>;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p> 测试</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span><br>&#123;<br>            Apple apple=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Apple</span>();<br>            String key=apple.getKey();<br>            System.out.println(key);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>  <strong>2.实现类也是泛型类，实现类和接口的泛型类型要一致</strong></p><pre><code class="hljs">  /*子类</code></pre><ul><li><pre><code class="java"><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><br>* 泛型接口的实现类是一个泛型类，那么要保证实现接口的泛型类泛型标识包含泛型接口的泛型标识<br>  */<br>     <span class="hljs-comment">//实现类的泛型标识必须和接口的一样</span><br>     <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-symbol">Apple</span>&lt;<span class="hljs-symbol">T,<span class="hljs-symbol">E</span></span>&gt; <span class="hljs-symbol">implements</span> <span class="hljs-symbol">Generator</span>&lt;<span class="hljs-symbol">T</span>&gt;&#123;<br>      <span class="hljs-keyword">private</span> T key;<br>      <span class="hljs-keyword">private</span> E value;<br>     <span class="hljs-keyword">public</span> Apple(T key,E value)&#123;<br>     <span class="hljs-keyword">this</span>.key=key;<br>     <span class="hljs-keyword">this</span>.value=value;<br>     &#125;<br>     @Override<br>     <span class="hljs-keyword">public</span> T getKey() &#123;<br>     <span class="hljs-keyword">return</span> key;<br>     &#125;<br>     <span class="hljs-keyword">public</span> E getValue() &#123;<br>     <span class="hljs-keyword">return</span> value;<br>     &#125;<br><br>  &#125;<br><br></code></pre></td></tr></table></figure>  <figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>* ```<br>  <span class="hljs-comment">/*泛型类</span><br></code></pre></td></tr></table></figure></code></pre></li><li><p>泛型接口<br>*&#x2F;<br>public interface Generator<T> {<br>T getKey();<br>}</p></li></ul> <figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs arduino"> <br> 实现类<br><br>```java<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">String</span> []args)</span></span><br><span class="hljs-function"></span>&#123;<br>          Apple&lt;<span class="hljs-type">String</span>,Integer&gt; apple=<span class="hljs-keyword">new</span> Apple&lt;&gt;(<span class="hljs-string">&quot;abc&quot;</span>,<span class="hljs-number">100</span>);<br>          <span class="hljs-type">String</span> a=apple.<span class="hljs-built_in">getKey</span>();<br>          <span class="hljs-type">int</span> b=apple.<span class="hljs-built_in">getValue</span>();<br>          System.out.<span class="hljs-built_in">println</span>(a+b);<br>          <br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h3><figure class="highlight bnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bnf">修饰符 <span class="hljs-attribute">&lt;T,E,...&gt;</span> 返回值类型 方法名(形参列表) &#123;<br><br>方法体<br><br>&#125;<br></code></pre></td></tr></table></figure><p>泛型类</p><ul><li><p>&#96;&#96;&#96;java<br>import java.util.ArrayList;<br> import java.util.Random;</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ProductGetter</span> &lt;<span class="hljs-title">T</span>&gt; &#123;<br>Random random=<span class="hljs-keyword">new</span> Random();<br><span class="hljs-comment">//奖品</span><br><span class="hljs-keyword">private</span> T product;<br><span class="hljs-comment">//奖品池</span><br>ArrayList &lt;T&gt; list=<span class="hljs-keyword">new</span> ArrayList&lt;T&gt;();<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addProduct</span>(<span class="hljs-params">T t</span>)</span> &#123;<br>list.<span class="hljs-keyword">add</span>(t);<br>&#125;<br><span class="hljs-comment">//抽奖</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">getProduct</span>()</span> &#123;<span class="hljs-comment">//这都不是泛型方法，是用泛型的成员方法</span><br><span class="hljs-keyword">return</span> list.<span class="hljs-keyword">get</span>(random.nextInt(list.size()));<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * 定义泛型方法</span><br><span class="hljs-comment"> * 这里定义的就是一个泛型方法，有了&lt;E&gt;泛型标识，方法里就可以用这个泛型标识，具体类型由调用方法的时候来指定</span><br><span class="hljs-comment">   */</span><br>   <span class="hljs-keyword">public</span> &lt;E&gt; <span class="hljs-function">E <span class="hljs-title">getProduct</span>(<span class="hljs-params">ArrayList&lt;E&gt; list</span>)</span> &#123;<span class="hljs-comment">//这个泛型方法的类型是独立于泛型类的</span><br>   <span class="hljs-keyword">return</span> list.<span class="hljs-keyword">get</span>(random.nextInt(list.size()));<br>   &#125;<br>   &#125;<br><br></code></pre></td></tr></table></figure></li></ul><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span><br>&#123;<br>    ProductGetter&lt;Integer&gt; productGetter=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductGetter</span>&lt;&gt;();<br>    ArrayList&lt;String&gt; strList=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    strList.add(<span class="hljs-string">&quot;笔记本&quot;</span>);<br>    strList.add(<span class="hljs-string">&quot;手机&quot;</span>);<br>    <span class="hljs-comment">//这是对泛型方法的调用，类型是通过调用方法的时候来制定的，这个地方就是指定E类型为String</span><br>    String product1=productGetter.getProduct(strList);<br>System.out.println(product1);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> 注意问题：</p><p> 1.如果一个普通的成员方法用了类的这个泛型类型，是不能用static来修饰的</p><p> 2.如果是泛型方法可以支持静态</p><p><strong>静态类型的泛型方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * 静态类型的泛型方法，采用多个泛型类型</span><br><span class="hljs-comment">   */</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;E,T,K&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">printtype</span><span class="hljs-params">(E e,T t,K k)</span><br>   &#123;<br>   System.out.println(t.getClass());<br>   System.out.println(e.getClass());<br>   System.out.println(k.getClass());<br>   &#125;<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br>ProductGetter.printtype(<span class="hljs-number">100</span>,<span class="hljs-string">&quot;java&quot;</span>,<span class="hljs-literal">true</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>泛型方法与可变参数</strong></p><p>例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//因为参数的数目是可以变化的，所以可以形成数组</span><br><span class="hljs-comment">//泛型方法对可变参数的支持</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;E&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(E...e)</span> &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;e.length;i++) &#123;<br>System.out.println(e[i]);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br>ProductGetter.print(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：泛型方法能使方法独立于类而产生变化</p><p>如果static方法要使用泛型能力，就必须使其成为泛型方法</p><h3 id="类型通配符"><a href="#类型通配符" class="headerlink" title="类型通配符"></a>类型通配符</h3><p>方法参数使用类的泛型标识符时不能重载，因为标识符从根本上都是Object类</p><p>注意：1.类型通配符一般是使用“?”代替具体的类型实参</p><p>2.所以，类型通配符是类型实参，而不是类型形参</p><p><strong>通配符初体验</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span><br>&#123;<br><br>Box&lt;Number&gt; box1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Box</span>&lt;&gt;();<br>box1.setFirst(<span class="hljs-number">100</span>);<br>showBox(box1);<br><br>Box&lt;Integer&gt; box2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Box</span>&lt;&gt;();<br>box2.setFirst(<span class="hljs-number">200</span>);<br>showBox(box2);<br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showBox</span><span class="hljs-params">(Box&lt;?&gt;box)</span><span class="hljs-comment">//这个地方是问号就可以是任意类型的，都可以用这个showBox方法，但如果是Number类型的，即使是它的子类Integer也不能用因为标识符类型本质上都是一样的Object类所以不能进行方法重载</span><br>&#123;<br>Object first=box.getFirst();<br>System.out.println(first);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="通配符设置上限"><a href="#通配符设置上限" class="headerlink" title="通配符设置上限"></a>通配符设置上限</h3><p>语法</p><p>类&#x2F;接口&lt;? extends 实参类型&gt;</p><p>要求该泛型的类型，只能是实参类型，或者是实参类型的子类类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span><br>&#123;<br><br>Box&lt;Number&gt; box1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Box</span>&lt;&gt;();<br>box1.setFirst(<span class="hljs-number">100</span>);<br>showBox(box1);<br><br>Box&lt;Integer&gt; box2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Box</span>&lt;&gt;();<br>box2.setFirst(<span class="hljs-number">200</span>);<br>showBox(box2);<br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showBox</span><span class="hljs-params">(Box&lt;? extends Number&gt;box)</span><span class="hljs-comment">//这里意思就是最大接收的类型就是Number，如果单独是一个?的话就是最大是Object</span><br>&#123;<br>Number first=box.getFirst();<br>System.out.println(first);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>例子：</p><p>Cat是miniCat的父类，Animal是Cat的父类</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">miniCat</span> <span class="hljs-keyword"><span class="hljs-keyword">extends</span> <span class="hljs-type">Cat</span></span></span>&#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> void main(<span class="hljs-keyword">String</span>[] args)<br>&#123;<br>ArrayList&lt;Animal&gt; animals=<span class="hljs-keyword">new</span> <span class="hljs-type">ArrayList</span>&lt;&gt;();<br>ArrayList&lt;Cat&gt; cats=<span class="hljs-keyword">new</span> <span class="hljs-type">ArrayList</span>&lt;&gt;();<br>    ArrayList&lt;miniCat&gt; miniCats=<span class="hljs-keyword">new</span> <span class="hljs-type">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-comment">//showAnimal(animals);这个会报错因为下面的通配符上限是Cat，传递的集合类型只能是Cat或Cat的子类</span><br>    showAnimal(cats);<br>    showAnimal(miniCats);<br> <br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> void showAnimal(ArrayList&lt;? extends  Cat&gt; list)<br>&#123;<br><span class="hljs-comment">//这种用通配符来表述存储对象类型的集合是不能向其中添加元素的</span><br><span class="hljs-comment">/*list.add(new Cat());</span><br><span class="hljs-comment">list.add(new miniCat());</span><br><span class="hljs-comment">list.add(new Animal());*/</span><br><span class="hljs-keyword">for</span>(int i=<span class="hljs-number">0</span>;i&lt;list.size();i++) &#123;<br><span class="hljs-comment">//ArrayList通配符上限为Cat所以下面用Cat引用变量接受没有任何问题</span><br>Cat cat = list.<span class="hljs-keyword">get</span>(i);<span class="hljs-comment">//这个地方得到集合的类型，引用变量必须是最大的那一种 </span><br>System.out.println(cat);<br>&#125;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="类型通配符的下限"><a href="#类型通配符的下限" class="headerlink" title="类型通配符的下限"></a>类型通配符的下限</h3><p>类&#x2F;接口&lt;? super 实参类型&gt;</p><p>要求该泛型的类型，只能是实参类型，或实参类型的父类类型</p><p><strong>通配符下限初体验</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">miniCat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Cat</span>&#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>&#123;<br>ArrayList&lt;Animal&gt; animals=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>ArrayList&lt;Cat&gt; cats=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    ArrayList&lt;miniCat&gt; miniCats=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    showAnimal(animals);<br>    showAnimal(cats);<br>   <span class="hljs-comment">// showAnimal(miniCats);要求只能是Cat或者Cat的父类类型，所以这个地方报错</span><br> <br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 类型通配符的下限，要求集合只能是Cat或Cat的父类类型</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showAnimal</span><span class="hljs-params">(ArrayList&lt;? <span class="hljs-built_in">super</span> Cat&gt; list)</span><br>&#123;<br><span class="hljs-keyword">for</span>(Object o:list) &#123;<span class="hljs-comment">//当接受用下限通配符标识的集合元素的时候，用object，因为Object是所有类的父类</span><br>System.out.println(o);<br>&#125;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>TreeSet是通过自己定义的比较器来排序的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span><br>&#123;<br>         TreeSet&lt;Cat&gt; treeSet=<span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comprator2</span>());<span class="hljs-comment">//因为是comprator2所以是按照年龄大小来排序的</span><br>          <span class="hljs-comment">//TreeSet&lt;Cat&gt; treeSet=new TreeSet&lt;&gt;(new Comprator1());不会报错</span><br>        <span class="hljs-comment">//TreeSet&lt;Cat&gt; treeSet=new TreeSet&lt;&gt;(new Comprator3());会报错</span><br>        <span class="hljs-comment">//因为TreeSet的这个地方泛型是Cat它的构造方法也用到了泛型，只有是继承Cat或Cat子类标识Comparator接口的比较器才能够好用</span><br>        treeSet.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>(<span class="hljs-string">&quot;jerry&quot;</span>,<span class="hljs-number">20</span>));<br>         treeSet.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>(<span class="hljs-string">&quot;amy&quot;</span>,<span class="hljs-number">22</span>));<br>         treeSet.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>(<span class="hljs-string">&quot;frank&quot;</span>,<span class="hljs-number">23</span>));<br>         treeSet.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>(<span class="hljs-string">&quot;jim&quot;</span>,<span class="hljs-number">25</span>));<br>         <span class="hljs-keyword">for</span>(Cat cat:treeSet) &#123;<br>         System.out.println(cat);<br>         &#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Comprator1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparator</span>&lt;Animal&gt;&#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Animal o1, Animal o2)</span> &#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br><span class="hljs-keyword">return</span> o1.name.compareTo(o2.name);<br>&#125;<br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Comprator2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparator</span>&lt;Cat&gt;&#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Cat o1, Cat o2)</span> &#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br><span class="hljs-keyword">return</span> o1.age-o2.age;<br>&#125;<br><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Comprator3</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparator</span>&lt;miniCat&gt;&#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(miniCat o1, miniCat o2)</span> &#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br><span class="hljs-keyword">return</span> o1.level-o2.level;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">Treeset</span><span class="hljs-params">(Comparator &lt;? <span class="hljs-built_in">super</span> E&gt; comparator)</span>&#123;<br><br><br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="类型擦除"><a href="#类型擦除" class="headerlink" title="类型擦除"></a>类型擦除</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> []args</span>)<br>&#123;<br><span class="hljs-comment">//泛型类在创建对象的时候，来指定操作的具体的数据类型</span><br><span class="hljs-title class_">Generic</span>&lt;<span class="hljs-title class_">String</span>&gt; strGeneric=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Generic</span>&lt;&gt;(<span class="hljs-string">&quot;赵梓皓&quot;</span>);<br><span class="hljs-title class_">String</span> key1=strGeneric.<span class="hljs-title function_">getKey</span>();<br><span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;key1:&quot;</span>+key1);<br></code></pre></td></tr></table></figure><pre><code class="hljs">Generic&lt;Integer&gt; intGeneric =new Generic&lt;&gt;(123);   int key=intGeneric.getKey();   System.out.println(&quot;key:&quot;+key);  //泛型类在创建对象的时候，没有指定类型，将按照Object类型来操作   Generic generic =new Generic(&quot;ABC&quot;);   Object key3=generic.getKey();   System.out.println(&quot;key3:&quot;+key3);   //泛型类不支持基本数据类型  // Generic &lt;int&gt; generic2=new Generic &lt;int&gt;(100);   //同一泛型类，根据不同的数据类型创建的对象，本质上是同一类型，是Generic类型   System.out.println(intGeneric.getClass());   System.out.println(strGeneric.getClass());   System.out.println(intGeneric.getClass()==strGeneric.getClass());</code></pre><p>}</p><p>判断两个类型是否相同 最后是相同的</p><p>因为泛型只有在编译阶段存在，编译结束之后类型就擦除了，都是Object类</p><h3 id="泛型数组的创建"><a href="#泛型数组的创建" class="headerlink" title="泛型数组的创建"></a>泛型数组的创建</h3><p>可以声明带泛型的数组引用，但是不能直接创建带泛型的的数组对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span><br>&#123;<br>ArrayList&lt;String&gt;[] listArr=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>[<span class="hljs-number">5</span>];<span class="hljs-comment">//定义泛型数组的方式，操作的时候就是拿引用去操作</span><br>   ArrayList&lt;String&gt; strList=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>   strList.add(<span class="hljs-string">&quot;abc&quot;</span>);<br>   listArr[<span class="hljs-number">0</span>]=strList;<br>   String s=listArr[<span class="hljs-number">0</span>].get(<span class="hljs-number">0</span>);<br>   System.out.println(s);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以通过java.lang.reflect.Array的newInstance(Class<T>,int) 创建T[]数组</p><p>Fruit</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Main;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Array;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Fruit</span>&lt;T&gt; &#123;<br><br><span class="hljs-keyword">private</span> T[] array;<br><span class="hljs-keyword">public</span> T[] getArray() &#123;<br><span class="hljs-keyword">return</span> array;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setArray</span><span class="hljs-params">(T[] array)</span> &#123;<br><span class="hljs-built_in">this</span>.array = array;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Fruit</span><span class="hljs-params">(Class&lt;T&gt; clz,<span class="hljs-type">int</span> length)</span><br><br>&#123;<br>array=(T[])Array.newInstance(clz, length);<br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">put</span><span class="hljs-params">(<span class="hljs-type">int</span> index, T string)</span> &#123;<br>array[index]=string;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span><br>&#123;<br>Fruit&lt;String&gt; fruit=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Fruit</span>&lt;&gt;(String.class ,<span class="hljs-number">3</span>);<br>fruit.put(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;苹果&quot;</span>);<br>fruit.put(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;西瓜&quot;</span>);<br>fruit.put(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;香蕉&quot;</span>);<br><br><br>System.out.println(Arrays.toString(fruit.getArray()));<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>一个利用比较器以及string的compareTo的一个题</p><h1 id="java的File类"><a href="#java的File类" class="headerlink" title="java的File类"></a>java的File类</h1><p>java.io.File类</p><p>文件和目录路径的抽象表示形式</p><p>java把电脑中的文件和文件夹封装为了一个File类，我们可以使用File类对文件和文件夹进行操作</p><p>我们可以使用File类的方法</p><p>创建一个文件&#x2F;文件夹等等</p><p>File类是一个和系统无关的类，任何的操作系统都可以使用这个类中的方法</p><p>重点记住三个单词：file：文件    directory：文件夹&#x2F;目录    path：路径</p><p><strong>File类的静态属性</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">String pathSeparator=File.pathSeparator;<span class="hljs-comment">//路径分隔符，分割多个路径的，windows系统是分号，linux系统是冒号</span><br>System.out.println(pathSeparator);<br>String separator=File.separator;<br>System.out.println(separator);<span class="hljs-comment">//文件名称分隔符，windows系统是反斜杠\    linux系统是正斜杠/</span><br><span class="hljs-comment">//操作路径&quot;C:&quot;+File.separator+&quot;develop&quot;+File.separator+&quot;a&quot;+File.separator+&quot;a.txt&quot;</span><br><span class="hljs-comment">//将反斜杠或者正斜杠用File.separator代替，不写死</span><br></code></pre></td></tr></table></figure><p><strong>绝对路径与相对路径</strong></p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918551.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220629161901489"></p><p><strong>构造方法</strong></p><ul><li><p>&#96;&#96;&#96;java<br>&#x2F;*<br>一</p><ul><li>File(String pathname) 通过将给定路径名字字符串转换为抽象路径来创建一个新的File实例</li><li>参数：</li><li>String pathname 字符串的路径名称</li><li>路径可以是文件结尾也可以是文件夹结尾</li><li>路径可以是相对路径，也可以是绝对路径</li><li>路径可以存在也可以不存在，创建File对象，只是把字符串封装为File对象，不考虑路径的真假情况</li><li>*&#x2F;<br>File f1&#x3D;new File(“D:\放乱七八糟\File.txt”);<br>System.out.println(f1);&#x2F;&#x2F;重写了object类里的toString方法输出路径  D:\放乱七八糟\File.txt</li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * ```</span><br><span class="hljs-comment">   * File(String parent,Stringchild)</span><br><span class="hljs-comment">   * 参数分为两部分，String parent父路径</span><br><span class="hljs-comment">   * String child 子路径</span><br><span class="hljs-comment">   * 好处：</span><br><span class="hljs-comment">   * 父路径和子路径可以单独书写，使用起来非常灵活，父路径和子路径都可以变化</span><br><span class="hljs-comment">     */</span><br>     <span class="hljs-keyword">File</span> f1=<span class="hljs-keyword">new</span> <span class="hljs-keyword">File</span>(<span class="hljs-string">&quot;c:\\&quot;</span>,<span class="hljs-string">&quot;a.txt&quot;</span>);<br>     System.out.<span class="hljs-keyword">println</span>(f1);<br>     <span class="hljs-keyword">File</span> f2=<span class="hljs-keyword">new</span> <span class="hljs-keyword">File</span>(<span class="hljs-string">&quot;d:\\&quot;</span>,<span class="hljs-string">&quot;a.txt&quot;</span>);<br>     System.out.<span class="hljs-keyword">println</span>(f2);<br></code></pre></td></tr></table></figure><p>   ​&#x2F;*</p><pre><code class="hljs">* ```  * File(File parent,String child)根据parent抽象路径名和child路径字符串创建一个新File实例  * 参数：把路径分为了两部分  * File parent：父路径  * String child：子路径  * 好处：  * 父路径和子路径可以单独书写，使用起来非常灵活，父路径和子路径都可以变化  * */        File parent=new File(&quot;c:\\&quot;);        File file=new File(parent,&quot;hello.java&quot;);        System.out.println(file);  <figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>         <br><br>## 常用方法<br><br>### 获取方法<br><br>public String getAbsolutePath()  :返回此File的绝对路径字符串，获取构造方法中的传递的路径，不管你写的是相对的还是绝对的都返回绝对路径字符串<br><br></code></pre></td></tr></table></figure></code></pre></li></ul><p>File f1&#x3D;new File(“C:\a.txt”);<br>System.out.println(f1.getAbsolutePath());<br>File f2&#x3D;new File(“a.txt”);<br>System.out.println(f2.getAbsolutePath());<br>结果:<br>C:\a.txt<br>D:\Java\12345\a.txt</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><br><span class="hljs-keyword">public</span> String getPath()将此<span class="hljs-keyword">File</span>转换为路径名字符串<br><br>```java<br><span class="hljs-keyword">File</span> f1=<span class="hljs-keyword">new</span> <span class="hljs-keyword">File</span>(<span class="hljs-string">&quot;C:\\a.txt&quot;</span>);<br>System.out.<span class="hljs-keyword">println</span>(f1.getPath());<br><span class="hljs-keyword">File</span> f2=<span class="hljs-keyword">new</span> <span class="hljs-keyword">File</span>(<span class="hljs-string">&quot;a.txt&quot;</span>);<br>System.out.<span class="hljs-keyword">println</span>(f2.getPath());<br>结果：<br>C:\a.txt<br>a.txt<br></code></pre></td></tr></table></figure><p>public String getName()返回由此File表示的文件或目录的名称</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">File f1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;C:\\a.txt&quot;</span>);<br>System.out.println(f1.getName());<br>File f2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;a.txt&quot;</span>);<br>System.out.println(f2.getName());<br>结果：a.txt<br>a.txt<br><br></code></pre></td></tr></table></figure><p>public long length() 获取的式构造方法指定的文件的大小，以字节为单位</p><p>注意：</p><p>文件夹是没有大小概念的，不能获取文件夹的大小，如果构造方法中给出的路径不存在，那么length方法返回零</p><p>文件夹没有大小概念，返回值也是零</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">File f1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\File.txt&quot;</span>);<br>System.out.println(f1.length());<br>File f2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;a.txt&quot;</span>);<br>System.out.println(f2.length());<br>结果：<br><span class="hljs-number">10</span><br><span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="判断功能的方法"><a href="#判断功能的方法" class="headerlink" title="判断功能的方法"></a>判断功能的方法</h3><p>public boolean exists()  ：此File表示的文件或目录是否实际存在</p><p>用于判断构造方法中的路径是否存在</p><p>   存在：true</p><p>   不存在：false</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">File f1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\File.txt&quot;</span>);<br>System.out.println(f1.exists());<br>结果：<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">File</span> f1=<span class="hljs-keyword">new</span> <span class="hljs-keyword">File</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\Fil.txt&quot;</span>);<br>System.out.<span class="hljs-keyword">println</span>(f1.exists());<br>结果：<span class="hljs-keyword">false</span><br></code></pre></td></tr></table></figure><p><strong>注意下面两个判断方法的路径必须是存在的如果不存在则都返回false</strong></p><p>public boolean isDirectory()  表示此File是否为目录</p><p>用于判断构造方法中给定的路径是否是以文件夹结尾</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">File</span> f1=<span class="hljs-keyword">new</span> <span class="hljs-keyword">File</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\File.txt&quot;</span>);<br>System.out.<span class="hljs-keyword">println</span>(f1.isDirectory());<br>结果:<span class="hljs-keyword">false</span><br></code></pre></td></tr></table></figure><p>publicboolean isFile()   </p><p>用于判断构造方法中给定的路径是否是以文件结尾</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">File f1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\File.txt&quot;</span>);<br>System.out.println(f1.isFile());<br>结果：<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">File f1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\Fil.txt&quot;</span>);<br>System.out.println(f1.isFile());<br>结果：<span class="hljs-literal">false</span>  因为路径不存在<br></code></pre></td></tr></table></figure><h3 id="创建删除功能的方法"><a href="#创建删除功能的方法" class="headerlink" title="创建删除功能的方法"></a>创建删除功能的方法</h3><p>public boolean createNewFile() :当且仅当具有该名称的文件尚不存在时，创建一个新的空文件</p><p>创建文件的路径和名称在构造方法中给出（构造方法的参数）</p><p>返回值：布尔值</p><p>true：文件不存在，创建文件，返回true</p><p>false：文件存在不会创建，返回false</p><p>注意;1.此方法之恩那个创建文件，不能创建文件夹所以创建文件的路径必须存在，否则会抛出异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">File f1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\Fil.txt&quot;</span>);<br><span class="hljs-keyword">try</span> &#123;<br>System.out.println(f1.createNewFile());<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>e.printStackTrace();<span class="hljs-comment">//createNewFile声明抛出了IOException，我们调用这个方法，就必须的处理这个异常，要么throws，要么trycatch如果调用方法的时候也throws就会交给jvm处理</span><br>&#125;<br></code></pre></td></tr></table></figure><p>如果路径不存在则会抛出IO异常</p><p>public boolean mkdir()  :创键单级空文件夹</p><p>public boolean mkdirs()   :创建单级空文件夹，也可以创建多级文件夹</p><p>创建文件夹的路径和名称在构造方法中给出（构造方法的参数）</p><p>返回值：布尔值</p><p>true：文件夹不存在，创建文件夹，返回true</p><p>false：文件夹存在不会创建，返回false，构造方法中给出的路径不存在返回false</p><p>注意;1.此方法只能创建文件夹，不能创建文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">File f1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\aaa\\bb&quot;</span>);<br>System.out.println(f1.mkdir());<span class="hljs-comment">//不能创建多级目录</span><br>File f2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\aaa\\bb&quot;</span>);<br>System.out.println(f1.mkdirs());<br>File f3=<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\ccc&quot;</span>);<br>System.out.println(f3.mkdir());<br>结果：<span class="hljs-literal">false</span><br><span class="hljs-literal">true</span><br><span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>public  boolean delete()    删除构造方法路径中给出的文件和文件夹</p><p>返回值也是一个布尔值</p><p>true：文件&#x2F;文件夹删除成功，返回true</p><p>false：文件夹中有内容，不会删除返回false，构造方法中的路径不存在返回false，文件不管里面有没有内容都会删除</p><p>注意：</p><p>delete方法是直接在硬盘删除文件&#x2F;文件夹，不走回收站，删除要谨慎</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">File</span> f2=<span class="hljs-keyword">new</span> <span class="hljs-keyword">File</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\aaa\\bb&quot;</span>);<br>System.out.<span class="hljs-keyword">println</span>(f2.<span class="hljs-keyword">delete</span>());<br><span class="hljs-keyword">File</span> f3=<span class="hljs-keyword">new</span> <span class="hljs-keyword">File</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\ccc&quot;</span>);<br>System.out.<span class="hljs-keyword">println</span>(f3.<span class="hljs-keyword">delete</span>());<br>结果：<span class="hljs-keyword">true</span><br><span class="hljs-keyword">true</span><br>删除路径的最后一个文件或者文件夹<br></code></pre></td></tr></table></figure><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">File</span> f2=<span class="hljs-keyword">new</span> <span class="hljs-keyword">File</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\aaa&quot;</span>);<br>System.out.<span class="hljs-keyword">println</span>(f2.<span class="hljs-keyword">delete</span>());<br>结果<span class="hljs-keyword">false</span><br>因为文件夹aaa中有内容<br></code></pre></td></tr></table></figure><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">File</span> f2=<span class="hljs-keyword">new</span> <span class="hljs-keyword">File</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\aaa\\新建文本文档.txt&quot;</span>);<br>System.out.<span class="hljs-keyword">println</span>(f2.<span class="hljs-keyword">delete</span>());<br>结果：<span class="hljs-keyword">true</span><br>就算txt文件中有内容也会被删除<br></code></pre></td></tr></table></figure><h3 id="目录的遍历功能"><a href="#目录的遍历功能" class="headerlink" title="目录的遍历功能"></a>目录的遍历功能</h3><p>public String[] list() ：返回一个String数组，表示该File目录中的所有子文件或目录（隐藏的也能获取到）</p><p>遍历构造方法中给出的目录，会获取目录中所有文件&#x2F;文件夹的名称，把获取到的多个名称存储到一个字符串String类型的数组中</p><p>public File[] listFiles(): 返回一个File数组，表示该File目录中所有的子文件或目录</p><p>遍历一个构造方法中给出的目录，会获取目录中所有个文件&#x2F;文件夹，把文件或文件夹封装为File对象，多个File对象存储到File数组里</p><p>注意：</p><p>list方法和listFiles方法遍历的是构造方法中给出的目录</p><p>如果构造方法中给出的目录的路径不存在，会抛出空指针异常</p><p>如果构造方法中给出的路径不是一个目录，也会抛出空指针异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">File f2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\放乱七八糟&quot;</span>);<br>String str[]=f2.list();<br><span class="hljs-keyword">for</span>(String filename:str) &#123;<br>System.out.println(filename);<br>&#125;<br>结果：eclipse.zip<br>Everything-<span class="hljs-number">1.4</span><span class="hljs-number">.1</span><span class="hljs-number">.1017</span>.x64-Setup.exe<br>Fil.txt<br>File.txt<br>java8中文说明文档<span class="hljs-number">321456</span><br>第五章.ppt<br></code></pre></td></tr></table></figure><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-built_in">File</span> <span class="hljs-variable">file</span><span class="hljs-operator">=</span><span class="hljs-variable">new</span> <span class="hljs-built_in">File</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;D:\\放乱七八糟&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br><span class="hljs-built_in">File</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-variable">files</span><span class="hljs-operator">=</span><span class="hljs-variable">file</span><span class="hljs-operator">.</span><span class="hljs-variable">listFiles</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br><span class="hljs-variable">for</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">File</span> <span class="hljs-variable">f</span><span class="hljs-operator">:</span><span class="hljs-variable">files</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-variable">System</span><span class="hljs-operator">.</span><span class="hljs-variable">out</span><span class="hljs-operator">.</span><span class="hljs-variable">println</span><span class="hljs-punctuation">(</span><span class="hljs-variable">f</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br><span class="hljs-punctuation">&#125;</span><br>结果：<span class="hljs-built_in">D</span><span class="hljs-operator">:</span>\放乱七八糟\<span class="hljs-variable">eclipse</span><span class="hljs-operator">.</span><span class="hljs-variable">zip</span><br><span class="hljs-built_in">D</span><span class="hljs-operator">:</span>\放乱七八糟\<span class="hljs-variable">Everything</span><span class="hljs-operator">-</span><span class="hljs-number">1.4</span><span class="hljs-number">.1</span><span class="hljs-number">.1017</span><span class="hljs-operator">.</span><span class="hljs-variable">x64</span><span class="hljs-operator">-</span><span class="hljs-variable">Setup</span><span class="hljs-operator">.</span><span class="hljs-variable">exe</span><br><span class="hljs-built_in">D</span><span class="hljs-operator">:</span>\放乱七八糟\<span class="hljs-variable">Fil</span><span class="hljs-operator">.</span><span class="hljs-variable">txt</span><br><span class="hljs-built_in">D</span><span class="hljs-operator">:</span>\放乱七八糟\<span class="hljs-built_in">File</span><span class="hljs-operator">.</span><span class="hljs-variable">txt</span><br><span class="hljs-built_in">D</span><span class="hljs-operator">:</span>\放乱七八糟\<span class="hljs-variable">java8</span>中文说明文档<span class="hljs-number">321456</span><br><span class="hljs-built_in">D</span><span class="hljs-operator">:</span>\放乱七八糟\第五章<span class="hljs-operator">.</span><span class="hljs-variable">ppt</span><br></code></pre></td></tr></table></figure><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>递归的分类：1.直接递归和间接递归</p><p>直接递归：main(){</p><p>a()</p><p>}</p><p>a(){</p><p>a();自己调用自己</p><p>}</p><p>间接递归：b(){</p><p>c();}</p><p>c(){</p><p>b();}</p><p>注意事项：1.递归一定要有条件限定，保证递归能够停下来，否则会发生栈内存溢出</p><p>2.在递归中虽然有限定条件，但是递归次数不能太多，否则也会发生栈内存溢出</p><p>3.构造方法，禁止递归，编译错误，构造方法是创建对象时侯用的，一直递归会导致内存中有无数多个对象，直接编译报错</p><p><strong>递归地使用前提：当调用方法的时候，方法的主体不变，每次调用方法的参数不同，可以使用递归</strong></p><p><strong>为什么递归无限制会导致栈内存溢出</strong></p><p>a方法会在栈内存中一直调用a方法，就会导致栈内存中由无数多个a方法</p><p>方法太多了，超出栈内存的大小，就会导致内存溢出的错误</p><p>注意：</p><p>当一个方法调用其他方法时，被调用的方法没有执行完毕，当前方法就会一直等待低矮哦用的方法执行完毕才会继续执行</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918949.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220629161813100"></p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">使用递归计算<span class="hljs-number">0</span>到<span class="hljs-built_in">n</span>之间的和<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br><span class="hljs-type">int</span> s=Sum(<span class="hljs-number">3</span>);<br>               System.out.println(s);<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">Sum</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br><span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">return</span> n+Sum(n-<span class="hljs-number">1</span>);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>递归计算阶乘</strong></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">String</span> []args)</span> </span>&#123;<br><span class="hljs-type">int</span> s=<span class="hljs-built_in">Sum</span>(<span class="hljs-number">7</span>);<br>           System.out.<span class="hljs-built_in">println</span>(s);<br><br>&#125;<br></code></pre></td></tr></table></figure><pre><code class="hljs">public static int Sum(int n) &#123;    if(n==1)        return 1;    return n*Sum(n-1);&#125;</code></pre><p><strong>递归打印多级目录</strong></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">遍历<span class="hljs-keyword">c</span>:\\<span class="hljs-keyword">abc</span>文件夹，及<span class="hljs-keyword">abc</span>文件夹的子文件夹以及子文件夹中所有文件<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span>&#123;<br>File file=<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;d:\\放乱七八糟&quot;</span>);<br>getAllFile(file);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getAllFile</span><span class="hljs-params">(File dir)</span> &#123;<br>    System.out.println(dir);<span class="hljs-comment">//打印被遍历的目录</span><br> File[]files=dir.listFiles();<br> <span class="hljs-keyword">for</span>(File f:files) &#123;<br> <span class="hljs-keyword">if</span>(f.isDirectory()) &#123;<br> getAllFile(f);<br> &#125;<br> <span class="hljs-keyword">else</span><br> &#123;<br> System.out.println(f);<br> &#125;<br> &#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h3><p>找出目录下文件中只有以.java为结尾的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span>&#123;<br>File file=<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\同步空间\\新建文件夹&quot;</span>);<br>getAllFile(file);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getAllFile</span><span class="hljs-params">(File dir)</span> &#123;<br>   <span class="hljs-comment">// System.out.println(dir);</span><br> File[]files=dir.listFiles();<br> <span class="hljs-keyword">for</span>(File f:files) &#123;<br> <span class="hljs-keyword">if</span>(f.isDirectory()) &#123;<br> getAllFile(f);<br> &#125;<br> <span class="hljs-keyword">else</span><br> &#123;<br> <span class="hljs-comment">/*</span><br><span class="hljs-comment">  * 只要.java结尾的文件</span><br><span class="hljs-comment">  * 把File对象f转换为字符串对象</span><br><span class="hljs-comment">  * String name=f.getName();</span><br><span class="hljs-comment">  * String path=f.getPath();</span><br><span class="hljs-comment">  * String s=f.toString();</span><br><span class="hljs-comment">  * System.out.println(f);</span><br><span class="hljs-comment">  */</span><br> <span class="hljs-comment">/*</span><br><span class="hljs-comment">  * 2.调用String类中的方法endswith判断字符串是否是以.java结尾</span><br><span class="hljs-comment">  * </span><br><span class="hljs-comment">  */</span><br> String s=f.toString();<br>             <span class="hljs-comment">//把字符串转换为小写</span><br>             <span class="hljs-comment">//s=s.toLowerCase();</span><br> <span class="hljs-type">boolean</span> b=s.endsWith(<span class="hljs-string">&quot;.java&quot;</span>);<br> <span class="hljs-keyword">if</span>(b) &#123;<br> System.out.println(f);<br> &#125;<br> &#125;<br> &#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>第二种方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(f.getName().toLowerCase().endsWith(<span class="hljs-string">&quot;.java&quot;</span>))<br><br>&#123;<br><br>System.out.println(f);<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>文件过滤器优化</strong></p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs delphi">需求：遍历某个文件夹，及其子文件夹，只要.java结尾的文件<br><br>我们可以使用过滤器来实现，在<span class="hljs-keyword">File</span>类中有两个和ListFiles重载的方法，方法的参数传递就是过滤器<br><br><span class="hljs-keyword">File</span>[] listFiles(FileFilter filter)<br><br>java.io.FileFilter接口：用于抽象路径名（<span class="hljs-keyword">File</span>对象）的过滤器<br><br>作用：用来过滤文件（<span class="hljs-keyword">File</span>对象）<br><br>抽象方法：用来过滤文件的方法<br>boolean accept(<span class="hljs-keyword">File</span> pathname)  测定指定抽象路径名是否应该包含在某一个路径名列表中<br>参数：<br>       <span class="hljs-keyword">File</span> pathname 使用listFiles方法遍历目录，得到的每一个文件对象<br> <span class="hljs-keyword">File</span>[] listFiles(FilenameFileter filter)<br> java.io.FilenameFilter接口：实现此接口的类实例可以用于过滤文件名<br>       作用：用于过滤文件名称<br>       抽象方法：用来过滤文件<br>       boolean accept(<span class="hljs-keyword">File</span> dir,<span class="hljs-keyword">String</span> <span class="hljs-keyword">name</span>)<br>              参数：<br>                    <span class="hljs-keyword">File</span> dir:构造方法中传递的被遍历的目录，也就是除了最后一个之外的<br>                    <span class="hljs-keyword">String</span> <span class="hljs-keyword">name</span>:使用ListFiles方法遍历目录，获取的每一个文件/文件夹的名称(也就是最后一个)<br>注意：两个过滤器接口是没有实现类的，需要我们自己写实现类，重写过滤的方法accept，在方法中自己定义过滤的规则<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-comment">//创建过滤器FileFilter的实现类，重写过滤方法accept，定义过滤规则</span><br><span class="hljs-comment">//如果accept返回false就不会把这个文件对象放到文件对象数组中</span><br><span class="hljs-comment">//如果accept返回true就可以把这个文件对象放到文件对象数组中</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">FileFilterimpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FileFilter</span>&#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(File pathname)</span> &#123;<br>        <span class="hljs-comment">//如果是文件夹就返回true，再下面检测出是文件夹会继续调用getAllFile方法</span><br><span class="hljs-keyword">if</span>(pathname.isDirectory()) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-keyword">return</span> pathname.getName().toLowerCase().endsWith(<span class="hljs-string">&quot;.md&quot;</span>);<span class="hljs-comment">//要到.md结尾的文件对象</span><br><br><br><br>&#125;<br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span>&#123;<br>File file=<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\同步空间\\新建文件夹&quot;</span>);<br>getAllFile(file);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getAllFile</span><span class="hljs-params">(File dir)</span> &#123;<br>   <span class="hljs-comment">// System.out.println(dir);</span><br> File[]files=dir.listFiles(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileFilterimpl</span>());<span class="hljs-comment">//传递过滤器对象</span><br> <span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   * listFiles()方法做了三件事</span><br><span class="hljs-comment">     * 1.listFiles方法会对构造方法中传递的目录进行遍历，获取目录中的每一个文件/文件夹--&gt;封装为File对象</span><br><span class="hljs-comment">       * 2.listFiles会调用参数传递过程中的过滤器的方法accept</span><br><span class="hljs-comment">       * 3.listFiles方法会把遍历得到的每一个File对象传递给accept方法的参数叫pathname</span><br><span class="hljs-comment">         */</span><br>          <span class="hljs-keyword">for</span>(File f:files) &#123;<br>          <span class="hljs-keyword">if</span>(f.isDirectory()) &#123;<br>          getAllFile(f);<br>          &#125;<br>          <span class="hljs-keyword">else</span><br>          &#123;<br>          System.out.println(f);<br>          &#125;<br>          &#125;<br>         &#125;<br>         &#125;<br><br><br></code></pre></td></tr></table></figure><p><strong>FileNameFilter过滤器的使用和Lambda优化程序</strong></p><p>当接口只有一个抽象方法的时候叫函数式接口此时可以用Lambda表达式来代替这个接口的实例化对像，要实现那一个抽象方法</p><p>匿名内部类是当这个接口的实例化对象只用一次时可以用来代替，要实现接口的所有抽象方法</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">String</span> []args)</span></span>&#123;<br><span class="hljs-built_in">File</span> file=<span class="hljs-keyword">new</span> <span class="hljs-built_in">File</span>(<span class="hljs-string">&quot;D:\\同步空间\\新建文件夹&quot;</span>);<br><span class="hljs-built_in">getAllFile</span>(file);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">getAllFile</span><span class="hljs-params">(<span class="hljs-built_in">File</span> dir)</span> </span>&#123;;<br> <span class="hljs-built_in">File</span>[]files=dir.<span class="hljs-built_in">listFiles</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">FilenameFilter</span>() &#123;<br></code></pre></td></tr></table></figure><pre><code class="hljs">    @Override    public boolean accept(File dir, String name) &#123;    return new File(dir,name).isDirectory()||name.toLowerCase().endsWith(&quot;.md&quot;);    &#125;      &#125;);//传递过滤器对象    for(File f:files) &#123;    if(f.isDirectory()) &#123;    getAllFile(f);    &#125;    else    &#123;    System.out.println(f);    &#125;    &#125;   &#125;   &#125;</code></pre><h1 id="java的IO"><a href="#java的IO" class="headerlink" title="java的IO"></a>java的IO</h1><h2 id="io概述"><a href="#io概述" class="headerlink" title="io概述"></a>io概述</h2><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918917.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220630092834626"></p><h3 id="字符和Ascii码的转换问题"><a href="#字符和Ascii码的转换问题" class="headerlink" title="字符和Ascii码的转换问题"></a>字符和Ascii码的转换问题</h3><p>字符强转为(int)是获得它的Ascii码值</p><pre><code class="hljs">char a=&#39;a&#39;;int b=(int)a;System.out.println(b);结果：97</code></pre><p>ascii码值强转为char就是获得字符</p><pre><code class="hljs">    int a =97;char b=(char)a;System.out.println(b);结果：a</code></pre><p>将字符1转换为数字1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">char</span> a=<span class="hljs-string">&#x27;1&#x27;</span>;<br>System.out.println(a-<span class="hljs-string">&#x27;0&#x27;</span>);<br>结果：<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h2><p>一切文件数据在存储时，都是以二进制数字的形式保存，都一个一个的字节，那么传输时一样如此。所以，字节流可以传输任意文件数据。在操作流的时候，我们要时刻明确，无论使用什么样的流对象，底层传输的始终为二进制数据</p><p>在Ascii码中一个英文字符占用一个字节，一个汉字字符占用两个字节的空间</p><p>在unicode编码中，一个英文字符占用两个字节一个汉字字符也占用两个字节</p><p>UTF-8中，一个英文字符占用一个字节，一个汉字字符占用三个字节空间</p><h3 id="字节输出流（OutputStream和FileOutputStream介绍）"><a href="#字节输出流（OutputStream和FileOutputStream介绍）" class="headerlink" title="字节输出流（OutputStream和FileOutputStream介绍）"></a>字节输出流（OutputStream和FileOutputStream介绍）</h3><ul><li><p>&#96;&#96;&#96;java</p><ul><li>java.io.OutputStream 字节输出流 这个抽象类是表示字节输出流的所有类的超类</li><li>定义了一些子类共性的成员方法</li><li>public void close() :关于此输出流并释放与此流相关联的任何系统资源</li><li>public void flush():刷新此输出流并强制任何缓冲的输出字节被写出</li><li>public void write(byte[] b):将 b.length字节从指定的字节数组写入此输出流。</li><li>public void write(byte[] b, int off, int len):从指定的字节数组写入 len个字节，从偏移 off开始输出到此输出流。</li><li>pubic void write(int b):将指定的字节写入此输出流。 </li><li>java.io.FileOutputStream extends OutputStream</li><li>FileOutputStream:文件字节输出流</li><li>作用：把内存中的数据给写入到硬盘的文件中</li><li></li><li>构造方法：</li><li>FileOutputStream(File file)<br>创建文件输出流以写入由指定的 File对象表示的文件。<br> FileOutputStream(String name)<br> 创建文件输出流以指定的名称写入文件。<br>构造方法作用<br>1.创建一个FileOutputStream对象<br>2.会根据构造方法中传递的文件&#x2F;文件路径，创建一个空的文件<br>3.会把FileOutputStream对象指向创建好的文件<br> *&#x2F;</li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><br>​     **pubic <span class="hljs-keyword">void</span> <span class="hljs-keyword">write</span>(<span class="hljs-keyword">int</span> b)**<br><br>​            写入数据的原理（内存到硬盘）：<br><br>​            java程序--&gt;jvm(虚拟机)--&gt;os（操作系统）--&gt;os调用写数据的方法--&gt;把数据写入文件夹中<br><br>字节输出流的使用步骤（重点）<br><br>   <span class="hljs-number">1</span>.创建一个FileOutputStream对象，构造方法中传递写入数据的目的地<br><br>   <span class="hljs-number">2</span>.调用FileOutputStream对象中的方法<span class="hljs-keyword">write</span>，把数据写入到文件中<br><br>  <span class="hljs-number">3</span>.释放资源（流使用会占用一定的内存，使用完毕后把内存清空，提供程序效率）<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String[]args) <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-comment">//创建一个FileOutputStream对象，构造方法中传递写入数据的目的地</span><br>FileOutputStream fos=<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;D:\\放乱七八糟\\a.txt&quot;</span>);<br><span class="hljs-comment">//调用FileOutputStream对象中的方法write，把数据写入到文件中</span><br>fos.<span class="hljs-keyword">write</span>(<span class="hljs-number">97</span>);<span class="hljs-comment">//这个只能写入一个字节的大小的内容，97是这个字节对应的ASCII码值</span><br><span class="hljs-comment">//释放资源（流使用会占用一定的内存，使用完毕后把内存清空，提供程序效率）</span><br>fos.close();<br><br>&#125;<br><br>![image-<span class="hljs-number">20220630102639535</span>](https:<span class="hljs-comment">//zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918085.png)</span><br><br>原理就是：<span class="hljs-number">97</span>回先转换为二进制数储存在硬盘（文件）中，当用任何文本编辑器（记事本，notepad）再打开文件的时候，都会查询编码表，把字节转换为字符表示，<span class="hljs-number">0</span>-<span class="hljs-number">127</span>查询ASCII表        其他值：查询系统默认码表（中文windows系统GBK）<br><br>我的电脑记事本查询的是UTF-<span class="hljs-number">8</span><br><br> <br><br>**一次写多个字节的方法**<br><br>**<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-keyword">write</span>(<span class="hljs-keyword">byte</span>[] b):将 b.length字节从指定的字节数组写入此输出流。**<br><br>一次写多个字节： <br><br>​          如果写的第一个字节是正数（<span class="hljs-number">0</span>-<span class="hljs-number">127</span>），那么显示的时候会查询ASCII表<br><br>​          如果写入的第一个字节是负数，那第一个字节会和第二个字节，两个字节组成一个中文显示，查询系统默认码表（中文系统GBK）<br><br>第一个例子<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String[]args) <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-comment">//创建一个FileOutputStream对象，构造方法中传递写入数据的目的地</span><br>FileOutputStream fos=<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;D:\\放乱七八糟\\a.txt&quot;</span>);<br>    <span class="hljs-comment">//调用FileOutputStream对象中的方法write，把数据写入到文件中</span><br><span class="hljs-comment">//在文件中显示100，写入3个字节</span><br><span class="hljs-keyword">byte</span> []bytes= &#123;<span class="hljs-number">49</span>,<span class="hljs-number">48</span>,<span class="hljs-number">48</span>&#125;;<br>fos.<span class="hljs-keyword">write</span>(bytes);<br><span class="hljs-comment">//释放资源</span><br>fos.close();<br><br>&#125;<br><br>第二个例子<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String[]args) <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-comment">//创建一个FileOutputStream对象，构造方法中传递写入数据的目的地</span><br>FileOutputStream fos=<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;D:\\放乱七八糟\\a.txt&quot;</span>);<br>    <span class="hljs-comment">//调用FileOutputStream对象中的方法write，把数据写入到文件中</span><br><span class="hljs-comment">//在文件中显示100，写入3个字节</span><br><span class="hljs-keyword">byte</span> []bytes= &#123;-<span class="hljs-number">65</span>,-<span class="hljs-number">66</span>,-<span class="hljs-number">67</span>,<span class="hljs-number">68</span>,<span class="hljs-number">69</span>&#125;;<br>fos.<span class="hljs-keyword">write</span>(bytes);<br><span class="hljs-comment">//释放资源</span><br>fos.close();<br><br>&#125;<br>文件写入结果：<br>          烤紻E就是前两个加起来组成一个系统默认码，后两个是一个组成一个系统默认码，最后一个时Ascii码<br><br>**<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-keyword">write</span>(<span class="hljs-keyword">byte</span>[] b, <span class="hljs-keyword">int</span> off, <span class="hljs-keyword">int</span> len):从指定的字节数组写入 len个字节，从偏移 off开始输出到此输出流。**<br><br>把字节数组的一部分写入到文件中<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String[]args) <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-comment">//创建一个FileOutputStream对象，构造方法中传递写入数据的目的地</span><br>FileOutputStream fos=<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;D:\\放乱七八糟\\a.txt&quot;</span>);<br>    <span class="hljs-comment">//调用FileOutputStream对象中的方法write，把数据写入到文件中</span><br><span class="hljs-keyword">byte</span> []bytes= &#123;-<span class="hljs-number">65</span>,-<span class="hljs-number">66</span>,-<span class="hljs-number">67</span>,<span class="hljs-number">68</span>,<span class="hljs-number">69</span>&#125;;<br>fos.<span class="hljs-keyword">write</span>(bytes,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>);<span class="hljs-comment">//从字节数组的下标1开始写入三个字节</span><br><span class="hljs-comment">//释放资源</span><br>fos.close();<br><br>&#125;<br><br>写入字符的方法，可以使用String类方法把字符串，转换为字节数组，<span class="hljs-keyword">byte</span> []getBytes()         把字符串转换为字节数组<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String[]args) <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-comment">//创建一个FileOutputStream对象，构造方法中传递写入数据的目的地</span><br>FileOutputStream fos=<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;D:\\放乱七八糟\\a.txt&quot;</span>);<br>             <span class="hljs-keyword">byte</span> []bytes=<span class="hljs-string">&quot;你好&quot;</span>.getBytes();<br>             System.out.<span class="hljs-keyword">println</span>(Arrays.toString(bytes));<span class="hljs-comment">//结果[-60, -29, -70, -61]</span><br>             <span class="hljs-comment">//中文在eclipse中默认编码是GBK编码所以是一个中文两个字节</span><br>             <span class="hljs-comment">//  如果写入的第一个字节是负数，那第一个字节会和第二个字节，两个字节组成一个中文显示，查询系统默认码表（中文系统GBK）</span><br>             fos.<span class="hljs-keyword">write</span>(bytes);<br>             fos.close();<br><br>&#125;<br>文件写入结果：<br>          你好<br><br>**数据的追加写和换行写**<br><br>上面的方法都是将文件中原有的东西覆盖掉<br><br>下面是追加写,续写<br><br>FileOutputStream(String name,  <span class="hljs-keyword">boolean</span> <span class="hljs-keyword">append</span>)创建文件输出流以指定的名称写入文件。<br><br>FileOutputStream(<span class="hljs-keyword">File</span> <span class="hljs-keyword">file</span>,  <span class="hljs-keyword">boolean</span> <span class="hljs-keyword">append</span>)创建文件输出流以写入由指定的 <span class="hljs-keyword">File</span>对象表示的文件。<br><br>​       参数：<br><br>​                 String name <span class="hljs-keyword">File</span> <span class="hljs-keyword">file</span>：写入数据的目的地<br><br>​                 <span class="hljs-keyword">boolean</span> <span class="hljs-keyword">append</span> ：追加写开关  <span class="hljs-keyword">true</span> ：创建对象不会覆盖源文件，继续在文件的末尾追加写数据<br><br>​                                                                         <span class="hljs-keyword">false</span>：创建一个新文件，覆盖原文件，在新文件中重新写数据<br><br><span class="hljs-comment">//创建一个FileOutputStream对象，构造方法中传递写入数据的目的地</span><br>FileOutputStream fos=<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;D:\\放乱七八糟\\a.txt&quot;</span>,<span class="hljs-keyword">true</span>);<span class="hljs-comment">//追加写</span><br>fos.<span class="hljs-keyword">write</span>(<span class="hljs-string">&quot;你好&quot;</span>.getBytes());<br>fos.close();<br>源文件内容：你好<br>程序执行之后：你好你好<br><br>**换行**<br><br>写换行符号：windows   \r\n<br><br>​                       linux:/n<br><br>​                       mac:/r<br><br><span class="hljs-comment">//创建一个FileOutputStream对象，构造方法中传递写入数据的目的地</span><br>FileOutputStream fos=<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;D:\\放乱七八糟\\a.txt&quot;</span>,<span class="hljs-keyword">true</span>);<span class="hljs-comment">//追加写</span><br>     <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">10</span>;i++) &#123;<br>fos.<span class="hljs-keyword">write</span>(<span class="hljs-string">&quot;你好&quot;</span>.getBytes());<br>     fos.<span class="hljs-keyword">write</span>(<span class="hljs-string">&quot;\r\n&quot;</span>.getBytes());<br>     &#125;<br>fos.close();<br>文件添加结果：<br>你好<br>你好<br>你好<br>你好<br>你好<br>你好<br>你好<br>你好<br>你好<br><br><br><br>​<br><br>### 字节输入流（InputStream）<br><br>FileInputStream和InputStream的介绍<br><br>java.io.InputStream抽象类时表示字节输入流的所有类的超类，可以读取字节信息到内存中，它定义了字节输入流的基本共性功能方法<br><br>定义了所有子类的共性的方法：<br><br>​              <span class="hljs-keyword">int</span>  `<span class="hljs-keyword">read</span>()`  从输入流读取数据的下一个字节。返回读取的那一个字节的内容<br><br>​               <span class="hljs-keyword">int</span>  `<span class="hljs-keyword">read</span>(<span class="hljs-keyword">byte</span>[] b)`  从输入流读取一些字节数，并将它们存储到缓冲区 `b` 。返回读取的字节数，读取的内容储存在参数数组<br><br>​               <span class="hljs-keyword">void</span> `close()`  关闭此输入流并释放与流相关联的任何系统资源。<br><br>java.io.FileInputStream <span class="hljs-keyword">extends</span> InputStream<br><br>FileInputStream  :文件字节输入流<br><br>作用：把硬盘文件中的数据，读取到内存中使用<br><br><br><br>构造方法：`FileInputStream(String name)` <br><br>- - `FileInputStream(<span class="hljs-keyword">File</span> <span class="hljs-keyword">file</span>)` <br>  - 参数：读取文件的数据源<br>  - ​              String name是文件的路径<br>  - ​              <span class="hljs-keyword">File</span> <span class="hljs-keyword">file</span>就是一个文件对象<br>  - 构造方法的作用：<br>  - ​             <span class="hljs-number">1</span>.会创建一个FileInputStream对象<br>  - ​              <span class="hljs-number">2</span>.会把FileInputStream对象指定构造方法中要读取的文件<br><br>  <br><br>读取数据的原理（硬盘--&gt;内存）：<br><br>​          java程序--&gt;jvm--&gt;os--&gt;os读取数据的方法--&gt;读取文件<br><br>字节输入流的使用步骤：<br><br>​               <span class="hljs-number">1</span>.创建FileInputStream对象，构造方法中绑定要读取的数据源<br><br>​                <span class="hljs-number">2</span>.使用FileInputStream对象中的方法<span class="hljs-keyword">read</span>，读取文件<br><br>​                <span class="hljs-number">3</span>.释放资源<br><br>```java<br><span class="hljs-comment">//1.创建FileInputStream对象，构造方法中绑定要读取的数据源</span><br>FileInputStream fos=<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;D:\\放乱七八糟\\a.txt&quot;</span>);<br><span class="hljs-comment">//2.使用FileInputStream对象中的方法read，读取文件</span><br><span class="hljs-keyword">int</span> len=fos.<span class="hljs-keyword">read</span>();<span class="hljs-comment">//读取文件中的一个字节并返回，读取到文件末尾返回-1</span><br>     <span class="hljs-comment">//读取读入的那一个字节</span><br>System.out.<span class="hljs-keyword">println</span>(len);<br>len=fos.<span class="hljs-keyword">read</span>();<span class="hljs-comment">//每次read文件中的文件指针会向后移动一位</span><br>System.out.<span class="hljs-keyword">println</span>(len);<br>len=fos.<span class="hljs-keyword">read</span>();<br>System.out.<span class="hljs-keyword">println</span>(len);<br>len=fos.<span class="hljs-keyword">read</span>();<br>System.out.<span class="hljs-keyword">println</span>(len);<br>len=fos.<span class="hljs-keyword">read</span>();<br>System.out.<span class="hljs-keyword">println</span>(len);<br>len=fos.<span class="hljs-keyword">read</span>();<br>System.out.<span class="hljs-keyword">println</span>(len);<br>fos.close();<br><br></code></pre></td></tr></table></figure></li></ul><p>&#x2F;* 发现以上读取文件是一个重复的过程，所以可以使用循环优化，不知道文件中有多少字节，使用while循环，while循环结束条件，读取到-1时结束*&#x2F;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">FileInputStream fos=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\a.txt&quot;</span>);<br>       <span class="hljs-type">int</span> len=<span class="hljs-number">0</span>;<br>       <span class="hljs-keyword">while</span>((len=fos.read())!=-<span class="hljs-number">1</span>) &#123;<br>       System.out.println((<span class="hljs-type">char</span>)(len));<br>       &#125;<br>       fos.close();<br><br></code></pre></td></tr></table></figure><p>字节输入流一次读取一个字节的原理</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918568.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220630172509475"></p><p>java程序–&gt;jvm–&gt;os–&gt;os读取数据的方法–&gt;读取文件</p><p>每次读取结束，文件下标就会向后移一个</p><p><strong>字节输入流一次读取多个字节</strong></p><p>方法的参数byte[]作用</p><p>​         起到缓冲的作用，存储每次读取到的多个字节</p><p>​         数组的长度一般定义为1024（1kb）或者是1024的整数倍</p><p>int的返回值是什么</p><p>​          每次读取到的有效字节个数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java">   <span class="hljs-type">int</span>  `read(<span class="hljs-type">byte</span>[] b)`  从输入流读取一些字节数，并将它们存储到缓冲区 `b` 。<br>       返回值是读入了多少个字节<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[]args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>FileInputStream fis=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\a.txt&quot;</span>);<br><span class="hljs-comment">//读取文件，指定读取多少字节</span><br><span class="hljs-type">byte</span> []bytes=<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">2</span>];<br><span class="hljs-type">int</span> len=fis.read(bytes);<br>System.out.println(len);<span class="hljs-comment">//2</span><br>System.out.println(Arrays.toString(bytes));<span class="hljs-comment">//65,66</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * String类的构造方法</span><br><span class="hljs-comment"> * String(byte[] bytes) </span><br><span class="hljs-comment"></span><br><span class="hljs-comment">通过使用平台的默认字符集解码指定的字节数组来构造新的 String 。</span><br><span class="hljs-comment">String(byte[] bytes, int offset, int length) </span><br><span class="hljs-comment">通过使用平台的默认字符集解码指定的字节子阵列来构造新的 String offset是开始的下标，length是长度。</span><br><span class="hljs-comment"> */</span><br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes));<span class="hljs-comment">//AB</span><br><br>len=fis.read(bytes);<br>System.out.println(len);<span class="hljs-comment">//2,返回的是读到的字节的个数，没读到返回-1</span><br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes));<span class="hljs-comment">//CD</span><br>len=fis.read(bytes);<br>System.out.println(len);<span class="hljs-comment">//1</span><br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes));<span class="hljs-comment">//ED</span><br>len=fis.read(bytes);<br>System.out.println(len);<span class="hljs-comment">//-1</span><br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes));<span class="hljs-comment">//ED</span><br>fis.close();<br><br>   <br></code></pre></td></tr></table></figure><pre><code class="hljs">&#125;</code></pre><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918538.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220630194653667"></p><p>第三次读取时只读取到一个E，故len返回1，而且byte数组的第二个位置没有被重新覆盖掉所以剩下的东西还是D，所以第三次输出数组还是ED，第四次没有东西读，所以返回-1结束标记，数组里还是上次的东西DE</p><p>循环优化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[]args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>FileInputStream fis=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\a.txt&quot;</span>);<br><span class="hljs-comment">//读取文件，指定读取多少字节</span><br><span class="hljs-type">byte</span> []bytes=<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br><span class="hljs-type">int</span> len=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>((len=fis.read(bytes))!=-<span class="hljs-number">1</span>) &#123;<br><span class="hljs-comment">//String(byte[] bytes, int offset, int length) </span><br><span class="hljs-comment">//通过使用平台的默认字符集解码指定的字节子阵列来构造新的 String offset是开始的下标，length是长度。</span><br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes,<span class="hljs-number">0</span>,<span class="hljs-number">5</span>));<br>&#125;<br>fis.close();<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="字节流练习"><a href="#字节流练习" class="headerlink" title="字节流练习"></a>字节流练习</h3><p>复制文件</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String []args) <span class="hljs-keyword">throws</span> IOException &#123;<br>FileInputStream fis=<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;C:\\Users\\#赵梓皓&amp;\\Pictures\\Default.jpg&quot;</span>);<br>FileOutputStream fos=<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;D:\\放乱七八糟\\a.jpg&quot;</span>);<br><span class="hljs-keyword">int</span> len=<span class="hljs-number">0</span>;<br>读取之后再写入<br><span class="hljs-keyword">while</span>((len=fis.<span class="hljs-keyword">read</span>())!=-<span class="hljs-number">1</span>) &#123;<br>fos.<span class="hljs-keyword">write</span>(len);<br><br>&#125;<br>fos.close();<span class="hljs-comment">//先关写的</span><br>fis.close();<span class="hljs-comment">//后关闭读的，如果写完了，肯定读取完毕了</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>更高效率</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">FileInputStream fis=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;C:\\Users\\#赵梓皓&amp;\\Pictures\\Default.jpg&quot;</span>);<br>FileOutputStream fos=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\a.jpg&quot;</span>);<br><span class="hljs-type">int</span> len=<span class="hljs-number">0</span>;<br><span class="hljs-type">byte</span> []bytes=<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br><span class="hljs-keyword">while</span>((len=fis.read(bytes))!=-<span class="hljs-number">1</span>) &#123;<br>fos.write(bytes,<span class="hljs-number">0</span>,len);<br><br>&#125;<br>fos.close();<span class="hljs-comment">//先关写的</span><br>fis.close();<span class="hljs-comment">//后关闭读的，如果写完了，肯定读取完毕了</span><br><br>&#125;<br></code></pre></td></tr></table></figure><pre><code class="hljs">public static void main(String []args) throws IOException &#123;    long s=System.currentTimeMillis();    FileInputStream fis=new FileInputStream(&quot;C:\\Users\\#赵梓皓&amp;\\Pictures\\Default.jpg&quot;);    FileOutputStream fos=new FileOutputStream(&quot;D:\\放乱七八糟\\a.jpg&quot;);    int len=0;    byte []bytes=new byte[1024];    while((len=fis.read(bytes))!=-1) &#123;        fos.write(bytes,0,len);            &#125;    fos.close();//先关写的    fis.close();//后关闭读的，如果写完了，肯定读取完毕了    long e=System.currentTimeMillis();    System.out.println(&quot;复制文件共耗时&quot;+(e-s)+&quot;毫秒&quot;);&#125;</code></pre><h2 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h2><p>一个中文 </p><p>​            GBK:占用两个字节</p><p>​            UTF-8：占用3个字节</p><p>所以在从硬盘文件中读入中文时没有很好的办法读入中文</p><p>使用字节流读取中文文件会产生乱码</p><h3 id="字符输入流Reader和FileReader类"><a href="#字符输入流Reader和FileReader类" class="headerlink" title="字符输入流Reader和FileReader类"></a>字符输入流Reader和FileReader类</h3><p>Reader定义 的一些子类公用的方法,它是字符输入流最顶级的父类</p><ul><li><ul><li><code>int read()</code>  读一个字符并返回</li></ul></li><li><ul><li><code>int read(char[] cbuf)</code>  将字符读入数组  用来一次读取多个字符，返回读取的字符个数。</li><li>void close()   关闭流并释放与之相关联的任何系统资源。</li></ul></li></ul><p>java.io.FileReader extends InputStreamReader extends Reader</p><p>​       FileReader:文件字符输入流</p><p>​       作用：把硬盘文件中的数据以字符的方式读取到内存中</p><p>构造方法：</p><p>​                 1.<code>FileReader(String fileName)</code>  创建一个新的 <code>FileReader</code> ，给定要读取的文件的名称。</p><p>​                  2.<code>FileReader(File file)</code>  创建一个新的 <code>FileReader</code> ，给出 <code>File</code>读取。</p><p>作用：创建一个FileReader对象</p><p>​            会把FileReader对象指向要读取的文件</p><p>​     参数：String fileName和File file是数据来源</p><pre><code class="hljs">#### 读取字符数据（以及编码问题）</code></pre><p>一次读取一个字节</p><p><code>int read()</code>  读一个字符并返回   每次只读取一个字符无论是中文还是英文还是数字</p><pre><code class="hljs">public static void main(String []args) throws IOException &#123;    FileReader fis=new FileReader(&quot;D:\\放乱七八糟\\File.txt&quot;);    int len=0;    while((len=fis.read())!=-1) &#123;        System.out.println((char)len);    &#125;    fis.close();&#125;</code></pre><p>这里出现了一点小插曲，因为我的电脑记事本默认是UTF-8编码，但eclipse默认编码是GBK所以会出现错误</p><p>我把电脑记事本编码转换为ASNI也就是默认是windows中文默认的GBK编码然后就可以实现了</p><p><code>int read(char[] cbuf)</code>  将字符读入数组  用来一次读取多个字符，返回读取的字符个数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>FileReader fis=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\File.txt&quot;</span>);<br><span class="hljs-type">char</span>[] cs=<span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">1024</span>];<span class="hljs-comment">//存储读取到的多个字符</span><br><span class="hljs-type">int</span> len=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>((len=fis.read(cs))!=-<span class="hljs-number">1</span>) &#123;<br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(cs));<br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(cs,<span class="hljs-number">0</span>,len));<span class="hljs-comment">//0是开始的索引，len是转换的个数</span><br>&#125;<br>fis.close();<br>&#125;<br>读取文件的结果<br>    <span class="hljs-number">123</span>你好<br>    <span class="hljs-number">123</span>你好<br></code></pre></td></tr></table></figure><h3 id="字符输出流"><a href="#字符输出流" class="headerlink" title="字符输出流"></a>字符输出流</h3><p>Writer类和FileWriter类的介绍</p><p>Writer是字符输出流最顶层的父类</p><p>定义了一些共性的方法</p><ul><li><ul><li><code>void write(String str)</code>  写一个字符串</li></ul></li><li><ul><li><code>void write(String str,  int off, int len)</code>  写一个字符串的一部分。</li></ul></li><li><ul><li><code>void write(int c)</code>  写一个字符</li></ul></li><li><ul><li><code>void flush()</code>  刷新流</li></ul></li></ul><p>子类：FileWriter</p><p>java.io.FileWriter extends OutputStreamWriter extends Writer</p><p>FileWriter:文件字符输出流</p><p>作用：把内存中的字符数据写入到文件中</p><p>构造方法：</p><p>​         <code>FileWriter(File file)</code>  给一个File对象构造一个FileWriter对象。 </p><p>​         <code>FileWriter(String fileName)</code>  构造一个给定文件名的FileWriter对象。</p><p>​         参数：写入数据的目的地</p><p>​                 String fileName：文件的路径 </p><p>​                 File file：是一个文件</p><p>​      构造方法的作用：</p><p>​                   1.会创建一个FileWriter的对象</p><p>​                   2.会根据构造方法中传递的文件&#x2F;文件的路径，创建文件</p><p>​                   3.会把FileWriter对象指向创建好的文件</p><p><strong>写出单个字符到文件</strong>      </p><p>字符输出流的使用步骤：</p><p>​           1.创建FileWriter对象，构造方法中绑定要写入数据的目的地</p><p>​             2.使用FileWriter中的方法write，把数据写到内存缓冲区中（字符转换字节的过程）</p><p>​             3.使用FileWriter中的方法flush，把内存缓冲区中的数据，刷新到文件中</p><p>​            4.释放资源（会先把内存缓冲区的数据刷新到文件中）所以其实不用flush</p><p>如果没有调用flush或者close方法那么文件中将不会写入内容，因为write方法是把数据写到内存缓冲区</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>     <span class="hljs-comment">//1.创建FileWriter对象，构造方法中绑定要写入数据的目的地</span><br>     FileWriter fw=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\File.txt&quot;</span>);<br>     <span class="hljs-comment">//   2.使用FileWriter中的方法write，把数据写到内存缓冲区中（字符转换字节的过程）</span><br>     fw.write(<span class="hljs-number">97</span>);<br>     <span class="hljs-comment">//3 3.使用FileWriter中的方法flush，把内存缓冲区中的数据，刷新到文件中</span><br>     fw.flush();<br>     fw.close();<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>flush方法和close方法的区别</strong></p><p>flush：刷新缓冲区，流对象可以继续使用</p><p>close：先刷新缓冲区，然后通知系统释放资源，流对象不可以再被使用了</p><p><strong>字符输出流写数据的其他方法</strong></p><p>void write(char []cbuf)写入字符数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>FileWriter fw=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\File.txt&quot;</span>);<br><span class="hljs-type">char</span> []cs= &#123;<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>&#125;;<br>fw.write(cs);<br>fw.close();<br>&#125;<br></code></pre></td></tr></table></figure><p>void write(char []cbuf,int off,int len)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>FileWriter fw=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\File.txt&quot;</span>);<br><span class="hljs-type">char</span> []cs= &#123;<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>&#125;;<br>fw.write(cs,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>);<span class="hljs-comment">//从下标为零开始，读取两个字符</span><br>fw.close();<br>&#125;<br></code></pre></td></tr></table></figure><p>void write(String str)写入字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>FileWriter fw=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\File.txt&quot;</span>);<br>String a=<span class="hljs-string">&quot;你好&quot;</span>;<br>fw.write(a);<br>fw.close();<br>&#125;<br></code></pre></td></tr></table></figure><p>void write(String str,int off,int len)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>FileWriter fw=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\File.txt&quot;</span>);<br>String a=<span class="hljs-string">&quot;你好我是java程序员&quot;</span>;<br>fw.write(a,<span class="hljs-number">0</span>,<span class="hljs-number">4</span>);<span class="hljs-comment">//从下标为零然后读取四个字符</span><br>fw.close();<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>字符输出流写数据的续写和换行</strong></p><p>续写：</p><p>​          下面是追加写,续写</p><p>FileWriter(String name,  boolean append)创建文件输出流以指定的名称写入文件。</p><p>FileWriter(File file,  boolean append)创建文件输出流以写入由指定的 File对象表示的文件。</p><p>​       参数：</p><p>​                 String name File file：写入数据的目的地</p><p>​                 boolean append ：追加写开关  true ：创建对象不会覆盖源文件，继续在文件的末尾追加写数据</p><p>​                                                                         false：创建一个新文件，覆盖原文件，在新文件中重新写数据</p><p>换行：换行符号</p><p>​            windows：\r\n</p><p>​             Linux:&#x2F;n</p><p>​             mac:&#x2F;r</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">FileWriter fw=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\File.txt&quot;</span>,<span class="hljs-literal">true</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++) &#123;<br>fw.write(<span class="hljs-string">&quot;HelloWorld&quot;</span>+i+<span class="hljs-string">&quot;\r\n&quot;</span>);<br>&#125;<br>fw.close();<br>&#125;<br>文件内容：<br>    你好我是HelloWorld0<br>HelloWorld1<br>HelloWorld2<br>HelloWorld3<br>HelloWorld4<br>HelloWorld5<br>HelloWorld6<br>HelloWorld7<br>HelloWorld8<br>HelloWorld9<br><br></code></pre></td></tr></table></figure><h2 id="IO异常的处理"><a href="#IO异常的处理" class="headerlink" title="IO异常的处理"></a>IO异常的处理</h2><p>fw.close要放在finally中因为程序无论是否报错都得有这个流的关闭</p><p>同时fw.close也有异常，所以在fianally里要嵌套一个trycatch</p><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs wren"><span class="hljs-variable">public</span> <span class="hljs-keyword">static</span> <span class="hljs-variable">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">String</span> []<span class="hljs-params">args</span>) &#123;<br><span class="hljs-comment">//提高变量fw的作用域，让finally可以使用</span><br><span class="hljs-comment">//变量在定义的时候可以没有值，但是使用的时候必须有值</span><br><span class="hljs-comment">//如果下面new执行失败了，则fw没有值，fw.close()会报错，所以</span><br><span class="hljs-title class_">FileWriter</span> <span class="hljs-variable">fw</span><span class="hljs-operator">=</span><span class="hljs-literal">null</span>;<br><span class="hljs-title function_">try</span> &#123;<br><span class="hljs-comment">//可能会产出异常的代码</span><br> <span class="hljs-variable">fw</span><span class="hljs-operator">=</span><span class="hljs-variable">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;w:<span class="hljs-char escape_">\\</span>放乱七八糟<span class="hljs-char escape_">\\</span>File.txt&quot;</span>,<span class="hljs-literal">true</span>);<br><span class="hljs-keyword">for</span>(int <span class="hljs-variable">i</span><span class="hljs-operator">=</span><span class="hljs-number">0</span>;<span class="hljs-variable">i</span><span class="hljs-operator">&lt;</span><span class="hljs-number">10</span>;<span class="hljs-variable">i</span><span class="hljs-operator">+</span><span class="hljs-operator">+</span>) &#123;<br><span class="hljs-variable">fw</span>.<span class="hljs-property">write</span>(<span class="hljs-string">&quot;HelloWorld&quot;</span><span class="hljs-operator">+</span><span class="hljs-variable">i</span><span class="hljs-operator">+</span><span class="hljs-string">&quot;<span class="hljs-char escape_">\r</span><span class="hljs-char escape_">\n</span>&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-title function_">catch</span>(<span class="hljs-params">IOException</span> <span class="hljs-params">e</span>) &#123;<br><span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-property">println</span>(<span class="hljs-variable">e</span>);<br>&#125;<br><span class="hljs-title function_">finally</span> &#123;<br><span class="hljs-comment">//一定会指定的代码</span><br><span class="hljs-comment">//创建对象失败了，fw的默认值就是null，null是不能调用方法的，会抛出NullPointerException，需要增加一个判断，不是null再把资源释放</span><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">fw!</span><span class="hljs-operator">=</span><span class="hljs-literal">null</span>)&#123;<br><span class="hljs-title function_">try</span> &#123;<br><span class="hljs-comment">//fw.close方法声明抛出了IOException异常对象，所以我们就处理这个异常对象，要么throws要么trycatch</span><br><span class="hljs-variable">fw</span>.<span class="hljs-property">close</span>();<br>&#125; <span class="hljs-title function_">catch</span> (<span class="hljs-title class_">IOException</span> <span class="hljs-variable">e</span>) &#123;<br><span class="hljs-variable">e</span>.<span class="hljs-property">printStackTrace</span>();<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>JDK7新特性</strong></p><p>在try的后面可以增加一个()，在括号中可以定义流对象</p><p>那么这个流对象的作用域就在try中有效，就不用自己关闭流了</p><p>try中代码执行完毕，会自动把流对象释放，不再写finally</p><p>try(定义流对象;定义流对象…){</p><p>&#x2F;&#x2F;可能会产生异常的代码</p><p>}</p><p>catch(异常类变量 变量名){</p><p>异常处理的逻辑</p><p>}</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//try括号中的这个流只在try中有效，就不用自己关闭流了</span><br><span class="hljs-keyword">try</span> (FileWriter fw=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;d:\\放乱七八糟\\File.txt&quot;</span>,<span class="hljs-literal">true</span>);)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++) &#123;<br>fw.write(<span class="hljs-string">&quot;HelloWorld&quot;</span>+i+<span class="hljs-string">&quot;\r\n&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">catch</span>(IOException e) &#123;<br>System.out.println(e);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a>缓冲流</h2><p>缓冲流都是在基本的流对象基础之上创建来的，就像穿上铠甲的武士一样，相当于是对基本流对象的一种增强</p><p><strong>概述：</strong></p><p>缓冲流也叫做高效流，是对四个基本的FileXxx流的增强，所以也是四个流，按照数据类型分类：</p><p>字节缓冲流：BufferedInputStream，BufferedOutputStream</p><p>字符缓冲流：BufferedReader，BufferedWriter</p><p>缓冲流的基本原理是在创建流对象的时候，会创建一个内置的默认大小的缓冲区数组，通过缓冲区读写，减少系统IO次数，从而提高读写效率</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918850.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220701111555045"></p><p>就是返回文件内容的时候，不是一个一个返回，是把所有的都整到一个缓冲区里然后全部一起以一个数组的形式返回</p><h3 id="字节缓冲输出流"><a href="#字节缓冲输出流" class="headerlink" title="字节缓冲输出流"></a>字节缓冲输出流</h3><p>java.io.BufferedOutputStream extends OutputStream</p><p>继承的父类的共性方法</p><p>OutputStream有的方法它都有</p><p>构造方法</p><ul><li><ul><li><code>BufferedOutputStream(OutputStream out)</code>  创建一个新的缓冲输出流，以将数据写入指定的底层输出流</li></ul></li><li><ul><li><code>BufferedOutputStream(OutputStream out, int size)</code>  创建一个新的缓冲输出流，以便以指定的缓冲区大小将数据写入指定的底层输出流。 </li><li>参数：OutputStream     就是一个字节输出流         我们可以传递FileOutputStream，缓冲流会给FileOutputStream增加一个缓冲区，提高FileOutputStream的的写入效率</li><li>int size：指定缓冲流内部缓冲区的大小，不指定就是默认的大小</li><li>使用步骤：</li><li>​        1.创建FileOutputStream对象，构造方法中绑定要输出的目的地</li><li>​          2.创建BufferedOutputStream对象，构造方法中传递FileOutputStream对象，提高FileOutputStream对象效率</li><li>​        3.使用BufferedOutputStream对象中的方法write，把数据写入到内部缓冲区中</li><li>​           4.使用BufferedOutputStream对象中方法flush，吧内部缓冲区的数据刷新到文件中</li><li>​            5.释放资源（会先调用flush方法刷新数据，所以第四步可以省略）</li><li></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-comment">// 1.创建FileOutputStream对象，构造方法中绑定要输出的目的地</span><br>FileOutputStream fos= <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\File.txt&quot;</span>);<br><span class="hljs-comment">//2.创建BufferedOutputStream对象，构造方法中传递FileOutputStream对象，提高FileOutputStream对象效率</span><br>BufferedOutputStream bos=<span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(fos);<br><span class="hljs-comment">//3.使用BufferedOutputStream对象中的方法write，把数据写入到内部缓冲区中</span><br>bos.write(<span class="hljs-string">&quot;我把数据写入到内部缓冲区中&quot;</span>.getBytes());<br><span class="hljs-comment">//4.使用BufferedOutputStream对象中方法flush，吧内部缓冲区的数据刷新到文件中</span><br>bos.flush();<br><span class="hljs-comment">//5.释放资源（会先调用flush方法刷新数据，所以第四步可以省略）</span><br>bos.close();<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="字节缓冲输入流"><a href="#字节缓冲输入流" class="headerlink" title="字节缓冲输入流"></a>字节缓冲输入流</h3><p>java.io.BufferedInputStream extends InputStream</p><p>BufferedInputStream:字节缓冲输入流</p><p>所有InputStream有的方法他都有</p><p>构造方法</p><ul><li><ul><li><code>BufferedInputStream(InputStream in)</code>  创建一个 <code>BufferedInputStream</code>并保存其参数，输入流 <code>in</code>  ，供以后使用。</li></ul></li><li><ul><li><code>BufferedInputStream(InputStream in, int size)</code>  创建 <code>BufferedInputStream</code>具有指定缓冲区大小，并保存其参数，输入流  <code>in</code> ，供以后使用</li></ul></li></ul><p>参数; </p><p>​           InputStream in:字节输入流</p><p>​                     我们可以传递FileInputStream，缓冲区会给FileInputStream增加一个缓冲区，提高FileInputStream的读取效率</p><p>使用步骤：</p><p>​         1.创建一个FileInputStream对象，构造方法中绑定要读取的数据源</p><p>​            2.创建BufferedInputStream对象，构造方法中传递FileInputStream对象，提高FileInputStream对象的读取效率</p><p>​          3.使用BufferedInputStream对象中的方法read()，读取文件</p><p>​           4.释放资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-comment">//1.创建一个FileInputStream对象，构造方法中绑定要读取的数据源</span><br>FileInputStream fis=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\File.txt&quot;</span>);<br><span class="hljs-comment">//2.创建BufferedInputStream对象，构造方法中传递FileInputStream对象，提高FileInputStream对象的读取效率</span><br>BufferedInputStream bis=<span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(fis);<br><span class="hljs-comment">//  3.使用BufferedInputStream对象中的方法read()，读取文件</span><br><span class="hljs-type">int</span> len=<span class="hljs-number">0</span>;<span class="hljs-comment">//记录每次读取到的字节</span><br><span class="hljs-keyword">while</span>((len=bis.read())!=-<span class="hljs-number">1</span>) &#123;<br>System.out.println(len);<br>&#125;<br>bis.close();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-comment">//1.创建一个FileInputStream对象，构造方法中绑定要读取的数据源</span><br>FileInputStream fis=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\File.txt&quot;</span>);<br><span class="hljs-comment">//2.创建BufferedInputStream对象，构造方法中传递FileInputStream对象，提高FileInputStream对象的读取效率</span><br>BufferedInputStream bis=<span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(fis);<br><span class="hljs-comment">//  3.使用BufferedInputStream对象中的方法read()，读取文件</span><br><span class="hljs-type">int</span> len=<span class="hljs-number">0</span>;<span class="hljs-comment">//记录每次读取的有效字节个数</span><br><span class="hljs-type">byte</span>[] bytes=<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br><span class="hljs-keyword">while</span>((len=bis.read(bytes))!=-<span class="hljs-number">1</span>) &#123;<span class="hljs-comment">//最后这个-1是不会返回给len的</span><br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes,<span class="hljs-number">0</span>,len));<br>&#125;<br>bis.close();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="用缓冲流来复制文件"><a href="#用缓冲流来复制文件" class="headerlink" title="用缓冲流来复制文件"></a>用缓冲流来复制文件</h3><p>速度变得更快，可见效率变得更高</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span>System.currentTimeMillis();<br>FileInputStream fis=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;C:\\Users\\#赵梓皓&amp;\\Pictures\\Default.jpg&quot;</span>);<br>BufferedInputStream bis=<span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(fis);<br>FileOutputStream fos=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\a.jpg&quot;</span>);<br>BufferedOutputStream bos=<span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(fos);<br><span class="hljs-type">int</span> len=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>((len=bis.read())!=-<span class="hljs-number">1</span>) &#123;<br>bos.write(len);<br>&#125;<br><br>bos.close();<br>bis.close();<br><span class="hljs-type">long</span> end1=System.currentTimeMillis();<br>System.out.println(<span class="hljs-string">&quot;耗时&quot;</span>+(end1-end)+<span class="hljs-string">&quot;毫秒&quot;</span>);<br><br>&#125;<br>耗时<span class="hljs-number">42</span>毫秒<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span>System.currentTimeMillis();<br>FileInputStream fis=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;C:\\Users\\#赵梓皓&amp;\\Pictures\\Default.jpg&quot;</span>);<br>BufferedInputStream bis=<span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(fis);<br>FileOutputStream fos=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\a.jpg&quot;</span>);<br>BufferedOutputStream bos=<span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(fos);<br><span class="hljs-type">int</span> len=<span class="hljs-number">0</span>;<br><span class="hljs-type">byte</span> []bytes=<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br><span class="hljs-keyword">while</span>((len=bis.read(bytes))!=-<span class="hljs-number">1</span>) &#123;<br>bos.write(bytes,<span class="hljs-number">0</span>,len);<br>&#125;<br><br>bos.close();<br>bis.close();<br><span class="hljs-type">long</span> end1=System.currentTimeMillis();<br>System.out.println(<span class="hljs-string">&quot;耗时&quot;</span>+(end1-end)+<span class="hljs-string">&quot;毫秒&quot;</span>);<br>&#125;<br>耗时<span class="hljs-number">4</span>毫秒<br></code></pre></td></tr></table></figure><h3 id="字符缓冲输出流"><a href="#字符缓冲输出流" class="headerlink" title="字符缓冲输出流"></a>字符缓冲输出流</h3><ul><li>&#96;&#96;&#96;<br>public class BufferedWriter<br>extends Writer<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><br>有继承自父类的共性成员方法，所有Writer的方法他都有<br><br>构造方法<br><br>- - <span class="hljs-constructor">`BufferedWriter(Writer <span class="hljs-params">out</span>)</span>`  创建使用默认大小的输出缓冲区的缓冲字符输出流<br><br>- - <span class="hljs-constructor">`BufferedWriter(Writer <span class="hljs-params">out</span>,  <span class="hljs-params">int</span> <span class="hljs-params">sz</span>)</span>`  创建一个新的缓冲字符输出流，使用给定大小的输出缓冲区<br><br>参数：<br><br>​           第一个参数是一个字符输出流<br><br>​                    我们可以传递FileWriter，缓冲流会给FileWriter增加一个缓冲区，提高FileWriter的写入效率<br><br>​      第二个参数 <span class="hljs-built_in">int</span> sz：指定缓冲区的大小，不写是默认大小<br><br>特有的成员方法<br><br>- - `void <span class="hljs-keyword">new</span><span class="hljs-constructor">Line()</span>`  写一行行分隔符。<br><br><br><br>方法和上面的都一样，便不再注释<br><br>```java<br>public static void main(String <span class="hljs-literal">[]</span>args) throws IOException &#123;<br>FileWriter fw=<span class="hljs-keyword">new</span> <span class="hljs-constructor">FileWriter(<span class="hljs-string">&quot;D:\\放乱七八糟\\File.txt&quot;</span>)</span>;<br>BufferedWriter bw=<span class="hljs-keyword">new</span> <span class="hljs-constructor">BufferedWriter(<span class="hljs-params">fw</span>)</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++) &#123;<br>bw.write(<span class="hljs-string">&quot;你好&quot;</span>);<br>bw.<span class="hljs-keyword">new</span><span class="hljs-constructor">Line()</span>;<span class="hljs-comment">//用来进行换行</span><br>&#125;<br>bw.flush<span class="hljs-literal">()</span>;<br>bw.close<span class="hljs-literal">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p><strong>BufferedReader字符缓冲输入流</strong></p><p>Java.io.BufferedReader extends Reader</p><p>继承自父类的共性成员方法</p><p>构造方法</p><ul><li><ul><li><code>BufferedReader(Reader in)</code>  创建使用默认大小的输入缓冲区的缓冲字符输入流。</li></ul></li><li><ul><li><code>BufferedReader(Reader in,  int sz)</code>  创建使用指定大小的输入缓冲区的缓冲字符输入流</li></ul></li></ul><p>参数： 字符输入流</p><p>​             我们可以传递FileReader，缓冲流会给FileReader增加一个缓冲区，提高FileReader的读取效率</p><p>特有的成员方法</p><ul><li><ul><li><code>String readLine()</code>  读一行文字。</li></ul></li></ul><p>​           行的终止符浩：通过下列字符之一即可认为某行已经终止：换行(‘\n’),回车(‘\r’),或回车后直接跟着换行(\r\n)</p><p>​        返回值：</p><p>​            包含该行内容的字符串，不包含任何终止符，如果已经达到里流末尾，返回null</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-built_in">String</span> []args) <span class="hljs-keyword">throws</span> IOException &#123;<br>FileReader fr=<span class="hljs-keyword">new </span><span class="hljs-class title_">FileReader</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\File.txt&quot;</span>);<br><span class="hljs-built_in">BufferedReader</span> br=<span class="hljs-keyword">new </span><span class="hljs-class title_">BufferedReader</span>(fr);<br><span class="hljs-built_in">String</span> <span class="hljs-built_in">line</span>;<br><span class="hljs-keyword">while</span>((<span class="hljs-built_in">line</span>=br.<span class="hljs-property">readLine</span>())!=<span class="hljs-literal">null</span>) &#123;<br>System.<span class="hljs-property">out</span>.<span class="hljs-property">println</span>(<span class="hljs-built_in">line</span>);<br>&#125;<br>br.<span class="hljs-property">close</span>();<br>&#125;<br>结果:<br>可以输出所有行<br></code></pre></td></tr></table></figure><h3 id="练习：文本排序（以及转义）"><a href="#练习：文本排序（以及转义）" class="headerlink" title="练习：文本排序（以及转义）"></a>练习：文本排序（以及转义）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>HashMap&lt;String,String&gt; hm=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String,String&gt;();<br>FileReader fr=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\File1.txt&quot;</span>);<br>FileWriter fw=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\File.txt&quot;</span>);<br>BufferedWriter bw=<span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(fw);<br>BufferedReader br=<span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(fr);<br>String line;<br><span class="hljs-keyword">while</span>((line=br.readLine())!=<span class="hljs-literal">null</span>) &#123;<br>String []str=line.split(<span class="hljs-string">&quot;\\.&quot;</span>);<span class="hljs-comment">//split用的是正则表达式.有特殊含义，所以用\转义，而java中\\才是\</span><br>    <span class="hljs-comment">//      \t,\n等有特殊含义所以java中字符串如果出现\会有歧义，所以用\\来吧\替换为一个普通字符，这个普通字符进了正则表达式中又可以把.转义，所以在java中使用正则表达式匹配“\”时就需要写成&quot;\\\\&quot;</span><br>    <span class="hljs-comment">//把切割好的序号和文本内容储存到HashMap集合中(key序号是有序的，会自动排序1，2，3，4)</span><br>hm.put(str[<span class="hljs-number">0</span>], str[<span class="hljs-number">1</span>]);<br>&#125;<br><span class="hljs-keyword">for</span>(String b:hm.keySet()) &#123;<br>String value=hm.get(b);<br>line=b+<span class="hljs-string">&quot;.&quot;</span>+value;<br>bw.write(line);<br>bw.newLine();<br>&#125;<br>bw.close();<br>br.close();<br><br>&#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>文件原内容</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">1.我是<br>2.我才不是<br>4.我真的不是<br>3.你不是<br></code></pre></td></tr></table></figure><p>文件变更以后</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">1.我是<br>2.我才不是<br>3.你不是<br>4.我真的不是<br></code></pre></td></tr></table></figure><p>插曲：我读取内容的文件是utf-8形式的，写入的文件是以gbk打开，所以出现乱码我把utf-8改为gbk就好了</p><h2 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h2><p>字符编码：</p><p>计算机中储存的信息都是用二进制表示的，而我们在屏幕上看到的数字英文标点符号汉字等字符是二进制转换之后的结果</p><p>按照某种规则，将字符储存到计算机中，成为编码，反之，将存储在计算机中的二进制数按照某种规则解析出来称为解码，比如说按照A规则存储，同样按照A规则解析，那么就能显示正确的文本符号，反之，按照A规则存储，按照B规则解析，就会出现乱码</p><p>编码：字符–》字节</p><p>解码：字节–》字符</p><p>字符编码：就是一套自然语言的字符与二进制数之间的对应规则。</p><p>编码表：生活中文字和计算机中二进制的对应规则</p><p>字符集：</p><p>Ascii码字符集–》Ascii码编码</p><p>GBK字符集–》GBK编码</p><p>Unicode字符集–》UTF8编码，UTF16编码，UTF32编码</p><h3 id="转换流原理"><a href="#转换流原理" class="headerlink" title="转换流原理"></a>转换流原理</h3><p>输入转换原理</p><p>用InputStreamReader</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918941.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220701201821452"></p><p>FileReader底层还是FileInputStream将字节转换为字符时只能用IDE默认编码</p><p>而InputStreamReader可以指定字节转换为字符的编码形式</p><p>输出转换原理</p><p>用OutputStreamWriter</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918631.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220701202244844"></p><p>FileWriter的底层实现还是FileOutputStream，只能将字符转换为IDE默认的编码的字节</p><p>如果用OutputStreamWriter  可以指定字符转字节的时候的编码格式</p><p><strong>编码引出的问题FileReader读取文件</strong></p><p>就是FileReader能读取编译器默认编码的文件，比如eclipse时GBK，IDEA是UTF-8</p><p>下面演示在eclipse用FileReader读取UTF-8</p><h3 id="OutputStreamWriter"><a href="#OutputStreamWriter" class="headerlink" title="OutputStreamWriter"></a>OutputStreamWriter</h3><ul><li>OutputStreamWriter是字符的桥梁流以字节流：向其写入的字符编码成使用指定的字节<a href="../../java/nio/charset/Charset.html"><code>charset</code></a> 。  它使用的字符集可以由名称指定，也可以被明确指定，或者可以接受平台的默认字符集。</li><li>java.io.BufferedWriter extends Writer</li><li>Writer中的方法都可以使用</li></ul><p>构造方法：</p><ul><li><ul><li><code>OutputStreamWriter(OutputStream out)</code>  创建一个使用默认字符编码的OutputStreamWriter</li></ul></li><li><ul><li><code>OutputStreamWriter(OutputStream out, String charsetName)</code>  创建一个使用命名字符集的OutputStreamWriter。</li></ul></li></ul><p>参数：OutputStream out：字节输出流，可以用来写转换之后的字节到文件中</p><p>​            String charsetName：指定的编码表的名称，不区分大小写，可以使utf-8&#x2F;UTF-8&#x2F;GBK&#x2F;</p><pre><code class="hljs">public static void main(String []args) throws IOException &#123;    //创建OutputStreamWriter对象，构造方法中传递字节输出流的指定的编码表名称    OutputStreamWriter osw=new OutputStreamWriter(new FileOutputStream(&quot;D:\\放乱七八糟\\File.txt&quot;),&quot;UTF-8&quot;);    //使用OutputStreamWriter对象中的方法write，把字符转换为字节存储缓冲区中（编码）    osw.write(&quot;你好&quot;);    //使用OutputStreamWriter对象中的flush，把内存缓冲区中的字节刷新到文件中（使用字节流写字节）    osw.flush();    //释放内存    osw.close();&#125;将你好写入了UTF-8编码显示的文件</code></pre><h3 id="InputStreamReader"><a href="#InputStreamReader" class="headerlink" title="InputStreamReader"></a>InputStreamReader</h3><p>java.io.InputStreamReader extends Reader</p><ul><li>InputStreamReader是从字节流到字符流的桥：它读取字节，并使用指定的<code>charset</code>将其解码为<a href="../../java/nio/charset/Charset.html">字符</a>  。 它使用的字符集可以由名称指定，也可以被明确指定，或者可以接受平台的默认字符集。</li><li>它由继承字父类的共性的成员方法</li><li>​       Reader有的方法它都有</li></ul><p>构造方法：</p><p>​          <code>InputStreamReader(InputStream in)</code>  创建一个使用默认字符集的InputStreamReader</p><p>​         <code>InputStreamReader(InputStream in, String charsetName)</code>  创建一个使用命名字符集的InputStreamReader</p><p>​          参数：</p><p>​                     InputStream in：字节输入流，用来读取文件中保存的字节</p><p>​                     String charsetName：字符表名称</p><pre><code class="hljs">           public static void main(String []args) throws IOException &#123;    //创建InputStreamWriter对象，构造方法中传递字节输入流和指定的编码表名称    InputStreamReader osw=new InputStreamReader(new FileInputStream(&quot;D:\\放乱七八糟\\File.txt&quot;),&quot;UTF-8&quot;);    //使用InputStreamWriter对象中的方法read()，把字符转换为字节存储缓冲区中（编码）    int len=0;        while((len=osw.read())!=-1) &#123;        System.out.println((char)len);    &#125;    //释放内存    osw.close();&#125;即是文件内容是UTF-8，也可以给他读入到内存中结果：你好</code></pre><p><strong>转换文件编码的练习</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>           InputStreamReader isr=<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\File.txt&quot;</span>),<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>           OutputStreamWriter osw=<span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\File1.txt&quot;</span>),<span class="hljs-string">&quot;GBK&quot;</span>);<br>           <span class="hljs-type">int</span> len=<span class="hljs-number">0</span>;<br>           <span class="hljs-keyword">while</span>((len=isr.read())!=-<span class="hljs-number">1</span>) &#123;<br>           osw.write(len);<br>           &#125;<br>           osw.close();<br>           isr.close();<br>&#125;<br>将UTF-<span class="hljs-number">8</span>的文件转换为GBK编码的文件<br></code></pre></td></tr></table></figure><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><p>ObjectOutputStream extends OutputStream</p><p>ObjectOutputStream：对象的序列化流</p><p>作用：把对象以流的形式写入到文件中保存</p><p>构造方法：  </p><p>​           <code>ObjectOutputStream(OutputStream out)</code>  创建一个写入指定的OutputStream的ObjectOutputStream。</p><p>​                     参数：</p><p>​                                     床第一个字节输出流</p><p>特有的成员方法：</p><p>​               <code>writeObject(Object obj)</code>  将指定的对象写入ObjectOutputStream。</p><p>使用步骤; </p><p>​                     1.创建ObjectOutputStream对象，构造方法中传递字节输出流</p><p>​                      2.使用ObjectOutputStream对象中的writeObject，把对象写入到文件中</p><p>​                        3.释放资源</p><p>类只有实现了Serializable接口才能被序列化或者反序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span>&#123;<br><br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> name;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br><span class="hljs-built_in">this</span>.name = name;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> age;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br><span class="hljs-built_in">this</span>.age = age;<br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Test</span><span class="hljs-params">()</span> &#123;<br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Test</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> age)</span> &#123;<br><span class="hljs-built_in">this</span>.name=name;<br><span class="hljs-built_in">this</span>.age=age;<br>&#125;<br><br><br><br><br>&#125;<br>文件内容以二进制字节来存储所以无法直接打开看<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br><br>ObjectOutputStream oos=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\File.txt&quot;</span>));<br>oos.writeObject(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>(<span class="hljs-string">&quot;小美女&quot;</span>,<span class="hljs-number">18</span>));<br>oos.close();<br>&#125;<br></code></pre></td></tr></table></figure><p>ObjectInputStream extends InputStream</p><p>ObjectInputStream :对象的反序列化流</p><p>作用：把文件中保存的对象以流的形式读取出来使用过</p><p>构造方法:</p><p>​                <code>ObjectInputStream(InputStream in)</code>  创建从指定的InputStream读取的ObjectInputStream</p><p>​                     参数：传入一个字节输入流</p><p>特有的成员方法：</p><p>​                <code>readObject()</code>  从ObjectInputStream读取一个对象。 </p><p>使用步骤：</p><p>1.创建ObjectInputStream对象，构造方法中传递字节输入流</p><p>2.使用ObjectInputStream对象中的方法readObject读取保存对象的文件</p><p>3.释放资源</p><p>4.使用读取出来的对象（打印）</p><p>readObject方法声明抛出了ClassNotFoundException（Class文件找不到异常）当不存在对象的class文件时抛出此异常</p><p>反序列化的前提：</p><p>​                  1.类必须实现Serializable接口</p><p>​                   2.必须存在类对应的class文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br><span class="hljs-comment">//1.创建ObjectInputStream对象，构造方法中传递字节输入流</span><br>ObjectInputStream ois=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\File.txt&quot;</span>));<br><span class="hljs-comment">//2.使用ObjectInputStream对象中的方法readObject读取保存对象的文件</span><br>Object o=ois.readObject();<span class="hljs-comment">//这里必须使用Object类型来接受</span><br>ois.close();<br><span class="hljs-comment">//4.使用读取出来的对象（打印）</span><br>System.out.println(o);<br>Test t=(Test)o;<br>System.out.println(t.getName()+t.getAge());<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>transient关键字</strong></p><p>static关键字:静态关键字</p><p>1.静态优先于非静态加载到内存中（静态优先于对象进入到内存中）</p><p>被static修饰的成员变量不能被序列化的，序列化的都是对象</p><p>private static int age</p><p>oos.writeObject(new Person(“小美女”,18));</p><p>Object o&#x3D;ois.readObject();</p><p>Person{name&#x3D;”小美女”,age&#x3D;0}</p><p>所以静态的不能够被序列化</p><p>transient关键字：瞬态关键字</p><p>​      被transient修饰的成员变量，不能被序列化</p><p>它的功能就是不让某个属性序列化，但是又没有静态的含义</p><h4 id="InvalidClassException异常"><a href="#InvalidClassException异常" class="headerlink" title="InvalidClassException异常"></a>InvalidClassException异常</h4><p>当分别一次序列化和反序列化之后是正常的，但现在你去改了那个序列化的类属性，然后没有对他序列化而是直接反序列化</p><p>就会报InvalidClassException</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918586.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220702095302204"></p><p>就是当你改动了类之后你txt文件中的类的id和你class文件中的id不同就导致不能够反序列化成功</p><p>所以就在类中加一个private static final long serialVersionUID&#x3D;1L;</p><p>这样无论怎么改id都不会变了</p><h4 id="练习：序列化集合"><a href="#练习：序列化集合" class="headerlink" title="练习：序列化集合"></a>练习：序列化集合</h4><p>练习：序列化集合</p><p>​             当我们想在文件中保存多个对象的时候</p><p>​             可以把多个对象储存到一个集合中</p><p>​             对集合进行序列化和反序列化</p><p>分析：</p><p>​          1.定义一个存储Person对象的集合和ArrayList集合</p><p>​            2.往ArrayList集合中存储Person对象</p><p>​             3.创建一个序列化流ObjectOutputStream </p><p>​           4.使用ObjectOutputStream对象中的方法writeObject，对集合进行序列化</p><p>​           5.创建一个反序列化ObjectInputStream对象</p><p>​             6.使用ObjectInput中的方法readObject读取文件中保存的集合</p><p>​            7.把Object类型的集合转换为ArrayList类型</p><p>​          8，遍历这个ArrayList集合</p><p>​        9.释放资源</p><pre><code class="hljs">public static void main(String []args) throws IOException, ClassNotFoundException &#123;// 1.定义一个存储Person对象的集合和ArrayList集合    ArrayList&lt;Test&gt; list=new ArrayList&lt;Test&gt;();    //   2.往ArrayList集合中存储Person对象    list.add(new Test(&quot;张三&quot;,18));    list.add(new Test(&quot;例四&quot;,18));    list.add(new Test(&quot;赵武&quot;,18));    //3.创建一个序列化流ObjectOutputStream     ObjectOutputStream oos=new ObjectOutputStream(new FileOutputStream(&quot;D:\\放乱七八糟\\File.txt&quot;));    //4.使用ObjectOutputStream对象中的方法writeObject，对集合进行序列化    oos.writeObject(list);    // 5.创建一个反序列化ObjectInputStream对象    ObjectInputStream ois=new ObjectInputStream(new FileInputStream(&quot;D:\\放乱七八糟\\File.txt&quot;));    //     6.使用ObjectInput中的方法readObject读取文件中保存的集合    Object o=ois.readObject();    //7.把Object类型的集合转换为ArrayList类型    ArrayList&lt;Test&gt; list2=(ArrayList&lt;Test&gt;)o;    //8，遍历这个ArrayList集合    for(Test p:list2) &#123;        System.out.println(p);    &#125;    //  9.释放资源    ois.close();    oos.close();&#125;</code></pre><h2 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h2><h4 id="重定向标准输入输出"><a href="#重定向标准输入输出" class="headerlink" title="重定向标准输入输出"></a>重定向标准输入输出</h4><p>java.io.PrintStream</p><p>​        <code>PrintStream</code>为另一个输出流添加了功能，即能够方便地打印各种数据值的表示。</p><p>PrintStream特带你：</p><p>​      1.只负责数据的输出，不负责数据的读取</p><p>​       2.与其他输出流不同，PrintStream永远不会抛出IOException</p><p>​       3.有特有的方法，print，println方法</p><p>​                    void print(任意类型的值)</p><p>​                    void println(任意类型的值并换行)</p><p>构造方法：</p><p>​            <code>PrintStream(File file)</code>  输出的目的地是一个文件</p><p>​             <code>PrintStream(OutputStream out)</code>  输出的目的地是一个字节输出流</p><p>​           <code>PrintStream(String fileName)</code>  输出的目的地是一个文件路径</p><p>printStream extends OutputStream</p><p>继承自父类的成员方法</p><p>  注意：</p><p>​         如果使用继承自父类的write方法那么查看数据的时候会查询编码表</p><p>​          如果是用自己特有的方法print&#x2F;println方法写数据，写的数据原样输出</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs gradle">```java<br>用父类的方法会查询编码表<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String []args) <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>PrintStream ps=<span class="hljs-keyword">new</span> PrintStream(<span class="hljs-string">&quot;D:\\放乱七八糟\\File.txt&quot;</span>);<br>ps.<span class="hljs-keyword">write</span>(<span class="hljs-number">97</span>);<br>ps.close();<br>&#125;<br>文件：文件的内容是a<br>```<br><br>用自己的方法是原样输出<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String []args) <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br><br>PrintStream ps=<span class="hljs-keyword">new</span> PrintStream(<span class="hljs-string">&quot;D:\\放乱七八糟\\File.txt&quot;</span>);<br>ps.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;a&quot;</span>);<br>ps.<span class="hljs-keyword">println</span>(<span class="hljs-number">97</span>);<br>ps.<span class="hljs-keyword">println</span>(<span class="hljs-number">100</span>);<br>ps.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;我是&quot;</span>);<br>ps.close();<br>&#125;<br>文件内容是：a<br>              <span class="hljs-number">97</span><br>              <span class="hljs-number">100</span><br>              我是<br></code></pre></td></tr></table></figure><p>可以改变输出语句的目的地（打印流的流向）</p><p>输出语句：默认在控制台输出</p><p>使用System.setOut放法改变输出语句的目的为参数传递的打印流的目的地</p><p>​      static void setOut(printStream out)</p><p>​     <strong>重新分配”标准”输出流</strong></p><p><strong>下面这个是将System.out的输出重定向到文件输出而不是在屏幕上输出</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String []args</span>) throws IOException, ClassNotFoundException</span> &#123;<br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;我在控制台输出&quot;</span>);<br><br>PrintStream ps=<span class="hljs-keyword">new</span> PrintStream(<span class="hljs-string">&quot;D:\\放乱七八糟\\File.txt&quot;</span>);<br>System.setOut(ps);<span class="hljs-comment">//把输出语句的目的地改变为打印流的目的地</span><br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;我在打印流的目的地中输出&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>改变这个输出语句在流里输出</p><p>使用System的setIn()方法将系统标准输入重定向到该文件输入流，不会等待用户输入而是直接输出了文件的内容</p><h1 id="java的多线程详解"><a href="#java的多线程详解" class="headerlink" title="java的多线程详解"></a>java的多线程详解</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>多线程案例：一起开黑打王者荣耀，你给我发消息的时候我也能给你发消息</p><p><strong>多线程：</strong></p><p>可以实现一个并发操作，在一个程序中可以定义多个线程并同时运行它们，每个线程可以执行不同的任务。</p><p><strong>进程（Process）：</strong>在操作系统中运行的程序就是进程，比如你的qq播放器游戏IDE</p><p>进程则是执行程序的一次执行过程，它是一个动态的概念，是系统资源分配的单位</p><p><strong>线程(Thread)：</strong>一个进程可以有多个线程，如视频中同时听声音，看图像，看弹幕等等</p><p>进程可以包含多个线程，一个进程至少有一个Main线程，不然没有存在的意义</p><p>多线程和多任务的区别：<strong>多任务是针对操作系统而言的</strong>，代表操作系统可以同时执行的程序个数；<strong>多线程是针对一个程序而言的</strong>，代表一个程序可以同时执行的线程的个数，每个线程完成不同的任务。</p><p>在一个进程中，如果开辟了多个线程，线程的运行由调度器安排调度，调度器(cpu)是与操作系统紧密相关的，先后顺序是不能人为干预的</p><p>对同一份资源操作时，会存在资源抢夺的问题，需要加入并发控制（10000个人抢100张票必定有人抢不到）</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918083.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220704100010536"></p><h2 id="继承Thread类"><a href="#继承Thread类" class="headerlink" title="继承Thread类"></a>继承Thread类</h2><ul><li>创建一个新的执行线程有两种方法。 一个是将一个类声明为<code>Thread</code>的子类。  这个子类应该重写<code>run</code>类的方法<code>Thread</code> 。  创建线程对象，调用start()方法启动线程</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">//run方法线程体</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">20</span>;i++) &#123;<br>System.out.println(<span class="hljs-string">&quot;我在看书&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br><span class="hljs-comment">//main线程主线程</span><br><span class="hljs-comment">//创建一个线程对象</span><br>Hello testThread=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hello</span>();<br><span class="hljs-comment">//调用start()方法开启线程</span><br>testThread.start();<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">20</span>;i++) &#123;<br>System.out.println(<span class="hljs-string">&quot;我在学习&quot;</span>);<br>&#125;<br>&#125;<br><br><br>&#125;<br>用start方法是开了一条新线程，两条线程同时执行（线程不一定立即执行,cpu调度安排），如果是调用run方法则就是先执行run方法再回到主线程执行<br></code></pre></td></tr></table></figure><p>注意：县城开启不一定立即执行，由cpu调度执行</p><p><strong>网图下载</strong></p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918689.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220704095925383"></p><p>建立多个TestThread2对象，开辟多个线程，同时执行</p><h2 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h2><p>定义MyRunnable类实现Runnable接口</p><p>实现run()方法，编写线程执行体</p><p>创建线程对象，调用start()方法启动线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">//run方法线程体</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">20</span>;i++) &#123;<br>System.out.println(<span class="hljs-string">&quot;我在看书&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br>            <span class="hljs-comment">//创建一个runnable接口的实现类对象</span><br>Hello testThread3=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hello</span>();<br><span class="hljs-comment">//创建线程对象，通过线程对象来开启我们的线程，代理</span><br>Thread thread=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(testThread3);<br>thread.start();<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">20</span>;i++) &#123;<br>System.out.println(<span class="hljs-string">&quot;我在学习&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>小结</strong></p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918647.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220704105709084"></p><p><strong>初始并发问题</strong></p><p>&#x2F;&#x2F;多个线程同时操作同一个对象</p><p>&#x2F;&#x2F;买火车票的例子</p><p>&#x2F;&#x2F;返现问题：多个线程操作同一个资源的情况下，线程不安全，数据紊乱，就是小明老师黄牛党都拿到了第十张票，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> ticketNums=<span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>    <span class="hljs-keyword">if</span>(ticketNums&lt;=<span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">try</span> &#123;<br>Thread.sleep(<span class="hljs-number">200</span>);<span class="hljs-comment">//模拟延时,是当前线程进入休息状态</span><br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br>    System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;--&gt;拿到了第&quot;</span>+ticketNums--+<span class="hljs-string">&quot;票&quot;</span>);<br>    <br><br>    &#125;<br>    &#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br>Hello ticket=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hello</span>();<br><span class="hljs-comment">//Thread后面的第二个参数是这个线程的名字</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(ticket,<span class="hljs-string">&quot;小明&quot;</span>).start();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(ticket,<span class="hljs-string">&quot;老师&quot;</span>).start();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(ticket,<span class="hljs-string">&quot;黄牛党&quot;</span>).start();<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="龟兔赛跑"><a href="#龟兔赛跑" class="headerlink" title="龟兔赛跑"></a>龟兔赛跑</h2><p>相当于乌龟和兔子是两条线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> hello;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br><span class="hljs-keyword">private</span> String winner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">100</span>;i++) &#123;<br><span class="hljs-comment">//模拟兔子休息</span><br><span class="hljs-keyword">if</span>(Thread.currentThread().getName().equals(<span class="hljs-string">&quot;兔子&quot;</span>)&amp;&amp;i%<span class="hljs-number">10</span>==<span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>Thread.sleep(<span class="hljs-number">2</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br><span class="hljs-comment">//判断比赛是否结束</span><br><span class="hljs-type">boolean</span> flag=gameOver(i);<br><span class="hljs-comment">//如果比赛结束了，就停止程序</span><br><span class="hljs-keyword">if</span>(flag) &#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;--&gt;跑了&quot;</span>+i+<span class="hljs-string">&quot;步&quot;</span>);<br><br><br><br>&#125;<br><br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">gameOver</span><span class="hljs-params">(<span class="hljs-type">int</span> step)</span> &#123;<br><span class="hljs-comment">//判断是否存在胜利者</span><br><span class="hljs-keyword">if</span>(winner!=<span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">if</span>(step&gt;=<span class="hljs-number">100</span>) &#123;<br>winner=Thread.currentThread().getName();<br>System.out.println(<span class="hljs-string">&quot;winner is&quot;</span>+winner);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br>Hello race=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hello</span>();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(race,<span class="hljs-string">&quot;兔子&quot;</span>).start();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(race,<span class="hljs-string">&quot;乌龟&quot;</span>).start();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="实现Callable接口"><a href="#实现Callable接口" class="headerlink" title="实现Callable接口"></a>实现Callable接口</h2><p>好处：1.可以定义返回值       2.可以抛出异常</p><p>t1就是实现Callable接口的类的实例化对象</p><p>要重写call方法，可以自己设定它的返回值和哪个Collable接口的泛型类型一致</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918369.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220704144914060"></p><h2 id="静态代理模式"><a href="#静态代理模式" class="headerlink" title="静态代理模式"></a>静态代理模式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> hello;<br><span class="hljs-comment">//静态代理模式：</span><br><span class="hljs-comment">//真实对象和代理对象都要实现同一个接口</span><br><span class="hljs-comment">//代理对象要代理真实角色</span><br><span class="hljs-comment">//好处：</span><br>        <span class="hljs-comment">//代理对象可以做很多真实对象做不了的事情</span><br>        <span class="hljs-comment">//真实对象专注做自己的事情</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br>WeddingCompany weddingCompany=<span class="hljs-keyword">new</span> <span class="hljs-title class_">WeddingCompany</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">You</span>());<span class="hljs-comment">//我来、把自己给婚庆公司</span><br>weddingCompany.HappyMarry();<span class="hljs-comment">//婚庆公司代理我结婚，没有通过我直接去调用结婚的方法</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Marry</span>&#123;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">HappyMarry</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">You</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Marry</span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">HappyMarry</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;我要结婚了&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-comment">//婚庆公司代理我去结婚，还是我去结婚</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">WeddingCompany</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Marry</span>&#123;<br><span class="hljs-comment">//这个地方是一个真实的结婚的角色</span><br><span class="hljs-keyword">private</span> Marry target;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">WeddingCompany</span><span class="hljs-params">(Marry target)</span> &#123;<br><span class="hljs-built_in">this</span>.target=target;<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">HappyMarry</span><span class="hljs-params">()</span> &#123;<br>before();<br>        <span class="hljs-built_in">this</span>.target.HappyMarry();<span class="hljs-comment">//这就是真实对象</span><br>        after();<br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;结婚之后，收尾款&quot;</span>);<br><br><br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;结婚之前，布置现场&quot;</span>);<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>类比到多线程：new Thread(()-&gt;System.out.println(“我爱你”)).start();</p><p>Thread类代理Runnable接口那个真实对象</p><h2 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h2><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918130.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220704153420537"></p><p>new是创建状态             dead是死亡状态</p><h2 id="停止线程"><a href="#停止线程" class="headerlink" title="停止线程"></a>停止线程</h2><p>不推荐使用jdk提供的stop()  destroy()方法</p><p>推荐线程自己停下来</p><p>建议使用一个标志位进行终止变量 当flag&#x3D;false，则终止线程运行</p><p>&#x2F;&#x2F;测试stop<br>&#x2F;&#x2F;1.建议线程正常停止—》利用次数，不建议死循环<br>&#x2F;&#x2F;2.建议使用标志位–&gt;设置一个标志位<br>&#x2F;&#x2F;3.不要使用stop或者destroy等果实或者JDK不建议使用的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br><br><span class="hljs-comment">//1设置一个标识位</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> flag=<span class="hljs-literal">true</span>;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(flag) &#123;<br>System.out.println(<span class="hljs-string">&quot;run    thread&quot;</span>+i++);<br>&#125;<br><br>&#125;<br><span class="hljs-comment">//2.设置一个公开的方法停止线程</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stop</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-built_in">this</span>.flag=<span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br>Hello teststop=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hello</span>();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(teststop).start();<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">1000</span>;i++) &#123;<br>System.out.println(<span class="hljs-string">&quot;main&quot;</span>+i);<br><span class="hljs-keyword">if</span>(i==<span class="hljs-number">900</span>) &#123;<br><span class="hljs-comment">//调用stop方法切换标志位，让线程停止</span><br>teststop.stop();<br>System.out.println(<span class="hljs-string">&quot;线程该停止了&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="线程休眠（sleep）"><a href="#线程休眠（sleep）" class="headerlink" title="线程休眠（sleep）"></a>线程休眠（sleep）</h2><p>sleep指定当前线程阻塞的毫秒数</p><p>sleep存在异常InterruptedException</p><p>sleep时间达到后线程进入就绪状态</p><p>sleep可以模拟网络延迟，倒计时等</p><p>每一个对象都有一个锁，sleep不会释放锁</p><p><strong>&#x2F;&#x2F;模拟网络延时，放大问题的发生性</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> ticketNums=<span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>    <span class="hljs-keyword">if</span>(ticketNums&lt;=<span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">try</span> &#123;<br>Thread.sleep(<span class="hljs-number">200</span>);<span class="hljs-comment">//模拟延时,是当前线程进入休息状态</span><br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br>    System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;--&gt;拿到了第&quot;</span>+ticketNums--+<span class="hljs-string">&quot;票&quot;</span>);<br>    <br><br>    &#125;<br>    &#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br>Hello ticket=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hello</span>();<br><span class="hljs-comment">//Thread后面的第二个参数是这个线程的名字</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(ticket,<span class="hljs-string">&quot;小明&quot;</span>).start();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(ticket,<span class="hljs-string">&quot;老师&quot;</span>).start();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(ticket,<span class="hljs-string">&quot;黄牛党&quot;</span>).start();<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>模拟倒计时</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tenDown</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException&#123;<br><span class="hljs-type">int</span> num=<span class="hljs-number">10</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>Thread.sleep(<span class="hljs-number">1000</span>);<br>System.out.println(num--);<br><span class="hljs-keyword">if</span>(num&lt;=<span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br><br><br><span class="hljs-keyword">try</span> &#123;<br>tenDown();<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>获取当前系统时间</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span>&#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br>      Date startTime=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(System.currentTimeMillis());<span class="hljs-comment">//获取当前的时间Mon Jul 04 16:40:30 CST 2022</span><br>      <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>Thread.sleep(<span class="hljs-number">1000</span>);<br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;HH:mm:ss&quot;</span>).format(startTime));<span class="hljs-comment">//16:40:30</span><br>startTime=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(System.currentTimeMillis());<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>      <br>      &#125;<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="礼让线程"><a href="#礼让线程" class="headerlink" title="礼让线程"></a>礼让线程</h2><p>礼让线程(yield)：让当前正在执行的线程暂停，但不阻塞</p><p>将线程从运行状态转为就绪状态</p><p>让cpu重新调度，礼让不一定成功，看CPU心情</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public <span class="hljs-keyword">class</span> Hello&#123;<br><br>public static void main(String <span class="hljs-literal">[]</span>args) &#123;<br>Myyield e=<span class="hljs-keyword">new</span> <span class="hljs-constructor">Myyield()</span>;<br><span class="hljs-keyword">new</span> <span class="hljs-constructor">Thread(<span class="hljs-params">e</span>,<span class="hljs-string">&quot;a&quot;</span>)</span>.start<span class="hljs-literal">()</span>;<br><span class="hljs-keyword">new</span> <span class="hljs-constructor">Thread(<span class="hljs-params">e</span>,<span class="hljs-string">&quot;b&quot;</span>)</span>.start<span class="hljs-literal">()</span>;<br><br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> Myyield implements Runnable&#123;<br><br>@Override<br>public void run<span class="hljs-literal">()</span> &#123;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>current<span class="hljs-constructor">Thread()</span>.get<span class="hljs-constructor">Name()</span>+<span class="hljs-string">&quot;线程开始执行&quot;</span>);<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>yield<span class="hljs-literal">()</span>;<span class="hljs-comment">//礼让</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>current<span class="hljs-constructor">Thread()</span>.get<span class="hljs-constructor">Name()</span>+<span class="hljs-string">&quot;线程停止执行&quot;</span>);<br><br>&#125;<br><br>&#125;<br>结果：a线程开始执行<br>     b线程开始执行<br>     a线程停止执行<br>     b线程停止执行<br></code></pre></td></tr></table></figure><h2 id="线程强制执行（join）"><a href="#线程强制执行（join）" class="headerlink" title="线程强制执行（join）"></a>线程强制执行（join）</h2><p>join合并线程，待此线程执行完成之后再执行其他线程，其他线程阻塞</p><p>可以想象成插队</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">1000</span>;i++) &#123;<br>System.out.println(<span class="hljs-string">&quot;线程vip来了&quot;</span>);<br>&#125;<br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br><span class="hljs-comment">//启动我们的线程</span><br>Hello testjoin=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hello</span>();<br>Thread a=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(testjoin);<br>a.start();<br><span class="hljs-comment">//主线程</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">500</span>;i++) &#123;<br><span class="hljs-keyword">if</span>(i==<span class="hljs-number">200</span>) &#123;<br>a.join();<span class="hljs-comment">//强制让run方法线程执行完毕再执行主线程</span><br>&#125;<br>System.out.println(<span class="hljs-string">&quot;main&quot;</span>+i);<br>&#125;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="观测线程状态"><a href="#观测线程状态" class="headerlink" title="观测线程状态"></a>观测线程状态</h2><ul><li><ul><li><a href="../../java/lang/Thread.State.html#NEW"><code>NEW</code></a><br>尚未启动的线程处于此状态。 </li><li><a href="../../java/lang/Thread.State.html#RUNNABLE"><code>RUNNABLE</code></a><br>在Java虚拟机中执行的线程处于此状态。 </li><li><a href="../../java/lang/Thread.State.html#BLOCKED"><code>BLOCKED</code></a><br>被阻塞等待监视器锁定的线程处于此状态。 </li><li><a href="../../java/lang/Thread.State.html#WAITING"><code>WAITING</code></a><br>正在等待另一个线程执行特定动作的线程处于此状态。 </li><li><a href="../../java/lang/Thread.State.html#TIMED_WAITING"><code>TIMED_WAITING</code></a><br>正在等待另一个线程执行动作达到指定等待时间的线程处于此状态。 </li><li><a href="../../java/lang/Thread.State.html#TERMINATED"><code>TERMINATED</code></a><br>已退出的线程处于此状态</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>Thread thread=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>Thread.sleep(<span class="hljs-number">1000</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;abc&quot;</span>);<br><br>&#125;);<br><br>           <span class="hljs-comment">//观察状态</span><br>Thread.State state=thread.getState();<br>            System.out.println(state);<span class="hljs-comment">//NEW</span><br>        <span class="hljs-comment">//观察启动后</span><br>            thread.start();<br>            state=thread.getState();<br>            <span class="hljs-keyword">while</span>(state!=Thread.State.TERMINATED) &#123;<br>            Thread.sleep(<span class="hljs-number">100</span>);<br>            state=thread.getState();<br>            System.out.println(state);<br>            &#125;<br>&#125;<br><br>&#125;<br>死亡之后的线程不能够被重新启动，一个线程不能够启动两次<br></code></pre></td></tr></table></figure><h2 id="线程的优先级"><a href="#线程的优先级" class="headerlink" title="线程的优先级"></a>线程的优先级</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>System.out.println(Thread.currentThread().getPriority());<span class="hljs-comment">//主线程默认优先级</span><br>MyPriority myPriority=<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyPriority</span>();<br>Thread t1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(myPriority,<span class="hljs-string">&quot;1&quot;</span>);<br>Thread t2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(myPriority,<span class="hljs-string">&quot;2&quot;</span>);<br>Thread t3=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(myPriority,<span class="hljs-string">&quot;3&quot;</span>);<br>Thread t4=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(myPriority,<span class="hljs-string">&quot;4&quot;</span>);<br>Thread t5=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(myPriority,<span class="hljs-string">&quot;5&quot;</span>);<br>Thread t6=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(myPriority,<span class="hljs-string">&quot;6&quot;</span>);<br><span class="hljs-comment">//先设置优先级，再启动</span><br>t1.start();<br>t2.setPriority(<span class="hljs-number">1</span>);<br>t2.start();<br>t3.setPriority(<span class="hljs-number">4</span>);<br>t3.start();<br>t4.setPriority(Thread.MAX_PRIORITY);<br>t4.start();<br><span class="hljs-comment">//设置优先级大于10小于0会报错</span><br><span class="hljs-comment">/*t5.setPriority(-1);</span><br><span class="hljs-comment">t5.start();</span><br><span class="hljs-comment">t6.setPriority(11);</span><br><span class="hljs-comment">t6.start();*/</span><br><br>&#125;<br><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyPriority</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;--&gt;&quot;</span>+Thread.currentThread().getPriority());<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>优先级低只是意味着获得调度的概率低，并不是优先级低就不会被调用了，这都是看cpu的调度</p><p>优先级低的执行，优先级高的在等待，这个就会造成性能倒置</p><h2 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h2><p>线程分为用户线程（main）和守护线程（gc）</p><p>虚拟机必须确保用户线程执行完毕</p><p>虚拟机不用等待守护线程执行完毕</p><p>如，后台记录操作日志，监控内存，垃圾回收等待</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>   <span class="hljs-type">God</span> <span class="hljs-variable">god</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">God</span>();<br>   You you=<span class="hljs-keyword">new</span> <span class="hljs-title class_">You</span>();<br>   <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(god);<br>   thread.setDaemon(<span class="hljs-literal">true</span>);<span class="hljs-comment">//默认是false表示是用户线程,正常的线程都是用户线程</span><br>   thread.start();<span class="hljs-comment">//上帝守护线程启动，这个线程不停止程序也会在用户线程执行完毕时停止,这时守护线程也就停止了</span><br>   <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(you).start();<span class="hljs-comment">//你  用户线程启动</span><br><br>&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">God</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;上帝健康快乐地活着&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">You</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">36000</span>;i++) &#123;<br>System.out.println(<span class="hljs-string">&quot;我健康快乐的活着&quot;</span>);<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;goodbyeworld&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h2><p>多个线程操作同一个资源</p><p>并发：同一个对象被多个线程同时操作</p><p>保证线程安全要有队列而且要有锁，线程同步需要队列加锁</p><p>锁就相当于排队上厕所的时候，你进去把门关上防止后面的人进来，等你解决完了下一个人才能够进来</p><p>关键词：synchronized    当一个线程获得对象的排它锁，独占资源，其他线程必须等待</p><p>存在问题：1.一个线程持有锁会导致其他所有需要此锁的线程挂起</p><p>​                     2.在多线竞争下，加锁释放锁会导致比较多的上下文切换和调度延时，引起性能问题</p><p>​                    3.如果一个优先级高的线程等待一个优先级低的线程释放锁，会导致优先级倒置，引起性能问题</p><p><strong>不安全的买票</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">//不安全的买票</span><br><span class="hljs-comment">//可能三个人都抢到同一个第十张票</span><br><span class="hljs-comment">//出现负数，就是他们都认为有一张票，当他们买完之后有人拿到的就是负的</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br>buyticket station=<span class="hljs-keyword">new</span> <span class="hljs-title class_">buyticket</span>();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(station,<span class="hljs-string">&quot;小明&quot;</span>).start();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(station,<span class="hljs-string">&quot;小红&quot;</span>).start();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(station,<span class="hljs-string">&quot;小蓝&quot;</span>).start();<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">buyticket</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br><span class="hljs-comment">//票</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> ticketNum=<span class="hljs-number">10</span>;<br><span class="hljs-type">boolean</span> flag=<span class="hljs-literal">true</span>;<span class="hljs-comment">//外部停止方式</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">//买票</span><br><span class="hljs-keyword">while</span>(flag) &#123;<br><br><br><span class="hljs-keyword">try</span> &#123;<br>buy();<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br>&#125;<br><br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buy</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br><span class="hljs-comment">//判断是否有票</span><br><span class="hljs-keyword">if</span>(ticketNum&lt;=<span class="hljs-number">0</span>) &#123;<br>flag=<span class="hljs-literal">false</span>;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-comment">//模拟延时</span><br>Thread.sleep(<span class="hljs-number">100</span>);<br><span class="hljs-comment">//买票</span><br>System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;拿到&quot;</span>+ticketNum--);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>银行取钱不安全</strong></p><p>最后钱会变成负数，总共100，你想取50你对象想去100，你俩看到的都是余额100块，所以会造成余额为负数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br><span class="hljs-comment">//账户</span><br>Account account=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Account</span>(<span class="hljs-number">100</span>,<span class="hljs-string">&quot;结婚基金&quot;</span>);<br><br><br>Drawing you=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Drawing</span>(account,<span class="hljs-number">50</span>,<span class="hljs-string">&quot;你&quot;</span>);<br>Drawing girl=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Drawing</span>(account,<span class="hljs-number">100</span>,<span class="hljs-string">&quot;她&quot;</span>);<span class="hljs-comment">//第三个参数传入的是这个线程的名字</span><br>you.start();<br>girl.start();<br>&#125;<br><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Account</span>&#123;<br><span class="hljs-type">int</span> money;<span class="hljs-comment">//金额</span><br>String name;<span class="hljs-comment">//卡名</span><br>Account account;<span class="hljs-comment">//账户</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Account</span><span class="hljs-params">(<span class="hljs-type">int</span> money, String name)</span> &#123;<br><span class="hljs-built_in">super</span>();<br><span class="hljs-built_in">this</span>.money = money;<br><span class="hljs-built_in">this</span>.name = name;<br>&#125;<br><br><br><br>&#125;<br><span class="hljs-comment">//银行：模拟取款</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Drawing</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br><span class="hljs-comment">//取了多少钱</span><br><span class="hljs-type">int</span> drawingMoney;<br><span class="hljs-comment">//现在手里有多少钱</span><br><span class="hljs-type">int</span>  nowMoney;<br>Account account ;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Drawing</span><span class="hljs-params">(Account account, <span class="hljs-type">int</span> drawingMoney, String name)</span> &#123;<br><span class="hljs-built_in">super</span>(name);<span class="hljs-comment">//这个线程的名字</span><br><span class="hljs-built_in">this</span>.account = account;<br><span class="hljs-built_in">this</span>.drawingMoney = drawingMoney;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">//判断有没有钱</span><br><span class="hljs-keyword">if</span>(account.money-drawingMoney&lt;<span class="hljs-number">0</span>) &#123;<br>System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;钱不够取不到&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">try</span> &#123;<br>Thread.sleep(<span class="hljs-number">3000</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br><span class="hljs-comment">//卡内金额=金额-你取的钱</span><br>account.money=account.money-drawingMoney;<br><span class="hljs-comment">//你手里的钱</span><br>nowMoney=nowMoney+drawingMoney;<br><br>System.out.println(account.name+<span class="hljs-string">&quot;余额为:&quot;</span>+account.money);<br><span class="hljs-comment">//Thread.currentThread().getName()=this.getName()</span><br>System.out.println(<span class="hljs-built_in">this</span>.getName()+<span class="hljs-string">&quot;手里的钱:&quot;</span>+nowMoney);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>ArrayList集合线程不安全</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br>List&lt;String&gt; lise=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10000</span>;i++) &#123;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>lise.add(Thread.currentThread().getName());<br>&#125;).start();<br>&#125;<br><span class="hljs-keyword">try</span> &#123;<br>Thread.sleep(<span class="hljs-number">3000</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br>System.out.println(lise.size());<br><br><br>&#125;<br><br>&#125;<br>结果：<span class="hljs-number">9992</span><br>    可能会有两个元素同时占同一个坑位<br></code></pre></td></tr></table></figure><p>线程同步的修改</p><p>使用synchronized修饰那个会出现线程问题的方法</p><p>这个买票的例子就是一个对象所以在buy方法前面加一个synchronized就可以</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">//不安全的买票</span><br><span class="hljs-comment">//可能三个人都抢到同一个第十张票</span><br><span class="hljs-comment">//出现负数，就是他们都认为有一张票，当他们买完之后有人拿到的就是负的</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br>buyticket station=<span class="hljs-keyword">new</span> <span class="hljs-title class_">buyticket</span>();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(station,<span class="hljs-string">&quot;小明&quot;</span>).start();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(station,<span class="hljs-string">&quot;小红&quot;</span>).start();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(station,<span class="hljs-string">&quot;小蓝&quot;</span>).start();<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">buyticket</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br><span class="hljs-comment">//票</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> ticketNum=<span class="hljs-number">10</span>;<br><span class="hljs-type">boolean</span> flag=<span class="hljs-literal">true</span>;<span class="hljs-comment">//外部停止方式</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">//买票</span><br><span class="hljs-keyword">while</span>(flag) &#123;<br><br><br><span class="hljs-keyword">try</span> &#123;<br>buy();<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br>&#125;<br><br>&#125;<br><span class="hljs-comment">//synchronized同步方法，锁的是this，会一个一个进来</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buy</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br><span class="hljs-comment">//判断是否有票</span><br><span class="hljs-keyword">if</span>(ticketNum&lt;=<span class="hljs-number">0</span>) &#123;<br>flag=<span class="hljs-literal">false</span>;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-comment">//模拟延时</span><br>Thread.sleep(<span class="hljs-number">100</span>);<br><span class="hljs-comment">//买票</span><br>System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;拿到&quot;</span>+ticketNum--);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>下面这个取钱的如果按照上面那个一样在run方法前面加synchronized还是会出现负的余额，因为它是两个对象</p><p>这个就要用同步块   synchronized (Obj){}</p><p>obj称之为同步监视器</p><p>同步监视器的执行过程</p><p>1.第一个线程访问，锁定同步监视器，执行器中的代码</p><p>2.第二个·线程访问，发现同步监视器被锁定，无法继续访问</p><p>3.第一个线程访问完毕，解锁同步监视器</p><p>4.第二个线程访问，发现同步监视器没有锁，然后锁定并访问</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String []args)</span> </span>&#123;<br><span class="hljs-comment">//账户</span><br>Account account=<span class="hljs-keyword">new</span> Account(<span class="hljs-number">100</span>,<span class="hljs-string">&quot;结婚基金&quot;</span>);<br><br><br>Drawing you=<span class="hljs-keyword">new</span> Drawing(account,<span class="hljs-number">50</span>,<span class="hljs-string">&quot;你&quot;</span>);<br>Drawing girl=<span class="hljs-keyword">new</span> Drawing(account,<span class="hljs-number">100</span>,<span class="hljs-string">&quot;她&quot;</span>);<span class="hljs-comment">//第三个参数传入的是这个线程的名字</span><br>you.start();<br>girl.start();<br>&#125;<br><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Account</span></span>&#123;<br><span class="hljs-keyword">int</span> money;<span class="hljs-comment">//金额</span><br>String name;<span class="hljs-comment">//卡名</span><br>Account account;<span class="hljs-comment">//账户</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Account</span><span class="hljs-params">(<span class="hljs-keyword">int</span> money, String name)</span> </span>&#123;<br><span class="hljs-keyword">super</span>();<br><span class="hljs-keyword">this</span>.money = money;<br><span class="hljs-keyword">this</span>.name = name;<br>&#125;<br><br><br><br>&#125;<br><span class="hljs-comment">//银行：模拟取款</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Drawing</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span></span>&#123;<br><span class="hljs-comment">//取了多少钱</span><br><span class="hljs-keyword">int</span> drawingMoney;<br><span class="hljs-comment">//现在手里有多少钱</span><br><span class="hljs-keyword">int</span>  nowMoney;<br>Account account ;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Drawing</span><span class="hljs-params">(Account account, <span class="hljs-keyword">int</span> drawingMoney, String name)</span> </span>&#123;<br><span class="hljs-keyword">super</span>(name);<span class="hljs-comment">//这个线程的名字</span><br><span class="hljs-keyword">this</span>.account = account;<br><span class="hljs-keyword">this</span>.drawingMoney = drawingMoney;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//判断有没有钱</span><br><span class="hljs-keyword">synchronized</span>(account) &#123;<span class="hljs-comment">//这里面是就是需要排队使用的资源，也就是account对象</span><br><span class="hljs-keyword">if</span>(account.money-drawingMoney&lt;<span class="hljs-number">0</span>) &#123;<br>System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;钱不够取不到&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">try</span> &#123;<br>Thread.sleep(<span class="hljs-number">3000</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br><span class="hljs-comment">//卡内金额=金额-你取的钱</span><br>account.money=account.money-drawingMoney;<br><span class="hljs-comment">//你手里的钱</span><br>nowMoney=nowMoney+drawingMoney;<br><br>System.out.println(account.name+<span class="hljs-string">&quot;余额为:&quot;</span>+account.money);<br><span class="hljs-comment">//Thread.currentThread().getName()=this.getName()</span><br>System.out.println(<span class="hljs-keyword">this</span>.getName()+<span class="hljs-string">&quot;手里的钱:&quot;</span>+nowMoney);<br>&#125;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>下面这个和上面那个一样，锁住的是lise集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br>List&lt;String&gt; lise=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10000</span>;i++) &#123;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br><span class="hljs-keyword">synchronized</span>(lise) &#123;<br>lise.add(Thread.currentThread().getName());<br>&#125;<br>&#125;).start();<br>&#125;<br><span class="hljs-keyword">try</span> &#123;<br>Thread.sleep(<span class="hljs-number">3000</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br>System.out.println(lise.size());<br><br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>放在synchronized块里面的是可能会出现问题的代码</p><h2 id="一个线程安全的集合"><a href="#一个线程安全的集合" class="headerlink" title="一个线程安全的集合"></a>一个线程安全的集合</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.concurrent.CopyOnWriteArrayList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br>CopyOnWriteArrayList&lt;String&gt; list=<span class="hljs-keyword">new</span> <span class="hljs-title class_">CopyOnWriteArrayList</span>&lt;String&gt;();<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">1000</span>;i++) &#123;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>list.add(Thread.currentThread().getName());<br>&#125;).start();<br>&#125;<br>System.out.println(list.size());<br><br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><p>多个线程各自占有一些共享资源，并且互相等待其他线程占有的资源才能运行，而导致两个或者多个线程都在等待对方释放资源，都停止执行的情形，某一个同步块同时拥有两个以上的锁时，就可能会发生死锁的问题</p><p>&#x2F;&#x2F;死锁：多个线程互相抱着对方需要的资源，然后形成僵持</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br>MakeUp  g1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">MakeUp</span>(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;灰姑娘&quot;</span>);<br>MakeUp  g2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">MakeUp</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;白雪公主&quot;</span>);<br><br><br>g1.start();<br>g2.start();<br>&#125;<br><br>&#125;<br><br><span class="hljs-comment">//口红</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Lipstick</span>&#123;<br><br>&#125;<br><br><span class="hljs-comment">//镜子</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Mirror</span>&#123;<br><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MakeUp</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br><span class="hljs-comment">//需要的资源只有一份，用static保证只有一份</span><br><span class="hljs-keyword">static</span> Lipstick lipstick=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Lipstick</span>();<br><span class="hljs-keyword">static</span> Mirror mirror=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Mirror</span>();<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">MakeUp</span><span class="hljs-params">(<span class="hljs-type">int</span> choice,String girlname)</span> &#123;<br><span class="hljs-built_in">this</span>.choice=choice;<br><span class="hljs-built_in">this</span>.girlname=girlname;<br>&#125;<br><span class="hljs-type">int</span> choice;<span class="hljs-comment">//选择</span><br>String girlname;<span class="hljs-comment">//使用化妆品的人</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">try</span> &#123;<br>makeup();<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br>&#125;<br><span class="hljs-comment">//化妆，互相持有对方的锁，就是需要拿到对方的资源</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">makeup</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br><span class="hljs-keyword">if</span>(choice==<span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">synchronized</span>(lipstick) &#123;<br>System.out.println(<span class="hljs-built_in">this</span>.girlname+<span class="hljs-string">&quot;获得口红的锁&quot;</span>);<br>Thread.sleep(<span class="hljs-number">1000</span>);<br><br><br><span class="hljs-keyword">synchronized</span>(mirror) &#123;<span class="hljs-comment">//一秒钟之后获得镜子</span><br>System.out.println(<span class="hljs-built_in">this</span>.girlname+<span class="hljs-string">&quot;获得镜子的锁&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">synchronized</span>(mirror) &#123;<br>System.out.println(<span class="hljs-built_in">this</span>.girlname+<span class="hljs-string">&quot;获得镜子的锁&quot;</span>);<br>Thread.sleep(<span class="hljs-number">1000</span>);<br><br><span class="hljs-keyword">synchronized</span>(lipstick) &#123;<span class="hljs-comment">//一秒钟之后获得镜子</span><br>System.out.println(<span class="hljs-built_in">this</span>.girlname+<span class="hljs-string">&quot;获得口红的锁&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br><br><br>​<br><br>&#125;<br><br>&#125;<br>结果：<br>    白雪公主获得镜子的锁<br>灰姑娘获得口红的锁<br>    这样之后他们还想要对方的东西，所以程序就卡死了<br></code></pre></td></tr></table></figure><p>解决方法</p><p>变成两个锁，不是一个锁在另一个锁里面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.concurrent.CopyOnWriteArrayList;<br><br><span class="hljs-comment">//死锁：多个线程互相抱着对方需要的资源，然后形成僵持</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br>MakeUp  g1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">MakeUp</span>(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;灰姑娘&quot;</span>);<br>MakeUp  g2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">MakeUp</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;白雪公主&quot;</span>);<br><br><br>g1.start();<br>g2.start();<br>&#125;<br><br>&#125;<br><br><span class="hljs-comment">//口红</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Lipstick</span>&#123;<br><br>&#125;<br><br><span class="hljs-comment">//镜子</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Mirror</span>&#123;<br><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MakeUp</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br><span class="hljs-comment">//需要的资源只有一份，用static保证只有一份</span><br><span class="hljs-keyword">static</span> Lipstick lipstick=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Lipstick</span>();<br><span class="hljs-keyword">static</span> Mirror mirror=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Mirror</span>();<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">MakeUp</span><span class="hljs-params">(<span class="hljs-type">int</span> choice,String girlname)</span> &#123;<br><span class="hljs-built_in">this</span>.choice=choice;<br><span class="hljs-built_in">this</span>.girlname=girlname;<br>&#125;<br><span class="hljs-type">int</span> choice;<span class="hljs-comment">//选择</span><br>String girlname;<span class="hljs-comment">//使用化妆品的人</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">try</span> &#123;<br>makeup();<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br>&#125;<br><span class="hljs-comment">//化妆，互相持有对方的锁，就是需要拿到对方的资源</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">makeup</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br><span class="hljs-keyword">if</span>(choice==<span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">synchronized</span>(lipstick) &#123;<br>System.out.println(<span class="hljs-built_in">this</span>.girlname+<span class="hljs-string">&quot;获得口红的锁&quot;</span>);<br>Thread.sleep(<span class="hljs-number">1000</span>);<br><br>&#125;<br><br><span class="hljs-keyword">synchronized</span>(mirror) &#123;<span class="hljs-comment">//一秒钟之后获得镜子</span><br>System.out.println(<span class="hljs-built_in">this</span>.girlname+<span class="hljs-string">&quot;获得镜子的锁&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">synchronized</span>(mirror) &#123;<br>System.out.println(<span class="hljs-built_in">this</span>.girlname+<span class="hljs-string">&quot;获得镜子的锁&quot;</span>);<br>Thread.sleep(<span class="hljs-number">1000</span>);<br><br>&#125;<br><span class="hljs-keyword">synchronized</span>(lipstick) &#123;<span class="hljs-comment">//一秒钟之后获得镜子</span><br>System.out.println(<span class="hljs-built_in">this</span>.girlname+<span class="hljs-string">&quot;获得口红的锁&quot;</span>);<br>&#125;<br>&#125;<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>产生死锁的条件：1.互斥条件：一个资源每次只能被一个进程使用</p><p>2，请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放</p><p>3.不剥夺条件：进程已获得的资源，在未使用完之前，不能强行剥夺</p><p>4.循环等待条件：若干进程之间形成一种头尾相接的循环等待资源关闭</p><p>破坏上面的一个条件就可以避免死锁的发生</p><h2 id="Lock锁"><a href="#Lock锁" class="headerlink" title="Lock锁"></a>Lock锁</h2><p>控制多个线程对共享资源进行访问的工具</p><p>ReentrantLock类实现了Lock</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs csharp">import java.util.concurrent.locks.ReentrantLock;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Main</span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String args[]</span>)</span> &#123;<br>testlock testlock1=<span class="hljs-keyword">new</span> testlock();<br><span class="hljs-keyword">new</span> Thread(testlock1,<span class="hljs-string">&quot;小蓝&quot;</span>).start();<br><span class="hljs-keyword">new</span> Thread(testlock1,<span class="hljs-string">&quot;小红&quot;</span>).start();<br><span class="hljs-keyword">new</span> Thread(testlock1,<span class="hljs-string">&quot;小明&quot;</span>).start();<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title">testlock</span> <span class="hljs-title">implements</span> <span class="hljs-title">Runnable</span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> ticketnums=<span class="hljs-number">10</span>;<br><span class="hljs-comment">//定义lock锁</span><br><span class="hljs-keyword">private</span> final ReentrantLock <span class="hljs-keyword">lock</span>=<span class="hljs-keyword">new</span> ReentrantLock();<br>@Override<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span>()</span> &#123;<br><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">lock</span>.<span class="hljs-keyword">lock</span>();<span class="hljs-comment">//加锁</span><br><span class="hljs-keyword">if</span>(ticketnums&gt;<span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>Thread.sleep(<span class="hljs-number">1000</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br>System.<span class="hljs-keyword">out</span>.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;拿到了第&quot;</span>+ticketnums--+<span class="hljs-string">&quot;票&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">finally</span>&#123;<br><span class="hljs-comment">//解锁</span><br><span class="hljs-keyword">lock</span>.unlock();<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>加锁和解锁最好是在try和finally里面，而且try中是可能会出现问题的代码</p><h2 id="线程协作"><a href="#线程协作" class="headerlink" title="线程协作"></a>线程协作</h2><p>线程通信：这是一个线程同步问题，生产者和消费者共享同一个资源，并且生产者和消费者之间相互依赖，互为条件</p><p>对于生产者，没有生产产品之前，要通知消费者等待，有了产品之后，马上通知消费者消费</p><p>对于消费者，在消费之后，要通知生产者结束消费，需要生产新的产品以供消费</p><p>在生产者消费者问题中，仅有synchronized是不够的</p><p>​                synchronized可阻止并发更新同一个共享资源，实现了同步</p><p>​                synchronized不能用来实现不同线程之间的消息传递</p><p>通过一个标志来判断什么时候应该等待，什么时候应该唤醒</p><p>notifyAll方法是唤醒线程只能唤醒wait等待的线程</p><p>wait方法是让该线程等待</p><h3 id="管程法"><a href="#管程法" class="headerlink" title="管程法"></a>管程法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantLock;<br><br><span class="hljs-comment">//测试：生产者消费者模型，利用缓冲区来解决：管程法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br>SynContainer container=<span class="hljs-keyword">new</span> <span class="hljs-title class_">SynContainer</span>();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Productor</span>(container).start();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Consumer</span>(container).start();<br><br><br><br>&#125;<br>&#125;<br><br><span class="hljs-comment">//生产者</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Productor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>SynContainer container;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Productor</span><span class="hljs-params">(SynContainer container)</span> &#123;<br><span class="hljs-built_in">this</span>.container=container;<br>&#125;<br><span class="hljs-comment">//生产</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">100</span>;i++) &#123;<br>    System.out.println(<span class="hljs-string">&quot;生产了&quot;</span>+i+<span class="hljs-string">&quot;只鸡&quot;</span>);<br>    container.push(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Chicken</span>(i));<br>    &#125;<br>&#125;<br><br>&#125;<br><br><span class="hljs-comment">//消费者</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Consumer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>SynContainer container;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Consumer</span><span class="hljs-params">(SynContainer container)</span> &#123;<br><span class="hljs-built_in">this</span>.container=container;<br>&#125;<br><span class="hljs-comment">//消费</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">100</span>;i++) &#123;<br>    System.out.println(<span class="hljs-string">&quot;消费了--&gt;&quot;</span>+container.pop().id+<span class="hljs-string">&quot;只鸡&quot;</span>);<br>    &#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//产品</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Chicken</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> id;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Chicken</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br><span class="hljs-built_in">this</span>.id=id;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//缓冲区</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SynContainer</span>&#123;<br><span class="hljs-comment">//需要一个容器大小</span><br>Chicken[] chickens=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Chicken</span>[<span class="hljs-number">10</span>];<br><span class="hljs-comment">//容器计数器</span><br><span class="hljs-type">int</span> count=<span class="hljs-number">0</span>;<br><span class="hljs-comment">//生产者放入产品</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">push</span><span class="hljs-params">(Chicken chicken)</span> &#123;<br><span class="hljs-comment">//如果容器满了就要等待消费者消费</span><br><span class="hljs-keyword">if</span>(count==chickens.length) &#123;<br><span class="hljs-comment">//通知生产者消费，生产等待</span><br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-built_in">this</span>.wait();<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br>&#125;<br><span class="hljs-comment">//如果没有满，我们就需要放入产品</span><br>chickens[count]=chicken;<br>count++;<br><br><br><span class="hljs-comment">//可以通知消费者消费了</span><br><span class="hljs-built_in">this</span>.notifyAll();<br>&#125;<br><br><span class="hljs-comment">//消费者消费产品</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> Chicken <span class="hljs-title function_">pop</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">//判断是否能消费</span><br><span class="hljs-keyword">if</span>(count==<span class="hljs-number">0</span>) &#123;<br>       <span class="hljs-comment">//等待生产者生产，消费者等待</span><br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-built_in">this</span>.wait();<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br>&#125;<br><span class="hljs-comment">//如果可以消费</span><br>count--;<br>Chicken chicken=chickens[count];<br><br><span class="hljs-comment">//吃完了，通知生产者生产</span><br><span class="hljs-built_in">this</span>.notifyAll();<br><span class="hljs-keyword">return</span> chicken;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="信号灯法"><a href="#信号灯法" class="headerlink" title="信号灯法"></a>信号灯法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantLock;<br><br><span class="hljs-comment">//测试：生产者消费者模型，信号灯法，标志位解决</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br>TV tv=<span class="hljs-keyword">new</span> <span class="hljs-title class_">TV</span>();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Player</span>(tv).start();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Watcher</span>(tv).start();<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//生产者-&gt;演员</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Player</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>TV tv;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Player</span><span class="hljs-params">(TV tv)</span> &#123;<br><span class="hljs-built_in">this</span>.tv=tv;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">20</span>;i++) &#123;<br><span class="hljs-keyword">if</span>(i%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>) &#123;<br><span class="hljs-built_in">this</span>.tv.play(<span class="hljs-string">&quot;快乐大本营播放中&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">this</span>.tv.play(<span class="hljs-string">&quot;抖音:记录美好生活&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//消费者-&gt;观众</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Watcher</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>TV tv;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Watcher</span><span class="hljs-params">(TV tv)</span> &#123;<br><span class="hljs-built_in">this</span>.tv=tv;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">20</span>;i++) &#123;<br><span class="hljs-built_in">this</span>.tv.watch();<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//产品-&gt;节目</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TV</span>&#123;<br><span class="hljs-comment">//演员表演，观众等待  t</span><br><span class="hljs-comment">//观众观看，演员等待  f</span><br>String voice;<span class="hljs-comment">//表演的节目</span><br><span class="hljs-type">boolean</span> flag=<span class="hljs-literal">true</span>;<br><br><br><span class="hljs-comment">//表演</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">play</span><span class="hljs-params">(String voice)</span> &#123;<br><span class="hljs-keyword">if</span>(!flag) &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-built_in">this</span>.wait();<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;演员表演了&quot;</span>+voice);<br><span class="hljs-comment">//通知观众观看</span><br><span class="hljs-built_in">this</span>.notifyAll();<span class="hljs-comment">//通知唤醒</span><br><span class="hljs-built_in">this</span>.voice=voice;<br><span class="hljs-built_in">this</span>.flag=!<span class="hljs-built_in">this</span>.flag;<br>&#125;<br><span class="hljs-comment">//观看</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">watch</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">if</span>(flag) &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-built_in">this</span>.wait();<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;观看了&quot;</span>+voice);<br><span class="hljs-comment">//通知演员要表演了</span><br><span class="hljs-built_in">this</span>.notifyAll();<br><span class="hljs-built_in">this</span>.flag=!<span class="hljs-built_in">this</span>.flag;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><h1 id="java反射"><a href="#java反射" class="headerlink" title="java反射"></a>java反射</h1><p>1.Reflection是被视为动态语言的关键，反射机制允许程序在执行期借助于Reflection API取得任何类的内部信息，并能直接操作任意对象的内部属性和方法</p><p>2.加载完类之后，在堆内存中的方法区就产生了一个Class类型的对象，这个对象就包含了完整的类的结构信息，我们可以通过这个对象看到类的结构，这个对象就像一个面镜子，透过这个镜子看到类的结构，所以我们形象的称之为，反射</p><p>动态语言和静态语言的区别就是动态语言在运行时代码可以根据某些条件改变自身结构</p><p>java之所以成为准动态语言是因为有反射机制</p><p>正常方式：引入需要的包类名称 —》通过new实例化对象–》取得实例化对象</p><p>反射方式：实例化对象–》getClass()方法–》得到完整的包类名称</p><h2 id="反射的功能"><a href="#反射的功能" class="headerlink" title="反射的功能"></a>反射的功能</h2><p><strong>反射的功能</strong></p><p><strong>反射相关的API</strong></p><p>java.lang.Class:代表一个类</p><p>java.lang.reflect.Method:代表类的方法</p><p>java.lang.reflect.Field:代表类的成员变量</p><p>java.lang.reflect.Constructor:代表类的构造器</p><h2 id="一个反射的演示"><a href="#一个反射的演示" class="headerlink" title="一个反射的演示"></a>一个反射的演示</h2><p>Person类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><span class="hljs-keyword">private</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name=name;<br>&#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;你好，我是一个人&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">showNation</span><span class="hljs-params">(String nation)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;我的国籍是&quot;</span>+nation);<br>        <span class="hljs-keyword">return</span> nation;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>ReflectionTest</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReflectionTest</span> &#123;<br>    <span class="hljs-comment">//反射之前，对于Person操作</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//创建Person类的对象</span><br>        Person p1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;Tom&quot;</span>,<span class="hljs-number">12</span>);<br>        <span class="hljs-comment">//通过对象，调用其内部属性方法</span><br>        p1.age=<span class="hljs-number">10</span>;<br>        System.out.println(p1.toString());<br>        p1.show();<br>    &#125;<br>    <span class="hljs-comment">//在Person类外部不能通过person对象调用内部私有结构</span><br>    <span class="hljs-comment">//比如name。showNation()以及私有的构造器</span><br><br>    <span class="hljs-comment">//反射之后，对于Person的操作，做的是和上面一样的事</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException, NoSuchFieldException &#123;<br>        <span class="hljs-comment">//获取一个Class类的实例对象</span><br>        Class clazz=Person.class;<br>        <span class="hljs-comment">//1.通过反射，创建Person类的对象</span><br>           <span class="hljs-comment">//获取构造器</span><br>           Constructor cons=clazz.getConstructor(String.class,<span class="hljs-type">int</span>.class);<br>           <span class="hljs-comment">//创建实例</span><br>           Object obj=cons.newInstance(<span class="hljs-string">&quot;Tom&quot;</span>,<span class="hljs-number">12</span>);<br>           Person p=(Person)obj;<br>           System.out.println(p.toString());<br><br>           <span class="hljs-comment">//2.通过反射，调用对象的指定属性方法</span><br>        Field age=clazz.getDeclaredField(<span class="hljs-string">&quot;age&quot;</span>);<br>        age.set(p,<span class="hljs-number">10</span>);<br>        System.out.println(p.toString());<br>        <span class="hljs-comment">//调用空参的show方法</span><br>        Method show=clazz.getDeclaredMethod(<span class="hljs-string">&quot;show&quot;</span>);<br>        show.invoke(p);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>疑问：通过直接new的方式或反射的方式都可以调用公共的结构，开发中到底用哪个</p><p>建议：用直接new的方式</p><p>疑问：什么时候用反射的方式</p><p>反射的特性是动态性，比如在编译的时候你无法确定到底是要实例化哪个类就是要用这种反射的方式</p><h2 id="关于Class类理解"><a href="#关于Class类理解" class="headerlink" title="关于Class类理解"></a>关于Class类理解</h2><p>1.类的加载过程</p><p>   程序经过javac.exe命令以后，会生成一个或多个字节码文件（.class结尾）</p><p>   接着我们使用java.exe命令对某个字节码文件进行解释运行，相当于将某个字节码文件加载到内存中，此过程就称为类的加载，加载到内存中的类，我们就称为运行时类，此运行时类，就作为Class的一个实例</p><p>2.换句话说，Class的实例就对应的一个运行时类</p><p>3.加载<strong>到内存中的运行时类，会缓存一定的时间，在此时间之内，我们可以通过不同的方式来获取此运行时类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取大的class实例的方式</span><br> <span class="hljs-meta">@Test</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>     <span class="hljs-comment">//方式一</span><br>     <span class="hljs-comment">//加上泛型之后就避免了你后面进行强转</span><br>     Class&lt;Person&gt; clazz1=Person.class;<br>     System.out.println(clazz1);<br>     <span class="hljs-comment">//方式二:通过运行时类的对象</span><br>     Person p1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>     Class clazz2=p1.getClass();<br>     System.out.println(clazz2);<br><br>     <span class="hljs-comment">//方式三：调用Class的静态方法，forName(String classPath)</span><br>     <span class="hljs-comment">//这个路径就是看以src为基准，这种文件直接在src下就直接用文件名，如果底下还有包，就要加上包名</span><br>     Class clazz3=Class.forName(<span class="hljs-string">&quot;Person&quot;</span>);<br>     System.out.println(clazz3);<br>     System.out.println(clazz1==clazz2);<br>     System.out.println(clazz2==clazz3);<br><br>     <span class="hljs-comment">//方式四</span><br>     <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> ReflectionTest.class.getClassLoader();<br>     Class clazz4=classLoader.loadClass(<span class="hljs-string">&quot;Person&quot;</span>);<br>     System.out.println(clazz1==clazz4);<br> &#125;<br></code></pre></td></tr></table></figure><p>其他可以有Class实例的类型</p><p>哪些类型可以有Class对象？ </p><p>（1）class： 外部类，成员(成员内部类，静态内部类)，局部内部类，匿名内部类 </p><p>（2）interface：接口 （3）[]：数组 （4）enum：枚举 （5）annotation：注解@interface </p><p>（6）primitive type：基本数据类型 （7）void</p><h2 id="理解类的加载过程"><a href="#理解类的加载过程" class="headerlink" title="理解类的加载过程"></a>理解类的加载过程</h2><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918675.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220927113944650"></p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918542.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220927115032333"></p><p><strong>在类的加载过程中就已经执行了静态代码块，构建对象才调用实例代码块和构造方法，且实例代码块比构造方法早</strong></p><p><strong>子类加载时，先加载子类的父类，也就是父类的静态代码块先执行再是子类的静态代码块</strong></p><p><strong>子类实例化时，先是父类的实例代码块和构造器再是子类的实例代码块和构造器</strong></p><h2 id="ClassLoader"><a href="#ClassLoader" class="headerlink" title="ClassLoader"></a>ClassLoader</h2><p>类加载器作用：</p><p>将class文件字节码内容加载到内存中，并将这些静态数据转换成方 法区的运行时数据结构，然后在堆中生成一个代表这个类的java.lang.Class对象，作为 方法区中类数据的访问入口。</p><p>类缓存：标准的JavaSE类加载器可以按要求查找类，但一旦某个类被加载到类加载器 中，它将维持加载（缓存）一段时间。不过JVM垃圾回收机制可以回收这些Class对象。</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918280.png" srcset="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209301019837.jpeg" lazyload alt="image-20220927121211719"></p><p>读取文件的时候，把这个Transparent native-to-ascii conversion勾上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClassLoaderTest</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// 1.获取一个系统类加载器</span><br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> ClassLoaderTest.class.getClassLoader();<br>        System.out.println(classLoader);<br><br>        <span class="hljs-comment">//调用系统类加载器的getParent()：获取扩展类加载器</span><br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader1</span> <span class="hljs-operator">=</span> classLoader.getParent();<br>        System.out.println(classLoader1);<br>        <span class="hljs-comment">//调用扩展类加载器的getParent()：无法获取引导类加载器</span><br>        <span class="hljs-comment">//引导类加载器主要负责加载java的核心类库，无法加载自定义类的。</span><br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader2</span> <span class="hljs-operator">=</span> classLoader1.getParent();<br>        System.out.println(classLoader2);<br><br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader3</span> <span class="hljs-operator">=</span> String.class.getClassLoader();<br>        System.out.println(classLoader3);<br>    &#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    Properties 用来读取配置文件</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Properties pros=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        <span class="hljs-comment">//读取配置文件的方式一</span><br>        <span class="hljs-comment">//此时的文件默认在当前的module下</span><br>        FileInputStream fis=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;./jdbc.properties&quot;</span>);<br>        <span class="hljs-comment">//FileInputStream fis=new FileInputStream(&quot;src\\jdbc1.properties&quot;);</span><br>        System.out.println(fis);<br>        <span class="hljs-comment">//pros.load(fis);</span><br>        <span class="hljs-comment">//读取配置文件的方式二，使用ClassLoader</span><br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> ClassLoaderTest.class.getClassLoader();<br>        <span class="hljs-comment">//这个方法直接是映射到src下的文件</span><br>        <span class="hljs-comment">//在java中路径字符串中/和\\都是一样的</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> classLoader.getResourceAsStream(<span class="hljs-string">&quot;jdbc1.properties&quot;</span>);<br>        pros.load(resource);<br>        String user=pros.getProperty(<span class="hljs-string">&quot;user&quot;</span>);<br>        String password=pros.getProperty(<span class="hljs-string">&quot;password&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;user=&quot;</span>+user+<span class="hljs-string">&quot;password=&quot;</span>+password);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="java项目中的路径问题"><a href="#java项目中的路径问题" class="headerlink" title="java项目中的路径问题"></a>java项目中的路径问题</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">File</span> <span class="hljs-keyword">file</span>=<span class="hljs-keyword">new</span> <span class="hljs-keyword">File</span>(<span class="hljs-string">&quot;/&quot;</span>);<br>System.out.<span class="hljs-keyword">println</span>(<span class="hljs-keyword">file</span>.getAbsolutePath());<br><span class="hljs-comment">//D:\</span><br><span class="hljs-keyword">File</span> file1=<span class="hljs-keyword">new</span> <span class="hljs-keyword">File</span>(<span class="hljs-string">&quot;.&quot;</span>);<br>System.out.<span class="hljs-keyword">println</span>(file1.getAbsolutePath());<br>D:\IDEAjava工程\javaSE\javareflect\.<br></code></pre></td></tr></table></figure><p>&#x2F;代表的是盘符</p><p>.代表的是工程目录下的</p><p>使用FileInputStream fis&#x3D;new FileInputStream(“jdbc.properties”);</p><p>所以这个jdbc.properties也可以是.&#x2F;jdbc.properties</p><p>默认就是项目路径下，而不是src路径下，也可以用    全部的整个路径比如D:\IDEAjava工程\javaSE\javareflect\jdbc.properties</p><p>InputStream resource &#x3D; classLoader.getResourceAsStream(“jdbc1.properties”);方法就是映射到scr目录下</p><p>一般就不用相对路径了，用不明白</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livescript">而且idea中路径字符串中<span class="hljs-string">\\和/是同样的效果</span><br></code></pre></td></tr></table></figure><h2 id="创建运行时类的对象和体会动态"><a href="#创建运行时类的对象和体会动态" class="headerlink" title="创建运行时类的对象和体会动态"></a>创建运行时类的对象和体会动态</h2><p>加载到内存中的类我们就把它叫做运行时类</p><p>test1时创建运行时类的对象</p><p>test2是体会反射的动态性，就是在编译时不能确定创建哪个类对象，运行时才确定创建对象的类型          </p><p>并且方法有参数别用@test</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 通过反射创建对应的运行时类的对象</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NewInstanceTest</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IllegalAccessException, InstantiationException &#123;<br>        <span class="hljs-comment">//用了泛型之后后面就不用强转了</span><br>        Class&lt;Person&gt; clazz=Person.class;<br>        <span class="hljs-comment">//newInstance();调用子方法创建对应的运行时类的对象</span><br>        <span class="hljs-comment">//其实内部还是调用了Person的空参构造器，</span><br>        <span class="hljs-comment">//所以这个方法要求1.类必须有空参构造器</span><br>        <span class="hljs-comment">// 2.这个空参构造器的权限不是私有。通常为public</span><br><br>        <span class="hljs-comment">//在javabean中要求提供一个public的空参构造其，原因：</span><br>        <span class="hljs-comment">//1.便于通过反射，创建运行时类的对象</span><br>        <span class="hljs-comment">//2.便于子类继承此运行时类时，默认调用super(),保证父类有空参构造器</span><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> clazz.newInstance();<br>        System.out.println(obj);<br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span> num=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>().nextInt(<span class="hljs-number">3</span>);<span class="hljs-comment">//0.1.2</span><br>String path=<span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">switch</span>(num) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>        path = <span class="hljs-string">&quot;java.util.Date&quot;</span>;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>        path = <span class="hljs-string">&quot;java.lang.Object&quot;</span>;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>        path = <span class="hljs-string">&quot;Person&quot;</span>;<br>        <span class="hljs-keyword">break</span>;<br>&#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> getInstance(path);<br>            System.out.println(obj);<br>        &#125;<br>        <span class="hljs-keyword">catch</span>(Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br><br>&#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建一个指定类的对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> classPath  指定类的全类名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throwsException</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getInstance</span><span class="hljs-params">(String classPath)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        Class clazz=Class.forName(classPath);<br>        <span class="hljs-keyword">return</span> clazz.newInstance();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="提供结构丰富的Person类"><a href="#提供结构丰富的Person类" class="headerlink" title="提供结构丰富的Person类"></a>提供结构丰富的Person类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.java;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Creature</span>&lt;String&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span>&lt;String&gt;,MyInterface&#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> score;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span>&#123;<br><br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name=name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> age)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name=name;<br>        <span class="hljs-built_in">this</span>.age=age;<br>    &#125;<br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">show</span><span class="hljs-params">(String nation)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;我的国际时&quot;</span>+nation);<br>        <span class="hljs-keyword">return</span> nation;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">display</span><span class="hljs-params">(String interests)</span>&#123;<br>        <span class="hljs-keyword">return</span> interests;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(String o)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">info</span><span class="hljs-params">()</span> &#123;<br>     System.out.println(<span class="hljs-string">&quot;我是一个人&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="获取运行时类的属性结构及其内部结构"><a href="#获取运行时类的属性结构及其内部结构" class="headerlink" title="获取运行时类的属性结构及其内部结构"></a>获取运行时类的属性结构及其内部结构</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.java1;<br><br><span class="hljs-keyword">import</span> com.atguigu.java.Person;<br><span class="hljs-keyword">import</span> com.sun.deploy.util.SystemUtils;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Modifier;<br><span class="hljs-keyword">import</span> java.util.Locale;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">获取运行时类的属性结构</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FieldTest</span> &#123;<br><span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>    Class clazz= Person.class;<br>    <span class="hljs-comment">//获取属性结构</span><br>    <span class="hljs-comment">//getFields():获取当前运行时类及其父类中声明为public访问权限的属性</span><br>    Field[] fields = clazz.getFields();<br>    <span class="hljs-keyword">for</span> (Field f : fields) &#123;<br>        System.out.println(f);<br>    &#125;<br>System.out.println(<span class="hljs-string">&quot;******************&quot;</span>);<br>    <span class="hljs-comment">//getDeclaredFields():获取当前运行时类当中的所有属性</span><br>    Field[] declaredFields = clazz.getDeclaredFields();<br>    <span class="hljs-keyword">for</span> (Field f : declaredFields) &#123;<br>        System.out.println(f);<br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">//每一个属性的具体的部分也是可以拿到的</span><br><span class="hljs-comment">//权限，修饰符，数据类型，变量名，变量值</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span>&#123;<br>    Class clazz=Person.class;<br>        Field[] declaredFields = clazz.getDeclaredFields();<br>        <span class="hljs-keyword">for</span> (Field f : declaredFields) &#123;<br>        <span class="hljs-comment">//1.权限修饰符</span><br>            <span class="hljs-comment">//这个地方获取的是一个表示访问类型的数字</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">modifier</span> <span class="hljs-operator">=</span>f.getModifiers();<br>            <span class="hljs-comment">//这个地方是将访问类型的数字转换成访问类型的文字,空白是默认类型</span><br>            System.out.println(Modifier.toString(modifier));<br>            <span class="hljs-comment">//2.数据类型</span><br>               Class type=f.getType();<span class="hljs-comment">//type获得的是一个类型</span><br>               System.out.println(type.getName());<span class="hljs-comment">//这样是获得type的全名</span><br>            <span class="hljs-comment">//3.变量名</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> f.getName();<br>            System.out.println(name);<br><br>        &#125;<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="获取运行时类的方法结构和内部结构"><a href="#获取运行时类的方法结构和内部结构" class="headerlink" title="获取运行时类的方法结构和内部结构"></a>获取运行时类的方法结构和内部结构</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.java1;<br><br><span class="hljs-keyword">import</span> com.atguigu.java.Person;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.lang.reflect.Modifier;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">获取运行时类的方法结构</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MethodTest</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Person.class;<br>        <span class="hljs-comment">//getMethods:获取当前运行时类及其所有父类中声明为public权限的方法</span><br>        Method[] methods = clazz.getMethods();<br>        <span class="hljs-keyword">for</span> (Method m : methods) &#123;<br>            System.out.println(m);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;****************************&quot;</span>);<br>        <span class="hljs-comment">//获取当前运行时类中声明的所有方法，不包含父类中声明的</span><br>        Method[] declaredMethods = clazz.getDeclaredMethods();<br>        <span class="hljs-keyword">for</span> (Method m : declaredMethods) &#123;<br>            System.out.println(m);<br>        &#125;<br><br><br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    @注解</span><br><span class="hljs-comment">    权限修饰符，返回值类型，方法名（参数类型 形参名1，...）throws Exception()&#123;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Person.class;<br>        Method[] methods = clazz.getDeclaredMethods();<br>        <span class="hljs-keyword">for</span> (Method m : methods) &#123;<br>            <span class="hljs-comment">//获取权限修饰符</span><br>            System.out.println(Modifier.toString(m.getModifiers()));<br><br>            <span class="hljs-comment">//获取方法的返回值类型</span><br>            System.out.println(m.getReturnType().getName());<br><br>            <span class="hljs-comment">//获取方法名</span><br>            System.out.println(m.getName());<br>            System.out.println(<span class="hljs-string">&quot;(&quot;</span>);<br><br>            <span class="hljs-comment">//获取形参列表</span><br>            Class[] parameterTypes = m.getParameterTypes();<br>            <span class="hljs-keyword">if</span> (!(parameterTypes != <span class="hljs-literal">null</span> &amp;&amp; parameterTypes.length == <span class="hljs-number">0</span>)) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; parameterTypes.length; i++) &#123;<br>                    <span class="hljs-keyword">if</span> (i == parameterTypes.length - <span class="hljs-number">1</span>) &#123;<br>                        System.out.println(parameterTypes[i].getName() + <span class="hljs-string">&quot; args_&quot;</span> + i);<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                    System.out.println(parameterTypes[i].getName() + <span class="hljs-string">&quot; args_&quot;</span> + i + <span class="hljs-string">&quot;,&quot;</span>);<br><br>                &#125;<br>                System.out.println(<span class="hljs-string">&quot;)&quot;</span>);<br>            &#125;<br>            <span class="hljs-comment">//获取抛出的异常</span><br>            Class[] exceptionTypes = m.getExceptionTypes();<br>            <span class="hljs-keyword">if</span> (exceptionTypes.length &gt; <span class="hljs-number">0</span>) &#123;<br>                System.out.print(<span class="hljs-string">&quot;throws&quot;</span>);<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; exceptionTypes.length; i++) &#123;<br>                    <span class="hljs-keyword">if</span> (i == exceptionTypes.length - <span class="hljs-number">1</span>) &#123;<br>                        System.out.println(exceptionTypes[i].getName());<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                    System.out.println(exceptionTypes[i].getName() + <span class="hljs-string">&quot;,&quot;</span>);<br>                &#125;<br><br><br>            &#125;<br><br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="获取运行时类的构造器结构"><a href="#获取运行时类的构造器结构" class="headerlink" title="获取运行时类的构造器结构"></a>获取运行时类的构造器结构</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">package</span> com.atguigu.java1;<br><br><span class="hljs-keyword">import</span> com.atguigu.java.Person;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OtherTest</span> &#123;<br><span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> void test1()&#123;<br>    Class clazz= Person.<span class="hljs-keyword">class</span>;<br>    <span class="hljs-comment">//getConstructors获取当前运行时类中声明为public的构造器</span><br>    Constructor[] constructors = clazz.getConstructors();<br>    <span class="hljs-keyword">for</span> (Constructor <span class="hljs-keyword">constructor</span> : constructors) &#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">constructor</span>);<br>    &#125;<br>    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;***********************&quot;</span>);<br>    <span class="hljs-comment">//getDeclaredMethods获取当前运行时类中声明的所有的构造器</span><br>    Constructor[] declaredMethods = clazz.getDeclaredConstructors();<br>    <span class="hljs-keyword">for</span> (Constructor declaredMethod : declaredMethods) &#123;<br>        System.<span class="hljs-keyword">out</span>.println(declaredMethod);<br>    &#125;<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="获取运行时类的父类和泛型"><a href="#获取运行时类的父类和泛型" class="headerlink" title="获取运行时类的父类和泛型"></a>获取运行时类的父类和泛型</h2><p><strong>ParameterizedType是Type的子接口</strong></p><p><strong>Type是Class的父接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java">   <span class="hljs-comment">/*</span><br><span class="hljs-comment">    获取运行时类的父类</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Person.class;<br><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">superclass</span> <span class="hljs-operator">=</span> clazz.getSuperclass();<br>        System.out.println(superclass);<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    获取运行时类的带泛型的父类</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Person.class;<br><br>        <span class="hljs-type">Type</span> <span class="hljs-variable">genericSuperclass</span> <span class="hljs-operator">=</span> clazz.getGenericSuperclass();<br>        System.out.println(genericSuperclass);<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    获取运行时类的带泛型的父类的泛型</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    代码：逻辑性代码  vs 功能性代码</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test4</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Person.class;<br><br>        <span class="hljs-type">Type</span> <span class="hljs-variable">genericSuperclass</span> <span class="hljs-operator">=</span> clazz.getGenericSuperclass();<br>        <span class="hljs-comment">//ParameterizedType是Type的子接口</span><br>        <span class="hljs-comment">//Type是Class的父接口，就像是List和ArrayList的关系</span><br>        <span class="hljs-type">ParameterizedType</span> <span class="hljs-variable">paramType</span> <span class="hljs-operator">=</span> (ParameterizedType) genericSuperclass;<br>        <span class="hljs-comment">//获取泛型类型</span><br>        Type[] actualTypeArguments = paramType.getActualTypeArguments();<br><span class="hljs-comment">//        System.out.println(actualTypeArguments[0].getTypeName());</span><br>        <span class="hljs-comment">//将Type类型强转为class，然后再用getName，只有Type才有getTypename方法</span><br>        System.out.println(((Class)actualTypeArguments[<span class="hljs-number">0</span>]).getName());<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    获取运行时类实现的接口</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test5</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Person.class;<br><br>        Class[] interfaces = clazz.getInterfaces();<br>        <span class="hljs-keyword">for</span>(Class c : interfaces)&#123;<br>            System.out.println(c);<br>        &#125;<br><br>        System.out.println();<br>        <span class="hljs-comment">//获取运行时类的父类实现的接口</span><br>        Class[] interfaces1 = clazz.getSuperclass().getInterfaces();<br>        <span class="hljs-keyword">for</span>(Class c : interfaces1)&#123;<br>            System.out.println(c);<br>        &#125;<br><br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="获取运行时类实现的接口，所在的包，注解"><a href="#获取运行时类实现的接口，所在的包，注解" class="headerlink" title="获取运行时类实现的接口，所在的包，注解"></a>获取运行时类实现的接口，所在的包，注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">获取运行时类实现的接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test5</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Person.class;<br><br>    Class[] interfaces = clazz.getInterfaces();<br>    <span class="hljs-keyword">for</span>(Class c : interfaces)&#123;<br>        System.out.println(c);<br>    &#125;<br><br>    System.out.println();<br>    <span class="hljs-comment">//获取运行时类的父类实现的接口</span><br>    Class[] interfaces1 = clazz.getSuperclass().getInterfaces();<br>    <span class="hljs-keyword">for</span>(Class c : interfaces1)&#123;<br>        System.out.println(c);<br>    &#125;<br><br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    获取运行时类所在的包</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test6</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Person.class;<br><br>    <span class="hljs-type">Package</span> <span class="hljs-variable">pack</span> <span class="hljs-operator">=</span> clazz.getPackage();<br>    System.out.println(pack);<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    获取运行时类声明的注解</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test7</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Person.class;<br><br>    Annotation[] annotations = clazz.getAnnotations();<br>    <span class="hljs-keyword">for</span>(Annotation annos : annotations)&#123;<br>        System.out.println(annos);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="调用运行时类的指定结构"><a href="#调用运行时类的指定结构" class="headerlink" title="调用运行时类的指定结构"></a>调用运行时类的指定结构</h2><p>指定结构主要指的是属性和方法构造器</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
