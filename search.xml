<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>javaweb</title>
      <link href="/2022/09/29/javaweb/"/>
      <url>/2022/09/29/javaweb/</url>
      
        <content type="html"><![CDATA[<p><strong>Javaweb</strong></p><h2 id="HTML-CSS-Javascript前端三刺客"><a href="#HTML-CSS-Javascript前端三刺客" class="headerlink" title="HTML.CSS,Javascript前端三刺客"></a>HTML.CSS,Javascript前端三刺客</h2><p>HTML是超文本标记语言，是一个网站页面的主要内容和主体框架（主要是实现内容）</p><p>CSS是层叠样式表，主要用来控制调整网页的样式，它与网页的结构和内容没有关系，仅仅是通过不同语义的标签来调整网页内容的不同表现样式。(主要是实现表现，一种呈现的效果)</p><p>JavaScript是一种完整的网页脚本语言，有自己独立的语法，可以完成复杂的程序逻辑，而HTML和CSS仅仅是标记语言，不具备编程语言的程序逻辑。(行为，指的是页面中元素与输入设备交互的响应，一般使用javascript技术实现)</p><p>B&#x2F;S软件结构：</p><p>客户端：浏览器             服务器端：web服务器</p><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><h4 id="html书写规范"><a href="#html书写规范" class="headerlink" title="html书写规范"></a>html书写规范</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><span class="hljs-comment">&lt;!--约束，声明--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh_CN&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--html标签表示html的开始  lang=&quot;zh_CN表示中文&quot;--&gt;</span><br><span class="hljs-comment">&lt;!--html标签中一般分为两部分，head和body--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-comment">&lt;!--表示头部信息，一般包含三部分内容，title标签，css样式，js代码--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--表示当前页面使用UTF-8字符集--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>标题<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-comment">&lt;!--表示标题--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-comment">&lt;!--body标签是整个html页面显示的主体内容--&gt;</span><br>hello<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="html标签"><a href="#html标签" class="headerlink" title="html标签"></a>html标签</h4><p>1.标签名大小写不敏感</p><p>2.标签名有自己的属性         </p><p> 基本属性：bgcolor&#x3D;“red”  可以修改简单的样式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--背景颜色属性--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">bgcolor</span>=<span class="hljs-string">&quot;green&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--body标签是整个html页面显示的主体内容--&gt;</span><br></code></pre></td></tr></table></figure><p>  事件属性：  onclick&#x3D;“alert(‘你好’);”    </p><p>点击body主题内容触发</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--onclick表示点击事件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;alert(1)&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--body标签是整个html页面显示的主体内容--&gt;</span><br></code></pre></td></tr></table></figure><p>3.分为单标签和双标签 &lt;标签名 &#x2F;&gt;        和&lt;标签名&gt;     &lt;&#x2F;标签名&gt;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;br /&gt;换行       &lt;hr /&gt;<br></code></pre></td></tr></table></figure><p><strong>标签语法</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>0-标签语法.html<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!-- ①标签不能交叉嵌套 --&gt;</span><br>   正确：<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>早安，尚硅谷<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   错误：<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>早安，尚硅谷<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span><br><br>   <span class="hljs-comment">&lt;!-- ②标签必须正确关闭(闭合) --&gt;</span><br>   <span class="hljs-comment">&lt;!-- i.有文本内容的标签： --&gt;</span><br>   正确：<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>早安，尚硅谷<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   错误：<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>早安，尚硅谷<br>   <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span><br>   <br>   <span class="hljs-comment">&lt;!-- ii.没有文本内容的标签： --&gt;</span><br>   正确：<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span>1<br>   错误：<span class="hljs-tag">&lt;<span class="hljs-name">br</span> &gt;</span>2<br>   <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span><br>   <br>   <span class="hljs-comment">&lt;!-- ③属性必须有值，属性值必须加引号 --&gt;</span><br>   正确：<span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;blue&quot;</span>&gt;</span>早安，尚硅谷<span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span><br>   错误：<span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">color</span>=<span class="hljs-string">blue</span>&gt;</span>早安，尚硅谷<span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span><br>   错误：<span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">color</span>&gt;</span>早安，尚硅谷<span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span><br>      <br>   <span class="hljs-comment">&lt;!-- ④注释不能嵌套 --&gt;</span><br>   正确：<span class="hljs-comment">&lt;!-- 注释内容 --&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>   错误：<span class="hljs-comment">&lt;!-- 注释内容 &lt;!-- 注释内容 --&gt;</span>--&gt;<br>   <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>font标签</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>1.font标签.html<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>   <span class="hljs-comment">&lt;!-- 字体标签</span><br><span class="hljs-comment">    需求1：在网页上显示 我是字体标签 ，并修改字体为 宋体，颜色为红色。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    font标签是字体标签,它可以用来修改文本的字体,颜色,大小(尺寸)</span><br><span class="hljs-comment">      color属性修改颜色</span><br><span class="hljs-comment">      face属性修改字体</span><br><span class="hljs-comment">      size属性修改文本大小</span><br><span class="hljs-comment">    --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;red&quot;</span> <span class="hljs-attr">face</span>=<span class="hljs-string">&quot;宋体&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;7&quot;</span>&gt;</span>我是字体标签<span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>特殊字符</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>2.特殊字符.html<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 特殊字符</span><br><span class="hljs-comment">需求1：把 &lt;br&gt; 换行标签 变成文本 转换成字符显示在页面上</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">常用的特殊字符:</span><br><span class="hljs-comment">&lt;===&gt;&gt;&gt;&gt;&amp;lt;</span><br><span class="hljs-comment">&gt;   ===&gt;&gt;&gt;&gt;&amp;gt;</span><br><span class="hljs-comment">  空格===&gt;&gt;&gt;&gt;&amp;nbsp;</span><br><span class="hljs-comment">如果在html文件中出现多个空白字符，那么就只保留一个，必须用特殊字符才可以出现多个空格</span><br><span class="hljs-comment"> --&gt;</span><br>我是<span class="hljs-symbol">&amp;lt;</span>br<span class="hljs-symbol">&amp;gt;</span>标签<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>国哥好<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>帅啊!<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>标题标签</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>3.标题标签.html<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>   <span class="hljs-comment">&lt;!-- 标题标签</span><br><span class="hljs-comment">    需求1：演示标题1到 标题6的</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">      h1 - h6 都是标题标签</span><br><span class="hljs-comment">      h1 最大</span><br><span class="hljs-comment">      h6 最小</span><br><span class="hljs-comment">         align 属性是对齐属性</span><br><span class="hljs-comment">            left      左对齐(默认)</span><br><span class="hljs-comment">            center    剧中</span><br><span class="hljs-comment">            right     右对齐</span><br><span class="hljs-comment">    --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span>标题1<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span>标题2<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span>标题3<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>标题4<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>标题5<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span>标题6<span class="hljs-tag">&lt;/<span class="hljs-name">h6</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">h7</span>&gt;</span>标题7<span class="hljs-tag">&lt;/<span class="hljs-name">h7</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>超链接标签</strong></p><p>网页中点击跳转的内容就是超链接</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>4.超链接.html<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>   <span class="hljs-comment">&lt;!-- a标签是 超链接</span><br><span class="hljs-comment">         href属性设置连接的地址</span><br><span class="hljs-comment">         target属性设置哪个目标进行跳转</span><br><span class="hljs-comment">            _self     表示当前页面(默认值)</span><br><span class="hljs-comment">            _blank    表示打开新页面来进行跳转</span><br><span class="hljs-comment">    --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://localhost:8080&quot;</span>&gt;</span>百度<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://localhost:8080&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_self&quot;</span>&gt;</span>百度_self<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://localhost:8080&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>百度_blank<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>列表标签</strong></p><p>和浏览器有关的或多或少都会有一些兼容问题，所以换了个浏览器可能会不一样比如下面的type</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--需求1：使用无序，列表方式，把东北F4，赵四，刘能，小沈阳，宋小宝，展示出来</span><br><span class="hljs-comment">        ul 是无序列表</span><br><span class="hljs-comment">            type属性可以修改列表项前面的符号</span><br><span class="hljs-comment">        li  是列表项</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-comment">&lt;!--无序列表--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;none&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>赵四<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>刘能<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>小沈阳<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>宋小宝<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--有序列表,前面会加上序号--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ol</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;none&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>赵四<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>刘能<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>小沈阳<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>宋小宝<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>img标签</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>5.img标签.html<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--需求1：使用img标签显示一张美女的照片。并修改宽高，和边框属性</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        img标签是图片标签,用来显示图片</span><br><span class="hljs-comment">            src属性可以设置图片的路径</span><br><span class="hljs-comment">            width属性设置图片的宽度</span><br><span class="hljs-comment">            height属性设置图片的高度</span><br><span class="hljs-comment">            border属性设置图片边框大小</span><br><span class="hljs-comment">            alt属性设置当指定路径找不到图片时,用来代替显示的文本内容</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        在JavaSE中路径也分为相对路径和绝对路径.</span><br><span class="hljs-comment">            相对路径:从工程名开始算</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">            绝对路径:盘符:/目录/文件名</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        在web中路径分为相对路径和绝对路径两种</span><br><span class="hljs-comment">            相对路径:</span><br><span class="hljs-comment">                .           表示当前文件所在的目录</span><br><span class="hljs-comment">                ..          表示当前文件所在的上一级目录</span><br><span class="hljs-comment">                文件名      表示当前文件所在目录的文件,相当于 ./文件名            ./ 可以省略</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">            绝对路径:</span><br><span class="hljs-comment">                正确格式是:  http://ip:port/工程名/资源路径</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">                错误格式是:  盘符:/目录/文件名</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-comment">&lt;!--下面这些值的单位是像素--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;1.jpg&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;260&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;美女找不到&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../../2.jpg&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;260&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;美女找不到&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../imgs/3.jpg&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;260&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../imgs/4.jpg&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;260&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../imgs/5.jpg&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;260&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../imgs/6.jpg&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;260&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>表格标签</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>表格标签<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">需求1：做一个 带表头的 ，三行，三列的表格，并显示边框</span><br><span class="hljs-comment">需求2：修改表格的宽度，高度，表格的对齐方式，单元格间距。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">table 标签是表格标签</span><br><span class="hljs-comment">border 设置表格标框</span><br><span class="hljs-comment">width 设置表格宽度</span><br><span class="hljs-comment">height 设置表格高度</span><br><span class="hljs-comment">align 设置表格相对于页面的对齐方式</span><br><span class="hljs-comment">cellspacing 设置单元格间距</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">tr 是行标签</span><br><span class="hljs-comment">th是表头标签</span><br><span class="hljs-comment">td  是单元格标签</span><br><span class="hljs-comment">align 设置单元格文本对齐方式</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">b 是加粗标签</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">--&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;300&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;300&quot;</span> <span class="hljs-attr">cellspacing</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>1.1<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--注释上面和下面的两个标签是等价的--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>1.1<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>1.3<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2.1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2.2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2.3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3.1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3.2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3.3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>表格跨行跨列标签</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>7.表格的跨行跨列<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!--需求1：</span><br><span class="hljs-comment">新建一个五行，五列的表格，</span><br><span class="hljs-comment">第一行，第一列的单元格要跨两列，</span><br><span class="hljs-comment">第二行第一列的单元格跨两行，</span><br><span class="hljs-comment">第四行第四列的单元格跨两行两列。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">colspan 属性设置跨列，被作用的单元格横向合并一个</span><br><span class="hljs-comment">rowspan 属性设置跨行,指的是被作用的单元格向下合并一个</span><br><span class="hljs-comment">--&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;500&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;500&quot;</span> <span class="hljs-attr">cellspacing</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>1.1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1.3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1.4<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1.5<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">rowspqn</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>2.1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2.2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2.3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2.4<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2.5<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3.2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3.3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3.4<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3.5<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>4.1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>4.2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>4.3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">rowspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>4.4<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>5.1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>5.2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>5.3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>iframe标签</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>8.iframe标签.html<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>我是一个单独的完整的页面<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--ifarme标签可以在页面上开辟一个小区域显示一个单独的页面</span><br><span class="hljs-comment">            ifarme和a标签组合使用的步骤:</span><br><span class="hljs-comment">                1 在iframe标签中使用name属性定义一个名称</span><br><span class="hljs-comment">                2 在a标签的target属性上设置iframe的name的属性值</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;3.标题标签.html&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;abc&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;0-标签语法.html&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;abc&quot;</span>&gt;</span>0-标签语法.html<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;1.font标签.html&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;abc&quot;</span>&gt;</span>1.font标签.html<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;2.特殊字符.html&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;abc&quot;</span>&gt;</span>2.特殊字符.html<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>表单显示</strong></p><p>什么是表单，表单就是html页面中用来收集用户信息的所有元素的集合，然后把这些信息发送给服务器</p><p>同时用<table>标签让表单像表格一样的形式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>表单的显示<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!--需求1:创建一个个人信息注册的表单界面。包含用户名，密码，确认密码。性别（单选），兴趣爱好（多选），国籍（下拉列表）。</span><br><span class="hljs-comment">隐藏域，自我评价（多行文本域）。重置，提交。--&gt;</span><br><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        form标签就是表单</span><br><span class="hljs-comment">            input type=text     是文件输入框  value设置默认显示内容</span><br><span class="hljs-comment">            input type=password 是密码输入框  value设置默认显示内容</span><br><span class="hljs-comment">            input type=radio    是单选框    name属性可以对其进行分组   checked=&quot;checked&quot;表示默认选中</span><br><span class="hljs-comment">            input type=checkbox 是复选框   checked=&quot;checked&quot;表示默认选中</span><br><span class="hljs-comment">            input type=reset    是重置按钮      value属性修改按钮上的文本</span><br><span class="hljs-comment">            input type=submit   是提交按钮      value属性修改按钮上的文本</span><br><span class="hljs-comment">            input type=button   是按钮          value属性修改按钮上的文本</span><br><span class="hljs-comment">            input type=file     是文件上传域</span><br><span class="hljs-comment">            input type=hidden   是隐藏域    当我们要发送某些信息，而这些信息，不需要用户参与，就可以使用隐藏域（提交的时候同时发送给服务器）</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">            select 标签是下拉列表框</span><br><span class="hljs-comment">            option 标签是下拉列表框中的选项 selected=&quot;selected&quot;设置默认选中</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">            textarea 表示多行文本输入框 （起始标签和结束标签中的内容是默认值）</span><br><span class="hljs-comment">                rows 属性设置可以显示几行的高度</span><br><span class="hljs-comment">                cols 属性设置每行可以显示几个字符宽度</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span>用户注册<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span> 用户名称：<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;默认值&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span> 用户密码：<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;abc&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>确认密码：<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;abc&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>性别：<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span>/&gt;</span>男<br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">&quot;checked&quot;</span>  /&gt;</span>女<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span> 兴趣爱好：<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">&quot;checked&quot;</span> /&gt;</span>Java<br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> /&gt;</span>JavaScript<br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> /&gt;</span>C++<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>国籍：<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>--请选择国籍--<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">selected</span>=<span class="hljs-string">&quot;selected&quot;</span>&gt;</span>中国<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>美国<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>小日本<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>自我评价：<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;20&quot;</span>&gt;</span>我才是默认值<span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;reset&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>文件上传<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>表单提交的细节</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>表单的显示<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        form标签是表单标签</span><br><span class="hljs-comment">            action属性设置提交的服务器地址</span><br><span class="hljs-comment">            method属性设置提交的方式GET(默认值)或POST</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        表单提交的时候，数据没有发送给服务器的三种情况：</span><br><span class="hljs-comment">            1、表单项没有name属性值(可是我测试的真实情况是没有也可以)</span><br><span class="hljs-comment">            2、单选、复选（下拉列表中的option标签）都需要添加value属性，以便发送给服务器</span><br><span class="hljs-comment">            3、表单项不在提交的form标签中</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        GET请求的特点是：</span><br><span class="hljs-comment">            1、浏览器地址栏中的地址是：action属性[+?+请求参数]</span><br><span class="hljs-comment">                请求参数的格式是：name=value&amp;name=value</span><br><span class="hljs-comment">            2、不安全</span><br><span class="hljs-comment">            3、它有数据长度的限制</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        POST请求的特点是：</span><br><span class="hljs-comment">            1、浏览器地址栏中只有action属性值</span><br><span class="hljs-comment">            2、相对于GET请求要安全</span><br><span class="hljs-comment">            3、理论上没有数据长度的限制</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://www.baidu.com&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;action&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;login&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span>用户注册<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span> 用户名称：<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;默认值&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span> 用户密码：<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;abc&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>性别：<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;boy&quot;</span>/&gt;</span>男<br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">&quot;checked&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;girl&quot;</span> /&gt;</span>女<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span> 兴趣爱好：<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">&quot;checked&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;java&quot;</span>/&gt;</span>Java<br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;js&quot;</span>/&gt;</span>JavaScript<br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;cpp&quot;</span>/&gt;</span>C++<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>国籍：<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;country&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;none&quot;</span>&gt;</span>--请选择国籍--<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;cn&quot;</span> <span class="hljs-attr">selected</span>=<span class="hljs-string">&quot;selected&quot;</span>&gt;</span>中国<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;usa&quot;</span>&gt;</span>美国<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jp&quot;</span>&gt;</span>小日本<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>自我评价：<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;desc&quot;</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;20&quot;</span>&gt;</span>我才是默认值<span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;reset&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>其他标签div span  p等等</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>其他标签<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--需求1：div、span、p标签的演示</span><br><span class="hljs-comment">            div标签       默认独占一行</span><br><span class="hljs-comment">            span标签      它的长度是封装数据的长度</span><br><span class="hljs-comment">            p段落标签     默认会在段落的上方和下方各空出一行来（如果已有就不再空）</span><br><span class="hljs-comment">        --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div标签1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div标签2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>span标签1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>span标签2<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>p段落标签1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>p段落标签2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><p>css是层叠样式表单，是用于控制网页样式并允许将样式信息与网页内容分割的一种标记性语言</p><p>选择器：1.浏览器根据选择器绝顶受css样式影响的html元素&lt;标签&gt;</p><p>属性：是你要改变的样式名，并且每一个属性都有一个值，属性和值被冒号分开，并由花括号包裹，这样就是一个完整的声明，例如</p><p>p{color:blue}</p><p>多个声明：如果要定义不止一个声明，则需要用分号将每个声明分开，虽然最后一条声明的最后可以不加分号，但尽量在每条声明的末尾加上分号</p><p>例如：</p><p>p{</p><p>color:red;</p><p>font-size:30px;</p><p>}</p><p>不过一般一行只写一个属性   </p><p>css注释&#x2F;*     *&#x2F;</p><h4 id="CSS和HTML的结合方式"><a href="#CSS和HTML的结合方式" class="headerlink" title="CSS和HTML的结合方式"></a>CSS和HTML的结合方式</h4><p><strong>结合方式一</strong></p><p>在标签的属性上设置“key:value value”,修改标签样式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--需求1：分别定义两个 div、span标签，分别修改每个 div 标签的样式为：边框1个像素，实线，红色。--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;border: 1px solid red;&quot;</span>&gt;</span>div标签1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;border: 1px solid red;&quot;</span>&gt;</span>div标签2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;border: 1px solid red;&quot;</span>&gt;</span>span标签1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;border: 1px solid red;&quot;</span>&gt;</span>span标签2<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>缺点：1.如果标签写多了，样式多了，代码量太大</p><p>​            2.可读性非常差</p><p>​            3.Css代码没有什么复用性可言</p><p><strong>结合方式二</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--style标签专门用来定义css样式代码--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-comment">/* 需求1：分别定义两个 div、span标签，分别修改每个 div 标签的样式为：边框1个像素，实线，红色。*/</span></span><br><span class="language-css">        <span class="hljs-selector-tag">div</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid red;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">span</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid red;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div标签1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div标签2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>span标签1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>span标签2<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>缺点：1.只能在一个页面内复用代码，不能再多个页面中复用css代码</p><p>​          2.维护起来不方便，实际的项目中会有成千上万的也买你，要到每个页面中去修改，工作量太大了</p><p><strong>结合方式三</strong></p><p>把css样式写成一个单独的css文件，再通过link标签引入即可复用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--link标签专门用来引入css样式代码--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;1.css&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div标签1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div标签2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>span标签1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>span标签2<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="标签名选择器"><a href="#标签名选择器" class="headerlink" title="标签名选择器"></a>标签名选择器</h4><p>标签名选择器的格式是</p><p>标签名{</p><p>属性:值</p><p>}</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>CSS选择器<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css">      <span class="hljs-selector-tag">div</span>&#123;</span><br><span class="language-css">         <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid yellow;</span><br><span class="language-css">         <span class="hljs-attribute">color</span>: blue;</span><br><span class="language-css">         <span class="hljs-attribute">font-size</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">      &#125;</span><br><span class="language-css">      <span class="hljs-selector-tag">span</span>&#123;</span><br><span class="language-css">         <span class="hljs-attribute">border</span>: <span class="hljs-number">5px</span> dashed  blue;</span><br><span class="language-css">         <span class="hljs-attribute">color</span>: yellow;</span><br><span class="language-css">         <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">      &#125;</span><br><span class="language-css">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>   <span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">   需求1：在所有div标签上修改字体颜色为蓝色，字体大小30个像素。边框为1像素黄色实线。</span><br><span class="hljs-comment">   并且修改所有span 标签的字体颜色为黄色，字体大小20个像素。边框为5像素蓝色虚线。</span><br><span class="hljs-comment">    --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div标签1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div标签2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>span标签1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>span标签2<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>标签名选择器可以决定哪些标签被动的使用这个样式</p><h4 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h4><p>id选择器的格式是：</p><p>#id 属性值{</p><p>属性:值</p><p>}</p><p>id选择器，可以让我们通过id属性选择性的去使用这个样式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>ID选择器<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css"></span><br><span class="language-css">      <span class="hljs-selector-id">#id001</span>&#123;</span><br><span class="language-css">         <span class="hljs-attribute">color</span>: blue;</span><br><span class="language-css">         <span class="hljs-attribute">font-size</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">         <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> yellow solid;</span><br><span class="language-css">      &#125;</span><br><span class="language-css"></span><br><span class="language-css">      <span class="hljs-selector-id">#id002</span>&#123;</span><br><span class="language-css">         <span class="hljs-attribute">color</span>: red;</span><br><span class="language-css">         <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">         <span class="hljs-attribute">border</span>: <span class="hljs-number">5px</span> blue dotted ;</span><br><span class="language-css">      &#125;</span><br><span class="language-css"></span><br><span class="language-css">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>    <br>   <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">   需求1：分别定义两个 div 标签，</span><br><span class="hljs-comment">   第一个div 标签定义 id 为 id001 ，然后根据id 属性定义css样式修改字体颜色为蓝色，</span><br><span class="hljs-comment">   字体大小30个像素。边框为1像素黄色实线。</span><br><span class="hljs-comment">   </span><br><span class="hljs-comment">   第二个div 标签定义 id 为 id002 ，然后根据id 属性定义css样式 修改的字体颜色为红色，字体大小20个像素。</span><br><span class="hljs-comment">   边框为5像素蓝色点线。</span><br><span class="hljs-comment">    --&gt;</span><br>   <br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;id002&quot;</span>&gt;</span>div标签1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;id001&quot;</span>&gt;</span>div标签2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="class选择器"><a href="#class选择器" class="headerlink" title="class选择器"></a>class选择器</h4><p>class 类型选择器的格式是</p><p>.class属性值{</p><p>属性:值</p><p>}</p><p>class类型选择器可以通过class属性有效的选择地去使用这个样式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>class类型选择器<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.class01</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">color</span>: blue;</span><br><span class="language-css"><span class="hljs-attribute">font-size</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css"><span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid yellow;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.class02</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">color</span>: grey;</span><br><span class="language-css"><span class="hljs-attribute">font-size</span>: <span class="hljs-number">26px</span>;</span><br><span class="language-css"><span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid red;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">需求1：修改 class 属性值为 class01的 span 或 div 标签，字体颜色为蓝色，字体大小30个像素。边框为1像素黄色实线。</span><br><span class="hljs-comment">需求2：修改 class 属性值为 class02的 div 标签，字体颜色为灰色，字体大小26个像素。边框为1像素红色实线。</span><br><span class="hljs-comment"> --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;class01&quot;</span>&gt;</span>div标签class01<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;class02&quot;</span>&gt;</span>div标签<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;class02&quot;</span>&gt;</span>span标签class01<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>span标签2<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br><br></code></pre></td></tr></table></figure><h4 id="组合选择器"><a href="#组合选择器" class="headerlink" title="组合选择器"></a>组合选择器</h4><p>组合选择器的格式是：</p><p>选择器1,选择器2,选择器n{</p><p>属性:值</p><p>}</p><p>让多个选择器或者多种类型的选择器共用同一块代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>class类型选择器<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.class01</span> , <span class="hljs-selector-id">#id01</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: blue;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>:  yellow <span class="hljs-number">1px</span> solid;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">需求1：修改 class=&quot;class01&quot; 的div 标签 和 id=&quot;id01&quot; 所有的span标签，</span><br><span class="hljs-comment">字体颜色为蓝色，字体大小20个像素。边框为1像素黄色实线。</span><br><span class="hljs-comment"> --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;id01&quot;</span>&gt;</span>div标签class01<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;class01&quot;</span>&gt;</span>span 标签<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div标签<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div标签id01<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br><br></code></pre></td></tr></table></figure><h4 id="css常用样式"><a href="#css常用样式" class="headerlink" title="css常用样式"></a>css常用样式</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>06-css常用样式.html<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">div</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: red;  红色</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> yellow solid; 边框属性</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;   宽度</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;   高度</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: green;  背景颜色</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">30px</span>;  字体大小</span><br><span class="language-css">            <span class="hljs-attribute">margin-left</span>: auto;   这个和下面那个两行表示<span class="hljs-selector-tag">div</span>居中</span><br><span class="language-css">            <span class="hljs-attribute">margin-right</span>: auto;</span><br><span class="language-css">            <span class="hljs-attribute">text-align</span>: center;  文字居中</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">table</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> red solid;   设置边框</span><br><span class="language-css">            <span class="hljs-attribute">border-collapse</span>: collapse;  将边框合并，就是<span class="hljs-selector-tag">td</span>单元格的边框和表格的边框合并</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">td</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> red solid;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">a</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">text-decoration</span>: none;  超链接去下划线</span><br><span class="language-css"></span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">ul</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">list-style</span>: none; 列表去除修饰</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>11111111111<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>11111111111<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>11111111111<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>11111111111<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>11111111111<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1.1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://www.baidu.com&quot;</span>&gt;</span>百度<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是div标签<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h3><h3 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h3><p>jQuery就是javascript和查询，他就是辅助javascript开发的js类库</p><p>jQuery 的核心思想就是write less ，do more 所以他实现了很多浏览器的兼容问题</p><p>基础使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html <span class="hljs-variable constant_">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Insert title here<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">// window.onload = function () &#123;</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//     var btnObj = document.getElementById(&quot;btnId&quot;);</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//     // alert(btnObj);//[object HTMLButtonElement]   ====&gt;&gt;&gt;  dom对象</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//     btnObj.onclick = function () &#123;</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//        alert(&quot;js 原生的单击事件&quot;);</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//     &#125;</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">// &#125;</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">      $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; <span class="hljs-comment">// 表示页面加载完成 之后，相当 window.onload = function () &#123;&#125;</span></span></span><br><span class="language-javascript"><span class="language-xml">         <span class="hljs-keyword">var</span> $btnObj = $(<span class="hljs-string">&quot;#btnId&quot;</span>); <span class="hljs-comment">// 表示按id查询标签对象，jQuery对象变量都加一个$</span></span></span><br><span class="language-javascript"><span class="language-xml">         $btnObj.<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; <span class="hljs-comment">// 绑定单击事件</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;jQuery 的单击事件&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">         &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btnId&quot;</span>&gt;</span>SayHello<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>jQuery中的$是一个函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html <span class="hljs-variable constant_">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Insert title here<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">   <span class="hljs-comment">&lt;!--引入jQuery文件--&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-comment">//使用$()代替window.onload</span></span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//使用选择器获取按钮对象，随后绑定单击响应函数</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//表示按id查询对象</span></span></span><br><span class="language-javascript"><span class="language-xml">      $(<span class="hljs-string">&quot;#btnId&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">         <span class="hljs-comment">//弹出Hello</span></span></span><br><span class="language-javascript"><span class="language-xml">         <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;Hello&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">   &#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btnId&quot;</span>&gt;</span>SayHello<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>为按钮添加响应函数</p><p>1.使用jQuery查询到标签对象</p><p>2.使用标签对象.click(function(){});</p><h4 id="介绍"><a href="#介绍" class="headerlink" title="$介绍"></a>$介绍</h4><p>$是jQuery的核心函数，能完成jQuery的很多功能，$()就是调用$这个函数</p><p>1.传入的参数是函数时</p><p>表示页面加载完成之后。相当于window.onload&#x3D;function(){};</p><p>2.传入的参数为HTML字符串时，会对我们创建这个html标签对象</p><p>3.传入参数为【选择器字符串时】，</p><p>$(“#id属性值”)：id选择器，根据id查询标签对象</p><p>$(“标签名”):   标签名选择器，根据指定的标签名查询标签对象</p><p>$(“.class属性值”):类型选择器，根据class属性查询标签对象</p><p>4.传入的参数是dom对象，将这个dom对象转换为jQuery对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html <span class="hljs-variable constant_">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Insert title here<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-comment">//核心函数的4个作用</span></span></span><br><span class="language-javascript"><span class="language-xml">    $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// alert(&quot;页面加载完成之后，自动调用&quot;);</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//将生成的html标签对象直接加给了body标签，这样就可以显示</span></span></span><br><span class="language-javascript"><span class="language-xml">        $(<span class="hljs-string">&quot;    &lt;div&gt;&quot;</span> +</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-string">&quot;        &lt;span&gt;div-span1&lt;/span&gt;&quot;</span> +</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-string">&quot;        &lt;span&gt;div-span2&lt;/span&gt;&quot;</span> +</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-string">&quot;    &lt;/div&gt;&quot;</span>).<span class="hljs-title function_">appendTo</span>(<span class="hljs-string">&quot;body&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// alert($(&quot;button&quot;).length);</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> btnObj = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;btn01&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// alert(btnObj);</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// alert( $(btnObj) );</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// alert( $(&quot;&lt;h1&gt;&lt;/h1&gt;&quot;) );</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-title function_">alert</span>($(<span class="hljs-string">&quot;button&quot;</span>));</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-comment">//传入参数为[函数]时：在文档加载完成后执行这个函数</span></span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-comment">//传入参数为[HTML字符串]时：根据这个字符串创建元素节点对象，创建的是jQuery对象</span></span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-comment">//传入参数为[选择器字符串]时：根据这个字符串查找元素节点对象，创建的是jQuery对象</span></span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-comment">//传入参数为[DOM对象]时：将DOM对象包装为jQuery对象返回</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn01&quot;</span>&gt;</span>按钮1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮3<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="jQuery对象和dom对象区分"><a href="#jQuery对象和dom对象区分" class="headerlink" title="jQuery对象和dom对象区分"></a>jQuery对象和dom对象区分</h4><p>DOM对象</p><p>1.通过各种方法查询出来的标签对象是dom对象</p><p>jQuery对象</p><p>1.通过jQuery提供的API创建的对象，是jQuery对象      alert( $(“<h1></h1>“) );</p><p>2.通过JQuery包装的Dom对象，也是JQuery对象         alert( $(btnObj) );  btnObj是一个dom对象</p><p>3.它通过JQuery提供的API查询到的对象，是JQuery对象     alert($(“button”));</p><p>JQuery对象alert出来的效果是[Object Object]</p><h4 id="jQuery对象的本质"><a href="#jQuery对象的本质" class="headerlink" title="jQuery对象的本质"></a>jQuery对象的本质</h4><p>jQuery对象是            dom对象的数组+jQuery提供的一系列功能函数</p><h4 id="jQuery对象和Dom对象的使用区别"><a href="#jQuery对象和Dom对象的使用区别" class="headerlink" title="jQuery对象和Dom对象的使用区别"></a>jQuery对象和Dom对象的使用区别</h4><p>jQuery对象不能使用dom对象的属性和方法</p><p>dom对象也不能使用jQuery对象的属性和方法</p><h4 id="Dom对象和JQuery对象之间的相互转换"><a href="#Dom对象和JQuery对象之间的相互转换" class="headerlink" title="Dom对象和JQuery对象之间的相互转换"></a>Dom对象和JQuery对象之间的相互转换</h4><p>1.dom对象转化为jQUery对象</p><p>现有Dom对象，然后  $(Dom)对象就可以转换为jQuery对象</p><p>2.jQuery对象转为dom对象</p><p>现有jQuery对象，jQuery对象[下标]取出相应的dom对象</p><!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"><html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><title>Insert title here</title><script type="text/javascript" src="../script/jquery-1.7.2.js"></script><script type="text/javascript">​    <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs awk"><br>    <span class="hljs-regexp">//</span>jQuery对象的本质的演示<br><br>   $(<span class="hljs-keyword">function</span>()&#123;<br>      <span class="hljs-regexp">//</span>testDiv.css(<span class="hljs-string">&quot;color&quot;</span>,<span class="hljs-string">&quot;red&quot;</span>)<br>      <span class="hljs-regexp">//</span>testDiv.style.color = <span class="hljs-string">&quot;blue&quot;</span>;<br><br>      <span class="hljs-regexp">//</span> var arr = [<span class="hljs-number">12</span>,<span class="hljs-string">&quot;abc&quot;</span>,true];<br>      <span class="hljs-regexp">//</span><br>      <span class="hljs-regexp">//</span> var <span class="hljs-variable">$btns</span> = $(<span class="hljs-string">&quot;button&quot;</span>);<br>      <span class="hljs-regexp">//</span><br>      <span class="hljs-regexp">//</span> <span class="hljs-keyword">for</span> (var i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-variable">$btns</span>.length; i++)&#123;<br>      <span class="hljs-regexp">//</span>     alert(<span class="hljs-variable">$btns</span>[i]);<br>      <span class="hljs-regexp">//</span> &#125;<br><br><br><br>    <span class="hljs-regexp">//</span>jQuery和Dom的使用区别的演示<br>       <span class="hljs-regexp">//</span>document.getElementById(<span class="hljs-string">&quot;testDiv&quot;</span>).innerHTML = <span class="hljs-string">&quot;这是dom对象的属性InnerHTML&quot;</span>;<br>       <span class="hljs-regexp">//</span>$(<span class="hljs-string">&quot;#testDiv&quot;</span>).innerHTML = <span class="hljs-string">&quot;这是dom对象的属性InnerHTML&quot;</span>;<br>    <br>       <span class="hljs-regexp">//</span>$(<span class="hljs-string">&quot;#testDiv&quot;</span>).click(<span class="hljs-keyword">function</span> () &#123;<br>         <span class="hljs-regexp">//</span>alert(<span class="hljs-string">&quot;click()是jQuery对象的方法&quot;</span>);<br>       <span class="hljs-regexp">//</span>&#125;);<br>    <br>       <span class="hljs-regexp">//</span>document.getElementById(<span class="hljs-string">&quot;testDiv&quot;</span>).click(<span class="hljs-keyword">function</span> () &#123;<br>         <span class="hljs-regexp">//</span>alert(<span class="hljs-string">&quot;click()是jQuery对象的方法&quot;</span>);<br>       <span class="hljs-regexp">//</span>&#125;);<br>       <br>       <br>       <span class="hljs-regexp">//</span>下面是jQuery对象转换为dom对象的演示，用下标来取出<br>      <span class="hljs-regexp">//</span> alert( $(document.getElementById(<span class="hljs-string">&quot;testDiv&quot;</span>))[<span class="hljs-number">0</span>] );<br>    <br>      alert( $(<span class="hljs-string">&quot;button:first&quot;</span>) );<br><br>   &#125;);<br><br>&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br><br>   &lt;div id=<span class="hljs-string">&quot;testDiv&quot;</span>&gt;Atguigu is Very Good!&lt;/div&gt;<br><br>   &lt;button id=<span class="hljs-string">&quot;dom2dom&quot;</span>&gt;使用DOM对象调用DOM方法&lt;/button&gt;<br>   &lt;button id=<span class="hljs-string">&quot;dom2jQuery&quot;</span>&gt;使用DOM对象调用jQuery方法&lt;/button&gt;<br>   &lt;button id=<span class="hljs-string">&quot;jQuery2jQuery&quot;</span>&gt;使用jQuery对象调用jQuery方法&lt;/button&gt;<br>   &lt;button id=<span class="hljs-string">&quot;jQuery2dom&quot;</span>&gt;使用jQuery对象调用DOM方法&lt;/button&gt;<br><br><br><br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h4 id="jQuery基本选择器"><a href="#jQuery基本选择器" class="headerlink" title="jQuery基本选择器"></a>jQuery基本选择器</h4><p>基本选择器</p><p>#ID  选择器：根据id查找标签对象</p><p>.class  选择器：根据class查找标签对象</p><p>element  选择器：根据标签名查找标签对象</p><p>*选择器：表示任意的，所有的元素</p><p>selector1,selector2 组合器：合并选择器1,选择器2的结果并返回</p><p>特殊的</p><p>p.myClass表示标签名必须是p标签，而且class类型还要是myClass</p><p>基本选择器的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> <span class="hljs-variable constant_">HTML</span> <span class="hljs-variable constant_">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/strict.dtd&quot;</span>&gt;<br>&lt;html&gt;<br>   &lt;head&gt;<br>      &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;<br>      &lt;title&gt;Untitled Document&lt;/title&gt;<br>      &lt;style type=&quot;text/css&quot;&gt;<br>         div, span, p &#123;<br>             width: 140px;<br>             height: 140px;<br>             margin: 5px;<br>             background: #aaa;<br>             border: #000 1px solid;<br>             float: left;<br>             font-size: 17px;<br>             font-family: Verdana;<br>         &#125;<br>         &lt;!--应该是div标签且class为mini--&gt;<br>         div.mini &#123;<br>             width: 55px;<br>             height: 55px;<br>             background-color: #aaa;<br>             font-size: 12px;<br>         &#125;<br>         <br>         div.hide &#123;<br>             display: none;<br>         &#125;<br>      &lt;/style&gt;<br>      &lt;script type=&quot;text/javascript&quot; src=&quot;../script/jquery-1.7.2.js&quot;&gt;&lt;/script&gt;<br>      &lt;script type=&quot;text/javascript&quot;&gt;<br>         <br>            $(function () &#123;<br>               //1.选择 id 为 one 的元素 &quot;background-color&quot;,&quot;#bbffaa&quot;<br>               $(&quot;#btn1&quot;).click(function () &#123;<br>                  // css() 方法 可以设置和获取样式,第二个参数是颜色属性的值<br>                  $(&quot;#one&quot;).css(&quot;background-color&quot;,&quot;#bbffaa&quot;);<br>               &#125;);<br><br><br>               //2.选择 class 为 mini 的所有元素<br>               $(&quot;#btn2&quot;).click(function () &#123;<br>                  $(&quot;.mini&quot;).css(&quot;background-color&quot;,&quot;#bbffaa&quot;);<br>               &#125;);<br><br>               //3.选择 元素名是 div 的所有元素<br>               $(&quot;#btn3&quot;).click(function () &#123;<br>                  $(&quot;div&quot;).css(&quot;background-color&quot;,&quot;#bbffaa&quot;);<br>               &#125;);<br><br>               //4.选择所有的元素<br>               $(&quot;#btn4&quot;).click(function () &#123;<br>                  $(&quot;*&quot;).css(&quot;background-color&quot;,&quot;#bbffaa&quot;);<br>               &#125;);<br><br>               //5.选择所有的 span 元素和id为two的元素<br>               $(&quot;#btn5&quot;).click(function () &#123;<br>                  $(&quot;span,#two&quot;).css(&quot;background-color&quot;,&quot;#bbffaa&quot;);<br>               &#125;);<br><br>            &#125;);<br><br>      &lt;/script&gt;<br>   &lt;/head&gt;<br>   &lt;body&gt;<br>&lt;!--   &lt;div&gt;<br>      &lt;h1&gt;基本选择器&lt;/h1&gt;<br>   &lt;/div&gt;  --&gt;   <br>      &lt;input type=&quot;button&quot; value=&quot;选择 id 为 one 的元素&quot; id=&quot;btn1&quot; /&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;选择 class 为 mini 的所有元素&quot; id=&quot;btn2&quot; /&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;选择 元素名是 div 的所有元素&quot; id=&quot;btn3&quot; /&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;选择 所有的元素&quot; id=&quot;btn4&quot; /&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;选择 所有的 span 元素和id为two的元素&quot; id=&quot;btn5&quot; /&gt;<br>      <br>      &lt;br&gt;<br>      &lt;div class=&quot;one&quot; id=&quot;one&quot;&gt;<br>         id 为 one,class 为 one 的div<br>         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>      &lt;/div&gt;<br>      &lt;div class=&quot;one&quot; id=&quot;two&quot; title=&quot;test&quot;&gt;<br>         id为two,class为one,title为test的div<br>         &lt;div class=&quot;mini&quot; title=&quot;other&quot;&gt;class为mini,title为other&lt;/div&gt;<br>         &lt;div class=&quot;mini&quot; title=&quot;test&quot;&gt;class为mini,title为test&lt;/div&gt;<br>      &lt;/div&gt;<br>      &lt;div class=&quot;one&quot;&gt;<br>         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>         &lt;div class=&quot;mini&quot;&gt;&lt;/div&gt;<br>      &lt;/div&gt;<br>      &lt;div class=&quot;one&quot;&gt;<br>         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>         &lt;div class=&quot;mini&quot; title=&quot;tesst&quot;&gt;class为mini,title为tesst&lt;/div&gt;<br>      &lt;/div&gt;<br>       &lt;!--display:none就是不显示--&gt;<br>      &lt;div style=&quot;display:none;&quot; class=&quot;none&quot;&gt;style的display为&quot;none&quot;的div&lt;/div&gt;<br>      &lt;div class=&quot;hide&quot;&gt;class为&quot;hide&quot;的div&lt;/div&gt;<br>      &lt;div&gt;<br>         包含input的type为&quot;hidden&quot;的div&lt;input type=&quot;hidden&quot; size=&quot;8&quot;&gt;<br>      &lt;/div&gt;<br>      &lt;span class=&quot;one&quot; id=&quot;span&quot;&gt;^^span元素^^&lt;/span&gt;<br>   &lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h4 id="jQuery层级选择器"><a href="#jQuery层级选择器" class="headerlink" title="jQuery层级选择器"></a>jQuery层级选择器</h4><p>ancestor descendant 后代选择器 ：在给定的祖先元素下匹配所有的后代元素 </p><p>parent &gt; child 子元素选择器：在给定的父元素下匹配所有的子元素 </p><p>prev + next 相邻元素选择器：匹配所有紧接在 prev 元素后的 next 元素 </p><p>prev ~ sibings 之后的兄弟元素选择器：匹配 prev 元素之后的所有 siblings 元素</p><p>儿子元素和孙子元素是有区别的，而且后代元素包括所有的后代包括儿子孙子</p><p>$(“lable + input”) 所有紧跟在lable标签后面的input标签，必须是紧跟</p><p>$(“form &gt; input”)匹配表单中所有的子级input元素，只有儿子辈的，没有孙子辈的</p><p>$(“form input”)匹配form后代的所有的input元素</p><p>$(“form ~input”)找到form后面所有与form同辈的input元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> <span class="hljs-variable constant_">HTML</span> <span class="hljs-variable constant_">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/strict.dtd&quot;</span>&gt;<br>&lt;html&gt;<br>   &lt;head&gt;<br>      &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;<br>      &lt;title&gt;Untitled Document&lt;/title&gt;<br>      &lt;style type=&quot;text/css&quot;&gt;<br>         div, span, p &#123;<br>             width: 140px;<br>             height: 140px;<br>             margin: 5px;<br>             background: #aaa;<br>             border: #000 1px solid;<br>             float: left;<br>             font-size: 17px;<br>             font-family: Verdana;<br>         &#125;<br>         <br>         div.mini &#123;<br>             width: 55px;<br>             height: 55px;<br>             background-color: #aaa;<br>             font-size: 12px;<br>         &#125;<br>         <br>         div.hide &#123;<br>             display: none;<br>         &#125;        <br>      &lt;/style&gt;<br>      &lt;script type=&quot;text/javascript&quot; src=&quot;../script/jquery-1.7.2.js&quot;&gt;&lt;/script&gt;<br>      &lt;script type=&quot;text/javascript&quot;&gt;<br>         $(document).ready(function()&#123;  //$(function()&#123;&#125;);的全写<br>            //1.选择 body 内的所有 div 元素<br>            $(&quot;#btn1&quot;).click(function()&#123;<br>               $(&quot;body div&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);<br>            &#125;);<br><br>            //2.在 body 内, 选择div子元素  <br>            $(&quot;#btn2&quot;).click(function()&#123;<br>               $(&quot;body &gt; div&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);<br>            &#125;);<br><br>            //3.选择 id 为 one 的下一个 div 元素 <br>            $(&quot;#btn3&quot;).click(function()&#123;<br>               $(&quot;#one+div&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);<br>            &#125;);<br><br>            //4.选择 id 为 two 的元素后面的所有 div 兄弟元素<br>            $(&quot;#btn4&quot;).click(function()&#123;<br>               $(&quot;#two~div&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);<br>            &#125;);<br>         &#125;);<br>      &lt;/script&gt;<br>   &lt;/head&gt;<br>   &lt;body&gt; <br>   <br>&lt;!--   &lt;div&gt;<br>      &lt;h1&gt;层级选择器:根据元素的层级关系选择元素&lt;/h1&gt;<br>      ancestor descendant  ：<br>      parent &gt; child           ：<br>      prev + next          ：<br>      prev ~ siblings       ：<br>   &lt;/div&gt;  --&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;选择 body 内的所有 div 元素&quot; id=&quot;btn1&quot; /&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;在 body 内, 选择div子元素&quot; id=&quot;btn2&quot; /&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;选择 id 为 one 的下一个 div 元素&quot; id=&quot;btn3&quot; /&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;选择 id 为 two 的元素后面的所有 div 兄弟元素&quot; id=&quot;btn4&quot; /&gt;<br>      &lt;br&gt;&lt;br&gt;<br>      &lt;div class=&quot;one&quot; id=&quot;one&quot;&gt;<br>         id 为 one,class 为 one 的div<br>         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>      &lt;/div&gt;<br>      &lt;div class=&quot;one&quot; id=&quot;two&quot; title=&quot;test&quot;&gt;<br>         id为two,class为one,title为test的div<br>         &lt;div class=&quot;mini&quot; title=&quot;other&quot;&gt;class为mini,title为other&lt;/div&gt;<br>         &lt;div class=&quot;mini&quot; title=&quot;test&quot;&gt;class为mini,title为test&lt;/div&gt;<br>      &lt;/div&gt;<br>      &lt;div class=&quot;one&quot;&gt;<br>         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>         &lt;div class=&quot;mini&quot;&gt;&lt;/div&gt;<br>      &lt;/div&gt;<br>      &lt;div class=&quot;one&quot;&gt;<br>         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>         &lt;div class=&quot;mini&quot; title=&quot;tesst&quot;&gt;class为mini,title为tesst&lt;/div&gt;<br>      &lt;/div&gt;<br>      &lt;div style=&quot;display:none;&quot; class=&quot;none&quot;&gt;style的display为&quot;none&quot;的div&lt;/div&gt;<br>      &lt;div class=&quot;hide&quot;&gt;class为&quot;hide&quot;的div&lt;/div&gt;<br>      &lt;div&gt;<br>         包含input的type为&quot;hidden&quot;的div&lt;input type=&quot;hidden&quot; size=&quot;8&quot;&gt;<br>      &lt;/div&gt;<br>      &lt;span id=&quot;span&quot;&gt;^^span元素^^&lt;/span&gt;<br>   &lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h4 id="jQuery基本过滤选择器"><a href="#jQuery基本过滤选择器" class="headerlink" title="jQuery基本过滤选择器"></a>jQuery基本过滤选择器</h4><p>:first 获取第一个元素 </p><p>:last 获取最后个元素 </p><p>:not(selector) 去除所有与给定选择器匹配的元素 </p><p>:even 匹配所有索引值为偶数的元素，从 0 开始计数</p><p> :odd 匹配所有索引值为奇数的元素，从 0 开始计数 </p><p>:eq(index) 匹配一个给定索引值的元素 </p><p>:gt(index) 匹配所有大于给定索引值的元素</p><p>:lt(index) 匹配所有小于给定索引值的元素</p><p> :header 匹配如 h1, h2, h3 之类的标题元素 </p><p>:animated 匹配所有正在执行动画效果的元</p><p>:hidden匹配被隐藏起来的元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> <span class="hljs-variable constant_">HTML</span> <span class="hljs-variable constant_">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/strict.dtd&quot;</span>&gt;<br>&lt;html&gt;<br>   &lt;head&gt;<br>      &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;<br>      &lt;title&gt;Untitled Document&lt;/title&gt;<br>      &lt;style type=&quot;text/css&quot;&gt;<br>         div, span, p &#123;<br>             width: 140px;<br>             height: 140px;<br>             margin: 5px;<br>             background: #aaa;<br>             border: #000 1px solid;<br>             float: left;<br>             font-size: 17px;<br>             font-family: Verdana;<br>         &#125;<br>         <br>         div.mini &#123;<br>             width: 55px;<br>             height: 55px;<br>             background-color: #aaa;<br>             font-size: 12px;<br>         &#125;<br>         <br>         div.hide &#123;<br>             display: none;<br>         &#125;        <br>      &lt;/style&gt;<br>      &lt;script type=&quot;text/javascript&quot; src=&quot;../script/jquery-1.7.2.js&quot;&gt;&lt;/script&gt;<br>      &lt;script type=&quot;text/javascript&quot;&gt;<br>      //这是一个动画的代码<br>         $(document).ready(function()&#123;<br>            function anmateIt()&#123;<br>               $(&quot;#mover&quot;).slideToggle(&quot;slow&quot;, anmateIt);<br>            &#125;<br>            anmateIt();<br>         &#125;);<br>         <br>         $(document).ready(function()&#123;<br>            //1.选择第一个 div 元素  <br>            $(&quot;#btn1&quot;).click(function()&#123;<br>               $(&quot;div:first&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);<br>            &#125;);<br><br>            //2.选择最后一个 div 元素<br>            $(&quot;#btn2&quot;).click(function()&#123;<br>               $(&quot;div:last&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);<br>            &#125;);<br><br>            //3.选择class不为 one 的所有 div 元素<br>            $(&quot;#btn3&quot;).click(function()&#123;<br>               $(&quot;div:not(.one)&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);<br>            &#125;);<br><br>            //4.选择索引值为偶数的 div 元素<br>            $(&quot;#btn4&quot;).click(function()&#123;<br>               $(&quot;div:even&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);<br>            &#125;);<br><br>            //5.选择索引值为奇数的 div 元素<br>            $(&quot;#btn5&quot;).click(function()&#123;<br>               $(&quot;div:odd&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);<br>            &#125;);<br><br>            //6.选择索引值为大于 3 的 div 元素<br>            $(&quot;#btn6&quot;).click(function()&#123;<br>               $(&quot;div:gt(3)&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);<br>            &#125;);<br><br>            //7.选择索引值为等于 3 的 div 元素<br>            $(&quot;#btn7&quot;).click(function()&#123;<br>               $(&quot;div:eq(3)&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);<br>            &#125;);<br><br>            //8.选择索引值为小于 3 的 div 元素<br>            $(&quot;#btn8&quot;).click(function()&#123;<br>               $(&quot;div:lt(3)&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);<br>            &#125;);<br><br>            //9.选择所有的标题元素<br>            $(&quot;#btn9&quot;).click(function()&#123;<br>               $(&quot;:header&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);<br>            &#125;);<br><br>            //10.选择当前正在执行动画的所有元素<br>            $(&quot;#btn10&quot;).click(function()&#123;<br>               $(&quot;:animated&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);<br>            &#125;);<br>            //11.选择没有执行动画的最后一个div<br>            $(&quot;#btn11&quot;).click(function()&#123;<br>               $(&quot;div:not(:animated):last&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);<br>            &#125;);<br>         &#125;);<br>      &lt;/script&gt;<br>   &lt;/head&gt;<br>   &lt;body&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;选择第一个 div 元素&quot; id=&quot;btn1&quot; /&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;选择最后一个 div 元素&quot; id=&quot;btn2&quot; /&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;选择class不为 one 的所有 div 元素&quot; id=&quot;btn3&quot; /&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;选择索引值为偶数的 div 元素&quot; id=&quot;btn4&quot; /&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;选择索引值为奇数的 div 元素&quot; id=&quot;btn5&quot; /&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;选择索引值为大于 3 的 div 元素&quot; id=&quot;btn6&quot; /&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;选择索引值为等于 3 的 div 元素&quot; id=&quot;btn7&quot; /&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;选择索引值为小于 3 的 div 元素&quot; id=&quot;btn8&quot; /&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;选择所有的标题元素&quot; id=&quot;btn9&quot; /&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;选择当前正在执行动画的所有元素&quot; id=&quot;btn10&quot; /&gt;    <br>      &lt;input type=&quot;button&quot; value=&quot;选择没有执行动画的最后一个div&quot; id=&quot;btn11&quot; /&gt;<br><br><br>      &lt;h3&gt;基本选择器.&lt;/h3&gt;<br>      &lt;br&gt;&lt;br&gt;<br>      &lt;div class=&quot;one&quot; id=&quot;one&quot;&gt;<br>         id 为 one,class 为 one 的div<br>         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>      &lt;/div&gt;<br>      &lt;div class=&quot;one&quot; id=&quot;two&quot; title=&quot;test&quot;&gt;<br>         id为two,class为one,title为test的div<br>         &lt;div class=&quot;mini&quot; title=&quot;other&quot;&gt;class为mini,title为other&lt;/div&gt;<br>         &lt;div class=&quot;mini&quot; title=&quot;test&quot;&gt;class为mini,title为test&lt;/div&gt;<br>      &lt;/div&gt;<br>      &lt;div class=&quot;one&quot;&gt;<br>         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>         &lt;div class=&quot;mini&quot;&gt;&lt;/div&gt;<br>      &lt;/div&gt;<br>      &lt;div class=&quot;one&quot;&gt;<br>         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>         &lt;div class=&quot;mini&quot; title=&quot;tesst&quot;&gt;class为mini,title为tesst&lt;/div&gt;<br>      &lt;/div&gt;<br>      &lt;div style=&quot;display:none;&quot; class=&quot;none&quot;&gt;style的display为&quot;none&quot;的div&lt;/div&gt;<br>      &lt;div class=&quot;hide&quot;&gt;class为&quot;hide&quot;的div&lt;/div&gt;<br>      &lt;div&gt;<br>         包含input的type为&quot;hidden&quot;的div&lt;input type=&quot;hidden&quot; size=&quot;8&quot;&gt;<br>      &lt;/div&gt;<br>      &lt;div id=&quot;mover&quot;&gt;正在执行动画的div元素.&lt;/div&gt;<br>   &lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h4 id="jQuery内容过滤器"><a href="#jQuery内容过滤器" class="headerlink" title="jQuery内容过滤器"></a>jQuery内容过滤器</h4><p>文本也算是子元素</p><p>:contains(text) 匹配包含给定文本的元素 </p><p>:empty 匹配所有不包含子元素或者文本的空元素 </p><p>:parent 匹配含有子元素或者文本的元素 </p><p>:has(selector) 匹配含有选择器所匹配的元素的元</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> <span class="hljs-variable constant_">HTML</span> <span class="hljs-variable constant_">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/strict.dtd&quot;</span>&gt;<br>&lt;html&gt;<br>   &lt;head&gt;<br>      &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;<br>      &lt;title&gt;Untitled Document&lt;/title&gt;<br>      &lt;style type=&quot;text/css&quot;&gt;<br>         div, span, p &#123;<br>             width: 140px;<br>             height: 140px;<br>             margin: 5px;<br>             background: #aaa;<br>             border: #000 1px solid;<br>             float: left;<br>             font-size: 17px;<br>             font-family: Verdana;<br>         &#125;<br>         <br>         div.mini &#123;<br>             width: 55px;<br>             height: 55px;<br>             background-color: #aaa;<br>             font-size: 12px;<br>         &#125;<br>         <br>         div.hide &#123;<br>             display: none;<br>         &#125;        <br>      &lt;/style&gt;<br>      &lt;script type=&quot;text/javascript&quot; src=&quot;../script/jquery-1.7.2.js&quot;&gt;&lt;/script&gt;<br>      &lt;script type=&quot;text/javascript&quot;&gt;<br>         $(document).ready(function()&#123;<br>            function anmateIt()&#123;<br>               $(&quot;#mover&quot;).slideToggle(&quot;slow&quot;, anmateIt);<br>            &#125;<br>   <br>            anmateIt();             <br>         &#125;);<br>         <br>         /** <br>         :contains(text)   <br>         :empty             <br>         :has(selector)     <br>         :parent          <br>         */<br>         $(document).ready(function()&#123;<br>            //1.选择 含有文本 &#x27;di&#x27; 的 div 元素<br>            $(&quot;#btn1&quot;).click(function()&#123;<br>               $(&quot;div:contains(&#x27;di&#x27;)&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);<br>            &#125;);<br><br>            //2.选择不包含子元素(包括文本元素) 的 div 空元素<br>            $(&quot;#btn2&quot;).click(function()&#123;<br>               $(&quot;div:empty&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);<br>            &#125;);<br><br>            //3.选择含有 class 为 mini 元素的 div 元素<br>            $(&quot;#btn3&quot;).click(function()&#123;<br>               $(&quot;div:has(.mini)&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);<br>            &#125;);<br><br>            //4.选择含有子元素(包括文本元素)的div元素<br>            $(&quot;#btn4&quot;).click(function()&#123;<br>               $(&quot;div:parent&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);<br>            &#125;);<br>         &#125;);<br>      &lt;/script&gt;<br>   &lt;/head&gt;<br>   &lt;body&gt;    <br>      &lt;input type=&quot;button&quot; value=&quot;选择 含有文本 &#x27;di&#x27; 的 div 元素&quot; id=&quot;btn1&quot; /&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;选择不包含子元素(或者文本元素) 的 div 空元素&quot; id=&quot;btn2&quot; /&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;选择含有 class 为 mini 元素的 div 元素&quot; id=&quot;btn3&quot; /&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;选择含有子元素(或者文本元素)的div元素&quot; id=&quot;btn4&quot; /&gt;<br>      <br>      &lt;br&gt;&lt;br&gt;<br>      &lt;div class=&quot;one&quot; id=&quot;one&quot;&gt;<br>         id 为 one,class 为 one 的div<br>         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>      &lt;/div&gt;<br>      &lt;div class=&quot;one&quot; id=&quot;two&quot; title=&quot;test&quot;&gt;<br>         id为two,class为one,title为test的div<br>         &lt;div class=&quot;mini&quot; title=&quot;other&quot;&gt;class为mini,title为other&lt;/div&gt;<br>         &lt;div class=&quot;mini&quot; title=&quot;test&quot;&gt;class为mini,title为test&lt;/div&gt;<br>      &lt;/div&gt;<br>      &lt;div class=&quot;one&quot;&gt;<br>         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>         &lt;div class=&quot;mini&quot;&gt;&lt;/div&gt;<br>      &lt;/div&gt;<br>      &lt;div class=&quot;one&quot;&gt;<br>         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>         &lt;div class=&quot;mini&quot; title=&quot;tesst&quot;&gt;class为mini,title为tesst&lt;/div&gt;<br>      &lt;/div&gt;<br>      &lt;div style=&quot;display:none;&quot; class=&quot;none&quot;&gt;style的display为&quot;none&quot;的div&lt;/div&gt;<br>      &lt;div class=&quot;hide&quot;&gt;class为&quot;hide&quot;的div&lt;/div&gt;<br>      &lt;div&gt;<br>         包含input的type为&quot;hidden&quot;的div&lt;input type=&quot;hidden&quot; size=&quot;8&quot;&gt;<br>      &lt;/div&gt;<br>      &lt;div id=&quot;mover&quot;&gt;正在执行动画的div元素.&lt;/div&gt;<br>   &lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h4 id="jQuery属性过滤选择器"><a href="#jQuery属性过滤选择器" class="headerlink" title="jQuery属性过滤选择器"></a>jQuery属性过滤选择器</h4><p>[attribute] 匹配包含给定属性的元素。 </p><p>[attribute&#x3D;value] 匹配给定的属性是某个特定值的元素 </p><p>[attribute!&#x3D;value] 匹配所有不含有指定的属性，或者属性不等于特定值的元素。 </p><p>[attribute^&#x3D;value] 匹配给定的属性是以某些值开始的元素 </p><p>[attribute$&#x3D;value] 匹配给定的属性是以某些值结尾的元素 </p><p>[attribute*&#x3D;value] 匹配给定的属性是以包含某些值的元素</p><p> [attrSel1][attrSel2][attrSelN] 复合属性选择器，需要同时满足多个条件时使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> <span class="hljs-variable constant_">HTML</span> <span class="hljs-variable constant_">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/strict.dtd&quot;</span>&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;<br>&lt;title&gt;Untitled Document&lt;/title&gt;<br>&lt;style type=&quot;text/css&quot;&gt;<br>div,span,p &#123;<br>   width: 140px;<br>   height: 140px;<br>   margin: 5px;<br>   background: #aaa;<br>   border: #000 1px solid;<br>   float: left;<br>   font-size: 17px;<br>   font-family: Verdana;<br>&#125;<br><br>div.mini &#123;<br>   width: 55px;<br>   height: 55px;<br>   background-color: #aaa;<br>   font-size: 12px;<br>&#125;<br><br>div.hide &#123;<br>   display: none;<br>&#125;<br>&lt;/style&gt;<br>&lt;script type=&quot;text/javascript&quot; src=&quot;../script/jquery-1.7.2.js&quot;&gt;&lt;/script&gt;<br>&lt;script type=&quot;text/javascript&quot;&gt;<br>   /**<br>[attribute]          <br>[attribute=value]     <br>[attribute!=value]         <br>[attribute^=value]        <br>[attribute$=value]        <br>[attribute*=value]        <br>[attrSel1][attrSel2][attrSelN]  <br>   <br>   <br>   */<br>   $(function() &#123;<br>      //1.选取含有 属性title 的div元素<br>      $(&quot;#btn1&quot;).click(function() &#123;<br>         $(&quot;div[title]&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);<br>      &#125;);<br>      //2.选取 属性title值等于&#x27;test&#x27;的div元素<br>      $(&quot;#btn2&quot;).click(function() &#123;<br>         $(&quot;div[title=&#x27;test&#x27;]&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);<br>      &#125;);<br>      //3.选取 属性title值不等于&#x27;test&#x27;的div元素(*没有属性title的也将被选中)<br>      $(&quot;#btn3&quot;).click(function() &#123;<br>         $(&quot;div[title!=&#x27;test&#x27;]&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);<br>      &#125;);<br>      //4.选取 属性title值 以&#x27;te&#x27;开始 的div元素<br>      $(&quot;#btn4&quot;).click(function() &#123;<br>         $(&quot;div[title^=&#x27;te&#x27;]&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);<br>      &#125;);<br>      //5.选取 属性title值 以&#x27;est&#x27;结束 的div元素<br>      $(&quot;#btn5&quot;).click(function() &#123;<br>         $(&quot;div[title$=&#x27;est&#x27;]&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);<br>      &#125;);<br>      //6.选取 属性title值 含有&#x27;es&#x27;的div元素<br>      $(&quot;#btn6&quot;).click(function() &#123;<br>         $(&quot;div[title*=&#x27;es&#x27;]&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);<br>      &#125;);<br>      <br>      //7.首先选取有属性id的div元素，然后在结果中 选取属性title值 含有&#x27;es&#x27;的 div 元素<br>      $(&quot;#btn7&quot;).click(function() &#123;<br>         $(&quot;div[id][title*=&#x27;es&#x27;]&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);<br>      &#125;);<br>      //8.选取 含有 title 属性值, 且title 属性值不等于 test 的 div 元素<br>      $(&quot;#btn8&quot;).click(function() &#123;<br>         $(&quot;div[title][title!=&#x27;test&#x27;]&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);<br>      &#125;);<br>   &#125;);<br>&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>   &lt;input type=&quot;button&quot; value=&quot;选取含有 属性title 的div元素.&quot; id=&quot;btn1&quot; style=&quot;display: none;&quot;/&gt;<br>   &lt;input type=&quot;button&quot; value=&quot;选取 属性title值等于&#x27;test&#x27;的div元素.&quot; id=&quot;btn2&quot; /&gt;<br>   &lt;input type=&quot;button&quot;<br>      value=&quot;选取 属性title值不等于&#x27;test&#x27;的div元素(没有属性title的也将被选中).&quot; id=&quot;btn3&quot; /&gt;<br>   &lt;input type=&quot;button&quot; value=&quot;选取 属性title值 以&#x27;te&#x27;开始 的div元素.&quot; id=&quot;btn4&quot; /&gt;<br>   &lt;input type=&quot;button&quot; value=&quot;选取 属性title值 以&#x27;est&#x27;结束 的div元素.&quot; id=&quot;btn5&quot; /&gt;<br>   &lt;input type=&quot;button&quot; value=&quot;选取 属性title值 含有&#x27;es&#x27;的div元素.&quot; id=&quot;btn6&quot; /&gt;<br>   &lt;input type=&quot;button&quot;<br>      value=&quot;组合属性选择器,首先选取有属性id的div元素，然后在结果中 选取属性title值 含有&#x27;es&#x27;的 div 元素.&quot;<br>      id=&quot;btn7&quot; /&gt;<br>   &lt;input type=&quot;button&quot;<br>      value=&quot;选取 含有 title 属性值, 且title 属性值不等于 test 的 div 元素.&quot; id=&quot;btn8&quot; /&gt;<br><br>   &lt;br&gt;<br>   &lt;br&gt;<br>   &lt;div class=&quot;one&quot; id=&quot;one&quot;&gt;<br>      id 为 one,class 为 one 的div<br>      &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>   &lt;/div&gt;<br>   &lt;div class=&quot;one&quot; id=&quot;two&quot; title=&quot;test&quot;&gt;<br>      id为two,class为one,title为test的div<br>      &lt;div class=&quot;mini&quot; title=&quot;other&quot;&gt;class为mini,title为other&lt;/div&gt;<br>      &lt;div class=&quot;mini&quot; title=&quot;test&quot;&gt;class为mini,title为test&lt;/div&gt;<br>   &lt;/div&gt;<br>   &lt;div class=&quot;one&quot;&gt;<br>      &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>      &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>      &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>      &lt;div class=&quot;mini&quot;&gt;&lt;/div&gt;<br>   &lt;/div&gt;<br>   &lt;div class=&quot;one&quot;&gt;<br>      &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>      &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>      &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>      &lt;div class=&quot;mini&quot; title=&quot;tesst&quot;&gt;class为mini,title为tesst&lt;/div&gt;<br>   &lt;/div&gt;<br>   &lt;div style=&quot;display: none;&quot; class=&quot;none&quot;&gt;style的display为&quot;none&quot;的div&lt;/div&gt;<br>   &lt;div class=&quot;hide&quot;&gt;class为&quot;hide&quot;的div&lt;/div&gt;<br>   &lt;div&gt;<br>      包含input的type为&quot;hidden&quot;的div&lt;input type=&quot;hidden&quot; value=&quot;123456789&quot;<br>         size=&quot;8&quot;&gt;<br>   &lt;/div&gt;<br>   &lt;div id=&quot;mover&quot;&gt;正在执行动画的div元素.&lt;/div&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h4 id="jQuery表单过滤选择器"><a href="#jQuery表单过滤选择器" class="headerlink" title="jQuery表单过滤选择器"></a>jQuery表单过滤选择器</h4><p>:input 匹配所有 input, textarea, select 和 button 元素 </p><p>:text 匹配所有 文本输入框 </p><p>:password 匹配所有的密码输入框 </p><p>:radio 匹配所有的单选框 </p><p>:checkbox 匹配所有的复选框 </p><p>:submit 匹配所有提交按钮 </p><p>:image 匹配所有 img 标签 </p><p>:reset 匹配所有重置按钮 </p><p>:button 匹配所有 input type&#x3D;button 按钮 </p><p>:file 匹配所有 input type&#x3D;file 文件上传 </p><p>:hidden 匹配所有不可见元素 display:none </p><p>:enabled 匹配所有可用元素 </p><p>:disabled 匹配所有不可用元素 </p><p>:checked 匹配所有选中的单选，复选，和下拉列表中选中的 option 标签对象 </p><p>:selected 匹配所有选中的 option</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">HTML</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/strict.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Untitled Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">         $(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            </span><br><span class="language-javascript">            </span><br><span class="language-javascript">      <span class="hljs-comment">/**</span></span><br><span class="hljs-comment"><span class="language-javascript">      :input        </span></span><br><span class="hljs-comment"><span class="language-javascript">      :text     </span></span><br><span class="hljs-comment"><span class="language-javascript">      :password  </span></span><br><span class="hljs-comment"><span class="language-javascript">      :radio        </span></span><br><span class="hljs-comment"><span class="language-javascript">      :checkbox  </span></span><br><span class="hljs-comment"><span class="language-javascript">      :submit    </span></span><br><span class="hljs-comment"><span class="language-javascript">      :image        </span></span><br><span class="hljs-comment"><span class="language-javascript">      :reset        </span></span><br><span class="hljs-comment"><span class="language-javascript">      :button    </span></span><br><span class="hljs-comment"><span class="language-javascript">      :file     </span></span><br><span class="hljs-comment"><span class="language-javascript">      :hidden    </span></span><br><span class="hljs-comment"><span class="language-javascript">      </span></span><br><span class="hljs-comment"><span class="language-javascript">      表单对象的属性</span></span><br><span class="hljs-comment"><span class="language-javascript">      :enabled      </span></span><br><span class="hljs-comment"><span class="language-javascript">      :disabled     </span></span><br><span class="hljs-comment"><span class="language-javascript">      :checked      </span></span><br><span class="hljs-comment"><span class="language-javascript">      :selected     </span></span><br><span class="hljs-comment"><span class="language-javascript">      */</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">               </span><br><span class="language-javascript">            <span class="hljs-comment">//1.对表单内 可用input 赋值操作</span></span><br><span class="language-javascript">            $(<span class="hljs-string">&quot;#btn1&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">               <span class="hljs-comment">// val()可以操作表单项的value属性值</span></span><br><span class="language-javascript">               <span class="hljs-comment">//表单项是那个form标签里面的那些</span></span><br><span class="language-javascript">               <span class="hljs-comment">// 它可以设置和获取</span></span><br><span class="language-javascript">               $(<span class="hljs-string">&quot;:text:enabled&quot;</span>).<span class="hljs-title function_">val</span>(<span class="hljs-string">&quot;我是万能的程序员&quot;</span>);</span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript">            <span class="hljs-comment">//2.对表单内 不可用input 赋值操作</span></span><br><span class="language-javascript">            $(<span class="hljs-string">&quot;#btn2&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">               $(<span class="hljs-string">&quot;:text:disabled&quot;</span>).<span class="hljs-title function_">val</span>(<span class="hljs-string">&quot;管你可用不可用，反正我是万能的程序员&quot;</span>);</span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript">            <span class="hljs-comment">//3.获取多选框选中的个数  使用size()方法获取选取到的元素集合的元素个数</span></span><br><span class="language-javascript">            $(<span class="hljs-string">&quot;#btn3&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">               <span class="hljs-title function_">alert</span>( $(<span class="hljs-string">&quot;:checkbox:checked&quot;</span>).<span class="hljs-property">length</span> );</span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript">            <span class="hljs-comment">//4.获取多选框，每个选中的value值</span></span><br><span class="language-javascript">            $(<span class="hljs-string">&quot;#btn4&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">               <span class="hljs-comment">// 获取全部选中的复选框标签对象</span></span><br><span class="language-javascript">               <span class="hljs-keyword">var</span> $checkboies = $(<span class="hljs-string">&quot;:checkbox:checked&quot;</span>);</span><br><span class="language-javascript">               <span class="hljs-comment">// 老式遍历</span></span><br><span class="language-javascript">               <span class="hljs-comment">// for (var i = 0; i &lt; $checkboies.length; i++)&#123;</span></span><br><span class="language-javascript">               <span class="hljs-comment">//     alert( $checkboies[i].value );</span></span><br><span class="language-javascript">               <span class="hljs-comment">// &#125;</span></span><br><span class="language-javascript">               <span class="hljs-comment">// each方法是jQuery对象提供用来遍历元素的方法</span></span><br><span class="language-javascript">               <span class="hljs-comment">// 在遍历的function函数中，有一个this对象，这个this对象，就是当前遍历到的dom对象</span></span><br><span class="language-javascript">               $checkboies.<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                  <span class="hljs-title function_">alert</span>( <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> );</span><br><span class="language-javascript">               &#125;);</span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript">            <span class="hljs-comment">//5.获取下拉框选中的内容  </span></span><br><span class="language-javascript">            $(<span class="hljs-string">&quot;#btn5&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">               <span class="hljs-comment">// 选中select后代的option标签且被选中的</span></span><br><span class="language-javascript">               <span class="hljs-keyword">var</span> $options = $(<span class="hljs-string">&quot;select option:selected&quot;</span>);</span><br><span class="language-javascript">               <span class="hljs-comment">// 遍历，获取option标签中的文本内容</span></span><br><span class="language-javascript">               $options.<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                  <span class="hljs-comment">// 在each遍历的function函数中，有一个this对象。这个this对象是当前正在遍历到的dom对象</span></span><br><span class="language-javascript">                  <span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">innerHTML</span>);</span><br><span class="language-javascript">               &#125;);</span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript">         &#125;) </span><br><span class="language-javascript">      </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>表单对象属性过滤选择器<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn1&quot;</span>&gt;</span>对表单内 可用input 赋值操作.<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn2&quot;</span>&gt;</span>对表单内 不可用input 赋值操作.<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn3&quot;</span>&gt;</span>获取多选框选中的个数.<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn4&quot;</span>&gt;</span>获取多选框选中的内容.<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn5&quot;</span>&gt;</span>获取下拉框选中的内容.<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>       <br>      <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;form1&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>         <br>         可用元素: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;add&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;可用文本框1&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>         <span class="hljs-comment">&lt;!--diabled=&quot;disabled就是让文本框不可选&quot;--&gt;</span><br>         不可用元素: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">disabled</span>=<span class="hljs-string">&quot;disabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;不可用文本框&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>         可用元素: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;che&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;可用文本框2&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>         不可用元素: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">disabled</span>=<span class="hljs-string">&quot;disabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;不可用文本框&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>         <br>         多选框: <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;newsletter&quot;</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">&quot;checked&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;test1&quot;</span> /&gt;</span>test1<br>         <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;newsletter&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;test2&quot;</span> /&gt;</span>test2<br>         <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;newsletter&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;test3&quot;</span> /&gt;</span>test3<br>         <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;newsletter&quot;</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">&quot;checked&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;test4&quot;</span> /&gt;</span>test4<br>         <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;newsletter&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;test5&quot;</span> /&gt;</span>test5<br>         <br>         <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>         下拉列表1: <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>         <span class="hljs-comment">&lt;!--multiple属性决定了这个下拉表可以多选--&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;test&quot;</span> <span class="hljs-attr">multiple</span>=<span class="hljs-string">&quot;multiple&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height: 100px&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sele1&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>浙江<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">selected</span>=<span class="hljs-string">&quot;selected&quot;</span>&gt;</span>辽宁<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>北京<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">selected</span>=<span class="hljs-string">&quot;selected&quot;</span>&gt;</span>天津<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>广州<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>湖北<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>         <br>         <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>         下拉列表2: <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;test2&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>浙江<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>辽宁<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">selected</span>=<span class="hljs-string">&quot;selected&quot;</span>&gt;</span>北京<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>天津<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>广州<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>湖北<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span>       <br>   <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="jQuery元素的筛选"><a href="#jQuery元素的筛选" class="headerlink" title="jQuery元素的筛选"></a>jQuery元素的筛选</h4><p>eq() 获取给定索引的元素                 功能跟 :eq() 一样</p><p>first() 获取第一个元素                 功能跟 :first 一样 </p><p>last() 获取最后一个元素                     功能跟 :last 一样 </p><p>filter(exp) 留下匹配的元素 </p><p>is(exp) 判断是否匹配给定的选择器，只要有一个匹配就返回，true </p><p>has(exp) 返回包含有匹配选择器的元素的元素                功能跟 :has 一样 </p><p>not(exp) 删除匹配选择器的元素                       功能跟 :not 一样 </p><p>children(exp) 返回匹配给定选择器的子元素          功能跟 parent&gt;child 一样 </p><p>find(exp) 返回匹配给定选择器的后代元素         功能跟 ancestor descendant 一样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> <span class="hljs-variable constant_">HTML</span> <span class="hljs-variable constant_">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/strict.dtd&quot;</span>&gt;<br>&lt;html&gt;<br>   &lt;head&gt;<br>      &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;<br>      &lt;title&gt;DOM查询&lt;/title&gt;<br>      &lt;style type=&quot;text/css&quot;&gt;<br>         div, span, p &#123;<br>             width: 140px;<br>             height: 140px;<br>             margin: 5px;<br>             background: #aaa;<br>             border: #000 1px solid;<br>             float: left;<br>             font-size: 17px;<br>             font-family: Verdana;<br>         &#125;<br>         <br>         div.mini &#123;<br>             width: 55px;<br>             height: 55px;<br>             background-color: #aaa;<br>             font-size: 12px;<br>         &#125;<br>         <br>         div.hide &#123;<br>             display: none;<br>         &#125;        <br>      &lt;/style&gt;<br>      &lt;script type=&quot;text/javascript&quot; src=&quot;../script/jquery-1.7.2.js&quot;&gt;&lt;/script&gt;<br>      &lt;script type=&quot;text/javascript&quot;&gt;<br>         $(document).ready(function()&#123;<br>            function anmateIt()&#123;<br>               $(&quot;#mover&quot;).slideToggle(&quot;slow&quot;, anmateIt);<br>            &#125;<br>            anmateIt();<br>            <br>   /**<br>               <br>   过滤<br>   eq(index|-index)         <br>   first()                <br>   last()                    <br>   hasClass(class)          <br>   filter(expr|obj|ele|fn)    <br>   is(expr|obj|ele|fn)1.6*    <br>   has(expr|ele)           <br>   not(expr|ele|fn)         <br>   slice(start,[end])           <br>   <br>   查找<br>   children([expr])         <br>   closest(expr,[con]|obj|ele)1.6*   <br>   find(expr|obj|ele)              <br>   next([expr])               <br>   nextall([expr])             <br>   nextUntil([exp|ele][,fil])1.6*     <br>   parent([expr])                 <br>   parents([expr])             <br>   parentsUntil([exp|ele][,fil])1.6*  <br>   prev([expr])               <br>   prevall([expr])             <br>   prevUntil([exp|ele][,fil])1.6*     <br>   siblings([expr])            <br>   <br>   串联<br>   add(expr|ele|html|obj[,con])   <br>                     <br>   <br>   */<br>            <br>            //(1)eq()  选择索引值为等于 3 的 div 元素<br>            $(&quot;#btn1&quot;).click(function()&#123;<br>               $(&quot;div&quot;).eq(3).css(&quot;background-color&quot;,&quot;#bfa&quot;);<br>            &#125;);<br>            //(2)first()选择第一个 div 元素<br>             $(&quot;#btn2&quot;).click(function()&#123;<br>                //first()   选取第一个元素<br>               $(&quot;div&quot;).first().css(&quot;background-color&quot;,&quot;#bfa&quot;);<br>            &#125;);<br>            //(3)last()选择最后一个 div 元素<br>            $(&quot;#btn3&quot;).click(function()&#123;<br>               //last()  选取最后一个元素<br>               $(&quot;div&quot;).last().css(&quot;background-color&quot;,&quot;#bfa&quot;);<br>            &#125;);<br>            //(4)filter()在div中选择索引为偶数的<br>            $(&quot;#btn4&quot;).click(function()&#123;<br>               //filter()  过滤   传入的是选择器字符串<br>               $(&quot;div&quot;).filter(&quot;:even&quot;).css(&quot;background-color&quot;,&quot;#bfa&quot;);<br>            &#125;);<br>             //(5)is()判断#one是否为:empty或:parent<br>            //is用来检测jq对象是否符合指定的选择器<br>            $(&quot;#btn5&quot;).click(function()&#123;<br>               alert( $(&quot;#one&quot;).is(&quot;:empty&quot;) );<br>            &#125;);<br>            <br>            //(6)has()选择div中包含.mini的<br>            $(&quot;#btn6&quot;).click(function()&#123;<br>               //has(selector)  选择器字符串    是否包含selector<br>               $(&quot;div&quot;).has(&quot;.mini&quot;).css(&quot;background-color&quot;,&quot;#bfa&quot;);<br>            &#125;);<br>            //(7)not()选择div中class不为one的<br>            $(&quot;#btn7&quot;).click(function()&#123;<br>               //not(selector)  选择不是selector的元素<br>               $(&quot;div&quot;).not(&#x27;.one&#x27;).css(&quot;background-color&quot;,&quot;#bfa&quot;);<br>            &#125;);<br>            //(8)children()在body中选择所有class为one的div子元素<br>            $(&quot;#btn8&quot;).click(function()&#123;<br>               //children()  选出所有的子元素<br>               $(&quot;body&quot;).children(&quot;div.one&quot;).css(&quot;background-color&quot;,&quot;#bfa&quot;);<br>            &#125;);<br>            <br>            <br>            //(9)find()在body中选择所有class为mini的div元素<br>            $(&quot;#btn9&quot;).click(function()&#123;<br>               //find()  选出所有的后代元素<br>               $(&quot;body&quot;).find(&quot;div.mini&quot;).css(&quot;background-color&quot;,&quot;#bfa&quot;);<br>            &#125;);<br>            //(10)next() #one的下一个div<br>            $(&quot;#btn10&quot;).click(function()&#123;<br>               //next()  选择下一个兄弟元素<br>               $(&quot;#one&quot;).next(&quot;div&quot;).css(&quot;background-color&quot;,&quot;#bfa&quot;);<br>            &#125;);<br>            //(11)nextAll() #one后面所有的span元素<br>            $(&quot;#btn11&quot;).click(function()&#123;<br>               //nextAll()   选出后面所有的元素<br>               $(&quot;#one&quot;).nextAll(&quot;span&quot;).css(&quot;background-color&quot;,&quot;#bfa&quot;);<br>            &#125;);<br>            //(12)nextUntil() #one和span之间的元素，不算两边<br>            $(&quot;#btn12&quot;).click(function()&#123;<br>               //<br>               $(&quot;#one&quot;).nextUntil(&quot;span&quot;).css(&quot;background-color&quot;,&quot;#bfa&quot;)<br>            &#125;);<br>            //(13)parent() .mini的父元素<br>            $(&quot;#btn13&quot;).click(function()&#123;<br>               $(&quot;.mini&quot;).parent().css(&quot;background-color&quot;,&quot;#bfa&quot;);<br>            &#125;);<br>            //(14)prev() #two的上一个div<br>            $(&quot;#btn14&quot;).click(function()&#123;<br>               //prev()  <br>               $(&quot;#two&quot;).prev(&quot;div&quot;).css(&quot;background-color&quot;,&quot;#bfa&quot;)<br>            &#125;);<br>            //(15)prevAll() span前面所有的div<br>            $(&quot;#btn15&quot;).click(function()&#123;<br>               //prevAll()   选出前面所有的元素<br>               $(&quot;span&quot;).prevAll(&quot;div&quot;).css(&quot;background-color&quot;,&quot;#bfa&quot;)<br>            &#125;);<br>            //(16)prevUntil() span向前直到#one的元素，都不算两个边界<br>            $(&quot;#btn16&quot;).click(function()&#123;<br>               //prevUntil(exp)   找到之前所有的兄弟元素直到找到exp停止<br>               $(&quot;span&quot;).prevUntil(&quot;#one&quot;).css(&quot;background-color&quot;,&quot;#bfa&quot;)<br>            &#125;);<br>            //(17)siblings() #two的所有兄弟元素<br>            $(&quot;#btn17&quot;).click(function()&#123;<br>               //siblings()    找到所有的兄弟元素，包括前面的和后面的<br>               $(&quot;#two&quot;).siblings().css(&quot;background-color&quot;,&quot;#bfa&quot;)<br>            &#125;);<br>            <br>            <br>            //(18)add()选择所有的 span 元素和id为two的元素<br>            $(&quot;#btn18&quot;).click(function()&#123;<br>   <br>               //   $(&quot;span,#two,.mini,#one&quot;)<br>               $(&quot;span&quot;).add(&quot;#two&quot;).add(&quot;#one&quot;).css(&quot;background-color&quot;,&quot;#bfa&quot;);<br>               <br>            &#125;);<br>            <br><br><br>         &#125;);<br>         <br>         <br>      &lt;/script&gt;<br>   &lt;/head&gt;<br>   &lt;body&gt;    <br>      &lt;input type=&quot;button&quot; value=&quot;eq()选择索引值为等于 3 的 div 元素&quot; id=&quot;btn1&quot; /&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;first()选择第一个 div 元素&quot; id=&quot;btn2&quot; /&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;last()选择最后一个 div 元素&quot; id=&quot;btn3&quot; /&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;filter()在div中选择索引为偶数的&quot; id=&quot;btn4&quot; /&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;is()判断#one是否为:empty或:parent&quot; id=&quot;btn5&quot; /&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;has()选择div中包含.mini的&quot; id=&quot;btn6&quot; /&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;not()选择div中class不为one的&quot; id=&quot;btn7&quot; /&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;children()在body中选择所有class为one的div子元素&quot; id=&quot;btn8&quot; /&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;find()在body中选择所有class为mini的div后代元素&quot; id=&quot;btn9&quot; /&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;next()#one的下一个div&quot; id=&quot;btn10&quot; /&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;nextAll()#one后面所有的span元素&quot; id=&quot;btn11&quot; /&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;nextUntil()#one和span之间的元素&quot; id=&quot;btn12&quot; /&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;parent().mini的父元素&quot; id=&quot;btn13&quot; /&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;prev()#two的上一个div&quot; id=&quot;btn14&quot; /&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;prevAll()span前面所有的div&quot; id=&quot;btn15&quot; /&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;prevUntil()span向前直到#one的元素&quot; id=&quot;btn16&quot; /&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;siblings()#two的所有兄弟元素&quot; id=&quot;btn17&quot; /&gt;<br>      &lt;input type=&quot;button&quot; value=&quot;add()选择所有的 span 元素和id为two的元素&quot; id=&quot;btn18&quot; /&gt;<br><br>      <br>      &lt;h3&gt;基本选择器.&lt;/h3&gt;<br>      &lt;br /&gt;&lt;br /&gt;<br>      文本框&lt;input type=&quot;text&quot; name=&quot;account&quot; disabled=&quot;disabled&quot; /&gt;<br>      &lt;br&gt;&lt;br&gt;<br>      &lt;div class=&quot;one&quot; id=&quot;one&quot;&gt;<br>         id 为 one,class 为 one 的div<br>         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>      &lt;/div&gt;<br>      &lt;div class=&quot;one&quot; id=&quot;two&quot; title=&quot;test&quot;&gt;<br>         id为two,class为one,title为test的div<br>         &lt;div class=&quot;mini&quot; title=&quot;other&quot;&gt;&lt;b&gt;class为mini,title为other&lt;/b&gt;&lt;/div&gt;<br>         &lt;div class=&quot;mini&quot; title=&quot;test&quot;&gt;class为mini,title为test&lt;/div&gt;<br>      &lt;/div&gt;<br>      <br>      &lt;div class=&quot;one&quot;&gt;<br>         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>         &lt;div class=&quot;mini&quot;&gt;&lt;/div&gt;<br>      &lt;/div&gt;<br>      &lt;div class=&quot;one&quot;&gt;<br>         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;<br>         &lt;div class=&quot;mini&quot; title=&quot;tesst&quot;&gt;class为mini,title为tesst&lt;/div&gt;<br>      &lt;/div&gt;<br>      &lt;div style=&quot;display:none;&quot; class=&quot;none&quot;&gt;style的display为&quot;none&quot;的div&lt;/div&gt;<br>      &lt;div class=&quot;hide&quot;&gt;class为&quot;hide&quot;的div&lt;/div&gt;<br>      &lt;span id=&quot;span1&quot;&gt;^^span元素 111^^&lt;/span&gt;<br>      &lt;div&gt;<br>         包含input的type为&quot;hidden&quot;的div&lt;input type=&quot;hidden&quot; size=&quot;8&quot;&gt;<br>      &lt;/div&gt;<br>      &lt;span id=&quot;span2&quot;&gt;^^span元素 222^^&lt;/span&gt;<br>      &lt;div id=&quot;mover&quot;&gt;正在执行动画的div元素.&lt;/div&gt;<br>   &lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h4 id="jQuery属性操作"><a href="#jQuery属性操作" class="headerlink" title="jQuery属性操作"></a>jQuery属性操作</h4><p>html()    它可以设置和获取起始标签和结束标签中的内容，根dom属性innerHTML一样</p><p>不传参数是获取，传入参数是设置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh_CN&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">alert</span>($(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">html</span>());<span class="hljs-comment">//获取</span></span></span><br><span class="language-javascript"><span class="language-xml">     $(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">html</span>(<span class="hljs-string">&quot;&lt;h1&gt;我是赵梓皓&lt;/h1&gt;&quot;</span>);<span class="hljs-comment">//设置</span></span></span><br><span class="language-javascript"><span class="language-xml">&#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是div标签<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我是div中的spqn<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>text()      它可以设置和获取起始标签和结束标签中的文本，根dom属性innerText一样</p><p>不传参数是获取，传入参数是设置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh_CN&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">alert</span>($(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">text</span>());</span></span><br><span class="language-javascript"><span class="language-xml">  $(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">text</span>(<span class="hljs-string">&quot;&lt;h1&gt;我是赵梓皓&lt;/h1&gt;&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">&#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是div标签<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我是div中的spqn<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>text()方法只能让内容全部以文本形式显示，不能识别标签，但html标签可以</p><p>val()   它可以设置和获取<strong>表单项</strong>的value属性值              跟dom属性value一样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh_CN&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    $(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-string">&quot;button&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">alert</span>($(<span class="hljs-string">&quot;#username&quot;</span>).<span class="hljs-title function_">val</span>());</span></span><br><span class="language-javascript"><span class="language-xml">&#125;);</span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-string">&quot;#username&quot;</span>).<span class="hljs-title function_">val</span>(<span class="hljs-string">&quot;超级程序员&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">&#125;);</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是div标签<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我是div中的spqn<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;username&quot;</span> /&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>操作输入框<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>表单选择器练习</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh_CN&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">/*</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">// 批量操作单选</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">$(&quot;:radio&quot;).val([&quot;radio2&quot;]);</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">// 批量操作筛选框的选中状态</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">$(&quot;:checkbox&quot;).val([&quot;checkbox3&quot;,&quot;checkbox2&quot;]);</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">// 批量操作多选的下拉框选中状态</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">$(&quot;#multiple&quot;).val([&quot;mul2&quot;,&quot;mul3&quot;,&quot;mul4&quot;]);</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">// 操作单选的下拉框选中状态</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">$(&quot;#single&quot;).val([&quot;sin2&quot;]);</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">*/</span></span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-string">&quot;#multiple,#single,:radio,:checkbox&quot;</span>).<span class="hljs-title function_">val</span>([<span class="hljs-string">&quot;radio2&quot;</span>,<span class="hljs-string">&quot;checkbox1&quot;</span>,<span class="hljs-string">&quot;checkbox3&quot;</span>,<span class="hljs-string">&quot;mul1&quot;</span>,<span class="hljs-string">&quot;mul4&quot;</span>,<span class="hljs-string">&quot;sin3&quot;</span>]</span></span><br><span class="language-javascript"><span class="language-xml">);</span></span><br><span class="language-javascript"><span class="language-xml">&#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">单选：</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;radio1&quot;</span> /&gt;</span>radio1</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;radio2&quot;</span> /&gt;</span>radio2</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br><span class="language-xml">多选：</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;checkbox1&quot;</span> /&gt;</span>checkbox1</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;checkbox2&quot;</span> /&gt;</span>checkbox2</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;checkbox3&quot;</span> /&gt;</span>checkbox3</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br><span class="language-xml">下拉多选 ：</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;multiple&quot;</span> <span class="hljs-attr">multiple</span>=<span class="hljs-string">&quot;multiple&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;4&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;mul1&quot;</span>&gt;</span>mul1<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;mul2&quot;</span>&gt;</span>mul2<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;mul3&quot;</span>&gt;</span>mul3<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;mul4&quot;</span>&gt;</span>mul4<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br><span class="language-xml">下拉单选 ：</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;single&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sin1&quot;</span>&gt;</span>sin1<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sin2&quot;</span>&gt;</span>sin2<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sin3&quot;</span>&gt;</span>sin3<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>attr()             可以设置和获取属性的值，不推荐操作checked，readOnly，selected，disabled等等</p><p>还不可以操作非标准的属性，比如自定义属性：abc什么的</p><p>prop()           可以设置和获取属性的值，只推荐操作上面不操作的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh_CN&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//attr</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">alert</span>($(<span class="hljs-string">&quot;:checkbox:first&quot;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;name&quot;</span>));<span class="hljs-comment">//获取属性的值</span></span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-string">&quot;:checkbox:first&quot;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;abc&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">alert</span>($(<span class="hljs-string">&quot;:checkbox:first&quot;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;checked&quot;</span>));<span class="hljs-comment">//会返回undefined，但是这个时候没办法判断是没被选还是没有这个属性，所以用到prop()</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">alert</span>($(<span class="hljs-string">&quot;:checkbox:first&quot;</span>).<span class="hljs-title function_">prop</span>(<span class="hljs-string">&quot;checked&quot;</span>));<span class="hljs-comment">//返回的是false</span></span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-string">&quot;:checkbox&quot;</span>).<span class="hljs-title function_">prop</span>(<span class="hljs-string">&quot;checked&quot;</span>,<span class="hljs-literal">true</span>);<span class="hljs-comment">//让所有多选框都选中</span></span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-string">&quot;:checkbox:first&quot;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;abc&quot;</span>,<span class="hljs-string">&quot;abcvalue&quot;</span>);<span class="hljs-comment">//设置自定义属性</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">alert</span>($(<span class="hljs-string">&quot;:checkbox:first&quot;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;abc&quot;</span>));<span class="hljs-comment">//查看自定义属性</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//</span></span></span><br><span class="language-javascript"><span class="language-xml">&#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">单选：</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;radio1&quot;</span> /&gt;</span>radio1</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;radio2&quot;</span> /&gt;</span>radio2</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br><span class="language-xml">多选：</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;checkbox1&quot;</span> /&gt;</span>checkbox1</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;checkbox2&quot;</span> /&gt;</span>checkbox2</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;checkbox3&quot;</span> /&gt;</span>checkbox3</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br><span class="language-xml">下拉多选 ：</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;multiple&quot;</span> <span class="hljs-attr">multiple</span>=<span class="hljs-string">&quot;multiple&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;4&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;mul1&quot;</span>&gt;</span>mul1<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;mul2&quot;</span>&gt;</span>mul2<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;mul3&quot;</span>&gt;</span>mul3<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;mul4&quot;</span>&gt;</span>mul4<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br><span class="language-xml">下拉单选 ：</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;single&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sin1&quot;</span>&gt;</span>sin1<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sin2&quot;</span>&gt;</span>sin2<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sin3&quot;</span>&gt;</span>sin3<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="jQuery练习（全选全不选）"><a href="#jQuery练习（全选全不选）" class="headerlink" title="jQuery练习（全选全不选）"></a>jQuery练习（全选全不选）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html <span class="hljs-variable constant_">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Insert title here<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../../script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">   </span></span><br><span class="language-javascript"><span class="language-xml">   $(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-comment">//给全选绑定单击事件</span></span></span><br><span class="language-javascript"><span class="language-xml">      $(<span class="hljs-string">&quot;#checkedAllBtn&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                $(<span class="hljs-string">&quot;:checkbox&quot;</span>).<span class="hljs-title function_">prop</span>(<span class="hljs-string">&quot;checked&quot;</span>,<span class="hljs-literal">true</span>);<span class="hljs-comment">//这个地方checked的属性值是true，且属性名checked也要加双引号</span></span></span><br><span class="language-javascript"><span class="language-xml">      &#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//给全不选绑定单击事件</span></span></span><br><span class="language-javascript"><span class="language-xml">      $(<span class="hljs-string">&quot;#checkedNoBtn&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      $(<span class="hljs-string">&quot;:checkbox&quot;</span>).<span class="hljs-title function_">prop</span>(<span class="hljs-string">&quot;checked&quot;</span>,<span class="hljs-literal">false</span>);</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//给反选绑定单击事件</span></span></span><br><span class="language-javascript"><span class="language-xml">      $(<span class="hljs-string">&quot;#checkedRevBtn&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//查询全部球类的复选框</span></span></span><br><span class="language-javascript"><span class="language-xml">      $(<span class="hljs-string">&quot;:checkbox[name=&#x27;items&#x27;]&quot;</span>).<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//each方法中这个this就是每一个dom对象，也就是jQuery数组中的一个元素</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">checked</span>=!<span class="hljs-variable language_">this</span>.<span class="hljs-property">checked</span>;</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">       <span class="hljs-comment">//要检查是否满选</span></span></span><br><span class="language-javascript"><span class="language-xml">       <span class="hljs-comment">//获取球类运动总数</span></span></span><br><span class="language-javascript"><span class="language-xml">       <span class="hljs-keyword">var</span> length=$(<span class="hljs-string">&quot;:checkbox[name=&#x27;items&#x27;]&quot;</span>).<span class="hljs-property">length</span>;</span></span><br><span class="language-javascript"><span class="language-xml">       <span class="hljs-comment">//获取被选中的球类运动总数</span></span></span><br><span class="language-javascript"><span class="language-xml">       <span class="hljs-keyword">var</span> length2=$(<span class="hljs-string">&quot;:checkbox[name=&#x27;items&#x27;]:checked&quot;</span>).<span class="hljs-property">length</span>;</span></span><br><span class="language-javascript"><span class="language-xml">       <span class="hljs-comment">//比较,两种</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">/* if(length==length2)&#123;</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">       $(&quot;#checkedAllBox&quot;).prop(&quot;checked&quot;,true);</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">        &#125;*/</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        $(<span class="hljs-string">&quot;#checkedAllBox&quot;</span>).<span class="hljs-title function_">prop</span>(<span class="hljs-string">&quot;checked&quot;</span>,length==length2);</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//给提交按钮绑定事件</span></span></span><br><span class="language-javascript"><span class="language-xml">      $(<span class="hljs-string">&quot;#sendBtn&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      $(<span class="hljs-string">&quot;:checkbox[name=&#x27;items&#x27;]:checked&quot;</span>).<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>);</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//给全选或者全不选那个框框榜单机事件</span></span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-string">&quot;#checkedAllBox&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//再事件的function函数中，有一个this对象，这个this对象是当前正在响应事件的dom对象</span></span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-string">&quot;:checkbox[name=&#x27;items&#x27;]&quot;</span>).<span class="hljs-title function_">prop</span>(<span class="hljs-string">&quot;checked&quot;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">checked</span>);</span></span><br><span class="language-javascript"><span class="language-xml">&#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//给全部球类绑定单击事件,让所有框被选上之后也可以让全选框被选</span></span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-string">&quot;[name=items]&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">var</span> length=$(<span class="hljs-string">&quot;:checkbox[name=&#x27;items&#x27;]&quot;</span>).<span class="hljs-property">length</span>;</span></span><br><span class="language-javascript"><span class="language-xml">       <span class="hljs-comment">//获取被选中的球类运动总数</span></span></span><br><span class="language-javascript"><span class="language-xml">       <span class="hljs-keyword">var</span> length2=$(<span class="hljs-string">&quot;:checkbox[name=&#x27;items&#x27;]:checked&quot;</span>).<span class="hljs-property">length</span>;</span></span><br><span class="language-javascript"><span class="language-xml">        $(<span class="hljs-string">&quot;#checkedAllBox&quot;</span>).<span class="hljs-title function_">prop</span>(<span class="hljs-string">&quot;checked&quot;</span>,length==length2);</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">   &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">   </span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span></span><br><span class="language-xml">   </span><br><span class="language-xml">      你爱好的运动是？<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checkedAllBox&quot;</span> /&gt;</span>全选/全不选 </span><br><span class="language-xml">      </span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;items&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;足球&quot;</span> /&gt;</span>足球</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;items&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;篮球&quot;</span> /&gt;</span>篮球</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;items&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;羽毛球&quot;</span> /&gt;</span>羽毛球</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;items&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;乒乓球&quot;</span> /&gt;</span>乒乓球</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checkedAllBtn&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;全　选&quot;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checkedNoBtn&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;全不选&quot;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checkedRevBtn&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;反　选&quot;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sendBtn&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提　交&quot;</span> /&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="jQuery-对标签的增删改"><a href="#jQuery-对标签的增删改" class="headerlink" title="jQuery  对标签的增删改"></a>jQuery  对标签的增删改</h4><p>内部插入</p><p>用jQuery对象的方法来操作标签的增删改</p><p>appendTo         a.appendTo(b)           把a插入到b子元素末尾，成为最后一个子元素</p><p>prependTo()        a.prependTo(b)        把a插入到b所有子元素之前，成为第一个子元素</p><p>外部插入</p><p>insertAfter()          a.insertAfter(b)        得到ba</p><p>insertBefore()       a.insertBefore(b)      得到ab</p><p>替换</p><p>replaceWith()      a.replaceWith(b)          用b替换掉a</p><p>replaceAll()              a.replaceAll(b)        用a替换掉所有b</p><p>删除</p><p>remove()            a.remove();             删除a标签</p><p>empty()           a.empty();               清空标签里的内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh_CN&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span><br><span class="language-xml"><span class="language-handlebars">//$(&quot;<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>&quot;).appendTo(&quot;div&quot;);</span></span><br><span class="language-xml"><span class="language-handlebars">//$(&quot;<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>&quot;).prependTo(&quot;div&quot;);</span></span><br><span class="language-xml"><span class="language-handlebars">//$(&quot;<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>&quot;).insertAfter(&quot;div&quot;);</span></span><br><span class="language-xml"><span class="language-handlebars">//$(&quot;<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>&quot;).insertBefore($(&quot;div&quot;));</span></span><br><span class="language-xml"><span class="language-handlebars">//$(&quot;<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>&quot;).replaceWith(&quot;div&quot;);</span></span><br><span class="language-xml"><span class="language-handlebars">//$(&quot;div&quot;).replaceWith(&quot;<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>&quot;);</span></span><br><span class="language-xml"><span class="language-handlebars">//$(&quot;<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>&quot;).replaceAll&quot;div&quot;);</span></span><br><span class="language-xml"><span class="language-handlebars">//$(&quot;div&quot;).remove();</span></span><br><span class="language-xml"><span class="language-handlebars">//$(&quot;div&quot;).empty();</span></span><br><span class="language-xml"><span class="language-handlebars">    </span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>1234<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="jQuery练习"><a href="#jQuery练习" class="headerlink" title="jQuery练习"></a>jQuery练习</h4><p>从左到右从右到左</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html <span class="hljs-variable constant_">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Insert title here<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml">      select &#123;</span></span><br><span class="language-css"><span class="language-xml">         <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span></span><br><span class="language-css"><span class="language-xml">         <span class="hljs-attribute">height</span>: <span class="hljs-number">140px</span>;</span></span><br><span class="language-css"><span class="language-xml">      &#125;</span></span><br><span class="language-css"><span class="language-xml">      </span></span><br><span class="language-css"><span class="language-xml">      <span class="hljs-selector-tag">div</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">         <span class="hljs-attribute">width</span>: <span class="hljs-number">130px</span>;</span></span><br><span class="language-css"><span class="language-xml">         <span class="hljs-attribute">float</span>: left;</span></span><br><span class="language-css"><span class="language-xml">         <span class="hljs-attribute">text-align</span>: center;</span></span><br><span class="language-css"><span class="language-xml">      &#125;</span></span><br><span class="language-css"><span class="language-xml">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//实现左边的可以添加到右边</span></span></span><br><span class="language-javascript"><span class="language-xml">      $(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      $(<span class="hljs-string">&quot;button:first&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//这个就是叫先找标签select的第一个然后找他后代的所有option中被选中的</span></span></span><br><span class="language-javascript"><span class="language-xml">      $(<span class="hljs-string">&quot;select:eq(0) option:selected&quot;</span>).<span class="hljs-title function_">appendTo</span>($(<span class="hljs-string">&quot;select:eq(1)&quot;</span>));</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//实现将左边的全部添加到右边</span></span></span><br><span class="language-javascript"><span class="language-xml">      $(<span class="hljs-string">&quot;button:eq(1)&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      $(<span class="hljs-string">&quot;select:eq(0) option&quot;</span>).<span class="hljs-title function_">appendTo</span>($(<span class="hljs-string">&quot;select:eq(1)&quot;</span>));</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">      &#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//将右边的添加到左边</span></span></span><br><span class="language-javascript"><span class="language-xml">         $(<span class="hljs-string">&quot;button:eq(2)&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//这个就是叫先找标签select的第一个然后找他后代的所有option中被选中的</span></span></span><br><span class="language-javascript"><span class="language-xml">      $(<span class="hljs-string">&quot;select:eq(1) option:selected&quot;</span>).<span class="hljs-title function_">appendTo</span>($(<span class="hljs-string">&quot;select:eq(0)&quot;</span>));</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//将右边的全部添加到左边</span></span></span><br><span class="language-javascript"><span class="language-xml">      $(<span class="hljs-string">&quot;button:eq(3)&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      $(<span class="hljs-string">&quot;select:eq(1) option&quot;</span>).<span class="hljs-title function_">appendTo</span>($(<span class="hljs-string">&quot;select:eq(0)&quot;</span>));</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">            &#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">      </span></span><br><span class="language-javascript"><span class="language-xml">   </span></span><br><span class="language-javascript"><span class="language-xml">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">multiple</span>=<span class="hljs-string">&quot;multiple&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sel01&quot;</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;opt01&quot;</span>&gt;</span>选项1<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;opt02&quot;</span>&gt;</span>选项2<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;opt03&quot;</span>&gt;</span>选项3<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;opt04&quot;</span>&gt;</span>选项4<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;opt05&quot;</span>&gt;</span>选项5<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;opt06&quot;</span>&gt;</span>选项6<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;opt07&quot;</span>&gt;</span>选项7<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;opt08&quot;</span>&gt;</span>选项8<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="language-xml">      </span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>选中添加到右边<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>全部添加到右边<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;rigth&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">multiple</span>=<span class="hljs-string">&quot;multiple&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sel02&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>选中删除到左边<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>全部删除到左边<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="jQuery练习，删除添加记录"><a href="#jQuery练习，删除添加记录" class="headerlink" title="jQuery练习，删除添加记录"></a>jQuery练习，删除添加记录</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> <span class="hljs-variable constant_">HTML</span> <span class="hljs-variable constant_">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/strict.dtd&quot;</span>&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Untitled Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;styleB/css.css&quot;</span> /&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../../script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">   $(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">   $(<span class="hljs-string">&quot;#addEmpButton&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-comment">//获取输入框的内容</span></span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-keyword">var</span> name=$(<span class="hljs-string">&quot;#empName&quot;</span>).<span class="hljs-title function_">val</span>();</span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-keyword">var</span> email=$(<span class="hljs-string">&quot;#email&quot;</span>).<span class="hljs-title function_">val</span>();</span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-keyword">var</span> salary=$(<span class="hljs-string">&quot;#salary&quot;</span>).<span class="hljs-title function_">val</span>();</span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-comment">//创建一个行标签对象，添加到显示数据的表格中</span></span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-keyword">var</span> $tobr=$(<span class="hljs-string">&quot;&lt;tr&gt;&quot;</span>+</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-string">&quot;&lt;td&gt;&quot;</span>+name+<span class="hljs-string">&quot;&lt;/td&gt;&quot;</span>+</span></span><br><span class="language-javascript"><span class="language-xml">         <span class="hljs-string">&quot;&lt;td&gt;&quot;</span>+email+<span class="hljs-string">&quot;&lt;/td&gt;&quot;</span>+</span></span><br><span class="language-javascript"><span class="language-xml">         <span class="hljs-string">&quot;&lt;td&gt;&quot;</span>+salary+<span class="hljs-string">&quot;&lt;/td&gt;&quot;</span>+</span></span><br><span class="language-javascript"><span class="language-xml">         <span class="hljs-string">&quot;&lt;td&gt;&lt;a href=\&quot;deleteEmp?id=002\&quot;&gt;Delete&lt;/a&gt;&lt;/td&gt;&quot;</span>+</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-string">&quot;&lt;/tr&gt;&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//添加到显示数据的表格中</span></span></span><br><span class="language-javascript"><span class="language-xml">         $tobr.<span class="hljs-title function_">appendTo</span>($(<span class="hljs-string">&quot;#employeeTable&quot;</span>));</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">       <span class="hljs-comment">//这里是每次添加新的信息之后，给他绑定删除事件，防止新添加的这些无法删除</span></span></span><br><span class="language-javascript"><span class="language-xml">      $tobr.<span class="hljs-title function_">find</span>(<span class="hljs-string">&quot;a&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//在事件响应function的时候会有一个this对象，这个this对象是当前正在响应事件的dom对象</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//得到a标签对象的父亲的父亲</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">var</span> $tbr=$(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">parent</span>().<span class="hljs-title function_">parent</span>();</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//获取第一个td标签的内容</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">var</span> name=$tbr.<span class="hljs-title function_">find</span>(<span class="hljs-string">&quot;td:first&quot;</span>).<span class="hljs-title function_">text</span>();</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//confirm是js提供的一个确认提示框，你给他传什么它就提示什么，用户点击确定就返回true，点击取消就返回false</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">if</span>(<span class="hljs-title function_">confirm</span>(<span class="hljs-string">&quot;你确定要删除&quot;</span>+name+<span class="hljs-string">&quot;么&quot;</span>))&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      $tbr.<span class="hljs-title function_">remove</span>();</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//return false; 可以阻止，元素的默认行为</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<span class="hljs-comment">//可以点击标签时不跳转</span></span></span><br><span class="language-javascript"><span class="language-xml">      &#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">   &#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//给删除a标签绑定单机事件</span></span></span><br><span class="language-javascript"><span class="language-xml">      $(<span class="hljs-string">&quot;a&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//在事件响应function的时候会有一个this对象，这个this对象是当前正在响应事件的dom对象</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//得到a标签对象的父亲的父亲</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">var</span> $tbr=$(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">parent</span>().<span class="hljs-title function_">parent</span>();</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//获取第一个td标签的内容</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">var</span> name=$tbr.<span class="hljs-title function_">find</span>(<span class="hljs-string">&quot;td:first&quot;</span>).<span class="hljs-title function_">text</span>();</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//confirm是js提供的一个确认提示框，你给他传什么它就提示什么，用户点击确定就返回true，点击取消就返回false</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">if</span>(<span class="hljs-title function_">confirm</span>(<span class="hljs-string">&quot;你确定要删除&quot;</span>+name+<span class="hljs-string">&quot;么&quot;</span>))&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      $tbr.<span class="hljs-title function_">remove</span>();</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//return false; 可以阻止，元素的默认行为</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<span class="hljs-comment">//可以点击标签时不跳转</span></span></span><br><span class="language-javascript"><span class="language-xml">      &#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">   &#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">   </span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;employeeTable&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Name<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Email<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Salary<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Tom<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>tom@tom.com<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>5000<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;deleteEmp?id=001&quot;</span>&gt;</span>Delete<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Jerry<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>jerry@sohu.com<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>8000<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;deleteEmp?id=002&quot;</span>&gt;</span>Delete<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Bob<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>bob@tom.com<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>10000<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;deleteEmp?id=003&quot;</span>&gt;</span>Delete<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;formDiv&quot;</span>&gt;</span></span><br><span class="language-xml">   </span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>添加新员工<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;word&quot;</span>&gt;</span>name: <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inp&quot;</span>&gt;</span></span><br><span class="language-xml">               <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;empName&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;empName&quot;</span> /&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;word&quot;</span>&gt;</span>email: <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inp&quot;</span>&gt;</span></span><br><span class="language-xml">               <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;email&quot;</span> /&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;word&quot;</span>&gt;</span>salary: <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inp&quot;</span>&gt;</span></span><br><span class="language-xml">               <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;salary&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;salary&quot;</span> /&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span></span><br><span class="language-xml">               <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addEmpButton&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;abc&quot;</span>&gt;</span></span><br><span class="language-xml">                  Submit</span><br><span class="language-xml">               <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>优化后，封装函数复用的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> <span class="hljs-variable constant_">HTML</span> <span class="hljs-variable constant_">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/strict.dtd&quot;</span>&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Untitled Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;styleB/css.css&quot;</span> /&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../../script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">   $(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-keyword">var</span> deleteFun=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-comment">//在事件响应function的时候会有一个this对象，这个this对象是当前正在响应事件的dom对象</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//得到a标签对象的父亲的父亲</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">var</span> $tbr=$(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">parent</span>().<span class="hljs-title function_">parent</span>();</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//获取第一个td标签的内容</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">var</span> name=$tbr.<span class="hljs-title function_">find</span>(<span class="hljs-string">&quot;td:first&quot;</span>).<span class="hljs-title function_">text</span>();</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//confirm是js提供的一个确认提示框，你给他传什么它就提示什么，用户点击确定就返回true，点击取消就返回false</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">if</span>(<span class="hljs-title function_">confirm</span>(<span class="hljs-string">&quot;你确定要删除&quot;</span>+name+<span class="hljs-string">&quot;么&quot;</span>))&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      $tbr.<span class="hljs-title function_">remove</span>();</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//return false; 可以阻止，元素的默认行为</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<span class="hljs-comment">//可以点击标签时不跳转</span></span></span><br><span class="language-javascript"><span class="language-xml">   &#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">   $(<span class="hljs-string">&quot;#addEmpButton&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-comment">//获取输入框的内容</span></span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-keyword">var</span> name=$(<span class="hljs-string">&quot;#empName&quot;</span>).<span class="hljs-title function_">val</span>();</span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-keyword">var</span> email=$(<span class="hljs-string">&quot;#email&quot;</span>).<span class="hljs-title function_">val</span>();</span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-keyword">var</span> salary=$(<span class="hljs-string">&quot;#salary&quot;</span>).<span class="hljs-title function_">val</span>();</span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-comment">//创建一个行标签对象，添加到显示数据的表格中</span></span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-keyword">var</span> $tobr=$(<span class="hljs-string">&quot;&lt;tr&gt;&quot;</span>+</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-string">&quot;&lt;td&gt;&quot;</span>+name+<span class="hljs-string">&quot;&lt;/td&gt;&quot;</span>+</span></span><br><span class="language-javascript"><span class="language-xml">         <span class="hljs-string">&quot;&lt;td&gt;&quot;</span>+email+<span class="hljs-string">&quot;&lt;/td&gt;&quot;</span>+</span></span><br><span class="language-javascript"><span class="language-xml">         <span class="hljs-string">&quot;&lt;td&gt;&quot;</span>+salary+<span class="hljs-string">&quot;&lt;/td&gt;&quot;</span>+</span></span><br><span class="language-javascript"><span class="language-xml">         <span class="hljs-string">&quot;&lt;td&gt;&lt;a href=\&quot;deleteEmp?id=002\&quot;&gt;Delete&lt;/a&gt;&lt;/td&gt;&quot;</span>+</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-string">&quot;&lt;/tr&gt;&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//添加到显示数据的表格中</span></span></span><br><span class="language-javascript"><span class="language-xml">         $tobr.<span class="hljs-title function_">appendTo</span>($(<span class="hljs-string">&quot;#employeeTable&quot;</span>));</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">       <span class="hljs-comment">//这里是每次添加新的信息之后，给他绑定删除事件，防止新添加的这些无法删除</span></span></span><br><span class="language-javascript"><span class="language-xml">      $tobr.<span class="hljs-title function_">find</span>(<span class="hljs-string">&quot;a&quot;</span>).<span class="hljs-title function_">click</span>(deleteFun);&#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//给删除a标签绑定单机事件</span></span></span><br><span class="language-javascript"><span class="language-xml">      $(<span class="hljs-string">&quot;a&quot;</span>).<span class="hljs-title function_">click</span>(deleteFun);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">   &#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">   </span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;employeeTable&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Name<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Email<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Salary<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Tom<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>tom@tom.com<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>5000<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;deleteEmp?id=001&quot;</span>&gt;</span>Delete<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Jerry<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>jerry@sohu.com<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>8000<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;deleteEmp?id=002&quot;</span>&gt;</span>Delete<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Bob<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>bob@tom.com<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>10000<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;deleteEmp?id=003&quot;</span>&gt;</span>Delete<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;formDiv&quot;</span>&gt;</span></span><br><span class="language-xml">   </span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>添加新员工<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;word&quot;</span>&gt;</span>name: <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inp&quot;</span>&gt;</span></span><br><span class="language-xml">               <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;empName&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;empName&quot;</span> /&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;word&quot;</span>&gt;</span>email: <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inp&quot;</span>&gt;</span></span><br><span class="language-xml">               <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;email&quot;</span> /&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;word&quot;</span>&gt;</span>salary: <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inp&quot;</span>&gt;</span></span><br><span class="language-xml">               <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;salary&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;salary&quot;</span> /&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span></span><br><span class="language-xml">               <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addEmpButton&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;abc&quot;</span>&gt;</span></span><br><span class="language-xml">                  Submit</span><br><span class="language-xml">               <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="jQuery中css样式操作"><a href="#jQuery中css样式操作" class="headerlink" title="jQuery中css样式操作"></a>jQuery中css样式操作</h4><p>addClass()        添加样式</p><p>removeClass()    删除样式</p><p>toggleClass()    有就删除，没有就添加样式</p><p>offset()        获取和设置元素的坐标，下面是这个的样例显示</p><p>top: 10.777777671813965, left: 118.55555725097656}  这两个参数top是符合条件的标签到浏览器顶上的距离，left是到左边框距离</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.whiteborder</span>&#123;<br>   <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> white solid;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个div是指这个样式只能给div这个标签使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html <span class="hljs-variable constant_">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Insert title here<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml">   </span></span><br><span class="language-css"><span class="language-xml">   <span class="hljs-selector-tag">div</span>&#123;</span></span><br><span class="language-css"><span class="language-xml">      <span class="hljs-attribute">width</span>:<span class="hljs-number">100px</span>;</span></span><br><span class="language-css"><span class="language-xml">      <span class="hljs-attribute">height</span>:<span class="hljs-number">260px</span>;</span></span><br><span class="language-css"><span class="language-xml">   &#125;</span></span><br><span class="language-css"><span class="language-xml">   </span></span><br><span class="language-css"><span class="language-xml">   <span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.whiteborder</span>&#123;</span></span><br><span class="language-css"><span class="language-xml">      <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> white solid;</span></span><br><span class="language-css"><span class="language-xml">   &#125;</span></span><br><span class="language-css"><span class="language-xml">   </span></span><br><span class="language-css"><span class="language-xml">   <span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.redDiv</span>&#123;</span></span><br><span class="language-css"><span class="language-xml">      <span class="hljs-attribute">background-color</span>: red;</span></span><br><span class="language-css"><span class="language-xml">   &#125;</span></span><br><span class="language-css"><span class="language-xml">   </span></span><br><span class="language-css"><span class="language-xml">   <span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.blueBorder</span>&#123;</span></span><br><span class="language-css"><span class="language-xml">      <span class="hljs-attribute">border</span>: <span class="hljs-number">5px</span> blue solid;</span></span><br><span class="language-css"><span class="language-xml">   &#125;</span></span><br><span class="language-css"><span class="language-xml">   </span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">   </span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">   $(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      </span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">var</span> $divEle = $(<span class="hljs-string">&#x27;div:first&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">      </span></span><br><span class="language-javascript"><span class="language-xml">      $(<span class="hljs-string">&#x27;#btn01&#x27;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">         <span class="hljs-comment">//addClass() - 向被选元素添加一个或多个类</span></span></span><br><span class="language-javascript"><span class="language-xml">         $divEle.<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&quot;redDiv blueBorder&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">      </span></span><br><span class="language-javascript"><span class="language-xml">      $(<span class="hljs-string">&#x27;#btn02&#x27;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">         <span class="hljs-comment">//removeClass() - 从被选元素删除一个或多个类 </span></span></span><br><span class="language-javascript"><span class="language-xml">         $divEle.<span class="hljs-title function_">removeClass</span>(<span class="hljs-string">&quot;redDiv blueBorder&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">         <span class="hljs-comment">//$divEle.removeClass();全部删除</span></span></span><br><span class="language-javascript"><span class="language-xml">      &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">   </span></span><br><span class="language-javascript"><span class="language-xml">      </span></span><br><span class="language-javascript"><span class="language-xml">      $(<span class="hljs-string">&#x27;#btn03&#x27;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">         <span class="hljs-comment">//toggleClass() - 对被选元素进行添加/删除类的切换操作 </span></span></span><br><span class="language-javascript"><span class="language-xml">         $divEle.<span class="hljs-title function_">toggleClass</span>(<span class="hljs-string">&#x27;redDiv&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">      </span></span><br><span class="language-javascript"><span class="language-xml">      </span></span><br><span class="language-javascript"><span class="language-xml">      $(<span class="hljs-string">&#x27;#btn04&#x27;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">         <span class="hljs-comment">//offset() - 返回第一个匹配元素相对于文档的位置。</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">var</span> pos=$divEle.<span class="hljs-title function_">offset</span>();</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//得到top和left</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(pos);</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//还可以自己设置top和left，不一定是自己输入的值，按照当前屏幕大小给的值</span></span></span><br><span class="language-javascript"><span class="language-xml">      $divEle.<span class="hljs-title function_">offset</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">top</span>:<span class="hljs-number">100</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">left</span>:<span class="hljs-number">50</span></span></span><br><span class="language-javascript"><span class="language-xml">      &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">      </span></span><br><span class="language-javascript"><span class="language-xml">   </span></span><br><span class="language-javascript"><span class="language-xml">      </span></span><br><span class="language-javascript"><span class="language-xml">   &#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;border&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">         </span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span></span><br><span class="language-xml">               <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;addClass()&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn01&quot;</span>/&gt;</span></span><br><span class="language-xml">               <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;removeClass()&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn02&quot;</span>/&gt;</span></span><br><span class="language-xml">               <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;toggleClass()&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn03&quot;</span>/&gt;</span></span><br><span class="language-xml">               <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;offset()&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn04&quot;</span>/&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></span><br><span class="language-xml">   </span><br><span class="language-xml">   </span><br><span class="language-xml">   </span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br><span class="language-xml">   </span><br><span class="language-xml">   </span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br><span class="language-xml">   </span><br><span class="language-xml">   </span><br><span class="language-xml">   </span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="jQuery动画"><a href="#jQuery动画" class="headerlink" title="jQuery动画"></a>jQuery动画</h4><p>基本动画</p><p>show()       将隐藏的元素显示</p><p>hide()         将可见的元素隐藏</p><p>toggle()       可见就隐藏，不可见就显示</p><p>以上动画方法都可以添加参数</p><p>这七个函数的参数都是这俩，只有fadeTo是不一样的，因为fadeTo多一个透明度的参数</p><p>​        1.第一个参数是动画执行的时常，以毫秒为单位</p><p>​        2.第二个参数是动画的回调函数（动画完成后自动调用的函数）</p><p>淡入淡出动画</p><p>fadeln()     淡入   慢慢可见</p><p>fadeOut()   淡出    慢慢消失</p><p>fadeTo()   在指定时常内慢慢的将透明度修改到指定的值  0透明   0.5半透明  1不透明</p><p>fadeToggle()   淡入淡出切换</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">HTML</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/strict.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Untitled Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/style.css&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>   <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">   <span class="hljs-comment">/*     </span></span><br><span class="hljs-comment"><span class="language-javascript">      基本</span></span><br><span class="hljs-comment"><span class="language-javascript">      show([speed,[easing],[fn]]) </span></span><br><span class="hljs-comment"><span class="language-javascript">      hide([speed,[easing],[fn]]) </span></span><br><span class="hljs-comment"><span class="language-javascript">      toggle([speed],[easing],[fn]) </span></span><br><span class="hljs-comment"><span class="language-javascript">      滑动</span></span><br><span class="hljs-comment"><span class="language-javascript">      slideDown([spe],[eas],[fn]) </span></span><br><span class="hljs-comment"><span class="language-javascript">      slideUp([speed,[easing],[fn]]) </span></span><br><span class="hljs-comment"><span class="language-javascript">      slideToggle([speed],[easing],[fn]) </span></span><br><span class="hljs-comment"><span class="language-javascript">      淡入淡出</span></span><br><span class="hljs-comment"><span class="language-javascript">      fadeIn([speed],[eas],[fn]) </span></span><br><span class="hljs-comment"><span class="language-javascript">      fadeOut([speed],[eas],[fn]) </span></span><br><span class="hljs-comment"><span class="language-javascript">      fadeTo([[spe],opa,[eas],[fn]]) </span></span><br><span class="hljs-comment"><span class="language-javascript">      fadeToggle([speed,[eas],[fn]])</span></span><br><span class="hljs-comment"><span class="language-javascript">      */</span></span><br><span class="language-javascript">      $(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">         <span class="hljs-comment">//显示   show()</span></span><br><span class="language-javascript">         $(<span class="hljs-string">&quot;#btn1&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            $(<span class="hljs-string">&quot;#div1&quot;</span>).<span class="hljs-title function_">show</span>(<span class="hljs-number">1000</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;show动画完成&quot;</span>)</span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript">         &#125;);       </span><br><span class="language-javascript">         <span class="hljs-comment">//隐藏  hide()</span></span><br><span class="language-javascript">         $(<span class="hljs-string">&quot;#btn2&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            $(<span class="hljs-string">&quot;#div1&quot;</span>).<span class="hljs-title function_">hide</span>(<span class="hljs-number">1000</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;hide动画执行完成&quot;</span>)</span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript">         &#125;);    </span><br><span class="language-javascript">         <span class="hljs-comment">//切换   toggle()</span></span><br><span class="language-javascript">         $(<span class="hljs-string">&quot;#btn3&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            $(<span class="hljs-string">&quot;#div1&quot;</span>).<span class="hljs-title function_">toggle</span>(<span class="hljs-number">1000</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;toggle动画执行完成&quot;</span>)</span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript">         &#125;);</span><br><span class="language-javascript">         <span class="hljs-comment">//动画的演示方式，就是不断的调用他自己</span></span><br><span class="language-javascript">         <span class="hljs-comment">/*var abc=function()&#123;</span></span><br><span class="hljs-comment"><span class="language-javascript">         $(&quot;#div1&quot;).toggle(1000,abc);</span></span><br><span class="hljs-comment"><span class="language-javascript">         &#125;</span></span><br><span class="hljs-comment"><span class="language-javascript">         abc();*/</span></span><br><span class="language-javascript">         </span><br><span class="language-javascript">         <span class="hljs-comment">//淡入   fadeIn()</span></span><br><span class="language-javascript">         $(<span class="hljs-string">&quot;#btn4&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;#div1&#x27;</span>).<span class="hljs-title function_">fadeIn</span>(<span class="hljs-number">2000</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;淡入完成&quot;</span>);</span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript">         &#125;);    </span><br><span class="language-javascript">         <span class="hljs-comment">//淡出  fadeOut()</span></span><br><span class="language-javascript">         $(<span class="hljs-string">&quot;#btn5&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;#div1&#x27;</span>).<span class="hljs-title function_">fadeOut</span>(<span class="hljs-number">2000</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;淡出完成&quot;</span>);</span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript">         &#125;);    </span><br><span class="language-javascript">         </span><br><span class="language-javascript">         <span class="hljs-comment">//淡化到  fadeTo()</span></span><br><span class="language-javascript">         $(<span class="hljs-string">&quot;#btn6&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            $(<span class="hljs-string">&quot;#div1&quot;</span>).<span class="hljs-title function_">fadeTo</span>(<span class="hljs-number">2000</span>,<span class="hljs-number">0.5</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;fadeTo完成&quot;</span>);</span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript">         &#125;);    </span><br><span class="language-javascript">         <span class="hljs-comment">//淡化切换  fadeToggle()</span></span><br><span class="language-javascript">         $(<span class="hljs-string">&quot;#btn7&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;#div1&#x27;</span>).<span class="hljs-title function_">fadeToggle</span>(<span class="hljs-number">2000</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;切换完成&quot;</span>);</span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript">         &#125;);    </span><br><span class="language-javascript">      &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>   <br>   <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;float: left;&quot;</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn1&quot;</span>&gt;</span>显示show()<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn2&quot;</span>&gt;</span>隐藏hide()<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn3&quot;</span>&gt;</span>显示/隐藏切换 toggle()<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn4&quot;</span>&gt;</span>淡入fadeIn()<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn5&quot;</span>&gt;</span>淡出fadeOut()<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn6&quot;</span>&gt;</span>淡化到fadeTo()<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn7&quot;</span>&gt;</span>淡化切换fadeToggle()<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>      <br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;div1&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;float:left;border: 1px solid;background-color: blue;width: 300px;height: 200px;&quot;</span>&gt;</span><br>         jquery动画定义了很多种动画效果，可以很方便的使用这些动画效果<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="jQuery动画练习"><a href="#jQuery动画练习" class="headerlink" title="jQuery动画练习"></a>jQuery动画练习</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.showmore</span> <span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">span</span> &#123;<br>   <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">15px</span>;<br>   <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">img/down.gif</span>) no-repeat <span class="hljs-number">0</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个css选择器的意思是   类选择器      且用这个选择器的标签子代必须有一个a，a的子代必须有一个span</p><p>添加cssclass样式的时候既可以用prop也可以用addClass</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html <span class="hljs-variable constant_">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>品牌展示练习<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml">* &#123;</span></span><br><span class="language-css"><span class="language-xml">   <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span></span><br><span class="language-css"><span class="language-xml">   <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-tag">body</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">   <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;</span></span><br><span class="language-css"><span class="language-xml">   <span class="hljs-attribute">text-align</span>: center;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-tag">a</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">   <span class="hljs-attribute">color</span>: <span class="hljs-number">#04D</span>;</span></span><br><span class="language-css"><span class="language-xml">   <span class="hljs-attribute">text-decoration</span>: none;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">   <span class="hljs-attribute">color</span>: <span class="hljs-number">#F50</span>;</span></span><br><span class="language-css"><span class="language-xml">   <span class="hljs-attribute">text-decoration</span>: underline;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.SubCategoryBox</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">   <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;</span></span><br><span class="language-css"><span class="language-xml">   <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span></span><br><span class="language-css"><span class="language-xml">   <span class="hljs-attribute">text-align</span>: center;</span></span><br><span class="language-css"><span class="language-xml">   <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">40px</span>;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.SubCategoryBox</span> <span class="hljs-selector-tag">ul</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">   <span class="hljs-attribute">list-style</span>: none;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.SubCategoryBox</span> <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">   <span class="hljs-attribute">display</span>: block;</span></span><br><span class="language-css"><span class="language-xml">   <span class="hljs-attribute">float</span>: left;</span></span><br><span class="language-css"><span class="language-xml">   <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span></span><br><span class="language-css"><span class="language-xml">   <span class="hljs-attribute">line-height</span>: <span class="hljs-number">20px</span>;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.showmore</span> , <span class="hljs-selector-class">.showless</span>&#123;</span></span><br><span class="language-css"><span class="language-xml">   <span class="hljs-attribute">clear</span>: both;</span></span><br><span class="language-css"><span class="language-xml">   <span class="hljs-attribute">text-align</span>: center;</span></span><br><span class="language-css"><span class="language-xml">   <span class="hljs-attribute">padding-top</span>: <span class="hljs-number">10px</span>;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.showmore</span> <span class="hljs-selector-tag">a</span> , <span class="hljs-selector-class">.showless</span> <span class="hljs-selector-tag">a</span>&#123;</span></span><br><span class="language-css"><span class="language-xml">   <span class="hljs-attribute">display</span>: block;</span></span><br><span class="language-css"><span class="language-xml">   <span class="hljs-attribute">width</span>: <span class="hljs-number">120px</span>;</span></span><br><span class="language-css"><span class="language-xml">   <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span></span><br><span class="language-css"><span class="language-xml">   <span class="hljs-attribute">line-height</span>: <span class="hljs-number">24px</span>;</span></span><br><span class="language-css"><span class="language-xml">   <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#AAA</span>;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.showmore</span> <span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">span</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">   <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">15px</span>;</span></span><br><span class="language-css"><span class="language-xml">   <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">img/down.gif</span>) no-repeat <span class="hljs-number">0</span> <span class="hljs-number">0</span>;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.showless</span> <span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">span</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">   <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">15px</span>;</span></span><br><span class="language-css"><span class="language-xml">   <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">img/up.gif</span>) no-repeat <span class="hljs-number">0</span> <span class="hljs-number">0</span>;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.promoted</span> <span class="hljs-selector-tag">a</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">   <span class="hljs-attribute">color</span>: <span class="hljs-number">#F50</span>;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">   $(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-comment">//基本初始状态</span></span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-string">&quot;li:gt(5):not(:last)&quot;</span>).<span class="hljs-title function_">hide</span>();<span class="hljs-comment">//hide是动画操作</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//给功能的按钮绑定单击事件</span></span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-string">&quot;div div a&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-string">&quot;li:gt(5):not(:last)&quot;</span>).<span class="hljs-title function_">toggle</span>();<span class="hljs-comment">//切换回显示</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//按钮上的文本，1.显示全部品牌，角标向下，文字显示全部品牌</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">if</span>( $(<span class="hljs-string">&quot;li:gt(5):not(:last)&quot;</span>).<span class="hljs-title function_">is</span>(<span class="hljs-string">&quot;:hidden&quot;</span>))&#123;</span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-string">&quot;div div a span&quot;</span>).<span class="hljs-title function_">text</span>(<span class="hljs-string">&quot;显示全部品牌&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-string">&quot;div div&quot;</span>).<span class="hljs-title function_">removeClass</span>();</span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-string">&quot;div div&quot;</span>).<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&quot;showmore&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//$(&quot;div div&quot;).prop(&quot;class&quot;,&quot;showmore&quot;);,添加自己定义的css类的时候也可以用prop</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//高亮取消</span></span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-string">&quot;li:contains(&#x27;索尼&#x27;)&quot;</span>).<span class="hljs-title function_">removeClass</span>(<span class="hljs-string">&quot;promoted&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">else</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//显示精简品牌，角标向上，且文字是显示精简品牌</span></span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-string">&quot;div div a span&quot;</span>).<span class="hljs-title function_">text</span>(<span class="hljs-string">&quot;显示精简品牌&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-string">&quot;div div&quot;</span>).<span class="hljs-title function_">removeClass</span>();</span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-string">&quot;div div&quot;</span>).<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&quot;showless&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//$(&quot;div div&quot;).prop(&quot;class&quot;,&quot;showless&quot;);</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//高亮取消</span></span></span><br><span class="language-javascript"><span class="language-xml">$(<span class="hljs-string">&quot;li:contains(&#x27;索尼&#x27;)&quot;</span>).<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&quot;promoted&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">   &#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;SubCategoryBox&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>佳能<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>(30440) <span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>索尼<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>(27220) <span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>三星<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>(20808) <span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>尼康<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>(17821) <span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>松下<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>(12289) <span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>卡西欧<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>(8242) <span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>富士<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>(14894) <span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>柯达<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>(9520) <span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>宾得<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>(2195) <span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>理光<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>(4114) <span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>奥林巴斯<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>(12205) <span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>明基<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>(1466) <span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>爱国者<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>(3091) <span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>其它品牌相机<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>(7275) <span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;showmore&quot;</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;more.html&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>显示全部品牌<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="原生js和jQuery页面加载完成之后的区别"><a href="#原生js和jQuery页面加载完成之后的区别" class="headerlink" title="原生js和jQuery页面加载完成之后的区别"></a>原生js和jQuery页面加载完成之后的区别</h4><p>$( function(){} ); 和 window.onload &#x3D; function(){} 的区别？ </p><p>他们分别是在什么时候触发？ </p><p>1、jQuery 的页面加载完成之后是浏览器的内核解析完页面的标签创建好 DOM 对象之后就会马上执行。 </p><p>2、原生 js 的页面加载完成之后，除了要等浏览器内核解析完标签创建好 DOM 对象，还要等标签显示时需要的内容加载 完成。 </p><p>他们触发的顺序？ </p><p>1、jQuery 页面加载完成之后先执行 </p><p>2、原生 js 的页面加载完成之后 </p><p>他们执行的次数？ </p><p>1、原生 js 的页面加载完成之后，只会执行最后一次的赋值函数。 </p><p>2、jQuery 的页面加载完成之后是全部把注册的 function 函数，依次顺序全部执行</p><h4 id="jQuery中常用的事件处理方法"><a href="#jQuery中常用的事件处理方法" class="headerlink" title="jQuery中常用的事件处理方法"></a>jQuery中常用的事件处理方法</h4><p>click()        可以绑定单击事件，以及触发单击事件</p><p>mouseover()    鼠标移入事件</p><p>mouseout()     鼠标移出事件</p><p>bind()      可以给元素一次性绑定一个或多个事件</p><p>one()     使用上和bind一样，但是one方法绑定的事件只会触发一次</p><p>unbind ()    和bind方法相反的操作，解除事件的绑定</p><p>live()    也是用来绑定事件的，可以用来绑定选择器匹配的所有元素的事件，哪怕这个元素是后面动态创建出来的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> <span class="hljs-variable constant_">HTML</span> <span class="hljs-variable constant_">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/strict.dtd&quot;</span>&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Untitled Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/style.css&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../../script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">      </span></span><br><span class="language-javascript"><span class="language-xml">         $(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">//1.通常绑定事件的方式</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">//3.合并“鼠标移入”和“鼠标移出”事件</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">//4.合并单击事件</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">//5.切换元素可见状态</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">//6.只绑定一次</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">               <span class="hljs-comment">// 触发事件的讲解</span></span></span><br><span class="language-javascript"><span class="language-xml">            $(<span class="hljs-string">&quot;h5&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-comment">//传function是绑定事件</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;h5单击事件&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">/*$(&quot;button&quot;).click(function()&#123;</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">            $(&quot;h5&quot;).click();//不传function是触发事件，就是调用了h5的绑定事件</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">            &#125;);*/</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">//鼠标移入事件</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">/*$(&quot;h5&quot;).mouseover(function()&#123;</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">            console.log(&quot;你进来了&quot;);</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">            &#125;);*/</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">//鼠标移除事件</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">/*$(&quot;h5&quot;).mouseout(function()&#123;</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">            console.log(&quot;你出来了&quot;);</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">            &#125;);*/</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">//jQuery提供的绑定方式：bind()函数</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">/*$(&quot;h5&quot;).bind(&quot;click mouseover mouseout&quot;,function()&#123;</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">            console.log(&quot;这是bind绑定的事件&quot;);</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">            &#125;);*/</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">               <span class="hljs-comment">//one()函数</span></span></span><br><span class="language-javascript"><span class="language-xml">              <span class="hljs-comment">/* $(&quot;h5&quot;).one(&quot;click mouseover mouseout&quot;,function()&#123;</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">               console.log(&quot;这是one绑定的事件&quot;);</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml">               &#125;);*/</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">              <span class="hljs-comment">//unbind()函数,不加参数就全删了</span></span></span><br><span class="language-javascript"><span class="language-xml">              <span class="hljs-comment">/*$(&quot;h5&quot;).unbind(&quot;click mouseover&quot;);*/</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">              <span class="hljs-comment">//live()函数</span></span></span><br><span class="language-javascript"><span class="language-xml">              <span class="hljs-comment">//正常的绑定函数就是只有一开始那个被绑定的标签有效果，现在后来添加的标签依然是有效果的</span></span></span><br><span class="language-javascript"><span class="language-xml">              $(<span class="hljs-string">&quot;h5&quot;</span>).<span class="hljs-title function_">live</span>(<span class="hljs-string">&quot;click&quot;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">              <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;h5单击事件==live方法绑定&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">              &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">              $(<span class="hljs-string">&#x27;&lt;h5 class=&quot;head&quot;&gt;什么是jQuery?&lt;/h5&gt;&#x27;</span>).<span class="hljs-title function_">appendTo</span>($(<span class="hljs-string">&quot;#panel&quot;</span>));</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">         &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">      </span></span><br><span class="language-javascript"><span class="language-xml">      </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;panel&quot;</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">h5</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;head&quot;</span>&gt;</span>什么是jQuery?<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span></span><br><span class="language-xml">            jQuery是继Prototype之后又一个优秀的JavaScript库，它是一个由 John Resig 创建于2006年1月的开源项目。jQuery凭借简洁的语法和跨平台的兼容性，极大地简化了JavaScript开发人员遍历HTML文档、操作DOM、处理事件、执行动画和开发Ajax。它独特而又优雅的代码风格改变了JavaScript程序员的设计思路和编写程序的方式。</span><br><span class="language-xml">         <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="jQuery事件的冒泡"><a href="#jQuery事件的冒泡" class="headerlink" title="jQuery事件的冒泡"></a>jQuery事件的冒泡</h4><p>事件冒泡是指父子元素同时监听一个事件，当触发子元素事件的时候，同一个事件也被传递到了父元素的事件里去响应</p><p>在子元素事件函数体内，return false 可以阻止事件的冒泡传递</p><p>简单来说就是，如果父子元素绑定同一个事件，子元素的事件被触发的时候，父元素的这个事件也会被触发</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">HTML</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/strict.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Untitled Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css">*&#123;</span><br><span class="language-css"><span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css"><span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-tag">body</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">font-size</span>: <span class="hljs-number">13px</span>;</span><br><span class="language-css"><span class="hljs-attribute">line-height</span>: <span class="hljs-number">130%</span>;</span><br><span class="language-css"><span class="hljs-attribute">padding</span>: <span class="hljs-number">60px</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-id">#content</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">width</span>: <span class="hljs-number">220px</span>;</span><br><span class="language-css"><span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#0050D0</span>;</span><br><span class="language-css"><span class="hljs-attribute">background</span>: <span class="hljs-number">#96E555</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-tag">span</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css"><span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css"><span class="hljs-attribute">background</span>: <span class="hljs-number">#666666</span>;</span><br><span class="language-css"><span class="hljs-attribute">cursor</span>: pointer;</span><br><span class="language-css"><span class="hljs-attribute">color</span>: white;</span><br><span class="language-css"><span class="hljs-attribute">display</span>: block;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-tag">p</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css"><span class="hljs-attribute">background</span>: <span class="hljs-number">#888</span>;</span><br><span class="language-css"><span class="hljs-attribute">color</span>: white;</span><br><span class="language-css"><span class="hljs-attribute">height</span>: <span class="hljs-number">16px</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">$(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">$(<span class="hljs-string">&quot;#content&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;这是div&quot;</span>);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript">$(<span class="hljs-string">&quot;span&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;这是span&quot;</span>);</span><br><span class="language-javascript"><span class="hljs-comment">//return false;</span></span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>外层div元素<br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>内层span元素<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>外层div元素<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;msg&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://www.hao123.com&quot;</span>&gt;</span>WWW.HAO123.COM<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br><br></code></pre></td></tr></table></figure><h4 id="jQuery事件对象"><a href="#jQuery事件对象" class="headerlink" title="jQuery事件对象"></a>jQuery事件对象</h4><p>事件对象，是封装有触发的事件信息的一个javascript对象</p><p>我们重点关心的是怎么拿到这个javasccript的事件对象</p><p>再给元素绑定事件的时候，在事件的function参数列表中添加一个参数，这个event就是javasccript传递参事件处理函数的事件对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Insert title here<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css"></span><br><span class="language-css">   <span class="hljs-selector-id">#areaDiv</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;</span><br><span class="language-css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">   &#125;</span><br><span class="language-css">   </span><br><span class="language-css">   <span class="hljs-selector-id">#showMsg</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;</span><br><span class="language-css">      <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">   &#125;</span><br><span class="language-css"></span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">   <span class="hljs-comment">//1.原生javascript获取 事件对象</span></span><br><span class="language-javascript">   <span class="hljs-comment">/*window.onload=function()&#123;</span></span><br><span class="hljs-comment"><span class="language-javascript">   document.getElementById(&quot;areaDiv&quot;).onclick=function(event)&#123;</span></span><br><span class="hljs-comment"><span class="language-javascript">   console.log(event);</span></span><br><span class="hljs-comment"><span class="language-javascript">   &#125;</span></span><br><span class="hljs-comment"><span class="language-javascript">   &#125;;*/</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">   <span class="hljs-comment">//2.JQuery代码获取 事件对象</span></span><br><span class="language-javascript">   <span class="hljs-comment">/*$(function()&#123;</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">   $(&quot;#areaDiv&quot;).click(function(event)&#123;</span></span><br><span class="hljs-comment"><span class="language-javascript">   console.log(event);</span></span><br><span class="hljs-comment"><span class="language-javascript"></span></span><br><span class="hljs-comment"><span class="language-javascript">   &#125;);</span></span><br><span class="hljs-comment"><span class="language-javascript">   &#125;);*/</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">   <span class="hljs-comment">//3.使用bind同时对多个事件绑定同一个函数。怎么获取当前操作是什么事件。</span></span><br><span class="language-javascript">    <span class="hljs-comment">//这个操作可以让bind绑定的多个事件做不一样的事情</span></span><br><span class="language-javascript">    $(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">    $(<span class="hljs-string">&quot;#areaDiv&quot;</span>).<span class="hljs-title function_">bind</span>(<span class="hljs-string">&quot;mouseout mouseover&quot;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)&#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">if</span>(event.<span class="hljs-property">type</span>==<span class="hljs-string">&quot;mouseover&quot;</span>)&#123;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;鼠标移入&quot;</span>);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(event.<span class="hljs-property">type</span>==<span class="hljs-string">&quot;mouseout&quot;</span>)</span><br><span class="language-javascript">    &#123;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;鼠标移出&quot;</span>);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;areaDiv&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;showMsg&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="jQuery练习，图片跟随"><a href="#jQuery练习，图片跟随" class="headerlink" title="jQuery练习，图片跟随"></a>jQuery练习，图片跟随</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html <span class="hljs-variable constant_">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;<br>&lt;title&gt;Insert title here&lt;/title&gt;<br>&lt;style type=&quot;text/css&quot;&gt;<br>   body &#123;<br>      text-align: center;<br>   &#125;<br>   #small &#123;<br>      margin-top: 150px;<br>   &#125;<br>   #showBig &#123;<br>      position: absolute;<br>      display: none;<br>   &#125;<br>&lt;/style&gt;<br>&lt;script type=&quot;text/javascript&quot; src=&quot;script/jquery-1.7.2.js&quot;&gt;&lt;/script&gt;<br>&lt;script type=&quot;text/javascript&quot;&gt;<br>   $(function()&#123;<br>      $(&quot;#small&quot;).bind(&quot;mouseover mouseout mousemove&quot;,function(event)&#123;<br>             if(event.type==&quot;mouseover&quot;)&#123;<br>             $(&quot;#showBig&quot;).show();<br>             &#125;<br>             else if(event.type==&quot;mouseout&quot;)&#123;<br>             $(&quot;#showBig&quot;).hide();<br>             &#125;<br>             else if(event.type==&quot;mousemove&quot;)&#123;<br>             $(&quot;#showBig&quot;).offset(&#123;<br>             left:event.pageX+10,<br>             top:event.pageY+10<br>             &#125;);<br>             &#125;<br><br><br><br><br>      &#125;);<br>   &#125;);<br>&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br><br>   &lt;img id=&quot;small&quot; src=&quot;img/small.jpg&quot; /&gt;<br>   <br>   &lt;div id=&quot;showBig&quot;&gt;<br>      &lt;img src=&quot;img/big.jpg&quot;&gt;<br>   &lt;/div&gt;<br><br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h4 id="书城项目的第一个阶段表单验证"><a href="#书城项目的第一个阶段表单验证" class="headerlink" title="书城项目的第一个阶段表单验证"></a>书城项目的第一个阶段表单验证</h4><p>规定了注册时用户名密码的格式，以及错误提示等等，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=&quot;UTF-8&quot;&gt;<br>&lt;title&gt;尚硅谷会员注册页面&lt;/title&gt;<br>&lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;../../static/css/style.css&quot; &gt;<br>&lt;script src=&quot;../../static/script/jquery-1.7.2.js&quot;&gt;&lt;/script&gt;<br>&lt;script&gt;<br>$(function()&#123;<br>//1.验证用户名，必须由数字字母下划线组成，并且长度为5到12位<br>$(&quot;#sub_btn&quot;).click(function()&#123;<br>//1.获取用户名输入框中的内容<br>var username=$(&quot;#username&quot;).val();<br>//2.创建正则表达式对象<br>var pattern=/^\w&#123;5,12&#125;$/;<br>//3.使用test方法进行验证<br>if(!pattern.test(username))&#123;<br>$(&quot;span.errorMsg&quot;).text(&quot;用户名不合法&quot;);<br>//有了return false不会跳转<br>return false;<br>&#125;<br>//2.验证密码<br>//1.获取用户名输入框中的内容<br>var password=$(&quot;#password&quot;).val();<br>//2.创建正则表达式对象<br>var pspattern=/^\w&#123;5,12&#125;$/;<br>//3.使用test方法进行验证<br>if(!pspattern.test(password))&#123;<br>$(&quot;span.errorMsg&quot;).text(&quot;密码不合法&quot;);<br>//有了return false不会跳转<br>return false;<br>&#125;<br><br><br>//3.确认密码<br>        //1.获取确认密码内容<br>        var repassword =$(&quot;#repwd&quot;).val();<br>        if(repassword!=password)&#123;<br>        $(&quot;span.errorMsg&quot;).text(&quot;确认密码与密码不一致&quot;);<br>        return false;<br>        &#125;<br><br>//4.验证邮箱<br>        //1.获取邮箱当中的内容<br>        var emailText=$(&quot;#email&quot;).val();<br>        var emailpt=/^([a-z0-9_\.-]+)@([\da-z\.-]+)\.([a-z\.]&#123;2,6&#125;)$/;<br>        if(!emailpt.test(emailText))&#123;<br>        $(&quot;span.errorMsg&quot;).text(&quot;邮箱格式不合法&quot;);<br>        return false;<br>        &#125;<br><br><br>//5.验证码，验证由输入内容即可<br>        var codeText=$(&quot;#code&quot;).val();<br>        //去掉验证码前后空格<br>        codeText=$.trim(codeText);<br>        if(codeText==null||codeText==&quot;&quot;)&#123;<br>        $(&quot;span.errorMsg&quot;).text(&quot;无验证码&quot;);<br>        return false;<br>        &#125;<br><br>        $(&quot;span.errorMsg&quot;).text(&quot;&quot;);//如果用户名密码邮箱又合法了再给他改过来<br>&#125;);<br>&#125;);<br><br>&lt;/script&gt;<br>&lt;style type=&quot;text/css&quot;&gt;<br>.login_form&#123;<br>height:420px;<br>margin-top: 25px;<br>&#125;<br><br>&lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;div id=&quot;login_header&quot;&gt;<br>&lt;img class=&quot;logo_img&quot; alt=&quot;&quot; src=&quot;../../static/img/logo.gif&quot; &gt;<br>&lt;/div&gt;<br><br>&lt;div class=&quot;login_banner&quot;&gt;<br><br>&lt;div id=&quot;l_content&quot;&gt;<br>&lt;span class=&quot;login_word&quot;&gt;欢迎注册&lt;/span&gt;<br>&lt;/div&gt;<br><br>&lt;div id=&quot;content&quot;&gt;<br>&lt;div class=&quot;login_form&quot;&gt;<br>&lt;div class=&quot;login_box&quot;&gt;<br>&lt;div class=&quot;tit&quot;&gt;<br>&lt;h1&gt;注册尚硅谷会员&lt;/h1&gt;<br>&lt;span class=&quot;errorMsg&quot;&gt;&lt;/span&gt;<br>&lt;/div&gt;<br>&lt;div class=&quot;form&quot;&gt;<br>&lt;form action=&quot;regist_success.html&quot;&gt;<br>&lt;label&gt;用户名称：&lt;/label&gt;<br>&lt;input class=&quot;itxt&quot; type=&quot;text&quot; placeholder=&quot;请输入用户名&quot; autocomplete=&quot;off&quot; tabindex=&quot;1&quot; name=&quot;username&quot; id=&quot;username&quot; /&gt;<br>&lt;br /&gt;<br>&lt;br /&gt;<br>&lt;label&gt;用户密码：&lt;/label&gt;<br>&lt;input class=&quot;itxt&quot; type=&quot;password&quot; placeholder=&quot;请输入密码&quot; autocomplete=&quot;off&quot; tabindex=&quot;1&quot; name=&quot;password&quot; id=&quot;password&quot; /&gt;<br>&lt;br /&gt;<br>&lt;br /&gt;<br>&lt;label&gt;确认密码：&lt;/label&gt;<br>&lt;input class=&quot;itxt&quot; type=&quot;password&quot; placeholder=&quot;确认密码&quot; autocomplete=&quot;off&quot; tabindex=&quot;1&quot; name=&quot;repwd&quot; id=&quot;repwd&quot; /&gt;<br>&lt;br /&gt;<br>&lt;br /&gt;<br>&lt;label&gt;电子邮件：&lt;/label&gt;<br>&lt;input class=&quot;itxt&quot; type=&quot;text&quot; placeholder=&quot;请输入邮箱地址&quot; autocomplete=&quot;off&quot; tabindex=&quot;1&quot; name=&quot;email&quot; id=&quot;email&quot; /&gt;<br>&lt;br /&gt;<br>&lt;br /&gt;<br>&lt;label&gt;验证码：&lt;/label&gt;<br>&lt;input class=&quot;itxt&quot; type=&quot;text&quot; style=&quot;width: 150px;&quot; id=&quot;code&quot;/&gt;<br>&lt;img alt=&quot;&quot; src=&quot;../../static/img/code.bmp&quot; style=&quot;float: right; margin-right: 40px&quot;&gt;<br>&lt;br /&gt;<br>&lt;br /&gt;<br>&lt;input type=&quot;submit&quot; value=&quot;注册&quot; id=&quot;sub_btn&quot; /&gt;<br><br>&lt;/form&gt;<br>&lt;/div&gt;<br><br>&lt;/div&gt;<br>&lt;/div&gt;<br>&lt;/div&gt;<br>&lt;/div&gt;<br>&lt;div id=&quot;bottom&quot;&gt;<br>&lt;span&gt;<br>尚硅谷书城.Copyright &amp;copy;2015<br>&lt;/span&gt;<br>&lt;/div&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h1 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h1><p>什么是XML？</p><p>xml是可扩展性标记性语言</p><p>XML的作用</p><p>​        1.用来保存数据，而且这些数据具有自我描述性</p><p>​         2.它还可以做为项目或者模块的配置文件</p><p>​        3.还可以作为网络传输数据的格式(JSON为主)</p><p>示例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;<br>&lt;!--<br>&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;<br>以上内容就是xml文件的声明<br>version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>    version表示xml的版本  encoding表示xml文件本身的编码<br>--&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">books</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">sb</span>=<span class="hljs-string">&quot;SN123412123412&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--book表示一个图书信息   sn属性表示图书序列号--&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>时间监视<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><span class="hljs-comment">&lt;!--name标签表示书名--&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">author</span>&gt;</span>霍金<span class="hljs-tag">&lt;/<span class="hljs-name">author</span>&gt;</span><span class="hljs-comment">&lt;!--author表示作者--&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">price</span>&gt;</span>75<span class="hljs-tag">&lt;/<span class="hljs-name">price</span>&gt;</span><span class="hljs-comment">&lt;!--price表示图书价格--&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">sb</span>=<span class="hljs-string">&quot;SN123412123411&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--book表示一个图书信息   sn属性表示图书序列号--&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>java入门<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><span class="hljs-comment">&lt;!--name标签表示书名--&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">author</span>&gt;</span>沙老师<span class="hljs-tag">&lt;/<span class="hljs-name">author</span>&gt;</span><span class="hljs-comment">&lt;!--author表示作者--&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">price</span>&gt;</span>9.9<span class="hljs-tag">&lt;/<span class="hljs-name">price</span>&gt;</span><span class="hljs-comment">&lt;!--price表示图书价格--&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">books</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>XML文件的写法</p><p>1-2 </p><p>xml 发明的<strong>目的</strong>：  <strong>传输和 存储数据。</strong></p><p>**xml 发明的*<em>目的*<em>：  *<em>传输和 存储数据。*</em></em></em></p><p>xml 发明的<strong>目的</strong>：  <strong>传输和 存储数据。</strong></p><p>**xml 发明的*<em>目的*<em>：  *<em>传输和 存储数据。*</em></em></em></p><p><strong>xml 不是为了展示数据，</strong></p><p><strong>html 才是为了展示数据用的。</strong> </p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291923473.png" alt="image-20220917161433670"></p><p>所有的<strong>xml</strong> 必须要<strong>有一个根节点</strong>： </p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291923439.png" alt="1013846-20210808203953565-117336166"></p><p>这种写法是错误的 </p><p>正确的写法：</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291923457.png" alt="1"></p><p>浏览器展示</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291923427.png" alt="image-20220917163634579"></p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291923467.png" alt="image-20220917163657572"></p><h2 id="第二章：-xml的-基本语法。"><a href="#第二章：-xml的-基本语法。" class="headerlink" title="第二章： xml的 基本语法。"></a>第二章： xml的 基本语法。</h2><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291923460.png" alt="image-20220917163709935"></p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291923870.png" alt="image-20220917163722062"></p><p>Xml的头声明， 可以有，也可以省略</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br>&quot;&quot;&quot;version参数是版本号&quot;&quot;&quot;  encoding是编码<br><span class="hljs-comment">&lt;!--&lt;a&gt;ddd &lt;b&gt;hh&lt;/a&gt;&lt;/b&gt;--&gt;</span><br>&quot;&quot;&quot;这里是一个xml文件的一个注释&quot;&quot;&quot;<br><span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">shuibian</span>&gt;</span>....<span class="hljs-tag">&lt;/<span class="hljs-name">shuibian</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">xie</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">xie</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291923832.png" alt="image-20220917163734405"></p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291923895.png" alt="image-20220917163749487"></p><p>标签交叉，在xml 是不允许的。</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291923933.png" alt="image-20220917163803928"></p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291923929.png" alt="image-20220917163815433"></p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291923178.png" alt="image-20220917163829643"></p><p>属性：就是描述这个标签额外的信息。</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291923121.png" alt="image-20220917163844467"></p><p>例子：比如img 标签，必须要有 src属性 。</p><p>Img 标签，本身的目的：就是个图片标签 。</p><p>Src 属性 的作用是： 告诉你要展示的图片 在哪里</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291923361.png" alt="image-20220917163859302"></p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291923620.png" alt="image-20220917163912615"></p><p>属性规则：</p><p>但是在xml中，我们不需要额外的信息进行展示。</p><p>因为我们是自定义标签的 。</p><p>Html标签，必须要用到属性，因为我们不能自定义html标签。</p><p>Xml 中，属性就是鸡肋。</p><p>属性，在xml中可以用。但是用的真不多</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291923363.png" alt="image-20220917163927505"></p><p>CDATA的写法</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291923369.png" alt="image-20220917163938534"></p><p>展示效果：</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291923683.png" alt="image-20220917164019883"></p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291923571.png" alt="image-20220917164032816"></p><h2 id="DTD"><a href="#DTD" class="headerlink" title="DTD"></a>DTD</h2><p><strong>简介</strong></p><p>1.对xml文件的格式进行约束，保证xml是一个有效的xml</p><p>2.dtd可以分为两种，内部dtd(你在写xml代码的时候就把内部dtd写好了)，外部dtd(他是一个外部的单独的dtd文件，需要引入进来)</p><p><strong>使用</strong></p><p><strong>内部的dtd</strong>的定义，语法如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-comment">&lt;!--声明dtd--&gt;</span><br><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">scores</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">scores</span> (<span class="hljs-keyword">student</span>*)&gt;</span></span><br><span class="hljs-meta">&lt;!--这里的星号表示出现任意次--&gt;</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">student</span> (<span class="hljs-keyword">name</span>,<span class="hljs-keyword">course</span>,<span class="hljs-keyword">score</span>)&gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ATTLIST <span class="hljs-keyword">student</span> <span class="hljs-keyword">id</span> <span class="hljs-keyword">CDATA</span> <span class="hljs-keyword">#REQUIRED</span>&gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">name</span> (<span class="hljs-keyword">#PCDATA</span>)&gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">score</span> (<span class="hljs-keyword">#PCDATA</span>)&gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">course</span> (<span class="hljs-keyword">#PCDATA</span>)&gt;</span></span><br><span class="hljs-meta">&lt;!--让name标签里面只能写文本而不能写其他的标签之类的--&gt;</span><br><span class="hljs-meta">&lt;!--PCDATA 是会被解析器解析的文本。. 这些文本将被解析器检查实体以及标记。. 文本中的标签会被当作标记来处理，而实体会被展开。. 不过，被解析的字符数据不应当包含任何 &amp; &lt; &gt; 字符；需要使用 &amp; &lt; &gt; 实体来分别替换它们--&gt;</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">jt</span> <span class="hljs-string">&quot;Joe Test&quot;</span>&gt;</span></span><br><span class="hljs-meta">&lt;!--实例--&gt;</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">jtt</span> <span class="hljs-string">&quot;Joe Test&quot;</span>&gt;</span></span><br><span class="hljs-meta">&lt;!--这相当于声明了一个对象，只能在dtd文件中使用,用的时候就是%jjt;--&gt;</span><br><span class="hljs-meta">&lt;scores&gt;</span><br><span class="hljs-meta">  &lt;student id=&quot;1&quot;&gt;</span><br><span class="hljs-meta">     &lt;name&gt;王同&lt;/name&gt;</span><br><span class="hljs-meta">     &lt;course&gt;java&lt;/course&gt;</span><br><span class="hljs-meta">     &lt;score&gt;89&lt;/score&gt;</span><br><span class="hljs-meta">  &lt;/student&gt;</span><br><span class="hljs-meta">  &lt;student id=&quot;2&quot;&gt;</span><br><span class="hljs-meta">     &lt;name&gt;李佳&lt;/name&gt;</span><br><span class="hljs-meta">     &lt;course&gt;sql&lt;/course&gt;</span><br><span class="hljs-meta">     &lt;score&gt;58&lt;/score&gt;</span><br><span class="hljs-meta">     &lt;test&gt;&amp;jt;&lt;/test&gt;</span><br><span class="hljs-meta">     &lt;!--实例，这里的;不会显示--&gt;</span><br><span class="hljs-meta">  &lt;/student&gt;</span><br><span class="hljs-meta">&lt;/scores&gt;</span><br><span class="hljs-meta"></span><br><span class="hljs-meta"></span><br><span class="hljs-meta"></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-comment">&lt;!--加入了dtd之后，写xml文件之后就有模板有提示了--&gt;</span><br><br><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml">这就是<span class="hljs-meta">&lt;!ATTLIST <span class="hljs-keyword">student</span> <span class="hljs-keyword">id</span> <span class="hljs-keyword">CDATA</span> <span class="hljs-keyword">#REQUIRED</span>&gt;</span>条代码的解释<br>基本语法：<span class="hljs-meta">&lt;!ATTLIST  元素名称  属性名称  属性类型  默认值&gt;</span><br><br>上面对id属性的限制的最后一个参数类型有<br><br>#REQUIRED 表示属性值必须<br><br>#IMPLIED   表示属性值不是必须的<br><br>#FIXED value  属性值是固定的<br>值      默认值<br><br><br>上面对id属性的限制倒数第二个参数类型有<br><br>CDATA    字符或数字<br><br>(en1|en2|……)  枚举类型<br><br> ID    属性唯一<br><br>IDREF   对某个唯一属性进行引用<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ELEMENT 元素名称 类别&gt;</span> 或<span class="hljs-meta">&lt;!ELEMENT 元素名称 (元素内容)&gt;</span><br>类别：约束标签的内容<br><br>EMPTY：空标签<br><br>(#PCDATA)：普通字符串（没有子标签）<br><br>ANY ： 可以是任何内容（包含子标签）<br><br>(元素内容)： 标签包含子标签的情况<br><br>顺序问题：<br>(A,B,C,D): 按顺序依次出现<br><br>(A|B|C|D): 任意出现一个(枚举式出现)<br></code></pre></td></tr></table></figure><p>数量词</p><p>+ 表示出现一次或者多次，至少一次</p><p>?表示出现0次或1次</p><p>*表示出现任意次</p><p><strong>外部dtd</strong></p><p>1.创建一个外部的dtd文件</p><p>这是一个文件的格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs dtd">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;<br><br>&lt;!--声明dtd--&gt;<br><br>&lt;!ELEMENT scores (student*)&gt;<br>&lt;!--上面的空格是必须要有的--&gt;<br><br>&lt;!--这里的星号表示出现任意次--&gt;<br><br>&lt;!ELEMENT student (name,course,score)&gt;<br><br>&lt;!ATTLIST student id CDATA #REQUIRED&gt;<br><br>&lt;!ELEMENT name (#PCDATA)&gt;<br><br>&lt;!ELEMENT score (#PCDATA)&gt;<br><br>&lt;!ELEMENT course (#PCDATA)&gt;<br></code></pre></td></tr></table></figure><p>2.在xml中引入一个外部的dtd文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DPCTYPE <span class="hljs-keyword">scores</span> <span class="hljs-keyword">SYSTEM</span> “scores.dtd<span class="hljs-string">&quot;&gt;</span></span><br></code></pre></td></tr></table></figure><p>这有的浏览器对其可能不支持</p><p>第二个是根标签，scores.dtd是一个要引入的文件，SYSTEM也是必要的</p><p><strong>ENTITY的使用实例</strong></p><p>关于ENTITY的讲解，在xxe漏洞当中介绍</p><h2 id="XML解析技术介绍"><a href="#XML解析技术介绍" class="headerlink" title="XML解析技术介绍"></a>XML解析技术介绍</h2><p>xml 可扩展的标记语言。 </p><p>不管是 html 文件还是 xml 文件它们都是标记型文档，都可以使用 w3c 组织制定的 dom 技术来解析</p><p>document 对象表示的是整个文档（可以是 html 文档，也可以是 xml 文档）</p><h2 id="使用dom4j读取xml文件得到document对象"><a href="#使用dom4j读取xml文件得到document对象" class="headerlink" title="使用dom4j读取xml文件得到document对象"></a>使用dom4j读取xml文件得到document对象</h2><p>dom4j的使用直接看pdf</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291923215.png" alt="image-20220917222951542"></p><p>被用来解析的xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">books</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">sn</span>=<span class="hljs-string">&quot;SN12341232&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>辟邪剑谱<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">price</span>&gt;</span>9.9<span class="hljs-tag">&lt;/<span class="hljs-name">price</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">author</span>&gt;</span>班主任<span class="hljs-tag">&lt;/<span class="hljs-name">author</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">sn</span>=<span class="hljs-string">&quot;SN12341231&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>葵花宝典<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">price</span>&gt;</span>99.99<span class="hljs-tag">&lt;/<span class="hljs-name">price</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">author</span>&gt;</span>班长<span class="hljs-tag">&lt;/<span class="hljs-name">author</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">books</span>&gt;</span><br></code></pre></td></tr></table></figure><p>解析xml文件的代码</p><p>@Test是指一个测试方法，这个方法使用需要导包导关于junit4的包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.atguigu.pojo.Book;<br><span class="hljs-keyword">import</span> org.dom4j.Document;<br><span class="hljs-keyword">import</span> org.dom4j.DocumentException;<br><span class="hljs-keyword">import</span> org.dom4j.Element;<br><span class="hljs-keyword">import</span> org.dom4j.io.SAXReader;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> java.lang.Double.parseDouble;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dom4jTest</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><span class="hljs-comment">//是指这是一个测试方法，可以不用主方法来调用</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> DocumentException &#123;<br>        <span class="hljs-comment">//创建一个SaxReader输入流，去读取xml配置文件，生成Document对象</span><br>        SAXReader saxReader=<span class="hljs-keyword">new</span> <span class="hljs-title class_">SAXReader</span>();<br>        <span class="hljs-type">Document</span> <span class="hljs-variable">document</span> <span class="hljs-operator">=</span> saxReader.read(<span class="hljs-string">&quot;src/books.xml&quot;</span>);<br>        System.out.println(document);<br>    &#125;<br><br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> DocumentException &#123;<br>        <span class="hljs-comment">//1.读取books.xml文件</span><br>        SAXReader reader= <span class="hljs-keyword">new</span> <span class="hljs-title class_">SAXReader</span>();<br>        <span class="hljs-comment">// 2.通过Document对象获取根元素</span><br>        <span class="hljs-comment">//在Junit测试中，相对路径是从模块开始的也就是从xml模块开始的，所以路径中第一个是src</span><br>        <span class="hljs-type">Document</span> <span class="hljs-variable">read</span> <span class="hljs-operator">=</span> reader.read(<span class="hljs-string">&quot;src/books.xml&quot;</span>);<br>        <span class="hljs-comment">//3.通过根元素获取book标签对象</span><br>        <span class="hljs-type">Element</span> <span class="hljs-variable">element</span> <span class="hljs-operator">=</span> read.getRootElement();<br>        <span class="hljs-comment">//element()和elements()都是通过标签名查找子元素，elements()返回多个，element()返回一个</span><br>        List&lt;Element&gt; books = element.elements(<span class="hljs-string">&quot;book&quot;</span>);<br>        <span class="hljs-comment">//4.遍历，处理每个book标签转化为Book类</span><br>        <span class="hljs-keyword">for</span>(Element book:books)&#123;<br>            <span class="hljs-comment">//asXML()把标签对象转换为标签字符串</span><br>            Element nameElement=book.element(<span class="hljs-string">&quot;name&quot;</span>);<br>            <span class="hljs-comment">//getText()获取标签文本内容</span><br>            String nameText=nameElement.getText();<br>            <span class="hljs-comment">//直接获取指定标签名的文本内容</span><br>            String priceText=book.elementText(<span class="hljs-string">&quot;price&quot;</span>);<br>            String authorText=book.elementText(<span class="hljs-string">&quot;author&quot;</span>);<br><br>            <span class="hljs-comment">//获取属性值</span><br>            String snValue=book.attributeValue(<span class="hljs-string">&quot;sn&quot;</span>);<br>            System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(snValue,nameText,parseDouble(priceText),authorText));<br><br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Idea文件结构"><a href="#Idea文件结构" class="headerlink" title="Idea文件结构"></a>Idea文件结构</h2><p>项目-&gt;模块-&gt;包</p><p>src文件夹中放置你的源代码，out目录放置src文件夹里面的java程序</p><h1 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h1><h2 id="javaweb概念"><a href="#javaweb概念" class="headerlink" title="javaweb概念"></a>javaweb概念</h2><p>javaweb是指所有通过java语言编写的可以通过浏览器访问的程序的总成称叫javaweb</p><p>java是基于请求和响应来开发的</p><p><strong>什么是请求</strong></p><p>请求是指客户端发给服务器发送数据，叫请求request</p><p><strong>什么是响应</strong></p><p>相应是指服务器给客户端回传数据，叫响应reponse</p><p><strong>请求和响应的关系</strong></p><p>成对出现的，有请求就有回应</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291923745.png" alt="image-20220918100658314"></p><p><strong>2.Web 资源的分类</strong></p><p> web 资源按实现的技术和呈现的效果的不同，又分为静态资源和动态资源两种。 </p><p>静态资源： html、css、js、txt、mp4 视频 , jpg 图片 </p><p>动态资源： jsp 页面、Servlet 程序</p><p>3.常用的 Web 服务器 </p><p>Tomcat：由 Apache 组织提供的一种 Web 服务器，提供对 jsp 和 Servlet 的支持。它是一种轻量级的 javaWeb 容器（服务 器），也是当前应用最广的 JavaWeb 服务器（免费）。 </p><p>Jboss：是一个遵从 JavaEE 规范的、开放源代码的、纯 Java 的 EJB 服务器，它支持所有的 JavaEE 规范（免费）。 </p><p>GlassFish： 由 Oracle 公司开发的一款 JavaWeb 服务器，是一款强健的商业服务器，达到产品级质量（应用很少）。 </p><p>Resin：是 CAUCHO 公司的产品，是一个非常流行的服务器，对 servlet 和 JSP 提供了良好的支持， 性能也比较优良，resin 自身采用 JAVA 语言开发（收费，应用比较多）。 </p><p>WebLogic：是 Oracle 公司的产品，是目前应用最广泛的 Web 服务器，支持 JavaEE 规范， 而且不断的完善以适应新的开发要求，适合大型项目（收费，用的不多，适合大公司）。</p><p><strong>Tomcat服务器和Servelet版本的对应关系</strong></p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291923819.png" alt="image-20220918102346974"></p><h2 id="Tomcat使用"><a href="#Tomcat使用" class="headerlink" title="Tomcat使用"></a>Tomcat使用</h2><p>安装 找到你需要用的 Tomcat 版本对应的 zip 压缩包，解压到需要安装的目录即可。</p><h3 id="目录介绍"><a href="#目录介绍" class="headerlink" title="目录介绍"></a>目录介绍</h3><p>bin          专门用来存放 Tomcat 服务器的可执行程序 </p><p>conf         专门用来存放 Tocmat 服务器的配置文件 </p><p>lib            专门用来存放 Tomcat 服务器的 jar 包 </p><p>logs             专门用来存放 Tomcat 服务器运行时输出的日记信息 </p><p>temp             专门用来存放 Tomcdat 运行时产生的临时数据 </p><p>webapps      专门用来存放部署的 Web 工程。 </p><p>work          是 Tomcat 工作时的目录，用来存放 Tomcat 运行时 jsp 翻译为 Servlet 的源码，和 Session 钝化（序列化）的目录</p><p><strong>如何启动tomcat服务器</strong></p><p>找到 Tomcat 目录下的 bin 目录下的 startup.bat 文件，双击，就可以启动 Tomcat 服务器</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291923253.png" alt="image-20220918124637456"></p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291923327.png" alt="image-20220918124707554"></p><p><strong>另一种启动Tomcat服务器的方式</strong></p><p>1、打开命令行 </p><p>2、cd 到 你的 Tomcat 的 bin 目录下 </p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291923124.png" alt="image-20220918130712935"></p><p>3、敲入启动命令： catalina ru</p><p>直接在命令行里输入D:就可以进入D盘</p><h3 id="Tomcat的停止"><a href="#Tomcat的停止" class="headerlink" title="Tomcat的停止"></a>Tomcat的停止</h3><p>1、点击 tomcat 服务器窗口的 x 关闭按钮 </p><p>2、把 Tomcat 服务器窗口置为当前窗口，然后按快捷键 Ctrl+C</p><p> 3、找到 Tomcat 的 bin 目录下的 shutdown.bat 双击，就可以停止 Tomcat 服务器</p><h3 id="如何修改Tomcat默认的端口号"><a href="#如何修改Tomcat默认的端口号" class="headerlink" title="如何修改Tomcat默认的端口号"></a>如何修改Tomcat默认的端口号</h3><p>Mysql 默认的端口号是：3306 </p><p>Tomcat 默认的端口号是：8080 </p><p>找到 Tomcat 目录下的 conf 目录，找到 server.xml 配置文件。</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291923149.png" alt="image-20220918132017144"></p><p>修改port属性来修改服务器端口</p><h3 id="如何把web工程部署到tomcat服务器中"><a href="#如何把web工程部署到tomcat服务器中" class="headerlink" title="如何把web工程部署到tomcat服务器中"></a>如何把web工程部署到tomcat服务器中</h3><p>第一种方法：只需要把web工程的目录拷贝到Tomcat服务器的webapps目录下即可</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291923809.png" alt="image-20220918134335523"></p><p>第二种方法</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291923645.png" alt="image-20220918135319528"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/abc/i</span>ndex.html<br><br><br></code></pre></td></tr></table></figure><p>这个xml文件名和那个path不一定非得一样，且这个xml文件在变成xml文件之前必须是UTF-8的记事本文件，然后改名为xml文件</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291923323.png" alt="image-20220918144329941"></p><p>1.让txt文件变成html文件被访问的时候，用ANSI编码格式，否则会出现乱码</p><h3 id="Tomcat中创建动态的web工程"><a href="#Tomcat中创建动态的web工程" class="headerlink" title="Tomcat中创建动态的web工程"></a>Tomcat中创建动态的web工程</h3><p>csdn中记载那样创建</p><p>先创建一个java模块，然后右键java模块找到add framework support</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291923968.png" alt="image-20220920121015195"></p><p>再在WEB-INF目录里创建lib目录，存放jar包，将jar复制进去之后，右键jar包，选add as libray</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291923790.png" alt="image-20220920121255710"></p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291923816.png" alt="image-20220920121310644"></p><p>Application server  是自己找到那个自己的Tomcat</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291923082.png" alt="image-20220920121325671"></p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291923348.png" alt="img"></p><h3 id="如何在-IDEA-中部署工程到-Tomcat-上运行"><a href="#如何在-IDEA-中部署工程到-Tomcat-上运行" class="headerlink" title="如何在 IDEA 中部署工程到 Tomcat 上运行"></a>如何在 IDEA 中部署工程到 Tomcat 上运行</h3><p>看pdf文件即可</p><h3 id="如何给Tomcat添加第三方jar包"><a href="#如何给Tomcat添加第三方jar包" class="headerlink" title="如何给Tomcat添加第三方jar包"></a>如何给Tomcat添加第三方jar包</h3><p>看pdf即可</p><h1 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h1><p>路径</p><p><strong>什么是·Servlet</strong></p><p>1.Servlet是javaEE规范之一，规范就是接口</p><p>2.Servlet是javaweb三大组件之一，三大组件分别是servlet程序，filter过滤器，listener监听器</p><p>3.Servlet是运行在服务器上的Java小程序，它可以接受客户端发送过来的请求，并响应数据给客户端</p><h2 id="手动实现Servlet程序"><a href="#手动实现Servlet程序" class="headerlink" title="手动实现Servlet程序"></a>手动实现Servlet程序</h2><p>1.编写一个类去实现Servlet接口</p><p>2.实现service方法，处理请求，并响应数据</p><p>3.到web.xml中配置servlet程序的访问地址</p><p>实现servlet接口的程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.servlet;<br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloServlet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Servlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(ServletConfig servletConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ServletConfig <span class="hljs-title function_">getServletConfig</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/*service方法是专门用来处理请求和响应的*/</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;hello servlet访问了&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getServletInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>web.xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--servlet标签给Tomcat配置Servlet程序--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span><br>            HelloServlet<br>            <span class="hljs-comment">&lt;!--这个名字一般是和类名一样的，但也是别名可以不同，但一定要和下面的servlet-mapping中的name相同，servlet-class是必须和真实类名相同的--&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--servlet-class是Servlet程序的全类名--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span><br>            com.atguigu.servlet.HelloServlet<br><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--servlet-name标签的作用是告诉服务器，我当前配置的地址给那个Servlet程序使用--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--servlet-name标签的作用是告诉服务器，我当前配置的地址给那个Servlet程序使用--&gt;</span><br>        <span class="hljs-comment">&lt;!-- url-pattern标签配置访问地址</span><br><span class="hljs-comment">        /   斜杠在服务器解析的时候，表示地址为http://ip:port/工程路径</span><br><span class="hljs-comment">        /hello  表示地址为:http://ip:port/工程路径/hello</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-comment">&lt;!--这里的这个hello最好是和servlet的名字有点联系，一眼能看出--&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br><br><br></code></pre></td></tr></table></figure><p>运行tomcat实例之后，在url后面添加&#x2F;hello就可以访问到这个HelloServlet程序，也就是调用了上面java代码中的service方法</p><p>常见的错误</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291923654.png" alt="image-20220920164356420"></p><h2 id="url地址如何定位servlet程序去访问的"><a href="#url地址如何定位servlet程序去访问的" class="headerlink" title="url地址如何定位servlet程序去访问的"></a>url地址如何定位servlet程序去访问的</h2><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291923208.png" alt="image-20220921102737307"></p><h2 id="Servlet的生命周期"><a href="#Servlet的生命周期" class="headerlink" title="Servlet的生命周期"></a>Servlet的生命周期</h2><p>一个servlet的执行顺序</p><p>1.执行Servlet构造器方法</p><p>2.执行init初始化方法</p><p>第一二步是在第一次方法的时候创建Servlet程序会调用，就是如果刷新页面再次访问不会再执行1，2</p><p>3.执行service方法</p><p>每次访问都会调用，每次刷新页面再次访问就会调用</p><p>4.执行destroy方法</p><p>第四步，在web工程停止的时候会调用</p><p>四个方法实现的演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.servlet;<br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloServlet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Servlet</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">HelloServlet</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;1 构造器方法&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(ServletConfig servletConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>        System.out.println(<span class="hljs-string">&quot;2.ini方法&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ServletConfig <span class="hljs-title function_">getServletConfig</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/*service方法是专门用来处理请求和响应的*/</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;3 service===hello servlet访问了&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getServletInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;4.destroy方法&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">启动服务器之后，访问http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/ab/</span>hello<br><br>结果：<span class="hljs-number">1</span> 构造器方法<br>     <span class="hljs-number">2</span>.ini方法<br>     <span class="hljs-number">3</span> service===hello servlet访问了<br></code></pre></td></tr></table></figure><h2 id="Servlet请求的分发处理"><a href="#Servlet请求的分发处理" class="headerlink" title="Servlet请求的分发处理"></a>Servlet请求的分发处理</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">在模块文件夹下的html文件，可以通过http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/servlet/</span>a.html访问<br></code></pre></td></tr></table></figure><p>a.html前面的都是工程路径</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://localhost:8080/servlet/hello&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>method可以有post和get，对应不同的操作，所以应该对Servlet程序进行改良</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.servlet;<br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloServlet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Servlet</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">HelloServlet</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;1 构造器方法&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(ServletConfig servletConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>        System.out.println(<span class="hljs-string">&quot;2.ini方法&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ServletConfig <span class="hljs-title function_">getServletConfig</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/*service方法是专门用来处理请求和响应的*/</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//类型转换，HttpServletRequest是ServletRequest的子接口，Servlet没有getMethod方法</span><br>        HttpServletRequest httpServletRequest= (HttpServletRequest) servletRequest;<br>        <span class="hljs-comment">//获取请求的方式</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> httpServletRequest.getMethod();<br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;GET&quot;</span>.equals(method))&#123;<br>            System.out.println(<span class="hljs-string">&quot;get请求&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;POST&quot;</span>.equals(<span class="hljs-string">&quot;post请求&quot;</span>))&#123;<br>            System.out.println(<span class="hljs-string">&quot;post请求&quot;</span>);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getServletInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;4.destroy方法&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>一个方法中又执行get又执行post不太好，将这两个方法分开</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.servlet;<br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloServlet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Servlet</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">HelloServlet</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;1 构造器方法&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(ServletConfig servletConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>        System.out.println(<span class="hljs-string">&quot;2.ini方法&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ServletConfig <span class="hljs-title function_">getServletConfig</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/*service方法是专门用来处理请求和响应的*/</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//类型转换，HttpServletRequest是ServletRequest的子接口，Servlet没有getMethod方法</span><br>        HttpServletRequest httpServletRequest= (HttpServletRequest) servletRequest;<br>        <span class="hljs-comment">//获取请求的方式</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> httpServletRequest.getMethod();<br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;GET&quot;</span>.equals(method))&#123;<br>            doGet();<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;POST&quot;</span>.equals(<span class="hljs-string">&quot;post请求&quot;</span>))&#123;<br>           doPost();<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;get请求&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;get请求&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;get请求&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;get请求&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;get请求&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;post请求&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;post请求&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;post请求&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;post请求&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;post请求&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getServletInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;4.destroy方法&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="通过继承HttpServlet实现Servlet程序"><a href="#通过继承HttpServlet实现Servlet程序" class="headerlink" title="通过继承HttpServlet实现Servlet程序"></a>通过继承HttpServlet实现Servlet程序</h2><p>一般在实际项目中，都是使用继承HttpServlet类的方式去实现Servlet程序</p><p>1.编写一个类去继承 HttpServlet类</p><p>2.根据业务需要重写doGet或者doPost方法</p><p>3.到web.xml中配置Servlet程序的访问地址</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://localhost:8080/servlet/hello2&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloServlet2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    doGet()方法在Get请求的时候调用</span><br><span class="hljs-comment">    doPost()方法在Post请求的时候调用</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;helloservlet2  doget&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;helloservlet2 dopost&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="使用IDEA菜单生成Servlet程序"><a href="#使用IDEA菜单生成Servlet程序" class="headerlink" title="使用IDEA菜单生成Servlet程序"></a>使用IDEA菜单生成Servlet程序</h2><h2 id="整个Servlet类的继承体系"><a href="#整个Servlet类的继承体系" class="headerlink" title="整个Servlet类的继承体系"></a>整个Servlet类的继承体系</h2><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291923380.png" alt="image-20220922185908421"></p><h2 id="ServletConfig类"><a href="#ServletConfig类" class="headerlink" title="ServletConfig类"></a>ServletConfig类</h2><p>ServletConfig从类名上看，就是Servlet程序的配置信息类</p><p>servlet程序和servletConfig对象都是由Tomcat负责创建，我们负责使用</p><p>Servlet程序默认是第一次访问的时候创建，ServletConfig是每个Servlet程序创建的时候，就创建一个对应的ServletConfig对象</p><p><strong>三大作用</strong></p><p>1.可以获取Servlet的别名额就是servlet-name的值</p><p>2.获取初始化参数init-param</p><p>3.获取servletContext对象</p><p><strong>init方法体现了ServletConfig的三大作用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.servlet;<br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloServlet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Servlet</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">HelloServlet</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;1 构造器方法&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(ServletConfig servletConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>        System.out.println(<span class="hljs-string">&quot;2.ini方法&quot;</span>);<br>       <span class="hljs-comment">// 1.可以获取Servlet的别名额就是servlet-name的值</span><br>System.out.println(<span class="hljs-string">&quot;servlet的别名是:&quot;</span>+servletConfig.getServletName());<br>        <span class="hljs-comment">//2.获取初始化参数init-param</span><br>System.out.println(<span class="hljs-string">&quot;初始化参数username的值为&quot;</span>+servletConfig.getInitParameter(<span class="hljs-string">&quot;username&quot;</span>));<br>System.out.println(<span class="hljs-string">&quot;初始化参数password的值为&quot;</span>+servletConfig.getInitParameter(<span class="hljs-string">&quot;password&quot;</span>));<br>        <span class="hljs-comment">//3.获取servletContext对象</span><br>        System.out.println(servletConfig.getServletContext());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ServletConfig <span class="hljs-title function_">getServletConfig</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/*service方法是专门用来处理请求和响应的*/</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//类型转换，HttpServletRequest是ServletRequest的子接口，Servlet没有getMethod方法</span><br>        HttpServletRequest httpServletRequest= (HttpServletRequest) servletRequest;<br>        <span class="hljs-comment">//获取请求的方式</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> httpServletRequest.getMethod();<br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;GET&quot;</span>.equals(method))&#123;<br>            doGet();<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;POST&quot;</span>.equals(<span class="hljs-string">&quot;post请求&quot;</span>))&#123;<br>           doPost();<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;get请求&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;get请求&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;get请求&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;get请求&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;get请求&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;post请求&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;post请求&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;post请求&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;post请求&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;post请求&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getServletInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;4.destroy方法&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>每个Servlet程序对应一个ServletConfig对象，所以不可能在HelloServlet2中获得的ServletConfig对象来获取给HelloServlet1配置的信息</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">package</span> com.atguigu.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.<span class="hljs-type">ServletConfig</span>;<br><span class="hljs-keyword">import</span> javax.servlet.<span class="hljs-type">ServletException</span>;<br><span class="hljs-keyword">import</span> javax.servlet.http.<span class="hljs-type">HttpServlet</span>;<br><span class="hljs-keyword">import</span> javax.servlet.http.<span class="hljs-type">HttpServletRequest</span>;<br><span class="hljs-keyword">import</span> javax.servlet.http.<span class="hljs-type">HttpServletResponse</span>;<br><span class="hljs-keyword">import</span> java.io.<span class="hljs-type">IOException</span>;<br><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloServlet2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    doGet()方法在Get请求的时候调用</span><br><span class="hljs-comment">    doPost()方法在Post请求的时候调用</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> void doGet(<span class="hljs-type">HttpServletRequest</span> req, <span class="hljs-type">HttpServletResponse</span> resp) <span class="hljs-keyword">throws</span> <span class="hljs-type">ServletException</span>, <span class="hljs-type">IOException</span> &#123;<br>        <span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;helloservlet2  doget&quot;</span>);<br><br>        <span class="hljs-comment">//可以使用getServletConfig()方法来获得servletConfig对象</span><br>        <span class="hljs-type">ServletConfig</span> servletConfig=getServletConfig();<br>        <span class="hljs-type">System</span>.out.println(servletConfig);<br>        <span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;初始化参数username的值为&quot;</span>+servletConfig.getInitParameter(<span class="hljs-string">&quot;username&quot;</span>));<br>        <span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;初始化参数password的值为&quot;</span>+servletConfig.getInitParameter(<span class="hljs-string">&quot;password&quot;</span>));<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> void doPost(<span class="hljs-type">HttpServletRequest</span> req, <span class="hljs-type">HttpServletResponse</span> resp) <span class="hljs-keyword">throws</span> <span class="hljs-type">ServletException</span>, <span class="hljs-type">IOException</span> &#123;<br>        <span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;helloservlet2 dopost&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>重写Servlet程序的init方法的时候一定要就是调用它父类的init方法</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs scala">public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloServlet2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br><br>    <span class="hljs-comment">//重写init程序的时候必须有这个super.init(config)</span><br>    <span class="hljs-meta">@Override</span><br>    public void init(<span class="hljs-type">ServletConfig</span> config) <span class="hljs-keyword">throws</span> <span class="hljs-type">ServletException</span> &#123;<br>        <span class="hljs-keyword">super</span>.init(config);<span class="hljs-comment">//调用父类的init方法才能让this.config获值</span><br>        <span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;重写了init初始化方法，做了一些工作&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">/*</span><br></code></pre></td></tr></table></figure><h2 id="ServletContext类"><a href="#ServletContext类" class="headerlink" title="ServletContext类"></a>ServletContext类</h2><p>1.ServletContext是一个接口，它表示servlet上下文对象</p><p>2.一个web工程只有一个ServletConText对象实例，不管调用getServletContext()几次，得到的都是一个ServletContext对象</p><p>3.ServletContext对象是一个域对象</p><p>4.<strong>ServletContext是在web工程部署启动的时候创建，在web工程停止的时候销毁</strong>    重新部署或者重启服务器之后，存储的数据就会消失</p><p>什么是域对象</p><p>域对象是可以象Map一样存储数据的对象，叫域对象</p><p>这里的域指的是存储数据的操作范围，整个web工程</p><p>​                               存数据                           取数据                           删除数据</p><p>Map                        put()                           get()                                       remove()</p><p>域对象                      setAttribute()            getAttribute()                    removeAttribute()</p><p><strong>ServletContext类的四个作用</strong></p><p>1.获取web.xml中配置的上下文参数context.param</p><p>2.获取当前的工程路径，格式:&#x2F;工程路径</p><p>3.获取工程部署后在服务器硬盘上的绝对路径</p><p>4.像Map一样存储数据</p><p><strong>当正常在网址栏输入网址访问基本都是get请求</strong></p><p>以下路径是IDEA整合Tomcat之后，Tomcat被拷贝的一些副本内容</p><p>C:\Users#赵梓皓&amp;\AppData\Local\JetBrains\IntelliJIdea2020.3\tomcat\cc813db2-dbda-4294-89c0-505f477c0964</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">D:</span>\IDEAjava工程\javaweb\<span class="hljs-keyword">out</span>\artifacts\servlet_war_exploded\  这个就是项目部署之后在磁盘中的位置<br></code></pre></td></tr></table></figure><p>servlet:war exploded就是一个文件夹，里面是项目中的web文件夹中的内容</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291923701.png" alt="image-20220922204548529"></p><p>前三个功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletConfig;<br><span class="hljs-keyword">import</span> javax.servlet.ServletContext;<br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ContextServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//1.获取web.xml中配置的上下文参数context.param</span><br>        ServletContext context= getServletConfig().getServletContext();<br>        String username=context.getInitParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;context-param参数username是&quot;</span>+username);<br>        System.out.println(<span class="hljs-string">&quot;context-param参数password是&quot;</span>+context.getInitParameter(<span class="hljs-string">&quot;password&quot;</span>));<br>        <span class="hljs-comment">//2.获取当前的工程路径，格式:/工程路径</span><br>System.out.println(<span class="hljs-string">&quot;当前工程的路径&quot;</span>+context.getContextPath());<br>        <span class="hljs-comment">//3.获取工程部署后在服务器硬盘上的绝对路径</span><br>        <span class="hljs-comment">//   斜杠   被服务器解析地址为http://ip:port/工程名/    映射到IDEA代码的web目录</span><br>        <span class="hljs-comment">//就是得到的这个地址访问之后就是web目录下的东西</span><br>        System.out.println(<span class="hljs-string">&quot;工程部书之后的路径&quot;</span>+context.getRealPath(<span class="hljs-string">&quot;/&quot;</span>));<br>        <span class="hljs-comment">//获取web目录下的其他文件的绝对路径</span><br>        System.out.println(<span class="hljs-string">&quot;工程下css目录的绝对路径是&quot;</span>+context.getRealPath(<span class="hljs-string">&quot;/css&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;工程目录下imgs目录1.jpg的绝对路径是&quot;</span>+context.getRealPath(<span class="hljs-string">&quot;/imgs/1.jpg&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>第四个功能.像Map一样存储数据，</p><p>ContextServlet1和ContextServlet2只要有一个存了key1的值，另一个也能获取key1的值，但重新部署或者重启服务器数据就消失了</p><p>ContextServlet1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletContext;<br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ContextServlet1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//获取ServletContext对象</span><br>        <span class="hljs-type">ServletContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> getServletContext();<br>        <span class="hljs-comment">//打印context的地址看两个Servlet中的地址相不相同</span><br>        System.out.println(context);<br>        System.out.println(<span class="hljs-string">&quot;保存之前：Context1获取key1的值是&quot;</span>+context.getAttribute(<span class="hljs-string">&quot;key1&quot;</span>));<br>        context.setAttribute(<span class="hljs-string">&quot;key1&quot;</span>,<span class="hljs-string">&quot;value&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;context1中获取域数据key1的值为&quot;</span>+context.getAttribute(<span class="hljs-string">&quot;key1&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;context1中获取域数据key1的值为&quot;</span>+context.getAttribute(<span class="hljs-string">&quot;key1&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;context1中获取域数据key1的值为&quot;</span>+context.getAttribute(<span class="hljs-string">&quot;key1&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>ContextServlet2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletContext;<br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ContextServlet2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException&#123;<br>        <span class="hljs-type">ServletContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> getServletContext();<br>        System.out.println(context);<br>        System.out.println(<span class="hljs-string">&quot;Context2中获取域数据key1的值是&quot;</span>+context.getAttribute(<span class="hljs-string">&quot;key1&quot;</span>));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>两个文件中context地址相同</p><p>org.apache.catalina.core.ApplicationContextFacade@467b6a76</p><p>org.apache.catalina.core.ApplicationContextFacade@467b6a76</p><h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><h3 id="请求的HTTP协议"><a href="#请求的HTTP协议" class="headerlink" title="请求的HTTP协议"></a>请求的HTTP协议</h3><p>协议是指双方或者多方约定好，大家都需要遵守的规则，叫协议</p><p>所谓HTTP协议就是指，客户端和服务器之间通信时，发送的数据需要遵守的规则，叫http协议</p><p>HTTP 协议中的数据又叫报文。</p><p>客户端给服务器发送数据叫请求。 </p><p>服务器给客户端回传数据叫响应。 </p><p>请求又分为 GET 请求，和 POST 请求两种</p><p><strong>GET 请求</strong> </p><p>getpost都会对url进行url编码</p><p>1、请求行(报文行) (1) 请求的方式 GET (2) 请求的资源路径[+?+请求参数] (3) 请求的协议的版本号 HTTP&#x2F;1.1 </p><p>2、请求头(报文头) key : value 组成 不同的键值对，表示不同的含义</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291923945.png" alt="image-20220923145222423"></p><p><strong>ii. POST 请求</strong></p><p> 1、请求行</p><p> (1)请求的方式 POST (2) 请求的资源路径[+?+请求参数] (3) 请求的协议的版本号 HTTP&#x2F;1.1 2、</p><p>2.请求头 </p><ol><li>key : value 不同的请求头，有不同的含义</li></ol><p>空行(请求头和请求体之间有空行)</p><p>3、请求体 &#x3D;&#x3D;&#x3D;&gt;&gt;&gt; 就是发送给服务器的数据</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291923569.png" alt="image-20220923150231137"></p><p><strong>iii. 常用请求头的说明</strong> </p><p>Accept: 表示客户端可以接收的数据类型 </p><p>Accpet-Languege: 表示客户端可以接收的语言类型 </p><p>User-Agent: 表示客户端浏览器的信息 </p><p>Host： 表示请求时的服务器 ip 和端口</p><p><strong>iv. 哪些是 GET 请求，哪些是 POST 请求</strong> </p><p>GET 请求有哪些：</p><p> 1、form 标签 method&#x3D;get   2、a 标签    3、link 标签引入 css    4、Script 标签引入 js 文件     5、img 标签引入图片    6、iframe 引入 html 页面    7、在浏览器地址栏中输入地址后敲回车 </p><p>POST 请求有哪些：</p><p> 8、form 标签 method&#x3D;post</p><h3 id="响应的-HTTP-协议格式"><a href="#响应的-HTTP-协议格式" class="headerlink" title="响应的 HTTP 协议格式"></a>响应的 HTTP 协议格式</h3><p>1、响应行 (1) 响应的协议和版本号   HTTP&#x2F;1.1</p><p>​                  (2) 响应状态码    200</p><p>​                  (3) 响应状态描述符      </p><p>2、响应头 (1) key : value 不同的响应头，有其不同含义</p><p> 空行 </p><p>3、响应体 —-&gt;&gt;&gt; 就是回传给客户端的数</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291923253.png" alt="image-20220924084143658"></p><p><strong>常见的响应码</strong></p><p>200 表示请求成功 </p><p>302 表示请求重定向（明天讲） </p><p>404 表示请求服务器已经收到了，但是你要的数据不存在（请求地址错误） </p><p>500 表示服务器已经收到请求，但是服务器内部错误（代码错误）</p><p><strong>MIME 类型说明</strong> </p><p>MIME 是 HTTP 协议中数据类型。 MIME 的英文全称是”Multipurpose Internet Mail Extensions” 多功能 Internet 邮件扩充服务。MIME 类型的格式是“大类型&#x2F;小 类型”，并与某一种文件的扩展名相对应</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291923909.png" alt="image-20220924085410669"></p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291923379.png" alt="image-20220924090516889"></p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291923231.png" alt="image-20220924090547978"></p><h2 id="ServletRequest"><a href="#ServletRequest" class="headerlink" title="ServletRequest"></a>ServletRequest</h2><p>每次只要有请求进入，tomcat服务器就会把请求过来的HTTP协议信息解析好封装到request对象中。</p><p>然后传递到service方法，也含有doget  dopost方法中给我们使用。我们可以通过HttpServletRequest对象，获取到所有请求的信息</p><h3 id="HttpServletRequest-类的常用方法"><a href="#HttpServletRequest-类的常用方法" class="headerlink" title="HttpServletRequest 类的常用方法"></a>HttpServletRequest 类的常用方法</h3><p>i. getRequestURI()                                 获取请求的资源路径 </p><p>ii. getRequestURL()                               获取请求的统一资源定位符（绝对路径） </p><p>iii. getRemoteHost()                             获取客户端的 ip 地址 </p><p>iv. getHeader()                                      获取请求头 </p><p>v. getParameter()                                 获取请求的参数 </p><p>vi. getParameterValues()                    获取请求的参数（多个值的时候使用） </p><p>vii. getMethod()                                    获取请求的方式 GET 或 POST </p><p>viii. setAttribute(key, value);              设置域数据 </p><p>ix. getAttribute(key);                           获取域数据 </p><p>x. getRequestDispatcher()                 获取请求转发对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestAPIServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>       <span class="hljs-comment">// i. getRequestURI()                             获取请求的资源路径</span><br>System.out.println(<span class="hljs-string">&quot;url=&gt;&quot;</span>+req.getRequestURI());<br>        <span class="hljs-comment">//ii. getRequestURL()                            获取请求的统一资源定位符（绝对路径）</span><br>System.out.println(<span class="hljs-string">&quot;ulr=&gt;&quot;</span>+req.getRequestURL());<br>        <span class="hljs-comment">//iii. getRemoteHost()                             获取客户端的 ip 地址</span><br>System.out.println(<span class="hljs-string">&quot;客户端 ip 地址&quot;</span>+req.getRemoteHost());<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">在IDEA中，使用使用localhost访问时，得到的客户端ip地址是127.0.0.1</span><br><span class="hljs-comment">在IDEA中，使用使用127.0.0.1访问时，得到的客户端ip地址是127.0.0.1</span><br><span class="hljs-comment">在IDEA中，使用使用真实ip访问时，得到的客户端ip地址是真实ip</span><br><span class="hljs-comment"> */</span><br><br>        <span class="hljs-comment">//iv. getHeader()                                      获取请求头</span><br>System.out.println(<span class="hljs-string">&quot;请求头&quot;</span>+req.getHeader(<span class="hljs-string">&quot;User-Agent&quot;</span>));<br>        <span class="hljs-comment">//vii. getMethod()                                    获取请求的方式 GET 或 POST</span><br>        System.out.println(<span class="hljs-string">&quot;请求的方式&quot;</span>+req.getMethod());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Servlet获取请求的参数值"><a href="#Servlet获取请求的参数值" class="headerlink" title="Servlet获取请求的参数值"></a>Servlet获取请求的参数值</h3><p>用来发送参数的form表单</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://localhost:8086/servlet2/parameterServlet&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span><br><br>    用户名 <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    密码 <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    兴趣爱好 <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;cpp&quot;</span>&gt;</span>c++<br>           <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;java&quot;</span>&gt;</span>java<br>           <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;javascript&quot;</span>&gt;</span>javascript<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ParameterServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br> <span class="hljs-comment">//获取请求的参数，用name属性的值来作为参数获取</span><br>        System.out.println(req.getParameter(<span class="hljs-string">&quot;username&quot;</span>));<br>        System.out.println(req.getParameter(<span class="hljs-string">&quot;password&quot;</span>));<br><span class="hljs-comment">//获取有多个参数的请求</span><br>String []hobby=req.getParameterValues(<span class="hljs-string">&quot;hobby&quot;</span>);<br>System.out.println(Arrays.toString(hobby));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>解决post请求中的中文乱码问题</strong></p><p>req.setCharacterEncoding(“UTF-8”);</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://localhost:8086/servlet2/parameterServlet&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br><br>    用户名 <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    密码 <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    兴趣爱好 <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;cpp&quot;</span>&gt;</span>c++<br>           <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;java&quot;</span>&gt;</span>java<br>           <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;javascript&quot;</span>&gt;</span>javascript<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ParameterServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br> <span class="hljs-comment">//获取请求的参数，用name属性的值来作为参数获取</span><br>        System.out.println(req.getParameter(<span class="hljs-string">&quot;username&quot;</span>));<br>        System.out.println(req.getParameter(<span class="hljs-string">&quot;password&quot;</span>));<br><span class="hljs-comment">//获取有多个参数的请求</span><br>String []hobby=req.getParameterValues(<span class="hljs-string">&quot;hobby&quot;</span>);<br>System.out.println(Arrays.toString(hobby));<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//设置请求体的字符集为UTF-8，从而解决post请求的中文乱码问题</span><br>        <span class="hljs-comment">//这个方法只有在所有获取请求参数方法之前调用才有效</span><br>        req.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;=-----post----&quot;</span>);<br>        <span class="hljs-comment">//获取请求的参数，用name属性的值来作为参数获取</span><br>        System.out.println(req.getParameter(<span class="hljs-string">&quot;username&quot;</span>));<br>        System.out.println(req.getParameter(<span class="hljs-string">&quot;password&quot;</span>));<br><span class="hljs-comment">//获取有多个参数的请求</span><br>        String []hobby=req.getParameterValues(<span class="hljs-string">&quot;hobby&quot;</span>);<br>        System.out.println(Arrays.toString(hobby));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="请求的转发"><a href="#请求的转发" class="headerlink" title="请求的转发"></a>请求的转发</h3><p>什么是请求的转发?</p><p> 请求转发是指，服务器收到请求后，从一次资源跳转到另一个资源的操作叫请求转发</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291923784.png" alt="image-20220924113414262"></p><p>请求转发的特点第四条</p><p>如果form.html在WEB-INF目录下无法通过<a href="http://localhost:8086/servlet2/WEB-INF/form.html%E8%AE%BF%E9%97%AE">http://localhost:8086/servlet2/WEB-INF/form.html访问</a></p><p>但可以通过请求转发访问</p><p>下面两种都可以，第一个是绝对路径，第二个是相对路径</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">RequestDispatcher requestDispatcher <span class="hljs-operator">=</span> req.getRequestDispatcher(<span class="hljs-string">&quot;/WEB-INF/form.html&quot;</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">RequestDispatcher requestDispatcher <span class="hljs-operator">=</span> req.getRequestDispatcher(<span class="hljs-string">&quot;WEB-INF/form.html&quot;</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>在web中   &#x2F;斜杠就代表<a href="http://ip:port/工程名/">http://ip:port/工程名/</a>  可以映射到web目录下，可以在后面直接加web目录中的资源访问，但不能直接访问</p><p>WEB-INF目录中的资源</p><p>这是实现图片中的请求转发的步骤</p><p>servlet1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.servlet;<br><br><span class="hljs-keyword">import</span> javafx.scene.control.TextInputControl;<br><br><span class="hljs-keyword">import</span> javax.servlet.RequestDispatcher;<br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">servlet1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>       <span class="hljs-comment">//获取请求参数，(办事的材料)查看</span><br>        <span class="hljs-comment">//这个参数也可以用get传参直接传</span><br>        String username=req.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;在servlet1柜台中查看参数(材料)&quot;</span>+username);<br><br>        <span class="hljs-comment">//给材料盖一个章，并传递到servlet2柜台二去查看</span><br>        req.setAttribute(<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-string">&quot;柜台1的章&quot;</span>);<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        请求转发必须要以斜杠打头，斜杠表示地址为：http://ip:port/工程名/  ,映射到IDEA代码的web目录，然后在后面加这个servlet文件名即可</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-comment">//问路servlet2(柜台二在哪)</span><br>        <span class="hljs-type">RequestDispatcher</span> <span class="hljs-variable">requestDispatcher</span> <span class="hljs-operator">=</span> req.getRequestDispatcher(<span class="hljs-string">&quot;/servlet2&quot;</span>);<br><br>        <span class="hljs-comment">//走向servlet2，柜台二</span><br>        requestDispatcher.forward(req,resp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>servlet2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">servlet2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//获取请求参数，(办事的材料)查看</span><br>        String username=req.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;在servlet1柜台中查看参数(材料)&quot;</span>+username);<br><br>        <span class="hljs-comment">//查看柜台1 是否有盖章</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> req.getAttribute(<span class="hljs-string">&quot;key&quot;</span>);<br>      System.out.println(<span class="hljs-string">&quot;柜台一是否有章&quot;</span>+key);<br><br>      <span class="hljs-comment">//处理自己的业务</span><br>        System.out.println(<span class="hljs-string">&quot;servlet2处理自己的业务&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="关于重定向以及javaweb的路径补充"><a href="#关于重定向以及javaweb的路径补充" class="headerlink" title="关于重定向以及javaweb的路径补充"></a>关于重定向以及javaweb的路径补充</h3><p>服务器对服务器(请求转发)发起请求：(也叫服务器对斜杠&#x2F;进行解析的时候)</p><p>绝对路径：&#x2F;   斜杠代表的是项目根目录     也就是<a href="http://ip:port/工程名，">http://ip:port/工程名，</a>  可以映射到web目录下，后面直接跟web目录下内容，除了WEB-INF</p><p>浏览器对服务器(重定向)发起请求：(也叫浏览器对斜杠&#x2F;进行解析的时候)</p><p>绝对路径：&#x2F;   斜杠代表的是tomcat根目录，也就是<a href="http://ip:port">http://ip:port</a> 需要自己去加工程名</p><p>当这种&#x2F;表示tomcat根目录的时候，绝对路径开头的   &#x2F;工程名   就是自己设置的那个    而不是文件名</p><p>不管是哪个相对路径都是看相对位置</p><p>这个就是规定了工程的目录   也就是<a href="http://ip:port/servlet2">http://ip:port/servlet2</a></p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291923829.png" alt="image-20220924140059312"></p><p>请求转发路径解释：</p><p>这个是web.xml文件中规定的Servlet文件的访问路径</p><p>等于是在web文件夹中创立一个contextservlet2文件，这也为什么<a href="http://ip:port/servlet2/contextservlet2能访问到servlet文件的原因">http://ip:port/servlet2/contextservlet2能访问到servlet文件的原因</a></p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291923081.png" alt="image-20220924140317384"></p><p>请求转发</p><p>这个地方用servlet2是因为这可以用相对路径，他们访问路径都在web目录下</p><p>也可以用&#x2F;servlet2  这是绝对路径，因为servlet2访问路径在web目录下</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291923164.png" alt="image-20220924141139460"></p><p>如果是web文件下有这个form.html文件也可以就是通过请求转发访问</p><p>下面两种都可以</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">RequestDispatcher</span> <span class="hljs-variable">requestDispatcher</span> <span class="hljs-operator">=</span> req.getRequestDispatcher(<span class="hljs-string">&quot;form.html&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">RequestDispatcher</span> <span class="hljs-variable">requestDispatcher</span> <span class="hljs-operator">=</span> req.getRequestDispatcher(<span class="hljs-string">&quot;/form.html&quot;</span>);<br></code></pre></td></tr></table></figure><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291923648.png" alt="image-20220924155454292"></p><h3 id="base标签的作用"><a href="#base标签的作用" class="headerlink" title="base标签的作用"></a>base标签的作用</h3><p>即使文件加上了base标签，也可以使用绝对路径</p><p>错误演示</p><p>c.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>这是a下的b下的c.html页面<br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/servlet2/index.html&quot;</span>&gt;</span>跳回首页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;../../index.html&quot;</span>&gt;</span>跳回首页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这两个a标签中的地址都是index.html的地址一个是相对路径一个是绝对路径</p><p>这里因为是浏览器向服务器发起请求所以这里的绝对路径    &#x2F;   斜杠代表的是<a href="http://ip:port/">http://ip:port/</a></p><p>访问到工程名默认的是访问web文件下的名为index的html或者js的文件</p><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>这是web下的index.html<br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;a/b/c.html&quot;</span>&gt;</span>a/b/c.html<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://localhost:8086/servlet2/ForwardC&quot;</span>&gt;</span><br>    请求转发<br><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>第二个a标签利用请求转发跳转，是无法在c.html回到首页的</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291923444.png" alt="image-20220924152916257"></p><p>正确版本</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--base标签设置页面相对路径工作时参照的地址</span><br><span class="hljs-comment">        href   属性就是参数的地址值</span><br><span class="hljs-comment">    --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>这是a下的b下的c.html页面<br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/servlet2/index.html&quot;</span>&gt;</span>跳回首页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;../../index.html&quot;</span>&gt;</span>跳回首页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a href="http://localhost:8080/servlet2/a/b/c.html%E5%B0%B1%E6%98%AF%E8%BF%99%E4%B8%AA%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84%E6%89%80%E6%9C%89%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84%E7%9A%84%E5%9C%B0%E5%9D%80%E9%83%BD%E6%98%AF%E5%8F%82%E7%85%A7%E8%BF%99%E4%B8%AA%E8%B7%AF%E5%BE%84%E7%9A%84">http://localhost:8080/servlet2/a/b/c.html就是这个文件中的所有相对路径的地址都是参照这个路径的</a></p><h2 id="HttpServletResponse"><a href="#HttpServletResponse" class="headerlink" title="HttpServletResponse"></a>HttpServletResponse</h2><p>作用</p><p>HttpServletResponse 类和 HttpServletRequest 类一样。每次请求进来，Tomcat 服务器都会创建一个 Response 对象传递给 Servlet 程序去使用。</p><p>HttpServletRequest 表示请求过来的信息，HttpServletResponse 表示所有响应的信息， 我们如果需要设置返回给客户端的信息，都可以通过 HttpServletResponse</p><h3 id="两个输出流说明"><a href="#两个输出流说明" class="headerlink" title="两个输出流说明"></a>两个输出流说明</h3><p>字节流          getOutputStream()     常用于下载，传递二进制数据 </p><p>字符流          getWriter()           常用于回传字符串(常用)</p><p><strong>两个流同时只能使用一个，使用了字节流，就不能再使用字符流，否则就会报错</strong></p><h3 id="如何往客户端回传数据"><a href="#如何往客户端回传数据" class="headerlink" title="如何往客户端回传数据"></a>如何往客户端回传数据</h3><p>要求：往客户端回传字符串数据以及中文乱码的解决方案（将服务器和浏览器统一编码）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.PrintWriter;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResponseIOServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//查看相应的字符集      默认ISO-8859-1</span><br>        System.out.println(resp.getCharacterEncoding());<br>        <span class="hljs-comment">//设置服务器字符集为UTF-8</span><br><br>        resp.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br><br>        <span class="hljs-comment">//同时要自己去改变浏览器的字符集，改为UTF-8</span><br>        resp.setHeader(<span class="hljs-string">&quot;Content-Type&quot;</span>,<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>);<br><br>        <span class="hljs-comment">//要求：往客户端回传字符串数据</span><br>        PrintWriter writer=resp.getWriter();<br>        writer.write(<span class="hljs-string">&quot;我很帅&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>第二种解决中文乱码的方案</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.PrintWriter;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResponseIOServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//它会同时设置服务器和客户端都使用UTF-8字符集，还设置了响应头</span><br>        <span class="hljs-comment">//此方法一定要在获取流之前时使用才有效</span><br>       resp.setContentType(<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>);<br>       System.out.println(resp.getCharacterEncoding());<br>        <span class="hljs-comment">//要求：往客户端回传字符串数据</span><br>        PrintWriter writer=resp.getWriter();<br>        writer.write(<span class="hljs-string">&quot;我很帅&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Servlet请求重定向"><a href="#Servlet请求重定向" class="headerlink" title="Servlet请求重定向"></a>Servlet请求重定向</h2><p>请求重定向，是指客户端给服务器发请求，然后服务器告诉客户端说。我给你一些地址。你去新地址访问。叫请求 重定向（因为之前的地址可能已经被废弃）</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291923373.png" alt="image-20220924164726868"></p><p>重点：两个servlet之间不共享Request域中的数据</p><p>其实就是当用HttpServletResponse的setAttribute()方法是不能把把存储的数据给多个Servlet获取的，但ServletContext可以</p><p><strong>response1重定向到response2的解析</strong></p><p>response1</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">package</span> com.atguigu.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.<span class="hljs-type">ServletException</span>;<br><span class="hljs-keyword">import</span> javax.servlet.http.<span class="hljs-type">HttpServlet</span>;<br><span class="hljs-keyword">import</span> javax.servlet.http.<span class="hljs-type">HttpServletRequest</span>;<br><span class="hljs-keyword">import</span> javax.servlet.http.<span class="hljs-type">HttpServletResponse</span>;<br><span class="hljs-keyword">import</span> java.io.<span class="hljs-type">IOException</span>;<br><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">response1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> void doGet(<span class="hljs-type">HttpServletRequest</span> req, <span class="hljs-type">HttpServletResponse</span> resp) <span class="hljs-keyword">throws</span> <span class="hljs-type">ServletException</span>, <span class="hljs-type">IOException</span> &#123;<br>        <span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;曾到此一游 Response1&quot;</span>);<br>        req.setAttribute(<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-string">&quot;value1&quot;</span>);<br>        <span class="hljs-comment">//设置响应状态码，表示重定向(已搬迁)</span><br>        resp.setStatus(<span class="hljs-number">302</span>);<br>        <span class="hljs-comment">//设置响应头，说明新的地址在哪里</span><br>        resp.setHeader(<span class="hljs-string">&quot;Location&quot;</span>,<span class="hljs-string">&quot;http://localhost:8086/servlet2/response2&quot;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>response2</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">package</span> com.atguigu.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.<span class="hljs-type">ServletException</span>;<br><span class="hljs-keyword">import</span> javax.servlet.http.<span class="hljs-type">HttpServlet</span>;<br><span class="hljs-keyword">import</span> javax.servlet.http.<span class="hljs-type">HttpServletRequest</span>;<br><span class="hljs-keyword">import</span> javax.servlet.http.<span class="hljs-type">HttpServletResponse</span>;<br><span class="hljs-keyword">import</span> java.io.<span class="hljs-type">IOException</span>;<br><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">response2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> void doGet(<span class="hljs-type">HttpServletRequest</span> req, <span class="hljs-type">HttpServletResponse</span> resp) <span class="hljs-keyword">throws</span> <span class="hljs-type">ServletException</span>, <span class="hljs-type">IOException</span> &#123;<br>        <span class="hljs-type">System</span>.out.println(req.getAttribute(<span class="hljs-string">&quot;key&quot;</span>));<br>        resp.getWriter().write(<span class="hljs-string">&quot;response2 result&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>response1重定向到form.html的解析</p><p><strong>错误案例：不能够重定向到WEB-INF下的form.html文件</strong></p><p>因为重定向也就是第二次的地址是用来浏览器向服务器发起请求，WEB-INF中的文件受保护所以不行</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">package</span> com.atguigu.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.<span class="hljs-type">ServletException</span>;<br><span class="hljs-keyword">import</span> javax.servlet.http.<span class="hljs-type">HttpServlet</span>;<br><span class="hljs-keyword">import</span> javax.servlet.http.<span class="hljs-type">HttpServletRequest</span>;<br><span class="hljs-keyword">import</span> javax.servlet.http.<span class="hljs-type">HttpServletResponse</span>;<br><span class="hljs-keyword">import</span> java.io.<span class="hljs-type">IOException</span>;<br><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">response1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> void doGet(<span class="hljs-type">HttpServletRequest</span> req, <span class="hljs-type">HttpServletResponse</span> resp) <span class="hljs-keyword">throws</span> <span class="hljs-type">ServletException</span>, <span class="hljs-type">IOException</span> &#123;<br>        <span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;曾到此一游 Response1&quot;</span>);<br>        req.setAttribute(<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-string">&quot;value1&quot;</span>);<br>        <span class="hljs-comment">//设置响应状态码，表示重定向(已搬迁)</span><br>        resp.setStatus(<span class="hljs-number">302</span>);<br>        <span class="hljs-comment">//设置响应头，说明新的地址在哪里</span><br>        resp.setHeader(<span class="hljs-string">&quot;Location&quot;</span>,<span class="hljs-string">&quot;http://localhost:8086/WEB-INF/form.html&quot;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>正确案例</strong>：访问web目录下的form.html</p><p>新地址使用绝对路径的方法，下面两个都是绝对路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">response1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;曾到此一游 Response1&quot;</span>);<br>        req.setAttribute(<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-string">&quot;value1&quot;</span>);<br>        <span class="hljs-comment">//设置响应状态码，表示重定向(已搬迁)</span><br>        resp.setStatus(<span class="hljs-number">302</span>);<br>        <span class="hljs-comment">//设置响应头，说明新的地址在哪里</span><br>        resp.setHeader(<span class="hljs-string">&quot;Location&quot;</span>,<span class="hljs-string">&quot;http://localhost:8086/servlet2/form.html&quot;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">package</span> com.atguigu.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.<span class="hljs-type">ServletException</span>;<br><span class="hljs-keyword">import</span> javax.servlet.http.<span class="hljs-type">HttpServlet</span>;<br><span class="hljs-keyword">import</span> javax.servlet.http.<span class="hljs-type">HttpServletRequest</span>;<br><span class="hljs-keyword">import</span> javax.servlet.http.<span class="hljs-type">HttpServletResponse</span>;<br><span class="hljs-keyword">import</span> java.io.<span class="hljs-type">IOException</span>;<br><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">response1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> void doGet(<span class="hljs-type">HttpServletRequest</span> req, <span class="hljs-type">HttpServletResponse</span> resp) <span class="hljs-keyword">throws</span> <span class="hljs-type">ServletException</span>, <span class="hljs-type">IOException</span> &#123;<br>        <span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;曾到此一游 Response1&quot;</span>);<br>        req.setAttribute(<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-string">&quot;value1&quot;</span>);<br>        <span class="hljs-comment">//设置响应状态码，表示重定向(已搬迁)</span><br>        resp.setStatus(<span class="hljs-number">302</span>);<br>        <span class="hljs-comment">//设置响应头，说明新的地址在哪里</span><br>        resp.setHeader(<span class="hljs-string">&quot;Location&quot;</span>,<span class="hljs-string">&quot;/servlet2/form.html&quot;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>相对路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">response1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;曾到此一游 Response1&quot;</span>);<br>        req.setAttribute(<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-string">&quot;value1&quot;</span>);<br>        <span class="hljs-comment">//设置响应状态码，表示重定向(已搬迁)</span><br>        resp.setStatus(<span class="hljs-number">302</span>);<br>        <span class="hljs-comment">//设置响应头，说明新的地址在哪里</span><br>        resp.setHeader(<span class="hljs-string">&quot;Location&quot;</span>,<span class="hljs-string">&quot;form.html&quot;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>因为这里的重定向的地址是浏览器会向服务器发起的请求，所以绝对路径的  &#x2F;表示的是tomcat根目录下的内容</p><p>重定向也可以访问外部地址，只要把location换成一个网站的网址就可以</p><h2 id="第二种请求重定向的方法"><a href="#第二种请求重定向的方法" class="headerlink" title="第二种请求重定向的方法"></a>第二种请求重定向的方法</h2><p>第二种方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">response1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>     resp.sendRedirect(<span class="hljs-string">&quot;/servlet2/response2&quot;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="书城项目的第二个阶段"><a href="#书城项目的第二个阶段" class="headerlink" title="书城项目的第二个阶段"></a>书城项目的第二个阶段</h2><p>用户的注册和登录</p><p><strong>javaEE项目的三层架构</strong></p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291923964.png" alt="image-20220924190340985"></p><p>分层的目的是为了解耦。解耦就是为了降低代码的耦合度。方便项目后期的维护和升级</p><p>下面的斜杠是或者的意思</p><p>web 层       com.atguigu.web&#x2F;servlet&#x2F;controller   </p><p>service 层            com.atguigu.service                    Service 接口包 </p><p>​                             com.atguigu.service.impl          Service 接口实现类 </p><p>dao 持久层 com.atguigu.dao                  Dao 接口包        </p><p>​                    com.atguigu.dao.impl          Dao 接口实现类 </p><p>实体 bean 对象          com.atguigu.pojo&#x2F;entity&#x2F;domain&#x2F;bean         JavaBean 类 </p><p>测试包                    com.atguigu.test&#x2F;junit</p><p>工具类                     com.atguigu.utils</p><h3 id="创建数据库和User用户表"><a href="#创建数据库和User用户表" class="headerlink" title="创建数据库和User用户表"></a>创建数据库和User用户表</h3><p>一般创建一个表都需要有一个id这样自增的主键</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">database</span> book;<br><br>use book;<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_user(<br>id <span class="hljs-type">int</span> <span class="hljs-keyword">PRIMARY KEY</span> auto_increment,<br>username <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">unique</span>,<br><span class="hljs-keyword">password</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>email <span class="hljs-type">varchar</span>(<span class="hljs-number">200</span>)<br>);<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t_user(username,<span class="hljs-keyword">password</span>,email) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;admin&#x27;</span>,<span class="hljs-string">&#x27;admin&#x27;</span>,<span class="hljs-string">&#x27;admin@guigu.com&#x27;</span>);<br><br><span class="hljs-keyword">select</span> *<span class="hljs-keyword">from</span> t_user;<br></code></pre></td></tr></table></figure><h3 id="编写数据库表对应的javaBean对象"><a href="#编写数据库表对应的javaBean对象" class="headerlink" title="编写数据库表对应的javaBean对象"></a>编写数据库表对应的javaBean对象</h3><p>所谓的javaBean对象就是一个和数据库中储存数据一样类型的java类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.pojo;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, username=&#x27;&quot;</span> + username + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, password=&#x27;&quot;</span> + password + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, email=&#x27;&quot;</span> + email + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(Integer id, String username, String password, String email)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.username = username;<br>        <span class="hljs-built_in">this</span>.password = password;<br>        <span class="hljs-built_in">this</span>.email = email;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(Integer id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUsername</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUsername</span><span class="hljs-params">(String username)</span> &#123;<br>        <span class="hljs-built_in">this</span>.username = username;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPassword</span><span class="hljs-params">(String password)</span> &#123;<br>        <span class="hljs-built_in">this</span>.password = password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getEmail</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> email;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setEmail</span><span class="hljs-params">(String email)</span> &#123;<br>        <span class="hljs-built_in">this</span>.email = email;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> String email;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="编写工具类JDBCUtils"><a href="#编写工具类JDBCUtils" class="headerlink" title="编写工具类JDBCUtils"></a>编写工具类JDBCUtils</h3><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291923740.png" alt="image-20220925164446929"></p><p>导入这两个包才能用@test</p><p>JdbcUtils类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.utils;<br><br><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSource;<br><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;<br><br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JdbcUtils</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> DruidDataSource dataSource;<br><span class="hljs-keyword">static</span> &#123;<br>    <span class="hljs-keyword">try</span>&#123;<br>      Properties properties=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>      <span class="hljs-comment">//奇怪的是这个地方不能用绝对路径</span><br>      InputStream inputStream=JdbcUtils.class.getClassLoader().getResourceAsStream(<span class="hljs-string">&quot;druid.properties&quot;</span>);<br>      properties.load(inputStream);<br>      dataSource= (DruidDataSource) DruidDataSourceFactory.createDataSource(properties);<br>      System.out.println(dataSource.getConnection());<br>    &#125;<br>    <span class="hljs-keyword">catch</span>(Exception e)&#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//获取数据库连接池中的连接，如果返回null就是获取失败，有值就是获取成功</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title function_">getConnection</span><span class="hljs-params">()</span>&#123;<br>    Connection conn=<span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        conn=dataSource.getConnection();<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    <span class="hljs-keyword">return</span> conn;<br>&#125;<br><br><span class="hljs-comment">//关闭连接</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">(Connection conn)</span>&#123;<br>    <span class="hljs-keyword">if</span>(conn!=<span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            conn.close();<br>        &#125;<br>        <span class="hljs-keyword">catch</span>(Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.test;<br><br><span class="hljs-keyword">import</span> com.atguigu.utils.JdbcUtils;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JdbcUtilsTest</span> &#123;<br>    <span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testJdbcUtils</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;<span class="hljs-number">100</span> ; i++) &#123;<br>            Connection conn=JdbcUtils.getConnection();<br>            System.out.println(conn);<br>            JdbcUtils.close(conn);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>因为数据库连接池配置文件中有最大连接数为规定数，所以只有每次都释放才能获取连接</p><h3 id="BaseDao"><a href="#BaseDao" class="headerlink" title="BaseDao"></a>BaseDao</h3><p>封装了增删改和查询方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.dao.impl;<br><br><span class="hljs-keyword">import</span> com.atguigu.utils.JdbcUtils;<br><span class="hljs-keyword">import</span> org.apache.commons.dbutils.QueryRunner;<br><span class="hljs-keyword">import</span> org.apache.commons.dbutils.handlers.BeanHandler;<br><span class="hljs-keyword">import</span> org.apache.commons.dbutils.handlers.BeanListHandler;<br><span class="hljs-keyword">import</span> org.apache.commons.dbutils.handlers.ScalarHandler;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseDao</span> &#123;<br>    <span class="hljs-comment">//使用DbUtils操作数据库</span><br><span class="hljs-keyword">private</span> QueryRunner queryRunner=<span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryRunner</span>();<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">update()方法用来执行：insert  update  delete语句</span><br><span class="hljs-comment">如果返回-1说明执行失败，  否则返回其他表示影响的行数</span><br><span class="hljs-comment"> */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">update</span><span class="hljs-params">(String sql,Object...args)</span>&#123;<br>        Connection conn= JdbcUtils.getConnection();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> queryRunner.update(conn, sql, args);<br>        &#125;<br>        <span class="hljs-keyword">catch</span>(Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    查询返回一个javaBean的sql语句   type为返回对象类型，args是sql对应的参数值，sql是执行的sql语句  &lt;T&gt;返回的类型和泛型</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">queryForOne</span><span class="hljs-params">(Class&lt;T&gt; type,String sql,Object...args)</span> &#123;<br>        Connection con=JdbcUtils.getConnection();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> queryRunner.query(con,sql,<span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanHandler</span>&lt;T&gt;(type),args);<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">finally</span>&#123;<br>            JdbcUtils.close(con);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    查询返回多个javaBean的sql语句</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-keyword">public</span> &lt;T&gt; List&lt;T&gt; <span class="hljs-title function_">queryForList</span><span class="hljs-params">(Class&lt;T&gt; type,String sql,Object...args)</span>&#123;<br>        Connection con=JdbcUtils.getConnection();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> queryRunner.query(con,sql,<span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanListHandler</span>&lt;T&gt;(type),args);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>        e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">finally</span>&#123;<br>            JdbcUtils.close(con);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    执行返回一个单元格的sql</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">queryForSingleValue</span><span class="hljs-params">(String sql,Object...args)</span>&#123;<br>        Connection conn=JdbcUtils.getConnection();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> queryRunner.query(conn, sql,<span class="hljs-keyword">new</span> <span class="hljs-title class_">ScalarHandler</span>(), args);<br>        &#125;<br>        <span class="hljs-keyword">catch</span>(Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">finally</span>&#123;<br>            JdbcUtils.close(conn);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="编写UserDao和测试"><a href="#编写UserDao和测试" class="headerlink" title="编写UserDao和测试"></a>编写UserDao和测试</h3><p><strong>其实这个Dao可以设计为一个泛型接口，用哪个类时再传递泛型参数，这样就是设计了一个不同数据库类的通用Dao</strong></p><p>根据你所需要的方法来设计</p><p>UserDao</p><p>可以在空白处按ctrl和shift和t得到这个接口的测试</p><p>将Destination package换成你想要的位置，勾选好下面三个方法</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291923303.png" alt="image-20220926110847299"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.dao;<br><br><span class="hljs-keyword">import</span> com.atguigu.pojo.User;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserDao</span> &#123;<br><br><br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    根据用户名查询用户信息</span><br><span class="hljs-comment">    username 用户名</span><br><span class="hljs-comment">    如果返回null则说明没有这个用户，返之亦然</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">queryByUsername</span><span class="hljs-params">(String username)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 保存用户信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> user</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回-1表示操作失败，其他是sql语句影响的行数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">saveUser</span><span class="hljs-params">(User user)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据用户名和密码查询用户信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> username</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> password</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 如果返回null则说明用户名或密码错误，返之亦然</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">queryUserByUsernameAndPassword</span><span class="hljs-params">(String username,String password)</span>;<br><br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>UserDaoImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.dao.impl;<br><br><span class="hljs-keyword">import</span> com.atguigu.dao.UserDao;<br><span class="hljs-keyword">import</span> com.atguigu.pojo.User;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseDao</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">queryByUsername</span><span class="hljs-params">(String username)</span> &#123;<br>        String sql=<span class="hljs-string">&quot;select id,username,password,email from t_user where username=?&quot;</span>;<br>        <span class="hljs-keyword">return</span> queryForOne(User.class,sql,username);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">saveUser</span><span class="hljs-params">(User user)</span> &#123;<br>        String sql=<span class="hljs-string">&quot;insert into t_user(username,password,email) values(?,?,?)&quot;</span>;<br>        <span class="hljs-keyword">return</span> update(sql,user.getUsername(),user.getPassword(),user.getEmail());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">queryUserByUsernameAndPassword</span><span class="hljs-params">(String username, String password)</span> &#123;<br>        String sql=<span class="hljs-string">&quot;select id,username,password,email from t_user where username=? and password=?&quot;</span>;<br>        <span class="hljs-keyword">return</span> queryForOne(User.class,sql,username,password);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>UserDaoTest</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.test;<br><br><span class="hljs-keyword">import</span> com.atguigu.dao.UserDao;<br><span class="hljs-keyword">import</span> com.atguigu.dao.impl.UserDaoImpl;<br><span class="hljs-keyword">import</span> com.atguigu.pojo.User;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.junit.Assert.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoTest</span> &#123;<br>    UserDao userDao=<span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDaoImpl</span>();<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">queryByUsername</span><span class="hljs-params">()</span> &#123;<br><br>         <span class="hljs-keyword">if</span>(userDao.queryByUsername(<span class="hljs-string">&quot;admin123&quot;</span>)==<span class="hljs-literal">null</span>)<br>         &#123;<br>             System.out.println(<span class="hljs-string">&quot;用户名可用&quot;</span>);<br>         &#125;<br>         <span class="hljs-keyword">else</span><br><br>         &#123;<br>             System.out.println(<span class="hljs-string">&quot;用户名已存在&quot;</span>);<br>         &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveUser</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span>(userDao.queryUserByUsernameAndPassword(<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;admin&quot;</span>)==<span class="hljs-literal">null</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;用户名或密码错误登陆错误&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            System.out.println(<span class="hljs-string">&quot;登陆成功&quot;</span>);<br>        &#125;<br><br><br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">queryUserByUsernameAndPassword</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(userDao.saveUser(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-literal">null</span>,<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>,<span class="hljs-string">&quot;wzg168@qq.com&quot;</span>)));<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="编写UserService和测试"><a href="#编写UserService和测试" class="headerlink" title="编写UserService和测试"></a>编写UserService和测试</h3><p>可以在空白处按ctrl和shift和t得到这个接口的测试</p><p>将Destination package换成你想要的位置，勾选好下面三个方法</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291923303.png" alt="image-20220926110847299"></p><p>实现业务</p><p>UserService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.service;<br><br><span class="hljs-keyword">import</span> com.atguigu.pojo.User;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 注册用户</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> user</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerUser</span><span class="hljs-params">(User user)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 登录</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> user</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 如果返回null，说明登录失败，返回有值，是登录成功</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">login</span><span class="hljs-params">(User user)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 检查用户名是否可用</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> username</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回true表示用户名已存在，返回false表示用户名可用</span><br><span class="hljs-comment">     */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">existsUsername</span><span class="hljs-params">(String username)</span>;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>UserServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.service.impl;<br><br><span class="hljs-keyword">import</span> com.atguigu.dao.UserDao;<br><span class="hljs-keyword">import</span> com.atguigu.dao.impl.UserDaoImpl;<br><span class="hljs-keyword">import</span> com.atguigu.pojo.User;<br><span class="hljs-keyword">import</span> com.atguigu.service.UserService;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-keyword">private</span> UserDao userDao=<span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDaoImpl</span>();<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerUser</span><span class="hljs-params">(User user)</span> &#123;<br>        userDao.saveUser(user);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">login</span><span class="hljs-params">(User user)</span> &#123;<br>        <span class="hljs-keyword">return</span> userDao.queryUserByUsernameAndPassword(user.getUsername(),user.getPassword());<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">existsUsername</span><span class="hljs-params">(String username)</span> &#123;<br>        <span class="hljs-keyword">if</span>(userDao.queryByUsername(username)==<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-comment">//等于null说明没查到，没查到表示可用</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>UserServiceTest</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.test;<br><br><span class="hljs-keyword">import</span> com.atguigu.pojo.User;<br><span class="hljs-keyword">import</span> com.atguigu.service.UserService;<br><span class="hljs-keyword">import</span> com.atguigu.service.impl.UserServiceImpl;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.junit.Assert.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceTest</span> &#123;<br><br>    UserService userService=<span class="hljs-keyword">new</span> <span class="hljs-title class_">UserServiceImpl</span>();<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerUser</span><span class="hljs-params">()</span> &#123;<br>        userService.registerUser(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-literal">null</span>,<span class="hljs-string">&quot;bbj168&quot;</span>,<span class="hljs-string">&quot;666666&quot;</span>,<span class="hljs-string">&quot;6668@qq.com&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">login</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(userService.login(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-literal">null</span>,<span class="hljs-string">&quot;bbj168&quot;</span>,<span class="hljs-string">&quot;666666&quot;</span>,<span class="hljs-literal">null</span>)));<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">existsUsername</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span>(userService.existsUsername(<span class="hljs-string">&quot;bbj168&quot;</span>))&#123;<br>            System.out.println(<span class="hljs-string">&quot;用户名已存在&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            System.out.println(<span class="hljs-string">&quot;用户名可用&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="实现用户注册的功能"><a href="#实现用户注册的功能" class="headerlink" title="实现用户注册的功能"></a>实现用户注册的功能</h3><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291923226.png" alt="image-20220926113340709"></p><p>javaweb阶段用base设定相对路径跳转</p><p>框架阶段用绝对路径</p><p>在title下面加上base标签<strong>，然后改变文件中所有的路径，因为现在的相对路径是以base这个路径为开头的</strong></p><p>改变的文件既有register.html也有register_success.html   </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;base <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;http://localhost:8087/book2/&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p>xml文件中配置servlet</p><p>把html文件中的表单，action设置为servlet的路径，method改为post</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;form <span class="hljs-attribute">action</span>=<span class="hljs-string">&quot;registServlet&quot;</span> <span class="hljs-attribute">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p><strong>编写RegistServlet程序</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.web;<br><br><br><span class="hljs-keyword">import</span> com.atguigu.pojo.User;<br><span class="hljs-keyword">import</span> com.atguigu.service.UserService;<br><span class="hljs-keyword">import</span> com.atguigu.service.impl.UserServiceImpl;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RegisterServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-comment">//web层和service层交互</span><br>    UserService userService=<span class="hljs-keyword">new</span> <span class="hljs-title class_">UserServiceImpl</span>();<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//1.获取请求的参数</span><br>        String username=req.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>        String password=req.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br>        String email=req.getParameter(<span class="hljs-string">&quot;email&quot;</span>);<br>        String code=req.getParameter(<span class="hljs-string">&quot;code&quot;</span>);<br>        <span class="hljs-comment">//2.检查 验证码是否正确,先把验证码写死，要求为abcde</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;abcde&quot;</span>.equalsIgnoreCase(code))&#123;<br>            <span class="hljs-comment">//验证码正确</span><br>            <span class="hljs-comment">//检查用户名是否可用</span><br>            <span class="hljs-keyword">if</span>(userService.existsUsername(username))&#123;<br>                System.out.println(<span class="hljs-string">&quot;用户名&quot;</span>+username+<span class="hljs-string">&quot;已存在&quot;</span>);<br>                <span class="hljs-comment">//跳回到注册页面</span><br>                req.getRequestDispatcher(<span class="hljs-string">&quot;/pages/user/regist.html&quot;</span>).forward(req,resp);<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-comment">//可用</span><br>                <span class="hljs-comment">//调用Sercice保存到数据库</span><br>                userService.registerUser(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-literal">null</span>,username,password,email));<br>                <span class="hljs-comment">//注册成功后，跳转到注册成功页面</span><br>                req.getRequestDispatcher(<span class="hljs-string">&quot;/pages/user/regist_success.html&quot;</span>).forward(req,resp);<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;验证码&quot;</span>+code+<span class="hljs-string">&quot;错误&quot;</span>);<br>            <span class="hljs-comment">//验证码不正确</span><br>            <span class="hljs-comment">//跳回注册页面，因为还是申请服务器中文件所以/还是工程目录下的</span><br>            req.getRequestDispatcher(<span class="hljs-string">&quot;/pages/user/regist.html&quot;</span>).forward(req,resp);<br><br>        &#125;<br><br><br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="IDEA中的Debug调试"><a href="#IDEA中的Debug调试" class="headerlink" title="IDEA中的Debug调试"></a>IDEA中的Debug调试</h3><p>看pdf文件即可</p><h3 id="用户登录功能的实现"><a href="#用户登录功能的实现" class="headerlink" title="用户登录功能的实现"></a>用户登录功能的实现</h3><p>操作步骤和用户注册功能差不多</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">package com.atguigu.web;<br><br><br>import com.atguigu.pojo.User;<br>import com.atguigu.service.UserService;<br>import com.atguigu.service.impl.UserServiceImpl;<br><br>import javax.servlet.ServletException;<br>import javax.servlet.http.HttpServlet;<br>import javax.servlet.http.HttpServletRequest;<br>import javax.servlet.http.HttpServletResponse;<br>import java.io.IOException;<br><br>public <span class="hljs-keyword">class</span> RegisterServlet extends HttpServlet &#123;<br>    <span class="hljs-comment">//web层和service层交互</span><br>    UserService userService=<span class="hljs-keyword">new</span> <span class="hljs-constructor">UserServiceImpl()</span>;<br>    @Override<br>    protected void <span class="hljs-keyword">do</span><span class="hljs-constructor">Post(HttpServletRequest <span class="hljs-params">req</span>, HttpServletResponse <span class="hljs-params">resp</span>)</span> throws ServletException, IOException &#123;<br>        <span class="hljs-comment">//1.获取请求的参数</span><br>        <span class="hljs-comment">//这个getParameter方法是通过那个属性的name得到的</span><br>        String username=req.get<span class="hljs-constructor">Parameter(<span class="hljs-string">&quot;username&quot;</span>)</span>;<br>        String password=req.get<span class="hljs-constructor">Parameter(<span class="hljs-string">&quot;password&quot;</span>)</span>;<br>        String email=req.get<span class="hljs-constructor">Parameter(<span class="hljs-string">&quot;email&quot;</span>)</span>;<br>        String code=req.get<span class="hljs-constructor">Parameter(<span class="hljs-string">&quot;code&quot;</span>)</span>;<br>        <span class="hljs-comment">//2.检查 验证码是否正确,先把验证码写死，要求为abcde</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;abcde&quot;</span>.equals<span class="hljs-constructor">IgnoreCase(<span class="hljs-params">code</span>)</span>)&#123;<br>            <span class="hljs-comment">//验证码正确</span><br>            <span class="hljs-comment">//检查用户名是否可用</span><br>            <span class="hljs-keyword">if</span>(userService.exists<span class="hljs-constructor">Username(<span class="hljs-params">username</span>)</span>)&#123;<br>                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;用户名&quot;</span>+username+<span class="hljs-string">&quot;已存在&quot;</span>);<br>                <span class="hljs-comment">//跳回到注册页面</span><br>                req.get<span class="hljs-constructor">RequestDispatcher(<span class="hljs-string">&quot;/pages/user/regist.html&quot;</span>)</span>.forward(req,resp);<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-comment">//可用</span><br>                <span class="hljs-comment">//调用Sercice保存到数据库</span><br>                userService.register<span class="hljs-constructor">User(<span class="hljs-params">new</span> User(<span class="hljs-params">null</span>,<span class="hljs-params">username</span>,<span class="hljs-params">password</span>,<span class="hljs-params">email</span>)</span>);<br>                <span class="hljs-comment">//注册成功后，跳转到注册成功页面</span><br>                req.get<span class="hljs-constructor">RequestDispatcher(<span class="hljs-string">&quot;/pages/user/regist_success.html&quot;</span>)</span>.forward(req,resp);<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;验证码&quot;</span>+code+<span class="hljs-string">&quot;错误&quot;</span>);<br>            <span class="hljs-comment">//验证码不正确</span><br>            <span class="hljs-comment">//跳回注册页面，因为还是申请服务器中文件所以/还是工程目录下的</span><br>            req.get<span class="hljs-constructor">RequestDispatcher(<span class="hljs-string">&quot;/pages/user/regist.html&quot;</span>)</span>.forward(req,resp);<br><br>        &#125;<br><br><br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java</title>
      <link href="/2022/09/29/java/"/>
      <url>/2022/09/29/java/</url>
      
        <content type="html"><![CDATA[<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>在Java中，<a href="https://so.csdn.net/so/search?q=%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F&spm=1001.2101.3001.7020">静态变量</a>和实例变量可以统称为成员变量。首先，明白什么是静态变量，什么是实例变量，他们定义的形式。静态变量也叫做类变量，独立于方法之外的变量，有static修饰。实例变量同样独立也是独立于方法之外 的变量，但没有static修饰。</p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>&lt;&lt;：是逻辑左移，右边补0，符号位和其他位一样要移动。</p><p>数学意义：在数字没有溢出的前提下，对于正数和负数，左移一位都相当于乘以2的1次方，左移n位就相当于乘以2的n次方。</p><p>计算：3 &lt;&lt; 2</p><p>3 &lt;&lt; 2，则是将数字3左移2位</p><p>1、首先把3转换为二进制数字0000 0000 0000 0000 0000 0000 0000 0011</p><p>2、然后把该数字高位（左侧）的两个零移出，其他的数字都朝左平移2位，最后在低位（右侧）的两个空位补零。</p><p>3、则得到的最终结果是0000 0000 0000 0000 0000 0000 0000 1100，则转换为十进制是12。<img src="https://iknow-pic.cdn.bcebos.com/9a504fc2d5628535e649906f9def76c6a6ef63d6?x-bce-process=image/resize,m_lfit,w_600,h_800,limit_1/quality,q_85/format,f_auto" alt="img"></p><blockquote><blockquote><p>（右移运算符）</p></blockquote></blockquote><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918048.jpeg" alt="img"></p><p>位运算符</p><blockquote><p>凡位运算符都是把值先转换成二进制再进行后续的处理，5的二进制位是0000 0101，右移两位就是把101左移后为0000 0001，正数左边第一位补0，负数补1，等于除于2的n次方，结果为1   ，<strong>只保留了结果的整数部分</strong></p></blockquote><p>&amp;（按位与）</p><blockquote><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918057.jpeg" alt="img"></p></blockquote><p>位运算符</p><blockquote><p>&amp;按位与的运算规则是将两边的数转换为二进制位，然后运算最终值，运算规则即(两个为真才为真)1&amp;1&#x3D;1 , 1&amp;0&#x3D;0 , 0&amp;1&#x3D;0 , 0&amp;0&#x3D;0</p><p>3的二进制位是0000 0011 ， 5的二进制位是0000 0101 ， 那么就是011 &amp; 101，由按位与运算规则得知，001 &amp; 101等于0000 0001，最终值为1</p><p>7的二进制位是0000 0111，那就是111 &amp; 101等于101，也就是0000 0101，故值为5</p></blockquote><p>|（按位或）</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918996.jpeg" alt="img"></p><p>位运算符</p><blockquote><p>|按位或和&amp;按位与计算方式都是转换二进制再计算，不同的是运算规则(一个为真即为真)1|0 &#x3D; 1 , 1|1 &#x3D; 1 , 0|0 &#x3D; 0 , 0|1 &#x3D; 1</p><p>6的二进制位0000 0110 , 2的二进制位0000 0010 , 110|010为110，最终值0000 0110，故6|2等于6</p></blockquote><p>^（异或运算符）</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918730.jpeg" alt="img"></p><p>位运算符</p><blockquote><p>^异或运算符顾名思义，异就是不同，其运算规则为1^0 &#x3D; 1 , 1^1 &#x3D; 0 , 0^1 &#x3D; 1 , 0^0 &#x3D; 0</p><p>5的二进制位是0000 0101 ， 9的二进制位是0000 1001，也就是0101 ^ 1001,结果为1100 , 00001100的十进制位是12</p></blockquote><p>~（取反运算符）</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918232.jpeg" alt="img"></p><p>位运算符</p><blockquote><p>取反就是1为0,0为1,5的二进制位是0000 0101，取反后为1111 1010，值为-6</p></blockquote><blockquote><blockquote><blockquote><p>（无符号右移运算符）</p></blockquote></blockquote></blockquote><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918203.jpeg" alt="img"></p><p>正数无符号右移</p><p>无符号右移运算符和右移运算符的主要区别在于负数的计算，因为无符号右移是高位补0，移多少位补多少个0。</p><p>15的二进制位是0000 1111 ， 右移2位0000 0011，结果为3</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918319.jpeg" alt="img"></p><p>负数无符号右移</p><p>-6的二进制是6的二进制取反再加1,6的二进制也就是0000 0000 0000 0000 0000 0000 0000 0110，取反后加1为1111 1111 1111 1111 1111 1111 1111 1010，右移三位0001 1111 1111 1111 1111 1111 1111 1111</p><p>二进制正值转负值</p><p>a.最高位改成1<br>    b.除了最高位，其他位<a href="https://so.csdn.net/so/search?q=%E5%8F%96%E5%8F%8D&spm=1001.2101.3001.7020">取反</a><br>    c.结果+1<br>    d.得到的结果就是对应的负值</p><h3 id="java-lang包"><a href="#java-lang包" class="headerlink" title="java.lang包"></a>java.lang包</h3><p>java.lang包是java语言的核心，它提供了java中的基础类。包括基本Object类、Class类、String类、基本类型的包装类、基本的数学类等等最基本的类。我们介绍一下Java 8中的java.lang包。主要类如下图：</p><p>类 由   域(变量) 方法  组成</p><p>常量叫做直接量</p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>基本数据类型:整形:短整型，整形，长整型，字节型<br>空数组<br>引用数据类型:类，接口，数组</p><p>字符’       ‘<br>字符串”  “</p><p>一个字节八比特，一个byte八位</p><p>byte 1字节     short2字节    int  4字节    long 8字节 float  4字节 double  8字节 char 2字节  boolean  1位</p><h2 id="类方法与实例方法的区别"><a href="#类方法与实例方法的区别" class="headerlink" title="类方法与实例方法的区别"></a>类方法与实例方法的区别</h2><h3 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h3><p>类方法：static修饰的方法<br>实例方法：由类创建实例调用</p><p>对象变量:指类中不加static的成员变量</p><h3 id="区别："><a href="#区别：" class="headerlink" title="区别："></a>区别：</h3><ol><li>类方法中不能引用对象变量；实例方法可以引用对象变量，也可以引用类变量。<img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918419.png" alt="在这里插入图片描述"></li><li>类方法不能直接调用实例方法；实例方法可以直接调用类方法<img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918448.png" alt="在这里插入图片描述"></li><li>类方法中不能使用super、this关键字；实例方法可以使用。<img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918539.png" alt="在这里插入图片描述"></li><li>类方法不能被覆盖。</li></ol><p>5.实例方法不能通过类名调用，当类的字节码文件被加载到内存时，类的实例方法不会被分配入口地址，当该类创建对象后，类中的实例方法才分配入口地址，从而实例方法可以被类创建的任何对象调用执行。</p><p>6.类方法可以通过类名调用，类方法在该类被加载到内存时，就分配了相应的入口地址。从而类方法不仅可以被类创建的任何对象调用执行，也可以直接通过类名调用。类方法的入口地址直到程序退出时才被取消。</p><p>类名.方法名()</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918672.png" alt="image-20220502173211818"></p><p>子类中出现和父类相同的方法，就是覆盖，子类的对象就无法访问父类的那个被覆盖的方法，覆盖方法和被覆盖的方法要么都是类方法，要么都是实例方法，不能一个是类方法，一个是实例方法</p><p>private方法不支持重写</p><p>如果父类方法是private，即使子类中定义一个与父类private方法相同的方法名，相同的参数列表依然不是重写，只是在子类里重新定义了一个新的方法</p><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p>标识符命名规则：<br>1，只能由字母数字，_或$<br>2.必须以字母，_或$开头<br>3.大小写敏感，无长度限制<br>4，不能是java的关键字和保留字</p><p>标识符规则<br>标识符常量用大写字母，变量用小写字母开始，类以大写字母开始<br>标识符不能与关键字同名<br>标识符最好见名知义</p><h2 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h2><p>在子类方法中调用父类中被覆盖的方法，则可以使用super（被覆盖的是实例方法），或者父类类名来调用父类中被覆盖的函数（被覆盖的是类方法）</p><h2 id="继承和多态"><a href="#继承和多态" class="headerlink" title="继承和多态"></a>继承和多态</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Hello;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span> &#123;<br><span class="hljs-keyword">public</span> String s;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> a;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Hello</span><span class="hljs-params">()</span> &#123;<br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Hello</span><span class="hljs-params">(String s,<span class="hljs-type">int</span> a)</span> &#123;<br><span class="hljs-built_in">this</span>.s=s;<br><span class="hljs-built_in">this</span>.a=a;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;123&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print2</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;1234&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>Hello a=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hello</span>();<br>Hello b=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hello</span>(<span class="hljs-string">&quot;as&quot;</span>,<span class="hljs-number">1</span>);<br>System.out.print(b.s);<br>System.out.print(a.s);<br>Hello c=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hello</span>();<br>Hello d=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hell</span>();<br>c.print();<br>d.print();<br>d.print2();<br>((Hell)d).print3();<br><br>&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Hell</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Hello</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>System.out.print(<span class="hljs-string">&quot;234&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print3</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;12345&quot;</span>);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>静态初始化块，和初始化块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Hello;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span> &#123;<br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> a;<br><span class="hljs-type">int</span> b;<br><span class="hljs-keyword">static</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;静态初始化块&quot;</span>);<br>a=<span class="hljs-number">6</span>;<br><span class="hljs-comment">// b=2;这个地方会报错</span><br>&#125;<br>&#123;<br><span class="hljs-type">int</span> b=<span class="hljs-number">6</span>;<br><span class="hljs-keyword">if</span> (b&gt;<span class="hljs-number">4</span>)<br>&#123;<br>System.out.println(<span class="hljs-string">&quot;lss&quot;</span>);<br>&#125;<br>System.out.println(a);<br>&#125;<br><br><br>&#123;<br>System.out.println(<span class="hljs-string">&quot;第二个构造器&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Hello</span><span class="hljs-params">()</span> &#123;<br><br>System.out.println(<span class="hljs-string">&quot;构造器&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>Hello a=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hello</span>();<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>数字转字符串</p><p>String b&#x3D;5+””;</p><p>equals和&#x3D;&#x3D;的使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Hello;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name)</span> &#123;<br><span class="hljs-built_in">this</span>.name=name;<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>Person p=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span> (<span class="hljs-string">&quot;123&quot;</span>);<br>System.out.println(p.toString());<br>System.out.println(p); <br>System.out.println(p+<span class="hljs-string">&quot;123&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">it</span> <span class="hljs-operator">=</span><span class="hljs-number">65</span>;<br><span class="hljs-type">float</span> fl=<span class="hljs-number">65.0f</span>;<br><span class="hljs-type">char</span> ch=<span class="hljs-string">&#x27;A&#x27;</span>;<br><span class="hljs-keyword">if</span>(it==fl) &#123;<br>System.out.print(<span class="hljs-string">&quot;相等&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(ch==it) &#123;<br>System.out.println(<span class="hljs-string">&quot;相等&quot;</span>);<br>&#125;<br>Hello a=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hello</span>();<br>Hello b=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hello</span>();<br><span class="hljs-keyword">if</span>(a==b) &#123;<br>System.out.println(<span class="hljs-string">&quot;相等&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;不相等&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(a.equals(b)) &#123;<br>System.out.println(<span class="hljs-string">&quot;相等&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;不相等&quot;</span>);<br>&#125;<br>String H=<span class="hljs-string">&quot;123&quot;</span>;<br>String G=<span class="hljs-string">&quot;345&quot;</span>;<br>String I=<span class="hljs-string">&quot;123345&quot;</span>;<br>String T=H+G;<br>String R=<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;123&quot;</span>);<br><span class="hljs-keyword">if</span>(H==R) &#123;<br>System.out.println(<span class="hljs-string">&quot;相等1&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(T==I) &#123;<br>System.out.println(<span class="hljs-string">&quot;相等2&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(H.equals(R)) &#123;<br>System.out.println(<span class="hljs-string">&quot;相等1&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(T.equals(I)) &#123;<br>System.out.println(<span class="hljs-string">&quot;相等2&quot;</span>);<br>&#125;<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">O</span>:<span class="hljs-number">12</span>:<span class="hljs-string">&quot;Road_is_Long&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;string&quot;</span>;O:<span class="hljs-number">13</span>:<span class="hljs-string">&quot;Make_a_Change&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;effort&quot;</span>;O:<span class="hljs-number">13</span>:<span class="hljs-string">&quot;Try_Work_Hard&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;var&quot;</span>;s:<span class="hljs-number">52</span>:<span class="hljs-string">&quot;php://filter/convert.base64-encode/resource=flag.php&quot;</span>;&#125;&#125;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;page&quot;</span>;O:<span class="hljs-number">12</span>:<span class="hljs-string">&quot;Road_is_Long&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;string&quot;</span>;N;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;page&quot;</span>;N;&#125;&#125;<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">O</span>:<span class="hljs-number">12</span>:<span class="hljs-string">&quot;Road_is_Long&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;string&quot;</span>;N;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;page&quot;</span>;O:<span class="hljs-number">12</span>:<span class="hljs-string">&quot;Road_is_Long&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;string&quot;</span>;O:<span class="hljs-number">13</span>:<span class="hljs-string">&quot;Make_a_Change&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;effort&quot;</span>;O:<span class="hljs-number">13</span>:<span class="hljs-string">&quot;Try_Work_Hard&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;var&quot;</span>;s:<span class="hljs-number">52</span>:<span class="hljs-string">&quot;php://filter/convert.base64-encode/resource=flag.php&quot;</span>;&#125;&#125;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;page&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;aaa&quot;</span>;&#125;&#125;<br></code></pre></td></tr></table></figure><h2 id="final的使用"><a href="#final的使用" class="headerlink" title="final的使用"></a>final的使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Hello;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> a=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> c=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> d;<br><span class="hljs-keyword">static</span>&#123;<br>a=<span class="hljs-number">2</span>;<br><span class="hljs-comment">//b=2;</span><br>d=<span class="hljs-number">1</span>;<br><br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name)</span> &#123;<br><span class="hljs-built_in">this</span>.name=name;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">final</span> <span class="hljs-type">int</span> h=<span class="hljs-number">1</span>;<br><span class="hljs-comment">//public int y=1;</span><br><span class="hljs-type">int</span> x=<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print1</span><span class="hljs-params">(<span class="hljs-keyword">final</span> <span class="hljs-type">int</span> i)</span> &#123;<br> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> a=<span class="hljs-number">1</span>;<br> <span class="hljs-comment">//i=1;</span><br>&#125;<br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br><br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(String name)</span> &#123;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>Person b=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;1&quot;</span>);<br>System.out.println(b.a);<br>System.out.println(Person.a);<br><span class="hljs-keyword">final</span> <span class="hljs-type">int</span>[] iArr= &#123;<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">12</span>,<span class="hljs-number">9</span>&#125;;<br>iArr[<span class="hljs-number">2</span>]=<span class="hljs-number">10</span>;<br><span class="hljs-comment">//iArr=null;</span><br>        <span class="hljs-keyword">final</span> Person p=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;1&quot;</span>);<br>        p.a=<span class="hljs-number">123</span>;<br>        String str2=<span class="hljs-string">&quot;java&quot;</span>;<br>        String str3=<span class="hljs-string">&quot;com&quot;</span>;<br>        <span class="hljs-keyword">final</span> String str=<span class="hljs-string">&quot;java&quot;</span>;<br>        <span class="hljs-keyword">final</span> String str1=<span class="hljs-string">&quot;com&quot;</span>;<br>        String s1=<span class="hljs-string">&quot;javacom&quot;</span>;<br>        System.out.println(str+str1==s1);<br>        System.out.println(str2+str3==s1);<br>        <br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="有关强制类型转换"><a href="#有关强制类型转换" class="headerlink" title="有关强制类型转换"></a>有关强制类型转换</h2><p><strong>基本类型之间的转换只能在数值类型之间间进行，这里所说的数值类型包括整数型，字符型和浮点型，但数值类型和字符串类型和布尔类型是不能进行类型转换的</strong></p><p>总结：父类引用可以指向子类对象，子类引用不能指向父类对象。把子类对象直接赋给父类引用叫做向上转型，向上转型不用强制转型，如Father f1&#x3D;new Son()，把指向子类对象的父类引用赋给子类引用叫做向下转型，要强制转型，如Son s1 &#x3D; (Son)f1。向上转型会丢失子类特有的方法，但是子类overriding父类的方法，子类方法有效。 </p><p>   <strong>将一种类型的数据赋给另外一种类型变量时，满足下列两种要求将执行自动类型转换：1.两种类型是兼容的；2.目的类型的范围比来源类型大。</strong>  </p><p>   <strong>数据值类型按照范围从小到大为：byte，short，char，int，long，float，double</strong></p><p>   例如int类型比所有byte合法类型大，因此不要求显式强制类型转换。对于数字类型，整型和浮点型都是彼此兼容的，但是数字类型和字符类型和布尔类型是不兼容的，字符类型和布尔类型也不是互相兼容的。</p><p>   自动类型转换不能满足所有的转换需求，比如int型变量赋值给byte型变量，这种转换不会自动进行，因为byte型比int型范围小。为了完成两种不兼容类型转换，需要用到强制类型转换。</p><p>   目标类型指定了要转换成为的类型。例如果将int型转为byte型，int型取值范围大于byte型，它的值将堆byte型范围进行取模。而把浮点型赋值给整数型，就会出现截断，截取掉小数部分。从其他数值类型转换为char类型时，必须进行强制转换<strong>。将char类型转换为其他数值类型时，除了byte、short必须强制转换之外，int、long、float、double都不用强制转换。</strong></p><p><strong><a href="https://so.csdn.net/so/search?q=%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2&spm=1001.2101.3001.7020">类型转换</a>都是小范围向大范围转换的，大范围往小范围转化需要用到强制转换，转换后的值会有所损失。</strong></p><h2 id="String-与其他数据类型的转换"><a href="#String-与其他数据类型的转换" class="headerlink" title="String 与其他数据类型的转换"></a>String 与其他数据类型的转换</h2><p><strong>String  to  int</strong>     </p><p>int i&#x3D;Integer.parseInt(str);</p><p><strong>int to String</strong></p><p>String s&#x3D;String.valueOf(i);</p><p><strong>String to Array</strong></p><p>char []a&#x3D;str.toCharArray();</p><p>char []a&#x3D;str.getChars(0,str.length,anArray,0);</p><p><strong>Array toString</strong></p><p>String str&#x3D;new String(anArray);</p><p><strong>char to String</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">   <span class="hljs-built_in">char</span> b=<span class="hljs-character">&#x27;2&#x27;</span>;<br>String a=<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">String</span>.</span></span>value<span class="hljs-constructor">Of(<span class="hljs-params">b</span>)</span>;<br>   <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(a);<br></code></pre></td></tr></table></figure><p><strong>String to char</strong></p><p>charAt()和toCharArray()</p><h1 id="java的Big数字类"><a href="#java的Big数字类" class="headerlink" title="java的Big数字类"></a>java的Big数字类</h1><h2 id="java的BigDecimal类"><a href="#java的BigDecimal类" class="headerlink" title="java的BigDecimal类"></a>java的BigDecimal类</h2><p>方法声明<br>public BigDecimal add (BigDecinal value) 加法运算</p><p>public BigDecimal subtract (BigDecimal value)减法运算</p><p>public BigDecimal multiply(BigDecimal value)乘法运算</p><p>public BigDecimal divide (BigDecimal value)除法运算</p><p>精确的计算小数之间的加减乘除</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> void main(<span class="hljs-keyword">String</span> []args)&#123;<br>        Scanner <span class="hljs-keyword">in</span>=<span class="hljs-keyword">new</span> <span class="hljs-type">Scanner</span>(System.<span class="hljs-keyword">in</span>);<br>        <span class="hljs-keyword">while</span>(<span class="hljs-keyword">in</span>.hasNext())&#123;<br>            <span class="hljs-keyword">String</span> a=<span class="hljs-keyword">in</span>.next();<br>            <span class="hljs-keyword">String</span> b=<span class="hljs-keyword">in</span>.next();<br>            BigDecimal a1=<span class="hljs-keyword">new</span> <span class="hljs-type">BigDecimal</span>(a);<br>            BigDecimal a2=<span class="hljs-keyword">new</span> <span class="hljs-type">BigDecimal</span>(b);<br>            System.out.println(a2.add(a1));<span class="hljs-comment">//求两个相加</span><br>            System.out.println(a2.multiply(a1));<span class="hljs-comment">//求两个的乘积</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h2 id="java的BigInteger类"><a href="#java的BigInteger类" class="headerlink" title="java的BigInteger类"></a>java的BigInteger类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.math.BigInteger;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span>&#123;<br>        BigInteger a=<span class="hljs-keyword">new</span> <span class="hljs-title class_">BigInteger</span>(<span class="hljs-string">&quot;0&quot;</span>);<br>        Scanner in=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>      <span class="hljs-keyword">while</span>(in.hasNext()) &#123;<br>      <br><br>      String key=in.nextLine();<br>      <span class="hljs-keyword">if</span>(key.equalsIgnoreCase(<span class="hljs-string">&quot;e&quot;</span>))<br>      &#123;<br>      <span class="hljs-keyword">break</span>;<br>      &#125;<br>                  a=a.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BigInteger</span>(key));<span class="hljs-comment">//求相加</span><br><br>&#125;<br>      System.out.println(a);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>一.BigInteger简介</p><p>BigInteger类所在的包</p><p>java中可以使用BigInteger操作大整数，也可以转换进制。如果在操作的时候一个整型数据已经超过了整数的最大类型长度long的话，则此数据就无法装入，所以，此时要使用BigInteger类进行操作。这些大数都会以字符串的形式传入。</p><p>二.BigInteger类常用方法</p><p>1.BigInteger(String value)：构造方法，将value字符串变成BigInteger类型数据。</p><p>2.BigInteger add(BigInteger value)：加法，求两个BigInteger类型数据的和。</p><p>3.BigInteger subtract(BigInteger value)：减法，求两个BigInteger类型数据的差。</p><p>4.BigInteger multiply(BigInteger value)：乘法，求两个BigInteger类型数据的积。</p><p>5.BigInteger divide(BigInteger divisor)：除法，求两个BigInteger类型数据的商。</p><p>6.BigInteger modInverse(BigInteger m)：求模，求BigInteger类型数据对m求模。</p><p>7.BigInteger remainder(BigInteger divisor)：求余数，求BigInteger类型数据除以divisor的余数。</p><p>8.BigInteger max(BigInteger value)：最大数，求两个BigInteger类型数据的最大值。</p><p>9.BigInteger min(BigInteger value)：最小数，求两个BigInteger类型数据的最小值。</p><p>10.BigInteger gcd(BigInteger value)：最大公约数，求两个BigInteger类型数据的最大公约数。</p><p>11.BigInteger abs()：绝对值，求BigInteger类型数据的绝对值。</p><p>12.BigInteger negate()：相反数，求BigInteger类型数据的相反数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-type">BigInteger</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigInteger</span>(<span class="hljs-string">&quot;15&quot;</span>);<br><span class="hljs-type">BigInteger</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigInteger</span>(<span class="hljs-string">&quot;10&quot;</span>);<br><span class="hljs-type">BigInteger</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigInteger</span>(<span class="hljs-string">&quot;-10&quot;</span>);<br><span class="hljs-type">BigInteger</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigInteger</span>(<span class="hljs-string">&quot;2&quot;</span>);<br><br><br><span class="hljs-type">BigInteger</span> <span class="hljs-variable">add_result</span> <span class="hljs-operator">=</span> a.add(b);<br><span class="hljs-type">BigInteger</span> <span class="hljs-variable">subtract_result</span> <span class="hljs-operator">=</span> a.subtract(b);<br><span class="hljs-type">BigInteger</span> <span class="hljs-variable">multiply_result</span> <span class="hljs-operator">=</span> a.multiply(b);<br><span class="hljs-type">BigInteger</span> <span class="hljs-variable">divide_result</span> <span class="hljs-operator">=</span> a.divide(b);<br><span class="hljs-type">BigInteger</span> <span class="hljs-variable">modinverse_result</span> <span class="hljs-operator">=</span> a.modInverse(d);<br><span class="hljs-type">BigInteger</span> <span class="hljs-variable">remainder_result</span> <span class="hljs-operator">=</span> a.remainder(b);<br><span class="hljs-type">BigInteger</span> <span class="hljs-variable">max_result</span> <span class="hljs-operator">=</span> a.max(b);<br><span class="hljs-type">BigInteger</span> <span class="hljs-variable">min_result</span> <span class="hljs-operator">=</span> a.min(b);<br><span class="hljs-type">BigInteger</span> <span class="hljs-variable">gcd_result</span> <span class="hljs-operator">=</span> a.gcd(b);<br><span class="hljs-type">BigInteger</span> <span class="hljs-variable">abs_result</span> <span class="hljs-operator">=</span> c.abs();<br><span class="hljs-type">BigInteger</span> <span class="hljs-variable">negate_result</span> <span class="hljs-operator">=</span> a.negate();<br><br><br>Log.d(<span class="hljs-string">&quot;TAG&quot;</span>, <span class="hljs-string">&quot;15+10=&quot;</span> + add_result);<br>Log.d(<span class="hljs-string">&quot;TAG&quot;</span>, <span class="hljs-string">&quot;15-10=&quot;</span> + subtract_result);<br>Log.d(<span class="hljs-string">&quot;TAG&quot;</span>, <span class="hljs-string">&quot;15*10=&quot;</span> + multiply_result);<br>Log.d(<span class="hljs-string">&quot;TAG&quot;</span>, <span class="hljs-string">&quot;15/10=&quot;</span> + divide_result);<br>Log.d(<span class="hljs-string">&quot;TAG&quot;</span>, <span class="hljs-string">&quot;15对2求模=&quot;</span> + modinverse_result);<br>Log.d(<span class="hljs-string">&quot;TAG&quot;</span>, <span class="hljs-string">&quot;15/10余数=&quot;</span> + remainder_result);<br>Log.d(<span class="hljs-string">&quot;TAG&quot;</span>, <span class="hljs-string">&quot;15和10最大数=&quot;</span> + max_result);<br>Log.d(<span class="hljs-string">&quot;TAG&quot;</span>, <span class="hljs-string">&quot;15和10最小数=&quot;</span> + min_result);<br>Log.d(<span class="hljs-string">&quot;TAG&quot;</span>, <span class="hljs-string">&quot;15和10最大公约数=：&quot;</span> + gcd_result);<br>Log.d(<span class="hljs-string">&quot;TAG&quot;</span>, <span class="hljs-string">&quot;-10的绝对值=&quot;</span> + abs_result);<br>Log.d(<span class="hljs-string">&quot;TAG&quot;</span>, <span class="hljs-string">&quot;15的相反数=&quot;</span> + negate_result);<br></code></pre></td></tr></table></figure><h1 id="Java-String类"><a href="#Java-String类" class="headerlink" title="Java String类"></a>Java String类</h1><h3 id="总序"><a href="#总序" class="headerlink" title="总序"></a>总序</h3><p>java中的字符串分为两类，字符串常量和字符串变量</p><p>字符串常量：包括直接字符串常量和String类的对象；字符串常量的值一旦创建不会再改动</p><p>字符串变量：指的是StringBuffer类的对象，创建之后允许对其进行修改</p><p>字符串文本</p><ol><li></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">String str1=<span class="hljs-string">&quot;java&quot;</span>; 相当于    <br><br>   <span class="hljs-type">char</span> cstr[]= &#123;<span class="hljs-string">&#x27;J&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;v&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>&#125;;<br>      String str=<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(cstr);<br>      System.out.println(str);<br><br>把字符数组转变为字符串的一个方法<br></code></pre></td></tr></table></figure><p>2.String str1&#x3D;new String(“hello”);</p><p>3.使用数组方式</p><p>char str[]&#x3D;{‘h’,’e’,’l’,’l’,’0’};</p><p>String str[]&#x3D;{“hello”,”word”,”!”}</p><h3 id="String类的构造方法"><a href="#String类的构造方法" class="headerlink" title="String类的构造方法"></a>String类的构造方法</h3><p><img src="C:\Users%23赵梓皓&\AppData\Roaming\Typora\typora-user-images\image-20220613180744555.png" alt="image-20220613180744555"></p><p>例子</p><p>n在String类提供的构造方法中，可以由字符数组、字节数组以及字符串缓冲区来构成字符串，如下面的代码所示。</p><p> char cDeomo[]&#x3D; {‘2’,’3’,’4’,’5’};<br>    char cDeomo1[]&#x3D; {‘1’,’2’,’3’,’4’,’5’};<br>    String strDemo1&#x3D;new String(cDeomo);<br>    String strDemo2&#x3D;new String(cDeomo1,1,4);&#x2F;&#x2F;从cDeomo1的下标1元素到下标为4的元素<br>    System.out.println(strDemo1);<br>   System.out.println(strDemo2);</p><p>利用上面的两个构造方法生成的字符串实例的内容均为“2345”。</p><p>n下面例子说明如何利用字节数组生成字符串：</p><p>byte cDemo[]&#x3D; {66,67,68};<br>byte cDemo1[]&#x3D; {65,66,67,68};<br>String strDemo1&#x3D;new String(cDemo);<br>String strDemo2&#x3D;new String(cDemo1,1,3);&#x2F;&#x2F;从下标1到下标3      都包括刚开始第一个下标的那个字符<br>System.out.println(strDemo1);<br>System.out.println(strDemo2);&#x2F;&#x2F;会把数字转换为unicode编码的字符</p><p>利用上面的两个构造方法生成的字符串实例的内容均为”BCD”</p><h3 id="length方法"><a href="#length方法" class="headerlink" title="length方法"></a>length方法</h3><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs abnf">String str<span class="hljs-operator">=</span><span class="hljs-string">&quot;java&quot;</span><span class="hljs-comment">;</span><br>System.out.println(str.length())<span class="hljs-comment">;</span><br><br>获取字符串长度<br></code></pre></td></tr></table></figure><h3 id="getChars方法"><a href="#getChars方法" class="headerlink" title="getChars方法"></a>getChars方法</h3><p>public void getChars(int start,int end,char c[],int offset)</p><p>​     该方法的作用是将当前<a href="https://so.csdn.net/so/search?q=%E5%AD%97%E7%AC%A6%E4%B8%B2&spm=1001.2101.3001.7020">字符串</a>从start到end-1位置上的字符复制到字符数组c中，并从c的offset处开始存放</p><p>就是将字符串从下标为start到下标为end-1的字符从c字符数组的offset下标处开始存放</p><p>String str&#x3D;”java”;<br>char dstch[]&#x3D;new char[20];<br>int n&#x3D;str.length();<br>str.getChars(0, n, dstch, 0);<br>System.out.println(dstch);          都包括第一个下标开始的那个字符</p><h3 id="compareTo方法"><a href="#compareTo方法" class="headerlink" title="compareTo方法"></a>compareTo方法</h3><p><strong>String类是默认实现的comparable接口的compareTo方法</strong></p><p>用于字符串比较</p><p>  int compareTo(String str)</p><p>例如:字符串A和字符串B进行比较,如果A大于B,返回大于0的值;如果A等于B,返回0; 如果A小于B,返回小于0的值。</p><p>​    A.compareTo(B);</p><p> 即参与比较的两个字符串如果首字符相同，则比较下一个字符，直到有不同的为止，返回该不同的字符的ASCII码差值；</p><p>是A字符串字符的ascii编码减去B字符串字符的ascii编码</p><p> 如果两个字符串不一样长，可以参与比较的字符又完全一样，则返回两个字符串的长度差值</p><p>String str&#x3D;”abcde”;<br>System.out.println(str.compareTo(“boy”));<br>System.out.println(str.compareTo(“aba”));<br>System.out.println(str.compareTo(“abcdefghi”));</p><p>运行结果</p><p>-1<br>2<br>-4</p><p>使用例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Student o1)</span> &#123;<br><span class="hljs-keyword">if</span>(o1.getScore()==<span class="hljs-built_in">this</span>.getScore()) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.id.compareTo(o1.id);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> o1.getScore()-<span class="hljs-built_in">this</span>.getScore();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>先按成绩降序排序，当成绩相同的时候按照id来自然排序</p><h3 id="concat方法"><a href="#concat方法" class="headerlink" title="concat方法"></a>concat方法</h3><p>n将调用该方法的字符串与指定字符串连接，返回新的字符串。</p><p>String str1&#x3D;”java”;<br>String str2&#x3D;”world”;<br>String str3;<br>str3&#x3D;str1.concat(str2);<br>System.out.println(str3);&#x2F;&#x2F;javaworld</p><h3 id="substring方法"><a href="#substring方法" class="headerlink" title="substring方法"></a>substring方法</h3><p>n用于提取调用方法的字符串中的子串。</p><p>  String substring (int begin, int end)；</p><p>  <strong>提取从begin到end-1处的字符。就是第二个参数是下标减一</strong></p><p>String str1&#x3D;”java”,str2&#x3D;”world”,str3;<br>str3&#x3D;str1.concat(str2);<br>System.out.println(str3.substring(0,3)+” “+str3.substring(4,9));</p><p>运行结果：jav world</p><p>当substring方法只有一个参数的时候</p><p>它是此字符串的一个子字符串。该子字符串从指定索引处的字符开始，直到此字符串末尾。</p><p>String str1&#x3D;”java”,str2&#x3D;”world”,str3;<br>str3&#x3D;str1.concat(str2);<br>System.out.println(str3.substring(2));</p><p>运行结果：vaworld         包括这个第一个下标开始的那个字符</p><h3 id="replace方法"><a href="#replace方法" class="headerlink" title="replace方法"></a>replace方法</h3><p>返回一个新字符串</p><p>n用于替换调用方法在字符串中的某个<strong>字符</strong>，返回替换后的新字符串。</p><p>String replace(char oldChar, char newChar)；</p><p>String str1&#x3D;”java world”,str3;<br>str3&#x3D;str1.replace(‘a’,’b’);<br>System.out.println(str3);</p><p>运行结果：</p><p>jbvb world</p><h3 id="trim方法"><a href="#trim方法" class="headerlink" title="trim方法"></a>trim方法</h3><p>返回一个新字符串</p><p>npublic String trim()</p><p>  一个字符串s 通过调用方法trim()得到一个字符串对象,该字符串对象是s去掉前后空格后的字符串。</p><p>  如下面的代码所示：</p><p>String s&#x3D;”I mist theep “;<br>String temp&#x3D;s.replace(‘t’, ‘s’);<br>String a&#x3D;” i am a student “;<br>String tema&#x3D;s.trim();<br>System.out.println(temp);<br>System.out.println(tema);</p><h3 id="indexOf方法"><a href="#indexOf方法" class="headerlink" title="indexOf方法"></a>indexOf方法</h3><p>indexOf, lastIndexOf: 这两个方法用于对字符串建立索引，返回字符串的位置；</p><p>  int indexOf(String str)；&#x2F;&#x2F;这个是返回第一个遇到的索引，两个都是返回匹配的字符串的第一个字符的索引值</p><p>  int lastIndexOf(String str);&#x2F;&#x2F;这个是返回从最后开始遇到的索引</p><p>String str1&#x3D;”java world or”;<br>String str2&#x3D;”or”;<br>int v1&#x3D;str1.indexOf(str2);<br>int v2&#x3D;str1.lastIndexOf(str2);<br>System.out.println(v1+” “+v2);</p><p>运行结果：6 11</p><h3 id="equals方法"><a href="#equals方法" class="headerlink" title="equals方法"></a>equals方法</h3><p>在String类中equals()定义如下：</p><p>  public boolean equals(String s)</p><p>  该方法用来比较当前字符串对象的实体是否与参数指定的字符串s的实体是否相同。例如</p><p>  String tom&#x3D;new String( “we are students”);</p><p>  String boy&#x3D;new String( “We are students”);</p><p>  String jerry&#x3D; new String(“we are students”);</p><p>  tom.equals(boy)的值是false，tom.equals(jerry)的值是true</p><p>而且字符串之间进行比较不能够用&#x3D;&#x3D;，因为&#x3D;&#x3D;是比较两个字符串的地址是否相同，而equals是比较两个字符串的内容是否是相等的</p><p>&#x3D;&#x3D;比较引用，<a href="https://so.csdn.net/so/search?q=equals&spm=1001.2101.3001.7020">equals</a> 比较值</p><p>1、java中<a href="https://so.csdn.net/so/search?q=%E5%AD%97%E7%AC%A6%E4%B8%B2&spm=1001.2101.3001.7020">字符串</a>的比较：&#x3D;&#x3D;</p><p>我们经常习惯性的写上if(str1&#x3D;&#x3D;str2)，这种写法在java中可能会带来问题</p><p> example1:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">String <span class="hljs-attribute">a</span>=<span class="hljs-string">&quot;abc&quot;</span>;String <span class="hljs-attribute">b</span>=<span class="hljs-string">&quot;abc&quot;</span><br></code></pre></td></tr></table></figure><p>那么a&#x3D;&#x3D;b将返回true。因为在java中字符串的值是不可改变的，相同的字符串在<a href="https://so.csdn.net/so/search?q=%E5%86%85%E5%AD%98&spm=1001.2101.3001.7020">内存</a>中只会存</p><p> 一份，所以a和b指向的是同一个对象；</p><p>example2：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">String</span> a=<span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>(<span class="hljs-string">&quot;abc&quot;</span>); <span class="hljs-built_in">String</span> b=<span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>(<span class="hljs-string">&quot;abc&quot;</span>);<br></code></pre></td></tr></table></figure><p> 那么a&#x3D;&#x3D;b将返回false，此时a和b指向不同的对象。</p><p> 2、用equals方法比较的是字符串的内容是否相同，</p><p>example：</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-built_in">String</span> a=<span class="hljs-literal">new</span> <span class="hljs-built_in">String</span>(<span class="hljs-string">&quot;abc&quot;</span>); <br><span class="hljs-built_in">String</span> b=<span class="hljs-literal">new</span> <span class="hljs-built_in">String</span>(<span class="hljs-string">&quot;abc&quot;</span>);<br> a.<span class="hljs-keyword">equals</span>(b);<br></code></pre></td></tr></table></figure><p>将返回true。</p><h3 id="equalsIgnoreCase-方法"><a href="#equalsIgnoreCase-方法" class="headerlink" title="equalsIgnoreCase()方法"></a>equalsIgnoreCase()方法</h3><p>n在String类中equalsIgnoreCase ()定义如下：</p><p>  <strong>public</strong> <strong>boolean</strong> <strong>equalsIgnoreCase</strong><strong>(String s)</strong></p><p>  字符串对象调用比较当前字符串对象是否与参数指定的字符串s 相同,比较时忽略大小写。例如：</p><p>String tom&#x3D;new String(“ABC”);<br>String Jerry&#x3D;new String(“abc”);<br>System.out.println(tom.equals(Jerry));</p><p>   tom.equalsIgnoreCase(Jerry)的值是true。</p><h3 id="split方法"><a href="#split方法" class="headerlink" title="split方法"></a>split方法</h3><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span>[] <span class="hljs-built_in">split</span>(<span class="hljs-built_in">String</span> regex, <span class="hljs-type">int</span> limit)<br></code></pre></td></tr></table></figure><p>根据第一个参数的字符串将字符串分割为第二个参数的份数变成字符串数组</p><p>第一个参数一定是一个字符串用双引号</p><p> String [] c&#x3D;b[i].split(“：”);用冒号将字符串分割为字符串数组afd</p><p>Integer.parseInt将字符串转换为数字</p><h3 id="startsWith方法"><a href="#startsWith方法" class="headerlink" title="startsWith方法"></a>startsWith方法</h3><ul><li><strong>prefix</strong> – 前缀。</li><li><strong>toffset</strong> – 字符串中开始查找的位置。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">startsWith</span><span class="hljs-params">(String prefix, <span class="hljs-type">int</span> toffset)</span><br><br>或<br><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">startsWith</span><span class="hljs-params">(String prefix)</span><br></code></pre></td></tr></table></figure><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918826.png" alt="image-20220812101529560"></p><h3 id="toUpperCase"><a href="#toUpperCase" class="headerlink" title="toUpperCase()"></a>toUpperCase()</h3><p>String cc &#x3D; “aBc123”.toUpperCase(); 结果就是：ABC123</p><h1 id="Java中StringBuffer类"><a href="#Java中StringBuffer类" class="headerlink" title="Java中StringBuffer类"></a>Java中StringBuffer类</h1><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>StringBuffer中提供了三种构造方法</p><p>   public StringBuffer() </p><p>   构造一个不包含字符的字符串缓冲区，其初始的容量设为 16 个字符。</p><p>   public StringBuffer(int) </p><p>  构造一个不包含字符的字符串缓冲区，其初始容量由参数设定。 </p><p>   public StringBuffer(String) </p><p>  构造一个字符串缓冲区，来表示和字符串参数相同的字符序列。 字符串缓冲区的初始容量为16加上字符串参数的长度。</p><h3 id="capacity方法"><a href="#capacity方法" class="headerlink" title="capacity方法"></a>capacity方法</h3><p>n用来计算StringBuffer的容量，返回容量大小的整型值。</p><p>StringBuffer sb&#x3D;new StringBuffer(100);<br>int x&#x3D;sb.capacity();<br>System.out.println(x);</p><p>运算结果：100</p><p>容量是一开始那个有的那个，而不是有内容的，可以是空的默认值</p><h3 id="append方法"><a href="#append方法" class="headerlink" title="append方法"></a>append方法</h3><p>n将指定的字符串的内容连接到StringBuffer对象中内容的后边，并返回连接后的的StringBuffer对象。</p><p>  StringBuffer append(String str);</p><p>StringBuffer sb1&#x3D;new StringBuffer(“Hello”);<br>StringBuffer sb2&#x3D;new StringBuffer(“all”);<br>String str&#x3D;”_good”;<br>sb2&#x3D;sb1.append(str);<br>System.out.println(sb2);</p><p>运行结果：Hello_good</p><h3 id="insert方法"><a href="#insert方法" class="headerlink" title="insert方法"></a>insert方法</h3><p>n将指定的字符ch插入到StringBuffer对象的offset处，并返回修改后的StringBuffer对象。</p><p>  StringBuffer insert（int offset, char ch）</p><pre><code class="hljs">    StringBuffer sb1=new StringBuffer(&quot;Hello&quot;);    char c=&#39;2&#39;;    StringBuffer sb2=new StringBuffer(100);    sb2=sb1.insert(1,c);    System.out.println(sb2);</code></pre><p>insert的第一个参数是要插入的字符的下标</p><h3 id="delete方法"><a href="#delete方法" class="headerlink" title="delete方法"></a>delete方法</h3><p>n将StringBuffer对象中的一部分内容删掉，并将删除后的StringBuffer对象返回。</p><p>  StringBuffer delete(int start, int end);</p><p>  从start 删除到 end-1；</p><p>StringBuffer sb1&#x3D;new StringBuffer(“Hello”);<br>StringBuffer sb2&#x3D;new StringBuffer(100);<br>sb2&#x3D;sb1.delete(1, 3);<br>System.out.println(sb2);</p><p>运行结果：Hlo</p><h3 id="reverse方法"><a href="#reverse方法" class="headerlink" title="reverse方法"></a>reverse方法</h3><p>n将StringBuffer中的内容颠倒过来；</p><p>  StringBuffer reverse();</p><p>StringBuffer sb1&#x3D;new StringBuffer(“Hello”);<br>sb1&#x3D;sb1.reverse();<br>System.out.println(sb1);</p><p>结果为：olleH</p><h1 id="java中数组"><a href="#java中数组" class="headerlink" title="java中数组"></a>java中数组</h1><h3 id="数组的声明"><a href="#数组的声明" class="headerlink" title="数组的声明"></a>数组的声明</h3><p>需要提供数组元素的类型和数组的维数。</p><p>例如： int[] k;    &#x2F;&#x2F;int型一维数组</p><p>​        String s[];</p><h3 id="数组声明注意"><a href="#数组声明注意" class="headerlink" title="数组声明注意"></a>数组声明注意</h3><p>test</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Main;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span>&#123;<br>    <br>    <span class="hljs-type">int</span> arr[]= &#123;<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>&#125;;<br>    <span class="hljs-type">int</span> arr2[]= &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;;<br>    arr=arr2;<span class="hljs-comment">//arr 也变成1,2,3,4</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;arr.length;i++)<br>    &#123;<br>    System.out.println(arr[i]);<br>    &#125;<br><br>   arr[<span class="hljs-number">0</span>]=<span class="hljs-number">100</span>;<br>   System.out.println(arr2[<span class="hljs-number">0</span>]);<span class="hljs-comment">//说明arr=arr2之后两个数组指向同一个内存地址</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="创建数组对象"><a href="#创建数组对象" class="headerlink" title="创建数组对象"></a>创建数组对象</h3><p>使用关键字new；</p><p>例如：new int [5];</p><p>​       new String [6][5]; &#x2F;&#x2F;创建String 型二维数组</p><p>创建后，需要将相应类型的数组引用指向该对象，才能对数组对象进行操作。</p><p>  例如：int[] k;    &#x2F;&#x2F;int型一维数组</p><p>​        String[][] s;</p><p>​        k&#x3D;new int [5];</p><p>​        s&#x3D;new String[6][5];</p><h3 id="枚举初始化"><a href="#枚举初始化" class="headerlink" title="枚举初始化"></a>枚举初始化</h3><p>例子：TestArray.java</p><p>循环初始化：TestArray.java</p><p>枚举初始化：</p><p>  例如： int[] i&#x3D;{1,3,5,7,9};</p><p>​        int[] i&#x3D;new int[]{1,3,5,7,9};</p><h3 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h3><p>整个数组排序</p><p>  public static void sort (int[] a)；</p><p>对指定的数组区间进行排序</p><p>  public static void sort (int[] a, int fromIndex, int toIndex)；这个第二个参数是最后一个下标减一</p><p>int a[]&#x3D; {1,2,3,5,4};<br>Arrays.sort(a);<br>for(int i:a)<br>{<br>    System.out.println(i);}<br>    }</p><h3 id="查找指定元素"><a href="#查找指定元素" class="headerlink" title="查找指定元素"></a>查找指定元素</h3><p>nJava中也提供binarySearch方法来帮助开发人员进行查找操作，该方法格式如下所示。</p><p>  public static int binarySearch(int[ ] a,int key)；</p><p>方法的object[]参数是要查找的数组，key参数为要查找的key值。</p><p>方法的返回值有几种：</p><p>1.找到的情况下：如果key在数组中，则返回搜索值的索引。</p><p>2.找不到的情况下：</p><p> [1] 搜索值不是数组元素，且在数组范围内，从1开始计数，得“ - 插入点索引值”；<br> [2] 搜索值是数组元素，从0开始计数，得搜索值的索引值；<br> [3] 搜索值不是数组元素，且大于数组内元素，索引值为 – (length + 1);<br> [4] 搜索值不是数组元素，且小于数组内元素，索引值为 – 1。</p><p>这个binarySearch方法必须是按照从小到大的顺序排的元素才能够算是key在数组中，如果有小的数跟在最后面就是找不到的情况下的第一种情况</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">   <span class="hljs-type">int</span> a[] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[] &#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>&#125;;  <br>        <span class="hljs-type">int</span> <span class="hljs-variable">x1</span> <span class="hljs-operator">=</span> Arrays.binarySearch(a, <span class="hljs-number">5</span>);  <br>        <span class="hljs-type">int</span> <span class="hljs-variable">x2</span> <span class="hljs-operator">=</span> Arrays.binarySearch(a, <span class="hljs-number">4</span>);  <br>        <span class="hljs-type">int</span> <span class="hljs-variable">x3</span> <span class="hljs-operator">=</span> Arrays.binarySearch(a, <span class="hljs-number">0</span>);  <br>        <span class="hljs-type">int</span> <span class="hljs-variable">x4</span> <span class="hljs-operator">=</span> Arrays.binarySearch(a, <span class="hljs-number">10</span>);<br>x1=-<span class="hljs-number">4</span>      x2=<span class="hljs-number">2</span>    x3=-<span class="hljs-number">1</span>    x4=-<span class="hljs-number">7</span>结果<br></code></pre></td></tr></table></figure><h3 id="数组利用比较器排序"><a href="#数组利用比较器排序" class="headerlink" title="数组利用比较器排序"></a>数组利用比较器排序</h3><p>注意点：这个数组必须是Integer这种对象类型的而不是int基本类型</p><p>同时自己设计的比较器需要实现Comparator接口，当下面例子这种形式的时候是从小到大排序</p><p>将第一个if返回值变为-1       第二个elseif返回值变为1就可以实现从大到小排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Main;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Comparator;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">compare</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparator</span>&lt;Integer&gt;&#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Integer o1, Integer o2)</span> &#123;<br><span class="hljs-keyword">if</span>(o1&gt;o2) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(o1&lt;o2) &#123;<br><span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br>Integer []a= &#123;<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>&#125;;<span class="hljs-comment">//这里必须使用Integer</span><br>Comparator c=<span class="hljs-keyword">new</span> <span class="hljs-title class_">compare</span>();<br>Arrays.sort(a,c);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i:a) &#123;<br>System.out.println(i);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Java-Character类中的方法"><a href="#Java-Character类中的方法" class="headerlink" title="Java  Character类中的方法"></a>Java  Character类中的方法</h1><p>Character类在java.lang包下所以不需要自己去导入</p><h3 id="isLower-Upper-Case和to-Upper-Case方法"><a href="#isLower-Upper-Case和to-Upper-Case方法" class="headerlink" title="isLower(Upper)Case和to(Upper)Case方法"></a>isLower(Upper)Case和to(Upper)Case方法</h3><p>作用：是转大小写或者判断是否是大写或者小写</p><p>char cstr[]&#x3D; {‘j’,’a’,’v’,’a’};<br>System.out.println(Character.isUpperCase(cstr[0]));<br>System.out.println(Character.isLowerCase(cstr[0]));<br>cstr[1]&#x3D;Character.toUpperCase(cstr[1]);<br>System.out.println(cstr[1]);<br>cstr[1]&#x3D;Character.toLowerCase(cstr[1]);<br>System.out.println(cstr[1]);</p><p><strong>java.lang包下的类是默认自动导入的，character类就是在java.lang包下，以及java.lang包下的自包还是不可以被默认导入，如果用到里面的类需要自己手动导入</strong></p><p>转大小写的时候不会把原来的字符变为大写或小写，但可以重新赋值</p><h3 id="isDigit方法"><a href="#isDigit方法" class="headerlink" title="isDigit方法"></a>isDigit方法</h3><p>确定指定字符是否为数字</p><pre><code class="hljs">Character a=&#39;2&#39;;System.out.println(Character.isDigit(a));</code></pre><p>输出的结果是true</p><h3 id="isLetter方法"><a href="#isLetter方法" class="headerlink" title="isLetter方法"></a>isLetter方法</h3><p> 确定指定字符是否为字母。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-type">Character</span> a=<span class="hljs-string">&#x27;a&#x27;</span>;<br>      <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-type">Character</span>.isLetter(a));<br><br><br></code></pre></td></tr></table></figure><p>输出结果为true</p><h3 id="equals方法-1"><a href="#equals方法-1" class="headerlink" title="equals方法"></a>equals方法</h3><pre><code class="hljs">  Character a=&#39;a&#39;;    Character b=&#39;b&#39;;    System.out.println(a.equals(b));</code></pre><p>输出结果为faulse</p><p><strong>两个基本类型字符（用char定义的，或者char数组中的）之间可以直接进行&#x3D;&#x3D;，!&#x3D;之间的比较，两个Character对象字符之间不能够用&#x3D;&#x3D; !&#x3D;得用equals</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-type">Character</span> a=<span class="hljs-built_in">new</span> <span class="hljs-type">Character</span>(<span class="hljs-string">&#x27;a&#x27;</span>);<br><span class="hljs-type">Character</span> b=<span class="hljs-built_in">new</span> <span class="hljs-type">Character</span>(<span class="hljs-string">&#x27;a&#x27;</span>);<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(a==b);<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(a.equals(b));<br>结果：<span class="hljs-keyword">false</span><br>     <span class="hljs-keyword">true</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">Character a=<span class="hljs-string">&#x27;a&#x27;</span>;<br>Character b=<span class="hljs-string">&#x27;a&#x27;</span>;<br><span class="hljs-type">char</span> c=<span class="hljs-string">&#x27;a&#x27;</span>;<br><span class="hljs-type">char</span> d=<span class="hljs-string">&#x27;a&#x27;</span>;<br>System.out.println(a==b);<br>System.out.println(a.equals(b));<br>System.out.println(c==d);<br><span class="hljs-comment">//System.out.println(c.equals(d));</span><br>结果：基本类型不能调用很多方法，可以用Character引用变量去指向基本类型<br><span class="hljs-literal">true</span><br><span class="hljs-literal">true</span><br><span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h3 id="字符数组"><a href="#字符数组" class="headerlink" title="字符数组"></a>字符数组</h3><p>String str&#x3D;”java”;<br>char dstch[]&#x3D;new char[20];<br>int n&#x3D;str.length();<br>str.getChars(0, n, dstch, 0);<br>System.out.println(dstch);</p><p>结果：java</p><h1 id="java-random类的使用"><a href="#java-random类的使用" class="headerlink" title="java random类的使用"></a>java random类的使用</h1><p>random类不在java.lang包下，所以需要自己去导入</p><p>import java.util.Random;</p><h3 id="Random类的构造方法"><a href="#Random类的构造方法" class="headerlink" title="Random类的构造方法"></a>Random类的构造方法</h3><p>Random类包含两个构造方法，下面依次进行介绍：<br>（1）public Random()<br>该构造方法使用一个和当前系统时间对应的相对时间有关的数字作为种子数，然后使用这个种子数构造Random对象。<br>（2）public Random(long seed)<br>该构造方法可以通过制定一个种子数进行创建。<br>示例代码：<br>Random r &#x3D; new Random();<br>Random r1 &#x3D; new Random(10);<br>再次强调：种子数只是随机算法的起源数字，和生成的随机数字的区间无关。</p><p>Random有两种<a href="https://so.csdn.net/so/search?q=%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95&spm=1001.2101.3001.7020">构造方法</a>：<br>1.Random()，用于创建一个伪<a href="https://so.csdn.net/so/search?q=%E9%9A%8F%E6%9C%BA%E6%95%B0&spm=1001.2101.3001.7020">随机数</a>生成器，无参构造，每次生成的随机数是不同的。<br>程序示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">Random r=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br><br><span class="hljs-comment">//随机生成10个[0,100)之间的数</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)&#123;<br><br>System.out.println(r.nextInt(<span class="hljs-number">100</span>));<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>每次运行生成的随机数都是不同的</strong></p><p>2.Random(long seed)，使用一个long型的seed种子创建伪随机数生成器 ，有参构造，每次生成的随机数相同。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">Random r=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>(<span class="hljs-number">13</span>);     <span class="hljs-comment">//创建对象时传入种子</span><br><br><span class="hljs-comment">//随机生成10个[0,100)之间的数</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)&#123;<br><br>System.out.println(r.nextInt(<span class="hljs-number">100</span>));<br><br>&#125;<br></code></pre></td></tr></table></figure><p>每次运行生成的随机数都是相同的</p><h3 id="nextBoolan方法"><a href="#nextBoolan方法" class="headerlink" title="nextBoolan方法"></a>nextBoolan方法</h3><p>该方法的作用是生成一个随机的boolean值，生成true和false的值几率相等，也就是都是50%的几率。</p><pre><code class="hljs">Random a=new Random();System.out.println(a.nextBoolean());</code></pre><h3 id="nextDouble方法"><a href="#nextDouble方法" class="headerlink" title="nextDouble方法"></a>nextDouble方法</h3><p>该方法的作用是生成一个随机的double值，数值介于[0,1.0)之间。</p><pre><code class="hljs">Random a=new Random();System.out.println(a.nextDouble());</code></pre><p>也可以自己指定范围生成</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs armasm">（<span class="hljs-number">2</span>）生成[<span class="hljs-number">0</span>,<span class="hljs-number">5</span>.<span class="hljs-number">0</span>)区间的小数<br><span class="hljs-symbol">double</span> <span class="hljs-built_in">d2</span> = r.nextDouble() * <span class="hljs-number">5</span><span class="hljs-comment">;</span><br>因为nextDouble方法生成的数字区间是[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>.<span class="hljs-number">0</span>)，将该区间扩大<span class="hljs-number">5</span>倍即是要求的区间。<br>同理，生成[<span class="hljs-number">0</span>,d)区间的随机小数，d为任意正的小数，则只需要将nextDouble方法的返回值乘以d即可。<br>（<span class="hljs-number">3</span>）生成[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>.<span class="hljs-number">5</span>)区间的小数<br><span class="hljs-symbol">double</span> <span class="hljs-built_in">d3</span> = r.nextDouble() * <span class="hljs-number">1</span>.<span class="hljs-number">5</span> + <span class="hljs-number">1</span><span class="hljs-comment">;</span><br>生成[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>.<span class="hljs-number">5</span>)区间的随机小数，则只需要首先生成[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>.<span class="hljs-number">5</span>)区间的随机数字，然后将生成的随机数区间加<span class="hljs-number">1</span>即可。同理，生成任意非从<span class="hljs-number">0</span>开始的小数区间[<span class="hljs-built_in">d1</span>,<span class="hljs-built_in">d2</span>)范围的随机数字(其中<span class="hljs-built_in">d1</span>不等于<span class="hljs-number">0</span>)，则只需要首先生成[<span class="hljs-number">0</span>,<span class="hljs-built_in">d2</span>-<span class="hljs-built_in">d1</span>)区间的随机数字，然后将生成的随机数字区间加上<span class="hljs-built_in">d1</span>即可。<br></code></pre></td></tr></table></figure><p>就是在原本的基础上乘以多少就可以变成原本的多少倍</p><h3 id="nextInt方法"><a href="#nextInt方法" class="headerlink" title="nextInt方法"></a>nextInt方法</h3><p>该方法的作用是生成一个随机的int值，该值介于int的区间，也就是-231到231-1之间。</p><pre><code class="hljs">Random a=new Random();System.out.println(a.nextInt());</code></pre><p>同时可以自己指定生成整数的范围</p><p>生成[0,10)区间的整数<br>    Random a&#x3D;new Random();<br>    System.out.println(a.nextInt(10));</p><p>生成[0,10]区间的整数<br>  Random a&#x3D;new Random();<br>    System.out.println(a.nextInt(11));</p><p>生成[-3,15)区间的整数<br>    Random a&#x3D;new Random();<br>    System.out.println(a.nextInt(18)-3);</p><h1 id="java中Math类"><a href="#java中Math类" class="headerlink" title="java中Math类"></a>java中Math类</h1><p>不用导入包</p><h3 id="静态常量"><a href="#静态常量" class="headerlink" title="静态常量"></a>静态常量</h3><p>Math 类中包含 E 和 PI 两个静态常量，正如它们名字所暗示的，它们的值分别等于 e（自然对数）和 π（圆周率）。</p><p>调用 Math 类的 E 和 PI 两个常量，并将结果输出。代码如下：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;E 常量的值：&quot; + Math.E);<span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;PI 常量的值：&quot; + Math.PI);<br></code></pre></td></tr></table></figure><p>执行上述代码，输出结果如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">E</span> 常量的值：<span class="hljs-number">2</span>.<span class="hljs-number">718281828459045</span><br><span class="hljs-attribute">PI</span> 常量的值：<span class="hljs-number">3</span>.<span class="hljs-number">141592653589793</span><br></code></pre></td></tr></table></figure><p>System.out.println(Math.E);<br>System.out.println(Math.PI);</p><h3 id="求最大值、最小值和绝对值"><a href="#求最大值、最小值和绝对值" class="headerlink" title="求最大值、最小值和绝对值"></a>求最大值、最小值和绝对值</h3><p>在程序中常见的就是求最大值、最小值和绝对值问题，如果使用 Math 类提供的方法可以很容易实现。这些方法的说明如表 1 所示。</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918971.png" alt="image-20220614165454798"></p><p>就是比较的时候两个数字的数字类型一定要相同，这些函数只能是在两个数之间进行比较</p><p>求 10 和 20 的较大值、15.6 和 15 的较小值、-12 的绝对值，代码如下：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">纯文本复制<br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> Test02 &#123;    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;10 和 20 的较大值：&quot; + Math.max(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>));        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;15.6 和 15 的较小值：&quot; + Math.min(<span class="hljs-number">15.6</span>, <span class="hljs-number">15</span>));        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;-12 的绝对值：&quot; + Math.abs(<span class="hljs-number">-12</span>));    &#125;&#125;<br></code></pre></td></tr></table></figure><p>该程序的运行结果如下：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs diff">10和20的较大值：20<br>15.6和15的较小值：15.0<br><span class="hljs-deletion">-12的绝对值：12</span><br></code></pre></td></tr></table></figure><h3 id="求整运算"><a href="#求整运算" class="headerlink" title="求整运算"></a>求整运算</h3><p>Math 类的求整方法有很多，详细说明如表 2 所示。</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918759.png" alt="image-20220614165920339"></p><ol><li>&#96;&#96;&#96;<br>import java.util.Scanner;<br>public class Test03 {<br>public static void main(String[] args) {<br>   Scanner input &#x3D; <strong>new</strong> Scanner(System.in);<br>   System.outprintln(“请输入一个数字：”);<br>   double num &#x3D; input.nextDouble();<br>   System.out.println(“大于或等于 “+ num +” 的最小整数：” + Math.ceil(num));<br>   System.out.println(“小于或等于 “+ num +” 的最大整数：” + Math.floor(num));<br>  System.out.println(“将 “+ num +” 加上 0.5 之后最接近的整数：” + Math.round(num));<br>   System.out.println(“最接近 “+num+” 的整数：” + Math.rint(num));<br>   }<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><br>   <span class="hljs-type">Double</span> a=<span class="hljs-number">1.0</span>;<br>       <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(Math.ceil(a));<br>       <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(Math.floor(a));<br>       <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(Math.rint(a));<br>       <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(Math.round(a));//当距离两个整数一样的时候取那个小的<br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br># Java Scanner 类<br><br><span class="hljs-number">2022</span><span class="hljs-number">-01</span><span class="hljs-number">-25</span> <span class="hljs-number">14</span>:<span class="hljs-number">23</span> 更新<br><br>java.util.Scanner是Java5的新特征，我们可以通过 Scanner 类来获取用户的输入。<br><br>下面是创建 Scanner 对象的基本语法：<br><br></code></pre></td></tr></table></figure> Scanner s &#x3D; new Scanner(System.in); <figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scss"><br>接下来我们演示一个最简单的的数据输入，并通过 Scanner 类的 <span class="hljs-built_in">next</span>() 与 <span class="hljs-built_in">nextLine</span>() 方法获取输入的字符串，在读取前我们一般需要 使用 hasNext 与 hasNextLine 判断是否还有输入的数据：<br><br><br><br>### 使用 next 方法：<br><br></code></pre></td></tr></table></figure>import java.util.Scanner;</li></ol><p>public class ScannerDemo {<br>    public static void main(String[] args) {<br>        Scanner scan &#x3D; new Scanner(System.in);<br>        &#x2F;&#x2F; 从键盘接收数据  </p><pre><code class="hljs">    //next方式接收字符串    System.out.println(&quot;next方式接收：&quot;);    // 判断是否还有输入    if(scan.hasNext())&#123;           String str1 = scan.next();        System.out.println(&quot;输入的数据为：&quot;+str1);      &#125;  &#125;  </code></pre><p>} </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs"><br>执行以上程序输出结果为：<br><br></code></pre></td></tr></table></figure><p>$ javac ScannerDemo.java<br>$ java ScannerDemo<br>next方式接收：<br>youj com<br>输入的数据为：youj</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>可以看到 com 字符串并未输出，接下来我们看 nextLine。<br><br>### 使用 nextLine 方法：<br><br></code></pre></td></tr></table></figure><p><code>import java.util.Scanner;  public class ScannerDemo &#123;      public static void main(String[] args) &#123;          Scanner scan = new Scanner(System.in);  // 从键盘接收数据   //nextLine方式接收字符串        System.out.println(&quot;nextLine方式接收：&quot;);        // 判断是否还有输入        if(scan.hasNextLine())&#123;           String str2 = scan.nextLine();        System.out.println(&quot;输入的数据为：&quot;+str2);          &#125;       &#125;   &#125;  </code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><p>执行以上程序输出结果为：<code>$ javac ScannerDemo.java $ java ScannerDemo nextLine方式接收： youj com 输入的数据为：youj com </code>可以看到 com 字符串输出。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs scss"><br><br><br>### <span class="hljs-built_in">next</span>()与<span class="hljs-built_in">nextLine</span>()区别<br><br>**<span class="hljs-built_in">next</span>():**<br><br>- <span class="hljs-number">1</span>、一定要读取到有效字符后才可以结束输入。<br>- <span class="hljs-number">2</span>、对输入有效字符之前遇到的空白，<span class="hljs-built_in">next</span>()方法会自动将其去掉。<br>- <span class="hljs-number">3</span>、只有输入有效字符后才将其后面输入的空白作为分隔符或者结束符。<br>- <span class="hljs-built_in">next</span>()不能得到带有空格的字符串。<br><br>**<span class="hljs-built_in">nextLine</span>()：**<br><br>- <span class="hljs-number">1</span>、以Enter为结束符,也就是说<span class="hljs-built_in">nextLine</span>()方法返回的是输入回车之前的所有字符。<br>- <span class="hljs-number">2</span>、可以获得空白。<br><br>如果要输入int或float类型的数据，在Scanner类中也有支持，但是在输入之前最好先使用 <span class="hljs-built_in">hasNextXxx</span>() 方法进行验证，再使用 <span class="hljs-built_in">nextXxx</span>() 来读取：<br><br></code></pre></td></tr></table></figure><p>import java.util.Scanner;  </p><p>public class ScannerDemo {<br>    public static void main(String[] args) {<br>        Scanner scan &#x3D; new Scanner(System.in);<br>        &#x2F;&#x2F; 从键盘接收数据<br>        int i &#x3D; 0 ;<br>        float f &#x3D; 0.0f ;<br>        System.out.print(“输入整数：”);<br>        if(scan.hasNextInt()){<br>            &#x2F;&#x2F; 判断输入的是否是整数<br>            i &#x3D; scan.nextInt() ;<br>            &#x2F;&#x2F; 接收整数<br>            System.out.println(“整数数据：” + i) ;<br>        }else{<br>            &#x2F;&#x2F; 输入错误的信息<br>            System.out.println(“输入的不是整数！”) ;<br>        }<br>        System.out.print(“输入小数：”);<br>        if(scan.hasNextFloat()){<br>            &#x2F;&#x2F; 判断输入的是否是小数<br>            f &#x3D; scan.nextFloat() ;<br>            &#x2F;&#x2F; 接收小数<br>            System.out.println(“小数数据：” + f) ;<br>        }else{<br>            &#x2F;&#x2F; 输入错误的信息<br>            System.out.println(“输入的不是小数！”) ;<br>        }<br>    }<br>} </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs"><br>执行以上程序输出结果为：<br><br></code></pre></td></tr></table></figure><p>$ javac ScannerDemo.java<br>$ java ScannerDemo<br>输入整数：12<br>整数数据：12<br>输入小数：1.2<br>小数数据：1.2</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><br><br><br>一个字节八比特，一个<span class="hljs-keyword">byte八位</span><br><span class="hljs-keyword"></span><br><br><br><span class="hljs-comment">## java SimpleDateFormat类</span><br><br>**<span class="hljs-number">1</span>、为什么要使用SimpleDateFormat？**<br><br>在<span class="hljs-keyword">Java中，如果我们想获取当前时间，一般会使用Date类的无参构造函数，如下所示，我们获取到当前时间并输出：</span><br><span class="hljs-keyword"></span><br></code></pre></td></tr></table></figure><p>import java.util.Date;<code> </code>public class SimpleDateFormatDemo {<code>  </code>public static void main(String[] args) {<code>    </code>Date currentTime &#x3D; <code>new` `Date();</code>    <code>System.out.println(currentTime); </code>&#x2F;&#x2F; 输出：Mon Feb 18 10:24:30 CST 2019<code>  </code>}&#96;&#96;}</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs gherkin"><br>此时我们会发现， 输出的格式并不是我们预期的格式，一般情况下，我们希望的格式都是类似于2019-02-18，2019-02-18 10:24:30，2019/02/18这样的，此时我们就需要用到java.text.SimpleDateFormat来自定义格式。<br><br><span class="hljs-symbol">*</span><span class="hljs-symbol">*</span>2.使用format()方法将日期转换为字符串<span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><br><br>使用format()方法，我们可以将日期类型转换为自己自定义的字符串格式，如2019-02-18，2019/02/18，2019-02-18 10:24:30等，自定义格式如下表所示：<br><br><br><br>|<span class="hljs-string"> 格式 </span>|<span class="hljs-string"> 释义           </span>|<span class="hljs-string"> 举例         </span>|<br>|<span class="hljs-string"> ---- </span>|<span class="hljs-string"> -------------- </span>|<span class="hljs-string"> ------------ </span>|<br>|<span class="hljs-string"> yyyy </span>|<span class="hljs-string"> 年             </span>|<span class="hljs-string"> 2019         </span>|<br>|<span class="hljs-string"> MM   </span>|<span class="hljs-string"> 月             </span>|<span class="hljs-string"> 02           </span>|<br>|<span class="hljs-string"> dd   </span>|<span class="hljs-string"> 日             </span>|<span class="hljs-string"> 18           </span>|<br>|<span class="hljs-string"> HH   </span>|<span class="hljs-string"> 小时(24小时制) </span>|<span class="hljs-string"> 13，下午一点 </span>|<br>|<span class="hljs-string"> mm   </span>|<span class="hljs-string"> 分钟           </span>|<span class="hljs-string"> 53           </span>|<br>|<span class="hljs-string"> ss   </span>|<span class="hljs-string"> 秒             </span>|<span class="hljs-string"> 42           </span>|<br>|<span class="hljs-string"> SSS  </span>|<span class="hljs-string"> 毫秒           </span>|<span class="hljs-string"> 629          </span>|<br><br><br><br></code></pre></td></tr></table></figure><p>package com.zwwhnly.springbootdemo;<code> </code>import java.text.SimpleDateFormat;<code>import java.util.Date;` `public class SimpleDateFormatDemo &#123;</code>  <code>public static void main(String[] args) &#123;</code>    <code>Date currentTime = </code>new<code> </code>Date();<code>    </code>System.out.println(currentTime);  <code>// Mon Feb 18 13:53:50 CST 2019` `    </code>SimpleDateFormat simpleDateFormat1 &#x3D; <code>new` `SimpleDateFormat(</code>“yyyy-MM-dd HH:mm:ss.SSS”<code>);</code>    <code>SimpleDateFormat simpleDateFormat2 = </code>new<code> </code>SimpleDateFormat(<code>&quot;yyyy-MM-dd&quot;</code>);<code>    </code>SimpleDateFormat simpleDateFormat3 &#x3D; <code>new` `SimpleDateFormat(</code>“yyyy&#x2F;MM&#x2F;dd”<code>);` `    </code>System.out.println(simpleDateFormat1.format(currentTime)); <code>// 输出2019-02-18 13:53:50.629</code>    <code>System.out.println(simpleDateFormat2.format(currentTime)); </code>&#x2F;&#x2F; 输出2019-02-18<code>    </code>System.out.println(simpleDateFormat3.format(currentTime)); <code>// 输出2019/02/18</code>  <code>&#125;</code>}</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scss"><br>**<span class="hljs-number">3</span>.使用<span class="hljs-built_in">parse</span>()方法将字符串转换为日期**<br><br>在实际开发过程中，我们经常需要将字符串转换为日期类型，以进行后续操作，此时可以使用<span class="hljs-built_in">parse</span>()<br><br>方法，但需要**注意：如果字符串与指定的格式不匹配，会报java<span class="hljs-selector-class">.text</span><span class="hljs-selector-class">.ParseException</span>异常**。<br><br></code></pre></td></tr></table></figure><p><img src="E:\临时\20190218\snipaste_20190218_141555.png" alt="snipaste_20190218_141555">package com.zwwhnly.springbootdemo;<code> </code>import java.text.ParseException;<code>import java.text.SimpleDateFormat;</code>import java.util.Date;<code> </code>public class SimpleDateFormatDemo {<code>  </code>public static void main(String[] args) {<code> </code>    <code>try` `&#123;</code>      <code>SimpleDateFormat simpleDateFormat1 = </code>new<code> </code>SimpleDateFormat(<code>&quot;yyyy-MM-dd HH:mm&quot;</code>);<code> </code>      <code>String strDate1 = </code>“2019-02-18 13:58”<code>;</code>      <code>String strDate2 = </code>“2019-02-18”<code>;` `      </code>Date date1 &#x3D; simpleDateFormat1.parse(strDate1);<code>      </code>System.out.println(date1);<code>      </code>Date date2 &#x3D; simpleDateFormat1.parse(strDate2);<code>      </code>System.out.println(date2);<code>    </code>} <code>catch` `(ParseException e) &#123;</code>      <code>e.printStackTrace();</code>    <code>&#125;</code>  <code>&#125;</code>}</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><br>运行结果如下图所示：<br>![img](https:<span class="hljs-comment">//zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918082.png)</span><br>由此我们可以看到，strDate1格式匹配能正常转换为Date类型，而strDate2由于格式不匹配，抛出java.text.ParseException，正是因为如此，以上的代码才必须包括在<span class="hljs-keyword">try</span>,<span class="hljs-keyword">catch</span>语句中，否则IDEA会提示错误，代码也编译不通过，如下图所示：<br>![img](https:<span class="hljs-comment">//zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918064.png)</span><br><br><span class="hljs-meta">## 抽象类和接口</span><br><br><br><br>package Shape;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Shape</span> &#123;<br><br>&#123;<br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;执行Shapes初始化块..&quot;</span>);<br>&#125;<br><span class="hljs-keyword">private</span> String color;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-built_in">double</span> <span class="hljs-title">calPerimeter</span>()</span>;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> String <span class="hljs-title">getType</span>()</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Shape</span>()</span> &#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Shape</span>(<span class="hljs-params">String color</span>)</span> &#123;<br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;执行Shape的构造器&quot;</span>);<br><span class="hljs-keyword">this</span>.color=color;<br>&#125;<br><br>​<br><br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">Output</span>&#123;<br><span class="hljs-built_in">int</span> MAX_CACHE_LINE=<span class="hljs-number">50</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">out</span>()</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getData</span>(<span class="hljs-params">String msg</span>)</span>;<br><span class="hljs-function"><span class="hljs-literal">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span>(<span class="hljs-params">String...msgs</span>)</span> &#123;<br><span class="hljs-keyword">for</span> (String msg :msgs)<br>&#123;<br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;默认的test()方法&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-literal">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span>()</span> &#123;<br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;test方法&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">static</span> String <span class="hljs-title">staticTest</span>()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;接口里的类方法&quot;</span>;<br>&#125;<br><br>&#125;<br>&#125;<br><br><br><br>多入参方式<br><br></code></pre></td></tr></table></figure><p>public static void main(String[] args) {<br>        System.out.println(“test1:”);<br>        test(“a”,”b”,”c”);<br>        System.out.println(“test2:”);<br>        test(new String[] {“a”, “b”, “c”});<br>    }</p><pre><code class="hljs">/** * 测试方法 * @param params 参数 * */  public static void test(String... params)&#123;    //遍历参数内容    for(String temp : params)&#123;        System.out.println(temp);    &#125;    System.out.println();</code></pre><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><br>定义这种类型的入参必须放到最后一个才可以，也就是说<span class="hljs-type">int</span>入参需要放到可变入参的前面，同时再test1处增加一个<span class="hljs-type">String</span>进行测试，看一下代码。<br><br></code></pre></td></tr></table></figure><p>public static void main(String[] args) {<br>        System.out.println(“test1:”);<br>        test(1,”a”,”b”,”c”,”d”);<br>        System.out.println(“test2:”);<br>        test(2,new String[] {“a”, “b”, “c”});<br>    }</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><br>​<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 测试方法</span><br><span class="hljs-comment">     * @param params 参数</span><br><span class="hljs-comment">     * */</span><br><br><br>​    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> intParam,String... <span class="hljs-keyword">params</span></span>)</span>&#123;<br>​    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;int:&quot;</span>+intParam);<br>​        <span class="hljs-comment">//遍历参数内容</span><br>​        <span class="hljs-keyword">for</span>(String temp : <span class="hljs-keyword">params</span>)&#123;<br>​            System.<span class="hljs-keyword">out</span>.println(temp);<br>​        &#125;<br>​        System.<span class="hljs-keyword">out</span>.println();<br>​    &#125;<br><br><span class="hljs-meta"># java的内部类</span><br><br><span class="hljs-meta">## 非静态内部类</span><br><br></code></pre></td></tr></table></figure><p>package Shape;</p><p>public class Shape{<br>    private String prop&#x3D;”外部类的实例变量”;<br>    private class InClass{<br>        private String prop&#x3D;”内部类的实例变量”;<br>        public void info() {<br>            String prop&#x3D;”局部变量”;<br>            System.out.println(Shape.this.prop);<br>            System.out.println(this.prop);<br>            System.out.println(prop);<br>        }<br>    }<br>    public void test() {<br>        InClass a&#x3D;new InClass();<br>        a.info();<br>    }<br>    public static void main(String[] args)<br>    {<br>        new Shape().test();<br>        }<br>    }</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>## 静态内部类<br><br></code></pre></td></tr></table></figure><p>package Shape;</p><p>public class Shape{<br>    private int a&#x3D;1;<br>    private static int b&#x3D;2;<br>    static class show{</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> age=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> c=<span class="hljs-number">3</span>;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">accessOuterProp</span>()</span> &#123;<br><span class="hljs-comment">//System.out.println(a);</span><br>System.<span class="hljs-keyword">out</span>.println(b);<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] args</span>)</span><br>&#123;<br>System.<span class="hljs-keyword">out</span>.println(show.age);<br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">new</span> show().c);<br>&#125;<br>&#125;<br><br><span class="hljs-meta">## 在外部类以外使用非静态内部类</span><br><br></code></pre></td></tr></table></figure><p>package Shape;</p><p>class Out{<br>    class In{<br>        public In(String msg){<br>            System.out.println(msg);<br>        }<br>    }<br>}<br>public class Shape{<br>    public static void main(String[] args)<br>    {<br>        Out.In in&#x3D;new Out().new In(“测试信息”);</p><pre><code class="hljs">    &#125;</code></pre><p>}</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>## 在外部类以外使用静态内部类<br><br></code></pre></td></tr></table></figure><p>package Shape;</p><p>class StaticOut{<br>    static class StaticIn{<br>        public StaticIn() {<br>            System.out.println(“静态类内部的构造器”);<br>        }<br>    }<br>}<br>public class Shape{<br>    public static void main(String[] args)<br>    {<br>        StaticOut.StaticIn in&#x3D;new StaticOut.StaticIn();</p><pre><code class="hljs">    &#125;</code></pre><p>}</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><br><span class="hljs-meta">## 使用静态内部类注意事项</span><br><br>```java<br>package Shape;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title">StaticOut</span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> a=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> h=<span class="hljs-number">2</span>;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title">StaticIn</span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">StaticIn</span>()</span> &#123;<br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;静态类内部的构造器&quot;</span>);<br><span class="hljs-comment">//System.out.println(a);</span><br>StaticOut b= <span class="hljs-keyword">new</span> StaticOut();<br>System.<span class="hljs-keyword">out</span>.println(b.a);<br>System.<span class="hljs-keyword">out</span>.println(h);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Shape</span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] args</span>)</span><br>&#123;<br>StaticOut.StaticIn <span class="hljs-keyword">in</span>=<span class="hljs-keyword">new</span> StaticOut.StaticIn();<br><br><br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Shape;<br><br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Product</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getPrice</span><span class="hljs-params">()</span>;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shape</span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> age=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(Product P)</span><br>&#123;<br>System.out.println(<span class="hljs-string">&quot;购买了一个&quot;</span>+P.getName()+<span class="hljs-string">&quot;,花掉了&quot;</span>+P.getPrice());<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>&#123;<br>Shape a=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Shape</span>();<br>a.test(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Product</span>() &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getPrice</span><span class="hljs-params">()</span> &#123;<br>System.out.println(age);<br><span class="hljs-keyword">return</span> <span class="hljs-number">567.8</span>;<br>&#125;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Agp显卡&quot;</span>;<br>&#125;<br><br>&#125;);<br><br>&#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs typescript">可以替代上面的匿名内部类<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">product1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Product</span><br><br>&#123;<br><br><span class="hljs-keyword">public</span> double <span class="hljs-title function_">getPrice</span>(<span class="hljs-params"></span>)&#123;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">56.7</span>;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getName</span>(<span class="hljs-params"></span>)&#123;<br><br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;agp显卡&quot;</span>;<br><br>&#125;<br><br>&#125;<br>a.<span class="hljs-title function_">test</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_">product1</span>());<br></code></pre></td></tr></table></figure><h2 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Shape;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Eatable</span><br>&#123;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">taste</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Flyable</span>&#123;<br><br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">fly</span><span class="hljs-params">(String weather)</span>;<br><br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Addable</span>&#123;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span>;<br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shape</span>&#123;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">(Eatable e)</span><br>&#123;<br>System.out.println(e);<br>e.taste();<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">drive</span><span class="hljs-params">(Flyable f)</span> &#123;<br><br>System.out.println(<span class="hljs-string">&quot;我正在驾驶&quot;</span>+f);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(Addable add)</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;5域3的和位&quot;</span>+add.add(<span class="hljs-number">5</span>,<span class="hljs-number">3</span>));<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>Shape lq=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Shape</span>();<br>lq.eat(()-&gt;System.out.println(<span class="hljs-string">&quot;okok&quot;</span>));<br>lq.drive(weather-&gt;&#123;System.out.println(<span class="hljs-string">&quot;今天的天气是&quot;</span>+weather);&#125;);<br>lq.test((a,b)-&gt;a+b);<br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> hello;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">like</span>&#123;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br>like l=()-&gt;&#123;<br>System.out.println(<span class="hljs-string">&quot;1&quot;</span>);<br>&#125;;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="引用类方法"><a href="#引用类方法" class="headerlink" title="引用类方法"></a>引用类方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Shape;<br><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Converter</span>&#123;<br>Integer <span class="hljs-title function_">convert</span><span class="hljs-params">(String from)</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shape</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>Converter converter1=from-&gt;Integer.valueOf(from);<br>Converter converter2=Integer::valueOf;<br>&#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="引用特定对象的实例方法"><a href="#引用特定对象的实例方法" class="headerlink" title="引用特定对象的实例方法"></a>引用特定对象的实例方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Shape;<br><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Converter</span>&#123;<br>Integer <span class="hljs-title function_">convert</span><span class="hljs-params">(String from)</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shape</span>&#123;<br>Converter converter2=from-&gt;<span class="hljs-string">&quot;fkit.org&quot;</span>.indexOf(from);<br>Converter converter1=<span class="hljs-string">&quot;fkit.org&quot;</span>::indexOf;<br><span class="hljs-type">int</span> value=converter1.convert(<span class="hljs-string">&quot;1&quot;</span>);<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>System.out.println(value);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>}</p><h2 id="引用某类对象的实例方法"><a href="#引用某类对象的实例方法" class="headerlink" title="引用某类对象的实例方法"></a>引用某类对象的实例方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Shape;<br><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Mytest</span>&#123;<br>String <span class="hljs-title function_">test</span><span class="hljs-params">(String a,<span class="hljs-type">int</span> b ,<span class="hljs-type">int</span> c)</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shape</span>&#123;<br><span class="hljs-type">Mytest</span> <span class="hljs-variable">mt</span> <span class="hljs-operator">=</span>(a,b,c)-&gt;a.substring(b,c);<br>Mytest mt1=String::substring;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>String str=mt.test(<span class="hljs-string">&quot;java i love you&quot;</span>,<span class="hljs-number">3</span>,<span class="hljs-number">9</span>);<br>System.out.println(str);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>&#123;<br>Shape a=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Shape</span>();<br>a.print();<br><br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="引用构造器"><a href="#引用构造器" class="headerlink" title="引用构造器"></a>引用构造器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Shape;<br><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">YourTest</span>&#123;<br>JFrame <span class="hljs-title function_">win</span><span class="hljs-params">(String title)</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shape</span>&#123;<br>YourTest yt=(String a)-&gt;<span class="hljs-keyword">new</span> <span class="hljs-title class_">JFrame</span>(a);<br>YourTest yt1=JFrame::<span class="hljs-keyword">new</span>;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>JFrame jf=yt.win(<span class="hljs-string">&quot;我的窗口&quot;</span>);<br>System.out.println(jf);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>&#123;<br>Shape a=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Shape</span>();<br>a.print();<br><br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Shape;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JFrame</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">JFrame</span><span class="hljs-params">(String a)</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;a&quot;</span>);<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Shape;<br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">SeasonEnum</span>&#123;<br>SPRING,SUMMER,FALL,WINTER;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shape</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">judge</span><span class="hljs-params">(SeasonEnum s)</span><br>&#123;<br>       <span class="hljs-keyword">switch</span> (s)<br>       &#123;<br>       <span class="hljs-keyword">case</span> SPRING:<br>       System.out.println(<span class="hljs-string">&quot;春天&quot;</span>);<br>       <span class="hljs-keyword">break</span>;<br>       <span class="hljs-keyword">case</span> SUMMER:<br>       System.out.println(<span class="hljs-string">&quot;夏天&quot;</span>);<br>       <span class="hljs-keyword">break</span>;<br>       <span class="hljs-keyword">case</span> FALL:<br>       System.out.println(<span class="hljs-string">&quot;秋天&quot;</span>);<br>       <span class="hljs-keyword">break</span>;<br>       <span class="hljs-keyword">case</span> WINTER:<br>       System.out.println(<span class="hljs-string">&quot;冬天&quot;</span>);<br>       <span class="hljs-keyword">break</span>;<br>       <br>       <br><br>       &#125;<br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>&#123;<br><span class="hljs-keyword">for</span> (SeasonEnum s:SeasonEnum.values())<br>&#123;<br>System.out.println(s);<br><br><br>&#125;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Shape</span>().judge(SeasonEnum.SPRING);<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="更合理的枚举类"><a href="#更合理的枚举类" class="headerlink" title="更合理的枚举类"></a>更合理的枚举类</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs typescript">package <span class="hljs-title class_">Shape</span>;<br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Gender</span>&#123;<br><span class="hljs-variable constant_">MALE</span>,<span class="hljs-variable constant_">FEMALE</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> name;<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setName</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> name</span>)<br>&#123;<br><span class="hljs-keyword">switch</span> (<span class="hljs-variable language_">this</span>)<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-attr">MALE</span>:<br><span class="hljs-keyword">if</span>(name.<span class="hljs-title function_">equals</span>(<span class="hljs-string">&quot;男&quot;</span>))<br>&#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>=name;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;参数错误&quot;</span>);<br>&#125;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-attr">FEMALE</span>:<br><span class="hljs-keyword">if</span>(name.<span class="hljs-title function_">equals</span>(<span class="hljs-string">&quot;女&quot;</span>))<br>&#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>=name;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;参数错误&quot;</span>);<br>&#125;<br><span class="hljs-keyword">break</span>;<br><br><br>&#125;<br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getName</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>;<br>&#125;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shape</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>)<br>&#123;<br><span class="hljs-title class_">Gender</span> g=<span class="hljs-title class_">Gender</span>.<span class="hljs-title function_">valueOf</span>(<span class="hljs-string">&quot;FEMALE&quot;</span>);<br>g.<span class="hljs-title function_">setName</span>(<span class="hljs-string">&quot;女&quot;</span>);<br><span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(g+<span class="hljs-string">&quot;代表&quot;</span>+g.<span class="hljs-title function_">getName</span>());<br><span class="hljs-comment">//g.setName(&quot;男&quot;);</span><br><br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="用构造器做的枚举类，更合理"><a href="#用构造器做的枚举类，更合理" class="headerlink" title="用构造器做的枚举类，更合理"></a>用构造器做的枚举类，更合理</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Shape;<br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Gender</span>&#123;<br>MALE(<span class="hljs-string">&quot;男&quot;</span>),FEMALE(<span class="hljs-string">&quot;女&quot;</span>);<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String name;<br><span class="hljs-keyword">private</span> <span class="hljs-title function_">Gender</span><span class="hljs-params">(String name)</span><br>&#123;<br><span class="hljs-built_in">this</span>.name=name;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name;<br>&#125;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shape</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>&#123;<br>Gender g=Gender.valueOf(<span class="hljs-string">&quot;FEMALE&quot;</span>);<br>System.out.println(g.getName());<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="实现接口的枚举类，不同的枚举值重写的函数还不一样"><a href="#实现接口的枚举类，不同的枚举值重写的函数还不一样" class="headerlink" title="实现接口的枚举类，不同的枚举值重写的函数还不一样"></a>实现接口的枚举类，不同的枚举值重写的函数还不一样</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Shape;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">GenderDesc</span><br>&#123;<br>     <span class="hljs-keyword">void</span> <span class="hljs-title function_">info</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Gender</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">GenderDesc</span><br>&#123;<br>MALE(<span class="hljs-string">&quot;男&quot;</span>)<br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">info</span><span class="hljs-params">()</span><br>&#123;<br>System.out.println(<span class="hljs-string">&quot;这个枚举值代表男性&quot;</span>);<br>&#125;<br>&#125;,<br>FEMALE(<span class="hljs-string">&quot;女&quot;</span>)<br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">info</span><span class="hljs-params">()</span><br>&#123;<br>System.out.println(<span class="hljs-string">&quot;这个枚举值代表女性&quot;</span>);<br>&#125;<br>&#125;;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String name;<br><span class="hljs-keyword">private</span> <span class="hljs-title function_">Gender</span><span class="hljs-params">(String name)</span> &#123;<br><span class="hljs-built_in">this</span>.name=name;<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shape</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>&#123;<br>Gender g=Gender.valueOf(<span class="hljs-string">&quot;FEMALE&quot;</span>);<br>g.info();<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java">这个是包含抽象方法的枚举类<br>在对枚举值实例化的时候也是进行了一个方法的重写，类似于匿名内部类，创建了一个Gender子类的实例<br><br><br><br><span class="hljs-keyword">package</span> Shape;<br><br><br><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Gender</span><br>&#123;<br>PLUS<br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">eval</span><span class="hljs-params">(<span class="hljs-type">double</span> x, <span class="hljs-type">double</span> y)</span><br>&#123;<br><span class="hljs-keyword">return</span> x+y;<br>&#125;<br>&#125;,<br>MINUS<br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">eval</span><span class="hljs-params">(<span class="hljs-type">double</span> x,<span class="hljs-type">double</span> y)</span><br>&#123;<br><span class="hljs-keyword">return</span> x-y;<br>&#125;<br>&#125;,<br>TIMES<br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">eval</span><span class="hljs-params">(<span class="hljs-type">double</span> x,<span class="hljs-type">double</span> y)</span><br>&#123;<br><span class="hljs-keyword">return</span> x*y; <br><br>&#125;<br>&#125;,<br>DEVIDE<br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">eval</span><span class="hljs-params">(<span class="hljs-type">double</span> x,<span class="hljs-type">double</span> y)</span><br>&#123;<br><span class="hljs-keyword">return</span> x/y;<br>&#125;<br>&#125;;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-type">double</span> <span class="hljs-title function_">eval</span><span class="hljs-params">(<span class="hljs-type">double</span> x,<span class="hljs-type">double</span> y)</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br><br><br>System.out.println(Gender.PLUS.eval(<span class="hljs-number">5</span>,<span class="hljs-number">4</span>));<br>System.out.println(Gender.PLUS.eval(<span class="hljs-number">5</span>,<span class="hljs-number">4</span>));<br>System.out.println(Gender.PLUS.eval(<span class="hljs-number">5</span>,<span class="hljs-number">4</span>));<br>System.out.println(Gender.PLUS.eval(<span class="hljs-number">5</span>,<span class="hljs-number">4</span>));<br><br>&#125;<br></code></pre></td></tr></table></figure><p>}</p><h1 id="java中的集合"><a href="#java中的集合" class="headerlink" title="java中的集合"></a>java中的集合</h1><h1 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h1><p>这是一个接口，只能new 实现类</p><p><strong>Collection常用方法</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs scss">int <span class="hljs-built_in">size</span>();<br><br>boolean <span class="hljs-built_in">isEmpty</span>();<br><br>boolean <span class="hljs-built_in">contains</span>(Object o);<span class="hljs-comment">//调用o的equals方法和集合中元素比较来判断是否存在</span><br><br>Iterator&lt;E&gt; <span class="hljs-built_in">iterator</span>();<br><br><span class="hljs-selector-tag">Object</span><span class="hljs-selector-attr">[]</span> toArray ();<br><br>boolean <span class="hljs-built_in">add</span>(E o);<br><br>boolean <span class="hljs-built_in">remove</span>(Object o);<br><br>boolean containsAll (Collection&lt;?&gt; c);<span class="hljs-comment">//检查集合c是否在集合里面出现</span><br><br>boolean addAll (Collection&lt;? extends E&gt; c);<br>boolean removeAll (Collection&lt;?&gt; c);<span class="hljs-comment">//</span><br>boolean retainAll (Collection&lt;?&gt; c);<span class="hljs-comment">//保留两个集合交集</span><br>void <span class="hljs-attribute">clear</span>();<br><br>boolean <span class="hljs-built_in">equals</span>(Object o);<br></code></pre></td></tr></table></figure><p><strong>常用方法的使用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Shape;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collection;<br><span class="hljs-keyword">import</span> java.util.HashSet;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shape</span>&#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br><span class="hljs-type">Collection</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>c.add(<span class="hljs-string">&quot;寻悟空&quot;</span>);<br>c.add(<span class="hljs-number">6</span>);<br>c.remove(<span class="hljs-number">6</span>);<br>System.out.println(c.contains(<span class="hljs-string">&quot;寻悟空&quot;</span>));<br>c.add(<span class="hljs-string">&quot;java&quot;</span>);<br>Collection books=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>();<br>books.add(<span class="hljs-string">&quot;轻量级javaee企业实战&quot;</span>);<br>books.add(<span class="hljs-string">&quot;疯狂java将以&quot;</span>);<br>books.add(<span class="hljs-string">&quot;寻悟空&quot;</span>);<br>c.removeAll(books);<span class="hljs-comment">//移除c中和books相同的元素</span><br>c.clear();<span class="hljs-comment">//清除所有元素</span><br>books.retainAll(c);<span class="hljs-comment">//移除books中和c不相同的元素</span><br>System.out.println(books);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用lambda表达式遍历集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Shape;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collection;<br><span class="hljs-keyword">import</span> java.util.HashSet;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shape</span>&#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br>Collection books=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>();<br>books.add(<span class="hljs-string">&quot;轻量级javaee企业实战&quot;</span>);<br>books.add(<span class="hljs-string">&quot;疯狂java讲义&quot;</span>);<br>books.add(<span class="hljs-string">&quot;疯狂安定&quot;</span>);<br>books.forEach(obj-&gt;System.out.println(<span class="hljs-string">&quot;迭代元素集合&quot;</span>+obj));<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Iterator 遍历集合元素</strong></p><p>例一</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Shape;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collection;<br><span class="hljs-keyword">import</span> java.util.HashSet;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shape</span>&#123;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br>Collection books=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>();<br>books.add(<span class="hljs-string">&quot;轻量级javaee企业实战&quot;</span>);<br>books.add(<span class="hljs-string">&quot;疯狂java讲义&quot;</span>);<br>books.add(<span class="hljs-string">&quot;疯狂安定&quot;</span>);<br>     <span class="hljs-type">Iterator</span> <span class="hljs-variable">it</span> <span class="hljs-operator">=</span>books.iterator();<br>     <span class="hljs-keyword">while</span>(it.hasNext())<br>     &#123;<br><br>     String book=(String)it.next();<br>     System.out.println(book);<br>     <span class="hljs-keyword">if</span>(books.equals(<span class="hljs-string">&quot;疯狂java讲义&quot;</span>))<br>     &#123;<br>     it.remove();<span class="hljs-comment">//从集合中删除上一次next()方法返回的元素</span><br>     <span class="hljs-comment">//books.remove();迭代过程中不能使用这个，只有Iterator来remove才行</span><br>     &#125;<br>     book=<span class="hljs-string">&quot;测试字符串&quot;</span>;<span class="hljs-comment">//对book变量赋值，不会改变集合元素本身的</span><br>     System.out.println(books);<br>     it.forEachRemaining(obj-&gt;System.out.println(<span class="hljs-string">&quot;可迭代的元素&quot;</span>+obj));<br>     <br>     <br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>例二</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br>Collection c=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>();<br>c.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;Tom&quot;</span>,<span class="hljs-number">60</span>));<br>c.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;Peter&quot;</span>,<span class="hljs-number">70</span>));<br>c.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;Bob&quot;</span>,<span class="hljs-number">80</span>));<br>Iterator i=c.iterator();<br><span class="hljs-keyword">while</span>(i.hasNext()) &#123;<br>Student s=(Student)i.next();<span class="hljs-comment">//将得到的元素强制转换为（Student）类然后就可以正常使用了</span><br>    <span class="hljs-comment">//如果这里上面的Iterator规定泛型是&lt;Student&gt;就不需要转换了</span><br>    <span class="hljs-comment">//其实其他集合也是一样，因为java无法知道集合中是什么类</span><br>System.out.println(s.getName());<br>&#125;<br><br>&#125;<br><br><br></code></pre></td></tr></table></figure><p><strong>jdk1.5用foreach循环遍历集合</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Shape;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collection;<br><span class="hljs-keyword">import</span> java.util.HashSet;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shape</span>&#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br>Collection books=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>();<br>books.add(<span class="hljs-string">&quot;轻量级javaee企业实战&quot;</span>);<br>books.add(<span class="hljs-string">&quot;疯狂java讲义&quot;</span>);<br>books.add(<span class="hljs-string">&quot;疯狂安定&quot;</span>);<br>    <span class="hljs-keyword">for</span>(Object obj:books)<br>    &#123;<br>    String book=(String)obj;<br>    System.out.println(<span class="hljs-string">&quot;book&quot;</span>);<br>    <span class="hljs-keyword">if</span>(book.equals(<span class="hljs-string">&quot;疯狂java讲义&quot;</span>))<br>    &#123;<br>    books.remove(book);<br>    &#125;<br>    &#125;<br>    System.out.println(books);<br>     <br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Predicate操作集合</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Shape;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collection;<br><span class="hljs-keyword">import</span> java.util.HashSet;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shape</span>&#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br>Collection books=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>();<br>books.add(<span class="hljs-string">&quot;轻量级javaee企业实战&quot;</span>);<br>books.add(<span class="hljs-string">&quot;疯狂java讲义&quot;</span>);<br>books.add(<span class="hljs-string">&quot;疯狂安定&quot;</span>);<br>    books.add(<span class="hljs-string">&quot;疯狂ios讲义&quot;</span>);<br>    books.add(<span class="hljs-string">&quot;疯狂ajax讲义&quot;</span>);<br>    books.add(<span class="hljs-string">&quot;疯狂andriod将以&quot;</span>);<br>    books.removeIf(ele-&gt;((String)ele).length()&lt;<span class="hljs-number">10</span>);<br>    System.out.println(books);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Shape;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collection;<br><span class="hljs-keyword">import</span> java.util.HashSet;<br><span class="hljs-keyword">import</span> java.util.function.Predicate;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shape</span>&#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br><br>Collection books=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>();<br>books.add(<span class="hljs-string">&quot;疯狂java&quot;</span>);<br>books.add(<span class="hljs-string">&quot;疯狂javajavajavajvaa&quot;</span>);<br>System.out.println(calAll(books,ele-&gt;((String)ele).contains(<span class="hljs-string">&quot;疯狂&quot;</span>)));<br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">calAll</span><span class="hljs-params">(Collection books,Predicate p)</span><br>&#123;<br><span class="hljs-type">int</span> total=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(Object obj:books)<br>&#123;<br><span class="hljs-keyword">if</span>(p.test(obj))<br>&#123;<br>total++;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> total;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="List集合"><a href="#List集合" class="headerlink" title="List集合"></a>List集合</h2><p>是一个集合，需要new实现类</p><p>特点：实现该接口的类中的元素**有顺序，可以重复</p><p>List容器中的元素都有一个对应的整数型的序号，用以记录元素在容器中的位置，可以根据序号取元素。**</p><p>主要实现类：ArrayList，LinkedList</p><p>列表：按照一定次序（对象进入的顺序）排列的·对象集，对象之间有次序关系，对象可以重复</p><p>Object get(int index);</p><p>Object set(int index, Object element);</p><p>void add(int index,Object element);</p><p>Object remove(int index);</p><p>int indexOf (Object o);</p><p>int lastIndexOf(Object o);</p><p><strong>常用方法的使用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Hello;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>&#123;<br>List books=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>books.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;轻量级javaee企业应用实战&quot;</span>));<br>books.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span> (<span class="hljs-string">&quot;疯狂java讲义&quot;</span>));<br>books.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;疯狂狂andriod讲义&quot;</span>));<br>System.out.println(books);<br>books.add(<span class="hljs-number">1</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;java讲义&quot;</span>));<span class="hljs-comment">//将新字符串对象插入在第二个位置</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;books.size();i++)<br>&#123;<br>System.out.println(books.get(i));<br>&#125;<br>books.remove(<span class="hljs-number">2</span>);<span class="hljs-comment">//删除第三个元素</span><br>System.out.println(books);<br>System.out.println(books.indexOf(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;java讲义&quot;</span>)));<span class="hljs-comment">//判断指定元素在List集合中的位置，输出1，表明位于第二位</span><br>books.set(<span class="hljs-number">1</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;疯狂java讲义&quot;</span>));<span class="hljs-comment">//将第二个元素替换成新的字符串对象</span><br>System.out.println(books);<br>System.out.println(books.subList(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>));<span class="hljs-comment">//将集合的第二个元素截取成子集合,就是第二个参数减一是结束下标</span><br>&#125;<br></code></pre></td></tr></table></figure><p>}</p><p>addAll方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br><br>ArrayList&lt;String&gt; a=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>ArrayList&lt;String&gt; b=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>a.add(<span class="hljs-string">&quot;a&quot;</span>);<br>a.add(<span class="hljs-string">&quot;b&quot;</span>);<br>a.add(<span class="hljs-string">&quot;c&quot;</span>);<br>b.add(<span class="hljs-string">&quot;a&quot;</span>);<br>b.add(<span class="hljs-string">&quot;b&quot;</span>);<br>b.add(<span class="hljs-string">&quot;c&quot;</span>);<br>a.addAll(b);<br>System.out.println(a);<br><br>&#125;<br><br>结果：[a, b, c, a, b, c]<br></code></pre></td></tr></table></figure><p><strong>LIST集合是通过equals方法判断两个对象是否一样的</strong></p><p>A类重写了equals方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Hello;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>&#123;<br>List books=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>books.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;轻量级javaee企业应用实战&quot;</span>));<br>books.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span> (<span class="hljs-string">&quot;疯狂java讲义&quot;</span>));<br>books.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;疯狂狂andriod讲义&quot;</span>));<br>books.remove(<span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>());<span class="hljs-comment">//会删除第一个元素，因为它和任意元素都可以相等</span><br>books.remove(<span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>());<span class="hljs-comment">//再次删除第一个元素</span><br>System.out.println(books);<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>List两个新增方法sort和replacell()方法</strong></p><p>sort需要一个Comparator对象来控制元素排序，程序可使用Lambda表达式作为参数</p><p>sort方法必须传入构造器</p><p>replaceAll()方法需要一个UnaryOperator来替换所有的集合元素，UnaryOperator是一个函数式接口，也可以使用Lambda作为参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Hello;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>&#123;<br>List books=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>books.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;轻量级javaee企业应用实战&quot;</span>));<br>books.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span> (<span class="hljs-string">&quot;疯狂java讲义&quot;</span>));<br>books.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;疯狂狂andriod讲义&quot;</span>));<br>        <span class="hljs-comment">//使用目标类型为Comparator的Lambda表达式对List集合排序</span><br>books.sort((o1,o2)-&gt;((String)o1).length()-((String)o2).length());<br>System.out.println(books);<br>        <span class="hljs-comment">//使用目标类型为UnaryOperator的Lambda表达式来替换集合中的所有元素</span><br>        <span class="hljs-comment">//该Lambda表达式控制使用每个字符串的长度作为新的集合元素</span><br>books.replaceAll(ele-&gt;((String)ele).length());<br>System.out.println(books);<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Compare</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparator</span>&lt;Integer&gt;&#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Integer o1, Integer o2)</span> &#123;<br><span class="hljs-keyword">return</span> o2-o1;<br>&#125;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br><br>ArrayList&lt;Integer&gt; a=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;();<br>a.add(<span class="hljs-number">1</span>);<br>a.add(<span class="hljs-number">4</span>);<br>a.add(<span class="hljs-number">3</span>);<br>Compare b=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Compare</span>();<br>a.sort(b);<br>System.out.println(a);<br><br><br>&#125;<br><br>&#125;<br>结果：[<span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><p>Arrays.List方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Hello;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>&#123;<br>List books=Arrays.asList(<span class="hljs-string">&quot;轻量级javaee企业应用实战&quot;</span>,<span class="hljs-string">&quot;疯狂java讲义&quot;</span>,<span class="hljs-string">&quot;疯狂狂andriod讲义&quot;</span>);<br>System.out.println(books.getClass());<br>books.forEach(System.out::println);<br><span class="hljs-comment">//books.add(&quot;疯狂java讲义&quot;);</span><br><span class="hljs-comment">//books.add(&quot;疯狂java&quot;);</span><br><br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>将集合转变为数组的方法</p><p>**</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span>** **<span class="hljs-keyword">static</span>** **<span class="hljs-keyword">void</span>** main(String[] args)&#123;<br><br>​    *<span class="hljs-comment">// 创建一个动态数组*</span><br>​    ArrayList&lt;String&gt; sites = **<span class="hljs-keyword">new</span>** ArrayList&lt;&gt;();<br>​    <br>​    sites.add(<span class="hljs-string">&quot;Runoob&quot;</span>);<br>​    sites.add(<span class="hljs-string">&quot;Google&quot;</span>);<br>​    sites.add(<span class="hljs-string">&quot;Wiki&quot;</span>);<br>​    sites.add(<span class="hljs-string">&quot;Taobao&quot;</span>);<br>​    System.out.println(<span class="hljs-string">&quot;网站列表: &quot;</span> + sites);<br><br>​    *<span class="hljs-comment">// 创建一个新的 String 类型的数组*</span><br>​    *<span class="hljs-comment">// 数组长度和 ArrayList 长度一样*</span><br>​    String[] arr = **<span class="hljs-keyword">new</span>** String[sites.size()];<br><br>​    *<span class="hljs-comment">// 将ArrayList对象转换成数组*</span><br>​    sites.toArray(arr);<br><br>​    *<span class="hljs-comment">// 输出所有数组的元素*</span><br>​    System.out.print(<span class="hljs-string">&quot;Array: &quot;</span>);<br>​    **<span class="hljs-keyword">for</span>**(String item:arr) &#123;<br>​      System.out.print(item+<span class="hljs-string">&quot;, &quot;</span>);<br>​    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><h3 id="子类ArrayList"><a href="#子类ArrayList" class="headerlink" title="子类ArrayList"></a>子类ArrayList</h3><p>ArrayList 类是一个可以动态修改的数组，与普通数组的区别就是它是没有固定大小的限制，我们可以添加或删除元素。</p><p>ArrayList 继承了 AbstractList ，并实现了 List 接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span><br>&#123;<br>ArrayList&lt;String&gt; sites=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>sites.add(<span class="hljs-string">&quot;google&quot;</span>);<span class="hljs-comment">//向集合中添加</span><br>sites.add(<span class="hljs-string">&quot;runoob&quot;</span>);<br>sites.add(<span class="hljs-string">&quot;taobao&quot;</span>);<br>System.out.println(sites.get(<span class="hljs-number">1</span>));<span class="hljs-comment">//得到指定下标的元素</span><br>sites.set(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;Wiki&quot;</span>);<span class="hljs-comment">//在指定下标处插入</span><br>sites.remove(<span class="hljs-number">3</span>);<span class="hljs-comment">//移除下标为3的元素</span><br>System.out.println(sites.size());<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;sites.size();i++)<br>&#123;<br>System.out.println(sites.get(i));<br>&#125;<br><span class="hljs-keyword">for</span>(String i:sites)<br>&#123;<br>System.out.println(i);<br>&#125;<br>ArrayList&lt;Integer&gt; myNumbers=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;();<br>myNumbers.add(<span class="hljs-number">10</span>);<br>myNumbers.add(<span class="hljs-number">15</span>);<br>myNumbers.add(<span class="hljs-number">20</span>);<br>myNumbers.add(<span class="hljs-number">25</span>);<br>    System.out.println(myNumbers.size());<span class="hljs-comment">//得到数组中元素的数量</span><br>Collections.sort(sites);<span class="hljs-comment">//排序</span><br><span class="hljs-keyword">for</span>(String i:sites)<br>&#123;<br>System.out.println(i);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>一个ArrayList自己的排序方法</strong></p><p>sort方法中的参数是一个比较器，下面这个例子是按照字母顺序进行排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br>ArrayList&lt;String&gt; name=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>name.add(<span class="hljs-string">&quot;a&quot;</span>);<br>name.add(<span class="hljs-string">&quot;c&quot;</span>);<br>name.add(<span class="hljs-string">&quot;b&quot;</span>);<br>name.sort(Comparator.naturalOrder());<br>System.out.println(name);<br><br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>ArrayList转数组</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br><br><br>ArrayList&lt;String&gt; list=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>list.add(<span class="hljs-string">&quot;a&quot;</span>);<br>list.add(<span class="hljs-string">&quot;b&quot;</span>);<br>list.add(<span class="hljs-string">&quot;c&quot;</span>);<br>list.add(<span class="hljs-string">&quot;d&quot;</span>);<br>list.add(<span class="hljs-string">&quot;e&quot;</span>);<br>list.add(<span class="hljs-string">&quot;f&quot;</span>);<br>list.add(<span class="hljs-string">&quot;g&quot;</span>);<br>String[] array =<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[list.size()];<br>list.toArray(array);<br><span class="hljs-keyword">for</span>(String x:list) &#123;<br>System.out.println(x);<br>&#125;<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h3><p>List接口的实现类。</p><p>特点：跟ArrayList一样，都是可变长的对象数组。</p><p>与ArrayList区别</p><p>①Vector是线程安全的，是可以同步的，运行效率低；</p><p>②ArrayList不同步，适合于单线程环境中。</p><p>public Object elementAt(int index)</p><p>public void addElement(Object obj)</p><p>public void removeElementAt(int index)</p><p>public void insertElementAt(E obj, int index)</p><p>public boolean removeElement(Object obj)</p><p>public void removeAllElements()</p><h4 id="Stack-栈"><a href="#Stack-栈" class="headerlink" title="Stack(栈)"></a>Stack(栈)</h4><p>extends Vector</p><p>后进先出，就是一个底下有底的箱子，只能从上面拿所以是后进先出</p><p>常用方法</p><p>– <strong>public Object push(E item)</strong></p><p>– <strong>public Object pop()</strong></p><p>– <strong>public Object peek()</strong></p><p>– <strong>public</strong> <strong>boolean</strong> <strong>empty()</strong></p><p>– <strong>public int search(Object o)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br>Stack s=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>();<br>s.push(<span class="hljs-string">&quot;hello&quot;</span>);<br>s.push(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<span class="hljs-comment">//往箱子里面放东西</span><br>s.push(<span class="hljs-number">100</span>);<br>s.push(<span class="hljs-number">3.14</span>);<br>System.out.println(<span class="hljs-string">&quot;弹栈前size=&quot;</span>+s.size());<br>System.out.println(s.pop());<span class="hljs-comment">//弹出箱子中最顶上的元素</span><br>System.out.println(<span class="hljs-string">&quot;弹栈后size=&quot;</span>+s.size());<br>System.out.println(s.peek());<span class="hljs-comment">//获得箱子中最顶上的元素，但是不弹出</span><br>System.out.println(<span class="hljs-string">&quot;peek操作后&quot;</span>+s.size());<br><span class="hljs-keyword">while</span>(!s.isEmpty()) &#123;<span class="hljs-comment">//判断箱子中是否是空</span><br>System.out.println(s.pop());<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>把Stack当作普通List用</strong></p><p>失去了Stack所特有的性质</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>Stack&lt;String&gt; s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;String&gt;();<br><br>s.add(<span class="hljs-string">&quot;one&quot;</span>);<br><br>s.add(<span class="hljs-string">&quot;two&quot;</span>);<br><br>s.add(<span class="hljs-string">&quot;three&quot;</span>);<br><br>s.add(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;four&quot;</span>);<br><br>s.add(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;five&quot;</span>);<br><br>System.*out*.println(s);<br><br>s.remove(<span class="hljs-string">&quot;two&quot;</span>);<br><br>System.*out*.println(s);<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="Queue集合"><a href="#Queue集合" class="headerlink" title="Queue集合"></a>Queue集合</h2><p>队列：一种先进先出（FIFO）的容器，从容器的一端放入对象，从另一端取出对象，并且放入和取出的顺序相同</p><p>常用方法</p><p>–offer()：（入队）如果可能，将指定的元素插入此队列。</p><p>–peek()，element()：在不移除的情况下返回队头。peek方法在队列为空时返回null，element方法在队列为空时抛出异常。</p><p>–poll()，remove()：移除并返回队头（出队）。poll方法在队列为空时返回null，remove方法在队头为空时抛出异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">Queue queue=<span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>();<br>queue.offer(<span class="hljs-string">&quot;hello&quot;</span>);<br>queue.offer(<span class="hljs-string">&quot;world&quot;</span>);<br>queue.offer(<span class="hljs-string">&quot;你好&quot;</span>);<br>System.out.println(queue.size());<br>String str;<br>System.out.println(queue.peek());<span class="hljs-comment">//返回当前队头的元素</span><br><span class="hljs-keyword">while</span>((str=(String)queue.poll())!=<span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//移除并返回当前队头的元素</span><br>System.out.println(str);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="PriorityQueue实现类"><a href="#PriorityQueue实现类" class="headerlink" title="PriorityQueue实现类"></a>PriorityQueue实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Hello;<br><br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>&#123;<br>PriorityQueue pq=<span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>();<br>pq.offer(<span class="hljs-number">6</span>);<br>pq.offer(-<span class="hljs-number">3</span>);<br>pq.offer(<span class="hljs-number">20</span>);<br>pq.offer(<span class="hljs-number">18</span>);<br>System.out.println(pq);<br>System.out.println(pq.poll());<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Deque接口与ArrayDeque实现类"><a href="#Deque接口与ArrayDeque实现类" class="headerlink" title="Deque接口与ArrayDeque实现类"></a>Deque接口与ArrayDeque实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Hello;<br><br><span class="hljs-keyword">import</span> java.util.ArrayDeque;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>&#123;<br>ArrayDeque stack=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayDeque</span>();<br>stack.push(<span class="hljs-string">&quot;疯狂java讲义&quot;</span>);<br>stack.push(<span class="hljs-string">&quot;轻量级java ee企业应用实战&quot;</span>);<br>System.out.println(stack.peek());<br>System.out.println(stack.pop());<br>System.out.println(stack);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="LinkedList实现类"><a href="#LinkedList实现类" class="headerlink" title="LinkedList实现类"></a>LinkedList实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Hello;<br><br><span class="hljs-keyword">import</span> java.util.ArrayDeque;<br><span class="hljs-keyword">import</span> java.util.LinkedList;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>&#123;<br>LinkedList books=<span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>();<br>books.offer(<span class="hljs-string">&quot;疯狂java讲义&quot;</span>);<br>books.push(<span class="hljs-string">&quot;轻量级java ee企业级应用实战&quot;</span>);<br>books.offerFirst(<span class="hljs-string">&quot;疯狂andriod讲义&quot;</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;books.size();i++)<br>&#123;<br>System.out.println(<span class="hljs-string">&quot;遍历中&quot;</span>+books.get(i));<br><br>&#125;<br><br>System.out.println(books.peekFirst());<br>System.out.println(books.peekLast());<br>System.out.println(books.pop());<br>System.out.println(books);<br>System.out.println(books.pollLast());<br>System.out.println(books);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>对象唯一，不会重复，元素没有顺序</p><h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><p>元素值可以使null</p><p>HashSet判断两个元素相等的标准是两个对象通过equals方法比较相等，并且两个对象的hashCode方法返回值也相等（重写两个方法的时候最好两者统一）</p><p>先判断hashCode是否相等，如果hashCode相等再去判断equals方法是否为true</p><p>只有用到Hashtable HashMap HashSet LinkedHashMap等时才要注意hashcode方法。</p><h4 id="equals方法重写的方法"><a href="#equals方法重写的方法" class="headerlink" title="equals方法重写的方法"></a>equals方法重写的方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span> &#123;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == obj)<br><br> <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><br><span class="hljs-keyword">if</span> (obj == <span class="hljs-literal">null</span>)<span class="hljs-comment">//先看看参数是不是空</span><br><br> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br><span class="hljs-keyword">if</span> (getClass() != obj.getClass())<span class="hljs-comment">//再看看参数是否是同一个类，getClass()是指获取这个类创建实例的类型，也就是获取当前类这个类型</span><br><br> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<span class="hljs-comment">//getClass方法获得的不是引用变量的类型，而是真正的类型</span><br><br><span class="hljs-keyword">final</span> <span class="hljs-type">Student</span> <span class="hljs-variable">other</span> <span class="hljs-operator">=</span> (Student) obj;<br><br><span class="hljs-keyword">if</span> (no != other.no)<br><br> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br><br> <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;no is : &quot;</span> + no;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>重写equals方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span> &#123;<br><span class="hljs-keyword">if</span>(obj==<span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//先判断是否为空</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(obj <span class="hljs-keyword">instanceof</span> Company) &#123;<span class="hljs-comment">//判断能否向下转型</span><br>Company c=(Company)obj;<br><span class="hljs-keyword">return</span> c.name.equals(name);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h3><p>实现了对Set的排序</p><p><strong>自然排序</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br>TreeSet ts=<span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>();<br>ts.add(<span class="hljs-string">&quot;YaoMing&quot;</span>);<br>ts.add(<span class="hljs-string">&quot;Kobe&quot;</span>);<br>ts.add(<span class="hljs-string">&quot;McGrand&quot;</span>);<br>ts.add(<span class="hljs-string">&quot;Jordan&quot;</span>);<br>System.out.println(ts);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>结果：[Jordan, Kobe, McGrand, YaoMing]         按照字典排序</p><p><strong>定制排序</strong></p><p><a href="http://docs.oracle.com/javase/8/docs/api/java/util/TreeSet.html">TreeSet</a>(<a href="http://docs.oracle.com/javase/8/docs/api/java/util/Comparator.html">Comparator</a>&lt;? super <a href="http://docs.oracle.com/javase/8/docs/api/java/util/TreeSet.html">E</a>&gt; comparator)</p><p>可以自己写一个构造器当作参数</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918665.png" alt="image-20220627195256296"></p><h3 id="LinkedSet"><a href="#LinkedSet" class="headerlink" title="LinkedSet"></a>LinkedSet</h3><p>就是按照插入的顺序排列元素</p><h1 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h1><h2 id="java中的Hash表"><a href="#java中的Hash表" class="headerlink" title="java中的Hash表"></a>java中的Hash表</h2><h3 id="Hash表介绍"><a href="#Hash表介绍" class="headerlink" title="Hash表介绍"></a>Hash表介绍</h3><p> 哈希表：能够通过元素快速查获找到元素的存储位置，又称为散列表。</p><p> 哈希表基本原理：通过哈希函数或散列函数将元素的关键字和元素的存储位置关联起来。由哈希函数计算出来的值称为哈希码(Hash Code)或散列索引。</p><p> 哈希表的存储空间称为哈希表的容量(Capacity)。</p><h3 id="hash表分为三类"><a href="#hash表分为三类" class="headerlink" title="hash表分为三类"></a>hash表分为三类</h3><p> java语言提供了java.util.Hashtable, java.util.HashMap, java.util.WeakHashMap三个类来提供哈希存储支持。这三者的元素都是主要由关键字和值两部分组成。</p><p> Hashtable元素的关键字和值都不允许null。HashMap和WeakHashMap的关键字和值都允许null。</p><p> Hashtable支持线程同步， HashMap和WeakHashMap不支持线程同步。</p><p> WeakHashMap会自动按一定规则检查各个元素是否常用，不常用的元素会被去除，从而被系统回收。（WeakHashMap是HashMap的子类）</p><h3 id="k-y相等判断方式"><a href="#k-y相等判断方式" class="headerlink" title="k-y相等判断方式"></a>k-y相等判断方式</h3><p>判断两个value相等，两个对象通过equals方法比较返回true即可，判断两个key相等，那equals放回true    hashcode值也相等</p><h3 id="Map元素遍历"><a href="#Map元素遍历" class="headerlink" title="Map元素遍历"></a>Map元素遍历</h3><p>Set keySet( )获取所有Key的集合</p><p>Collection values( ) 获取所有Value的集合</p><p>Set entrySet( ) 获取所有key-value对的集合</p><p>再用相应的Iterator或者for循环遍历</p><p>例一</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">HashMap&lt;String ,Integer&gt; a=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String,Integer&gt;();<br>a.put(<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-number">1</span>);<br>a.put(<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-number">2</span>);<br>Set b=a.keySet();<br>Iterator&lt;String&gt; i=b.iterator();<br><span class="hljs-keyword">while</span>(i.hasNext()) &#123;<br>String key=i.next();<br>Integer value=a.get(key);<br>System.out.println(key+<span class="hljs-string">&quot;-&quot;</span>+value+<span class="hljs-string">&quot; &quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> []args</span>) &#123;<br><br><span class="hljs-title class_">HashMap</span> &lt;<span class="hljs-title class_">String</span>,<span class="hljs-title class_">Integer</span>&gt;a=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;<span class="hljs-title class_">String</span>,<span class="hljs-title class_">Integer</span>&gt;();<br>a.<span class="hljs-title function_">put</span>(<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-number">1</span>);<br>a.<span class="hljs-title function_">put</span>(<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-number">2</span>);<br>a.<span class="hljs-title function_">put</span>(<span class="hljs-string">&quot;c&quot;</span>,<span class="hljs-number">3</span>);<br><span class="hljs-title class_">Collection</span> b=a.<span class="hljs-title function_">values</span>();<br><span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(b);<br>结果：[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><br>&#125;<br></code></pre></td></tr></table></figure><p>例二</p><p>entrySet方法介绍</p><p> Map的entrySet()方法返回一个实现Map.Entry接口的对象集合。集合中每个对象都是底层Map中一个特定的键&#x2F;值对。通过这个集合的迭代器，获得每一个条目(唯一获取方式)的键或值并对值进行更改。Map.Entry中的常用方法如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">(<span class="hljs-number">1</span>) Object <span class="hljs-title function_">getKey</span><span class="hljs-params">()</span>: 返回条目的关键字<br>　　(<span class="hljs-number">2</span>) Object <span class="hljs-title function_">getValue</span><span class="hljs-params">()</span>: 返回条目的值<br>　　(<span class="hljs-number">3</span>) Object <span class="hljs-title function_">setValue</span><span class="hljs-params">(Object value)</span>: 将相关映像中的值改为value，并且返回旧值<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[]args)</span> &#123;<br>HashMap&lt;String ,Integer&gt; a=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String,Integer&gt;();<br>a.put(<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-number">1</span>);<br>a.put(<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-number">2</span>);<br>Set b=a.entrySet();<br><span class="hljs-keyword">for</span>(Object o:b) &#123;<br>Map.Entry e=(Map.Entry)o;<br>System.out.println(e.getKey()+<span class="hljs-string">&quot;-&quot;</span>+e.getValue()+<span class="hljs-string">&quot; &quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="按照key或者value对map排序的方法"><a href="#按照key或者value对map排序的方法" class="headerlink" title="按照key或者value对map排序的方法"></a>按照key或者value对map排序的方法</h3><p>Map会根据key的大小来自动排序</p><p>因为LinekedHashMap是按照顺序添加的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">compare1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparator</span>&lt;Map.Entry&gt;&#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Map.Entry o1,Map.Entry o2)</span> &#123;<br><span class="hljs-keyword">return</span> (<span class="hljs-type">int</span>)(o2.getValue())-(<span class="hljs-type">int</span>)(o1.getValue());<span class="hljs-comment">//注意这个地方的()缺一不可</span><br>&#125;<br><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span>&#123;<br>    Scanner in=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        String a=in.nextLine();<br>        String b[]=a.split(<span class="hljs-string">&quot; &quot;</span>);<br>        Hashtable&lt;String,Integer&gt; c=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hashtable</span>&lt;String,Integer&gt;();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;b.length;i++) &#123;<br>        <span class="hljs-keyword">if</span>(c.containsKey(b[i])) &#123;<br>        c.put(b[i],c.get(b[i])+<span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>        c.put(b[i],<span class="hljs-number">1</span>);<br>        &#125;<br>        &#125;<br>        <br><br>        List list=<span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>(c.entrySet());<br>        compare1 q=<span class="hljs-keyword">new</span> <span class="hljs-title class_">compare1</span>();<br>        Collections.sort(list,q);<br>        Map sortedMap=<span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashMap</span>();<span class="hljs-comment">//这个地方必须使用LinkedHashMap</span><br>        <span class="hljs-keyword">for</span>(Iterator it=list.iterator();it.hasNext();) &#123;<br>        Map.Entry entry=(Map.Entry)it.next();<span class="hljs-comment">//这里的迭代器如果加泛型&lt;Iterator&gt;,就不用强制转换了</span><br>         sortedMap.put(entry.getKey(), entry.getValue());<br><br>&#125;<br>        Set h=sortedMap.keySet();<br>        Iterator&lt;String&gt; r=h.iterator();<br>        <span class="hljs-keyword">while</span>(r.hasNext()) &#123;<br>        String i=r.next();<br>        System.out.println(i+<span class="hljs-string">&quot;:&quot;</span>+ sortedMap.get(i));<br>        &#125;<br>        <br><br>    &#125;<br><br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>用函数法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">import</span> java.util.Map.Entry;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Compare</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparator</span>&lt;Map.Entry&gt;&#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Map.Entry o1,Map.Entry o2)</span> &#123;<br><span class="hljs-keyword">return</span> (<span class="hljs-type">int</span>)(o2.getValue())-(<span class="hljs-type">int</span>)(o1.getValue());<br>&#125;<br><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Map <span class="hljs-title function_">getMap</span><span class="hljs-params">(Map unsortedMap)</span> &#123;<br>List a=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>(unsortedMap.entrySet());<br>Compare b=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Compare</span>();<br> Collections.sort(a,b);<br>Map sortedMap=<span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashMap</span>();<span class="hljs-comment">//这里必须是LinkedHashMap</span><br>         <span class="hljs-keyword">for</span>(Iterator it=a.iterator();it.hasNext();) &#123;<br>         Map.Entry entry=(Map.Entry)it.next();<br>         sortedMap.put(entry.getKey(), entry.getValue());<br>         &#125;<br><br><span class="hljs-keyword">return</span> sortedMap;<br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br>Scanner in=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>    String a=in.nextLine();<br>    String b[]=a.split(<span class="hljs-string">&quot; &quot;</span>);<br>    Hashtable&lt;String,Integer&gt; c=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hashtable</span>&lt;String,Integer&gt;();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;b.length;i++) &#123;<br>    <span class="hljs-keyword">if</span>(c.containsKey(b[i])) &#123;<br>    c.put(b[i],c.get(b[i])+<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>    c.put(b[i],<span class="hljs-number">1</span>);<br>    &#125;<br>    &#125;<br>    Map n=getMap(c);<br>    Set i=n.keySet();<br>    Iterator&lt;String&gt; e=i.iterator();<br>    <span class="hljs-keyword">while</span>(e.hasNext()) &#123;<br>    String t=e.next();<br>    System.out.println(t+<span class="hljs-string">&quot;:&quot;</span>+n.get(t));<br>    <br>    &#125;<br>&#125;<br><br>&#125;<br>就是java是向下兼容的，如果函数返回类型是Map其实是返回的只要是Map的子类的实例化对象都可以<br>    如果函数的参数类型是Map类型，其实这个参数只要是Map子类的实例化对象都可以<br><br>        <br></code></pre></td></tr></table></figure><p>​    </p><h2 id="Hashtable集合"><a href="#Hashtable集合" class="headerlink" title="Hashtable集合"></a>Hashtable集合</h2><p>不能保证顺序</p><p><strong>Hashtable的构造方法</strong></p><table><thead><tr><th><strong>名称</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><strong>public</strong> <strong>Hashtable</strong><strong>( )</strong></td><td><strong>创建哈希表实例对象，容量为<strong><strong>11</strong></strong>，装填因子为<strong><strong>0.75</strong></strong>。</strong></td></tr><tr><td><strong>public</strong> <strong>Hashtable</strong><strong>( int</strong> <strong>initialCapacity</strong><strong>)</strong></td><td><strong>创建哈希表实例对象，容量为<strong><strong>initialCapacity</strong></strong>，装填因子为<strong><strong>0.75</strong></strong>。</strong></td></tr><tr><td><strong>public Hashtable( int  initialCapacity, float loadFactor)</strong></td><td><strong>创建哈希表实例对象，容量为<strong><strong>initialCapacity</strong></strong>，装填因子为<strong><strong>loadFactor</strong></strong>。</strong></td></tr></tbody></table><p>Hashtable ht1&#x3D;new Hashtable&lt;String, Integer&gt; ( );</p><p>Hashtable ht2&#x3D;new Hashtable( );&#x2F;&#x2F;未指定关键字和键值类型，编译会警告</p><p><strong>java.util.Hashtable的成员方法</strong></p><table><thead><tr><th><strong>名称</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><strong>public V put(K key, V value )</strong></td><td><strong>添加关键字为****key,</strong> <strong>值为<strong><strong>value</strong></strong>的元素</strong></td></tr><tr><td><strong>public V get(Object key)</strong></td><td><strong>获得由参数<strong><strong>key</strong></strong>指定的关键字所对应的元素值</strong></td></tr><tr><td><strong>public void Clear( )</strong></td><td><strong>清空整个<strong><strong>Hash</strong></strong>表</strong></td></tr><tr><td><strong>public</strong> <strong>boolean</strong> <strong>containsKey</strong><strong>(Object key)</strong></td><td><strong>判断表中是否存在关键字****key</strong></td></tr><tr><td><strong>public</strong> <strong>boolean</strong> <strong>containsValue</strong><strong>(Object value)</strong></td><td><strong>判断表中是否存在元素值****value</strong></td></tr><tr><td><strong>public boolean</strong> <strong>contains</strong><strong>(Object value)</strong></td><td><strong>判断表中是否存在元素值****value</strong></td></tr><tr><td><strong>public boolean isEmpty( )</strong></td><td><strong>判断<strong><strong>Hash</strong></strong>表是否为空</strong></td></tr><tr><td><strong>public V remove(Object key)</strong></td><td><strong>删除指定关键字<strong><strong>key</strong></strong>所对应的元素</strong></td></tr><tr><td><strong>public int size( )</strong></td><td><strong>返回<strong><strong>Hash</strong></strong>表元素的个数</strong></td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">例子<br>String []sa= &#123;<span class="hljs-string">&quot;Mary&quot;</span>,<span class="hljs-string">&quot;Tom&quot;</span>,<span class="hljs-string">&quot;John&quot;</span>,<span class="hljs-string">&quot;James&quot;</span>,<span class="hljs-string">&quot;Louis&quot;</span>,<span class="hljs-string">&quot;Jim&quot;</span>,<span class="hljs-string">&quot;Rose&quot;</span>,<span class="hljs-string">&quot;Ann&quot;</span>,<span class="hljs-string">&quot;Liza&quot;</span>,<span class="hljs-string">&quot;Betty&quot;</span>,<span class="hljs-string">&quot;Henry&quot;</span>&#125;;<br>Hashtable &lt;String ,Integer&gt; ht=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hashtable</span>&lt;String ,Integer&gt;();<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;sa.length;i++)<br>&#123;<br>ht.put(sa[i],<span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(i) );<span class="hljs-comment">//将这个key和value放入hash表中</span><br><br>&#125;<br>String s=sa[<span class="hljs-number">5</span>];<br>System.out.println(ht.get(s));<span class="hljs-comment">//获得key为参数所对应的value值</span><br>System.out.println(ht.containsKey(sa[<span class="hljs-number">5</span>]));<br>System.out.println(ht.containsValue(<span class="hljs-number">1</span>));<br>System.out.println(ht.contains(<span class="hljs-number">1</span>));<br>System.out.println(ht.isEmpty());<br>System.out.println(ht.size());<br>ht.remove(sa[<span class="hljs-number">5</span>]);<br>System.out.println(ht.size());<br></code></pre></td></tr></table></figure><p><strong>还有一个方法</strong>就是keySet() ，可以得到集合的key的一个集合**<br>        Set s &#x3D; ht.keySet();**</p><h3 id="Properties集合"><a href="#Properties集合" class="headerlink" title="Properties集合"></a>Properties集合</h3><p><strong>Properties是用来读取配置文件的（结尾为.properties的文件）</strong></p><ul><li><p><code>Properties</code>类表示一组持久的属性。  <code>Properties</code>可以保存到流中或从流中加载。 </p></li><li><p>extends Hashtable&lt;k,v&gt;   implements Map&lt;k,v&gt;</p></li><li><p>Properties集合是一个唯一和IO相结合的集合</p><p>第一条的解释</p></li><li><p>可以使用Properties集合中的方法store，把集合中的临时数据，持久化写入到硬盘中存储</p></li><li><p>可以使用Properties集合中的load，把硬盘保存的文件（键值对），读取到集合中使用</p></li><li><p>属性列表中的每个键及其对应的值都是一个字符串。</p></li><li><p>解释：</p></li><li><p>​           Properties集合是一个双列集合，key和value默认都是字符串</p></li></ul><p>Properties集合存储数据，遍历取出Properties集合中的数据</p><p>Properties结合是一个双列集合，key和value默认都是字符串</p><p>Properties集合有一些操作字符串的特有方法 </p><p>​             Object setProperty(String key,String value)其实就是调用Hashtable的方法put</p><p>​             String  getProperty(String key) 通过key找到value值，相当于Map集合中的get方法</p><p>​              Set<String> stringPropertyNames()   返回此属性列表中的一组键，其中键及其对应的值为字符串，包括默认属性列表中的不同键，如果尚未从主属性列表中找到相同名称的键。相当于Map集合中的keySet方法</p><p><strong>几个方法的基本使用</strong></p><pre><code class="hljs">//创建Properties集合对象Properties prop=new Properties();prop.setProperty(&quot;a&quot;, &quot;1&quot;);prop.setProperty(&quot;b&quot;,&quot;2&quot;);prop.setProperty(&quot;c&quot;,&quot;3&quot;);//使用stringPropertyNames把Properties集合中的键取出，存储到一个Set集合中Set&lt;String&gt; set=prop.stringPropertyNames();for(String key:set) &#123;    String value=prop.getProperty(key);    System.out.println(key+&quot;-&quot;+value);</code></pre><p><strong>Properties集合中的store方法</strong></p><p>void store(OutputStream out,String comments)</p><p>void store(Writer writer,String comments)</p><p>参数： </p><p>​              OutputStream out：字节输出流，不能写入中文</p><p>​              Writer writer  ：字符输出流，可以写中文</p><p>​              String comments：注释，解释说明保存的文件是做什么用的</p><p>​                                 不能使用中文，会产生乱码，默认是Unicode编码，而系统默认编码是GBK</p><p>使用步骤：</p><p>​              1.创建Properties集合对象，添加数据</p><p>​              2.创建字节输出流&#x2F;字符输出流对象，构造方法中绑定要输出的目的地</p><p>​                3.使用Properties集合中的方法store，把集合中的临时数据，持久化写入到硬盘中存储</p><p>​               4.释放资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>show01();<br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show01</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>   <span class="hljs-comment">//1.创建Properties集合对象，添加数据</span><br>Properties prop=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>prop.setProperty(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>);<br>prop.setProperty(<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>);<br>prop.setProperty(<span class="hljs-string">&quot;c&quot;</span>,<span class="hljs-string">&quot;3&quot;</span>);<br><span class="hljs-comment">//.创建字节输出流/字符输出流对象，构造方法中绑定要输出的目的地</span><br>FileWriter fw=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\File.txt&quot;</span>);<br><span class="hljs-comment">// 3.使用Properties集合中的方法store，把集合中的临时数据，持久化写入到硬盘中存储</span><br>prop.store(fw,<span class="hljs-string">&quot;sava data&quot;</span>);<br><span class="hljs-comment">//关闭资源</span><br>fw.close();<br>&#125;<br>文件写入结果：<br>  #sava data<br>#Fri Jul <span class="hljs-number">01</span> <span class="hljs-number">10</span>:<span class="hljs-number">34</span>:<span class="hljs-number">48</span> CST <span class="hljs-number">2022</span><br>a=<span class="hljs-number">1</span><br>b=<span class="hljs-number">2</span><br>c=<span class="hljs-number">3</span><br>上面的时间是自己加的<br></code></pre></td></tr></table></figure><p><strong>Properties集合的load方法</strong></p><p>可以使用Properties集合中的方法load，把硬盘中保存的文件（键值对），读取到集合中使用</p><p>void load(InputStream inStream)</p><p>void load(Reader reader)</p><p>参数：</p><p>​               InputStream inStream：不能读取含有中文的键值对</p><p>​               Reader reader：字符输入流，能读取含有中文的键值对</p><p>使用步骤：</p><p>​                 1.创建Properties集合对象</p><p>​                  2.使用Properites集合对象中的方法load读取到保存键值对的文件</p><p>​                   3.遍历Properties集合</p><p>注意：1.存储键值对的文件中，键与值默认的连接符号可以使用-，空格（其他符号）</p><p>​             2.存储键值对的文件中，可以使用井号进行注释，被注释的键值对不会再被读取</p><p>​              3.存键值对的文件中，键与值都默认是字符串，都不用再加引号</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> <span class="hljs-type">void</span> test2() throws <span class="hljs-keyword">Exception</span> &#123;<br>    Properties pros=<span class="hljs-built_in">new</span> Properties();<br>    FileInputStream fis=<span class="hljs-built_in">new</span> FileInputStream(&quot;./jdbc.properties&quot;);<br>    pros.<span class="hljs-keyword">load</span>(fis);<br>    String <span class="hljs-keyword">user</span>=pros.getProperty(&quot;user&quot;);<br>    String <span class="hljs-keyword">password</span>=pros.getProperty(&quot;password&quot;);<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;user=&quot;+<span class="hljs-keyword">user</span>+&quot;password=&quot;+<span class="hljs-keyword">password</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="HashMap集合"><a href="#HashMap集合" class="headerlink" title="HashMap集合"></a>HashMap集合</h2><p>不能保证顺序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Hello;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>&#123;<br>Map map=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>map.put(<span class="hljs-string">&quot;疯狂Java&quot;</span>,<span class="hljs-number">109</span>);<br>map.put(<span class="hljs-string">&quot;疯狂python&quot;</span>,<span class="hljs-number">10</span>);<br>map.put(<span class="hljs-string">&quot;疯狂ios&quot;</span>,<span class="hljs-number">79</span>);<br>map.put(<span class="hljs-string">&quot;疯狂php&quot;</span>,<span class="hljs-number">99</span>);<br>System.out.println(map.put(<span class="hljs-string">&quot;疯狂python&quot;</span>,<span class="hljs-number">99</span>));<br>System.out.println(map);<br>System.out.println(map.containsKey(<span class="hljs-string">&quot;疯狂python&quot;</span>));<br>System.out.println(map.containsValue(<span class="hljs-number">99</span>));<br><span class="hljs-keyword">for</span>(Object key:map.keySet())<br>&#123;<br>System.out.println(key+<span class="hljs-string">&quot;--&gt;&quot;</span>+map.get(key));<br><br>&#125;<br>map.remove(<span class="hljs-string">&quot;疯狂python&quot;</span>);<br>System.out.println(map);<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="LinkedHashMap实现类"><a href="#LinkedHashMap实现类" class="headerlink" title="LinkedHashMap实现类"></a>LinkedHashMap实现类</h3><p>是一种按照map的添加顺序存储的实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Hello;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.LinkedHashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>&#123;<br>LinkedHashMap scores=<span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashMap</span>();<br>scores.put(<span class="hljs-string">&quot;语文&quot;</span>,<span class="hljs-number">80</span>);<br>scores.put(<span class="hljs-string">&quot;英语&quot;</span>,<span class="hljs-number">82</span>);<br>scores.put(<span class="hljs-string">&quot;数学&quot;</span>,<span class="hljs-number">76</span>);<br>scores.forEach((key,value)-&gt;System.out.println(key+<span class="hljs-string">&quot;--&gt;&quot;</span>+value));<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="实用类"><a href="#实用类" class="headerlink" title="实用类"></a>实用类</h1><h2 id="Collections类"><a href="#Collections类" class="headerlink" title="Collections类"></a>Collections类</h2><p>提供了List容器操作的静态方法</p><p>void sort(List list);&#x2F;&#x2F;对List容器内元素排序，默认升序</p><p>void reverse(List list);&#x2F;&#x2F;对List容器内的对象进行逆序排列</p><p>void copy(List dest,List src);</p><p>&#x2F;&#x2F;把src中List容器内容拷贝到dest List容器</p><p>int binarySearch(List list, Object key);</p><p>&#x2F;&#x2F;对顺序的List容器，用折半查找方法查找指定对象，返回对应key元素的下标</p><p>void shuffle(List);&#x2F;&#x2F;对List容器内的对象进行随机排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[]args)</span> &#123;<br>List list1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>();<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">9</span>;i++) &#123;<br>list1.add(<span class="hljs-string">&quot;a&quot;</span>+i);<br>&#125;<br>System.out.println(list1);<br>Collections.reverse(list1);<br>System.out.println(list1);<br>Collections.shuffle(list1);<br>System.out.println(list1);<br>Collections.sort(list1);<br>System.out.println(Collections.binarySearch(list1,<span class="hljs-string">&quot;a2&quot;</span>));<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Collections-sort-方法"><a href="#Collections-sort-方法" class="headerlink" title="Collections.sort()方法"></a>Collections.sort()方法</h3><p>public static <T> void sort(List<T> list, Comparator&lt;? super T&gt; c)</p><p>List(接口)就是指List类型,那么也就是说只能对集合的具体类的Arraylist和LinkedList这两种类型进行排序,由于接口也能向上转型,光论排序的内容的话其它各种自建类型都行。</p><p>第一种方法</p><p>在日常开发中，很多时候都需要对一些数据进行排序的操作。然而那些数据一般都是放在一个集合中如：Map ，Set ，List 等集合中。他们都提共了一个排序方法 sort()，要对数据排序直接使用这个方法就行，但是要保证集合中的对象是 可比较的。</p><p>怎么让一个对象是 可比较的，那就需要该对象实现 Comparable<T> 接口啦。然后重写里面的<br>compareTo()方法</p><ul><li>&#96;&#96;&#96;<br>public interface Comparable<T><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><br>当实现Comparable类的时候也是不规定泛型就是Object，且下面的compareTo方法中的参数类型要和他一样<br><br><br><br>```java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> implements Comparable&lt;Student&gt; &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> name;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">(<span class="hljs-type">int</span> id, <span class="hljs-type">int</span> age, <span class="hljs-type">String</span> name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>        <span class="hljs-keyword">this</span>.age = age;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br>    @<span class="hljs-function">Override</span><br><span class="hljs-function">    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title">compareTo</span><span class="hljs-params">(Student o)</span> </span>&#123;<br>        <span class="hljs-comment">//降序</span><br>        <span class="hljs-comment">//return o.age - this.age;</span><br>        <span class="hljs-comment">//升序</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.age - o.age;        <br>    &#125;<br>    @<span class="hljs-function">Override</span><br><span class="hljs-function">    <span class="hljs-keyword">public</span> <span class="hljs-type">String</span> <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>调用compareTo方法后负数时，当前对象在前面，正数时当前对象在后面，0时位置不变</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Student o1)</span> &#123;<br><span class="hljs-keyword">if</span>(o1.getScore()==<span class="hljs-built_in">this</span>.getScore()) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.id.compareTo(o1.id);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> o1.getScore()-<span class="hljs-built_in">this</span>.getScore();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>先按照成绩降序排序，成绩相同按照学号升序排序</p><p>第二种方法</p><ul><li>&#96;&#96;&#96;<br>public interface Comparator<T><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><br>实现Comparator接口的时候，如果没有规定泛型默认是Object，同时T必须和下面compare方法中的参数类型一样<br><br>自己搞一个构造器，重写compare方法当作Collections.sort(第二个参数)<br><br>```java<br><span class="hljs-keyword">class</span> <span class="hljs-symbol">compare</span> <span class="hljs-symbol">implements</span> <span class="hljs-symbol">Comparator</span>&lt;<span class="hljs-symbol">Integer</span>&gt;&#123;<br><br>@Override<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> compare(Integer o1, Integer o2) &#123;<br>                   <span class="hljs-keyword">return</span> o1-o2;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>第三种直接倒叙的方法</p><p>Collection.sort的第二个参数</p><p>如果要降序呢?可以传入Collections.reverseOrder(), 返回一个倒叙的Comparator对象,</p><h2 id="Arrays类"><a href="#Arrays类" class="headerlink" title="Arrays类"></a>Arrays类</h2><p>定义了多种数组操作的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">Integer[]a= &#123;<span class="hljs-number">3</span>,<span class="hljs-number">25</span>,<span class="hljs-number">12</span>,<span class="hljs-number">79</span>,<span class="hljs-number">48</span>&#125;;<br>System.out.println(Arrays.toString(a));<span class="hljs-comment">//输出数组</span><br>Arrays.sort(a);<span class="hljs-comment">//对数组中元素进行排序</span><br>System.out.println(Arrays.toString(a));<span class="hljs-comment">//输出数组以[3,25,12,79,48]</span><br><span class="hljs-type">int</span> idx=Arrays.binarySearch(a,<span class="hljs-number">25</span>);<span class="hljs-comment">//返回25元素所对应的下标</span><br>System.out.println(idx);<br>List list=Arrays.asList(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>);<span class="hljs-comment">//将其转换为List集合</span><br>返回值是一个List<br><span class="hljs-comment">//public static &lt;T&gt; List&lt;T&gt; asList(T... a) </span><br>System.out.println(list);<br></code></pre></td></tr></table></figure><p>其实Arrays.toString的本质是调用数组中所有对象的toString方法然后用逗号隔开然后用[   ]框起来</p><h1 id="java异常机制的处理"><a href="#java异常机制的处理" class="headerlink" title="java异常机制的处理"></a>java异常机制的处理</h1><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><p>：指程序中出现的不期而至的各种状况，如文件找不到，网络连接失败，非法参数等等；</p><p>java把异常当作对象来处理，并定义一个基类java.lang.Throwable作为所有异常的超类</p><p>在javaAPI中已经定一个许多异常类，这些异常分为两类，错误Error和异常Exception</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918060.png" alt="image-20220615163131796"></p><p>这个图中只是举了例子   </p><ol><li><strong>错误：</strong><br>一般指程序运行时遇到的硬件或操作系统的错误，如内存溢出、不能读取硬盘分区、 硬 件驱动错误等。这是致命的，将导致程序无法运行，<strong>同时也是程序本身不能处理 的。错误大都是jvm的问题</strong></li></ol><p><strong>2.异常：</strong></p><p><strong>异常大都是语法问题；</strong></p><p>运行异常和编译异常。</p><p>运行异常：顾名思义，是程序运行时才会出现的异常。运行异常是java.lang.RuntimeException类及其子类的统称。如NullPointerException（空指针异常）、IndexOutOfBoundsException（数组下标越界异常）等。运行异常一般是由程序逻辑错误导致的，可以通过捕获处理或向上抛出。运行异常的特点是Java编译器不会检查它，也就是说，当程序中可能出现运行异常，也会被编译通过。<br><strong>编译异常：顾名思义，是程序编译时就会出现的异常。编译异常是java.lang.RuntimeException以外的异常。编译异常必须进行处理，如果不处理，程序就不能编译通过。</strong></p><p><strong>异常可以分为两类：1.运行时异常 RuntimeException</strong></p><p><strong>2.其他的异常都属于非运行时异常</strong></p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918813.png" alt="image-20220615163444672"></p><h3 id="异常处理机制"><a href="#异常处理机制" class="headerlink" title="异常处理机制"></a>异常处理机制</h3><p>例1</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs abnf">int a<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-comment">;</span><br>   int b<span class="hljs-operator">=</span><span class="hljs-number">0</span><span class="hljs-comment">;</span><br>   try &#123;//try监控区域<br>   System.out.println(a/b)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">&#125;catch(ArithmeticException e)//这个地方的错误必须是和try中出现的错误类型相同，否则没什么用&#123;//catch 捕获异常    System.out.println(&quot;程序出现异常，变量b不能为0&quot;);&#125;finally &#123;//处理善后工作，无论是否报错这个finally都是会执行的，无论怎样都会执行，报其他错也会执行    System.out.println(&quot;finally&quot;);    //finally可以不要finally，假设IO时读取文件关闭资源关闭时可以用&#125;</code></pre><p>例2</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">String</span> args[])</span></span>&#123;<br>   <span class="hljs-type">int</span> a=<span class="hljs-number">1</span>;<br>   <span class="hljs-type">int</span> b=<span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">try</span> &#123;<span class="hljs-comment">//try监控区域</span><br>   <span class="hljs-keyword">new</span> <span class="hljs-built_in">Main</span>().<span class="hljs-built_in">a</span>();<span class="hljs-comment">//这是一个栈溢出的异常</span><br>   <br></code></pre></td></tr></table></figure><pre><code class="hljs">&#125;catch(Error e)//这个地方如果时Error和Throwable都可以，就是根据上面那个表格，cathch括号里错误类型的子类也可以被捕获&#123;//catch 捕获异常    System.out.println(&quot;程序出现异常，变量b不能为0&quot;);&#125;finally &#123;//处理善后工作，无论是否报错这个finally都是会执行的，无论怎样都会执行，报其他错也会执行    System.out.println(&quot;finally&quot;);    //finally可以不要finally，假设IO时读取文件关闭资源关闭时可以用&#125;&#125;public void a() &#123;    b();&#125;public void b() &#123;    a();    &#125;</code></pre><p>例3</p><p>有多个catch的异常处理机制，只能执行一个catch，所以越往下catch括号里的错误类型越高层，从小到大去捕获</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">try</span> &#123;<span class="hljs-comment">//try监控区域</span><br>   <span class="hljs-keyword">new</span> <span class="hljs-type">Main</span>().a();<span class="hljs-comment">//这是一个栈溢出的异常</span><br>   <br></code></pre></td></tr></table></figure><pre><code class="hljs">&#125;catch(Error e)//这个地方的错误必须是和try中出现的错误类型相同，否则没什么用&#123;//catch 捕获异常    System.out.println(&quot;程序出现异常，变量b不能为0&quot;);&#125;catch(Exception e)&#123;    System.out.println(&quot;exception&quot;);&#125;catch(Throwable e)&#123;    System.out.println(&quot;throwable&quot;);&#125;finally &#123;//处理善后工作，无论是否报错这个finally都是会执行的，无论怎样都会执行，报其他错也会执行    System.out.println(&quot;finally&quot;);    //finally可以不要finally，假设IO时读取文件关闭资源关闭时可以用&#125;</code></pre><p>例四</p><p>throw和throws的用法，是用来主动抛出异常</p><pre><code class="hljs">public void test(int a,int b) throws ArithmeticException&#123;//有throws就是在调用这个方法的时候要对这个异常进行捕获，也就是下面使用这个trycatch    /*if(b==0)    &#123;        throw new ArithmeticException();//主动的抛出异常，一般在方法中使用    &#125;*/&#125;public static void main(String[] args) &#123;    try &#123;    new Hello().test(1,0);    &#125;    catch(ArithmeticException e)&#123;        e.printStackTrace();    &#125;&#125;</code></pre><p>不用throws的话就是要在throw那个地方去进行一个异常捕获</p><h3 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h3><p>exception类能被继承的常用方法：</p><p>public void printStackTrace()</p><p>public String toString()</p><p>public String getMessage()</p><p>除内置的异常类可以描述大部分异常情况，除此之外，用户还可以自定义异常，用户自定义异常类，只需继承Exception类即可；</p><p>1.创建自定义异常类</p><p>2.在方法中通过throw关键字抛出异常对象</p><p>3.如果在当前抛出异常的方法中处理异常，可以使用try-catch语句捕获并处理；否则在方法的声明处通过throws关键字指明要抛出给方法调用者的异常，继续进行下一步操作</p><p>4.再出现异常方法的调用者捕获并处理异常</p><p>例子</p><p>自定义的异常类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Main;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Exception</span><br>&#123;<br><span class="hljs-comment">//传递数字大于10</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> detail;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">MyException</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> &#123;<br><span class="hljs-built_in">this</span>.detail=a;<br>&#125;<br><br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;MyException&#123;&quot;</span>+detail+<span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> <span class="hljs-keyword">throws</span> MyException&#123;<br>System.out.println(<span class="hljs-string">&quot;传递的参数为: &quot;</span>+a);<br><span class="hljs-keyword">if</span>(a&gt;<span class="hljs-number">10</span>)<br>&#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyException</span>(a)<span class="hljs-comment">//抛出</span><br>&#125;<br>System.out.println(<span class="hljs-string">&quot;ok&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>&#123;<br><span class="hljs-keyword">try</span> &#123;<br>test(<span class="hljs-number">11</span>);<br>&#125;<br><span class="hljs-keyword">catch</span>(MyException e)&#123;<br>System.out.println(<span class="hljs-string">&quot;MyException=&gt;&quot;</span>+e);<span class="hljs-comment">//这是调用e类中的toString方法</span><br>&#125;<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs scala"><br>### 自定义异常的常用格式<br><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Exception</span></span>&#123;<br><br>public <span class="hljs-type">MyException</span>()&#123;&#125;<br><br>public <span class="hljs-type">MyException</span>(<span class="hljs-type">String</span> msg)&#123;<br><br><span class="hljs-keyword">super</span>(msg);<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>ATM</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package Main;<br>import java.util.Scanner;<br><span class="hljs-keyword">class</span> <span class="hljs-title">NoMoney</span> <span class="hljs-title">extends</span> <span class="hljs-title">Exception</span> &#123;<br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">NoMoney</span>()</span> &#123;<br>            <br><br>            &#125;<br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">NoMoney</span>(<span class="hljs-params">String msg</span>)</span> &#123;<br>            super(msg);<span class="hljs-comment">//构造方法传报错信息</span><br>            &#125;<br>           <span class="hljs-comment">/* public String toString () &#123;</span><br><span class="hljs-comment">            return &quot;您的余额不足，您当前余额为&quot;+Main.money;</span><br><span class="hljs-comment">            &#125;*/</span><br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">double</span> money=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deposit</span>(<span class="hljs-params"><span class="hljs-built_in">double</span> a</span>)</span> &#123;<br><span class="hljs-keyword">this</span>.money+=a;<br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;您的当前余额为&quot;</span>+<span class="hljs-keyword">this</span>.money);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">query</span>()</span> &#123;<br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;您的当前余额为&quot;</span>+<span class="hljs-keyword">this</span>.money);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">withdraw</span>(<span class="hljs-params"><span class="hljs-built_in">double</span> a</span>) throws NoMoney</span> &#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.money&lt;a) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NoMoney(<span class="hljs-string">&quot;余额不足&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String []args</span>)</span> &#123;<br><span class="hljs-built_in">int</span> index=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br><span class="hljs-keyword">if</span>(index==<span class="hljs-number">0</span>) &#123;System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;您可以输入 查询余额,取款,存款,退出&quot;</span>);&#125;<br>index++;<br>Scanner <span class="hljs-keyword">in</span>=<span class="hljs-keyword">new</span> Scanner(System.<span class="hljs-keyword">in</span>);<br>String str=<span class="hljs-keyword">in</span>.nextLine();<br>String str1=<span class="hljs-string">&quot;查询余额&quot;</span>;<br>String str2=<span class="hljs-string">&quot;取款&quot;</span>;<br>String str3=<span class="hljs-string">&quot;存款&quot;</span>;<br>String str4=<span class="hljs-string">&quot;退出&quot;</span>;<br>Main discount =<span class="hljs-keyword">new</span> Main();<br><span class="hljs-keyword">if</span>(str.<span class="hljs-keyword">equals</span>(str1))&#123;<br>discount.query();<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(str.<span class="hljs-keyword">equals</span>(str2))&#123;<br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;您要取出的金额是&quot;</span>);<br><span class="hljs-built_in">double</span> count =<span class="hljs-keyword">in</span>.nextDouble();<br><span class="hljs-keyword">try</span> &#123;<br>discount.withdraw(count);<br>Main.money=Main.money-count;<br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;您当前的余额是&quot;</span>+Main.money);<br>&#125;<br><span class="hljs-keyword">catch</span>(NoMoney e)&#123;<br><span class="hljs-comment">//System.out.println(&quot;您当前的余额不足,您当前的余额是&quot;+Main.money);</span><br><span class="hljs-comment">/*System.out.println(e.toString());</span><br><span class="hljs-comment">continue;*/</span><br>                 e.printStackTrace();<span class="hljs-comment">//打印报错信息和堆栈信息</span><br>                 System.<span class="hljs-keyword">out</span>.println(e.getMessage());<span class="hljs-comment">//打印获得的报错信息</span><br>                                                               <br><br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(str.<span class="hljs-keyword">equals</span>(str3)) &#123;<br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;您要存入的金额是&quot;</span>);<br><span class="hljs-built_in">double</span> count=<span class="hljs-keyword">in</span>.nextDouble();<br>discount.deposit(count);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(str.<span class="hljs-keyword">equals</span>(str4))&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;输入内容有问题&quot;</span>);<br><span class="hljs-keyword">continue</span>;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-meta"># </span><br></code></pre></td></tr></table></figure><h3 id="异常语句的执行顺序分析"><a href="#异常语句的执行顺序分析" class="headerlink" title="异常语句的执行顺序分析"></a>异常语句的执行顺序分析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span>&#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-keyword">return</span> a+b;<br>        &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>            System.out.println(“<span class="hljs-keyword">catch</span> 语句块”);<br>        &#125;<span class="hljs-keyword">finally</span>&#123;<br>            System.out.println(“<span class="hljs-keyword">finally</span> 语句块”);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">Demo</span> <span class="hljs-variable">demo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Demo</span>();<br>        System.out.println(“和是：”+demo.add(<span class="hljs-number">9</span>,<span class="hljs-number">34</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行结果：</p><p>finally 语句块<br>和是：43</p><p>调用add方法之后一直等到finally调用完才返回到主函数</p><h1 id="java中的泛型"><a href="#java中的泛型" class="headerlink" title="java中的泛型"></a>java中的泛型</h1><p>泛型初体验</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//编译期间检查类型</span><br><span class="hljs-comment">//减少了数据类型的转换</span><br>ArrayList&lt;String&gt; strList=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>strList.add(<span class="hljs-string">&quot;a&quot;</span>);<br>strList.add(<span class="hljs-string">&quot;b&quot;</span>);<br>strList.add(<span class="hljs-string">&quot;c&quot;</span>);<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;strList.size();i++)<br>&#123;<br>String s=strList.get(i);<br>System.out.println(s);<br>&#125;<br>ArrayList&lt;Integer&gt; intList=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>intList.add(<span class="hljs-number">100</span>);<br>intList.add(<span class="hljs-number">200</span>);<br>intList.add(<span class="hljs-number">300</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;intList.size();i++)<br>&#123;<br><span class="hljs-type">int</span> num=intList.get(i);<br>System.out.println(num);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="泛型类的创建"><a href="#泛型类的创建" class="headerlink" title="泛型类的创建"></a>泛型类的创建</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*泛型类的定义</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * &lt;T&gt;泛型标识--类型形参</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * T 创建对象的时候里指定具体的数据类型</span><br><span class="hljs-comment">   */</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Generic</span> &lt;T&gt;&#123;<br>   <span class="hljs-comment">//T，是由外部使用类的时候来指定</span><br>         <span class="hljs-keyword">private</span> T key;<br>         <span class="hljs-keyword">public</span> <span class="hljs-title function_">Generic</span><span class="hljs-params">(T key)</span> &#123;<br>         <span class="hljs-built_in">this</span>.key=key;<br>         &#125;<br>         <span class="hljs-keyword">public</span> T <span class="hljs-title function_">getKey</span><span class="hljs-params">()</span> &#123;<br>         <span class="hljs-keyword">return</span> key;<br>         &#125;<br>         <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setKey</span><span class="hljs-params">(T key)</span> &#123;<br>         <span class="hljs-built_in">this</span>.key=key;<br>         &#125;<br><br>         <span class="hljs-meta">@Override</span><br>         <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>         <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Generic&#123;&quot;</span>+<span class="hljs-string">&quot;key=&quot;</span>+key+<span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>         &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>泛型类使用语法：</p><p>类名&lt;具体的数据类型&gt; 对象名&#x3D;new 类名&lt;具体的数据类型&gt;();</p><p>或者   类名&lt;具体的数据类型&gt; 对象名&#x3D;new 类名&lt;&gt;();</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> []args</span>)<br>&#123;<br><span class="hljs-comment">//泛型类在创建对象的时候，来指定操作的具体的数据类型</span><br><span class="hljs-title class_">Generic</span>&lt;<span class="hljs-title class_">String</span>&gt; strGeneric=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Generic</span>&lt;&gt;(<span class="hljs-string">&quot;赵梓皓&quot;</span>);<br><span class="hljs-title class_">String</span> key1=strGeneric.<span class="hljs-title function_">getKey</span>();<br><span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;key1:&quot;</span>+key1);<br></code></pre></td></tr></table></figure><pre><code class="hljs">    Generic&lt;Integer&gt; intGeneric =new Generic&lt;&gt;(123);       int key=intGeneric.getKey();       System.out.println(&quot;key:&quot;+key);      //泛型类在创建对象的时候，没有指定类型，将按照Object类型来操作       Generic generic =new Generic(&quot;ABC&quot;);       Object key3=generic.getKey();       System.out.println(&quot;key3:&quot;+key3);       //泛型类不支持基本数据类型      // Generic &lt;int&gt; generic2=new Generic &lt;int&gt;(100);       //同一泛型类，根据不同的数据类型创建的对象，本质上是同一类型，是Generic类型       System.out.println(intGeneric.getClass());       System.out.println(strGeneric.getClass());       System.out.println(intGeneric.getClass()==strGeneric.getClass());&#125;</code></pre><p>注意事项：泛型类，如果没有指定具体的数据类型，此时，操作类型是Object</p><p>2.泛型的类型参数只能是类类型，不能是基本数据类型</p><p>3.泛型类型在逻辑上可以看成是多个不同的类型，但实际上都是相同类型</p><h3 id="泛型类的使用"><a href="#泛型类的使用" class="headerlink" title="泛型类的使用"></a>泛型类的使用</h3><p><strong>抽奖器泛型类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductGetter</span> &lt;T&gt; &#123;<br>Random random=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br><span class="hljs-comment">//奖品</span><br><span class="hljs-keyword">private</span> T product;<br><span class="hljs-comment">//奖品池</span><br>ArrayList &lt;T&gt; list=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;T&gt;();<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addProduct</span><span class="hljs-params">(T t)</span> &#123;<br>list.add(t);<br>&#125;<br><span class="hljs-comment">//抽奖</span><br><span class="hljs-keyword">public</span> T <span class="hljs-title function_">getProduct</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> list.get(random.nextInt(list.size()));<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>抽奖器使用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br><span class="hljs-keyword">public</span> String b=<span class="hljs-string">&quot;100&quot;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span><br>&#123;<br><span class="hljs-comment">//创建抽奖器对象，指定数据类型</span><br>ProductGetter&lt;String&gt; stringProductGetter=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductGetter</span>&lt;&gt;();<br>String[] strProducts= &#123;<span class="hljs-string">&quot;苹果手机&quot;</span>,<span class="hljs-string">&quot;华为手机&quot;</span>,<span class="hljs-string">&quot;扫地机器人&quot;</span>,<span class="hljs-string">&quot;咖啡机&quot;</span>&#125;;<br><span class="hljs-comment">//给抽奖器中，填充奖品</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;strProducts.length;i++)<br>&#123;<br>stringProductGetter.addProduct(strProducts[i]);<br>&#125;<br><span class="hljs-comment">//抽奖</span><br>String product1=stringProductGetter.getProduct();<br>System.out.println(<span class="hljs-string">&quot;恭喜您，你抽中了&quot;</span>+product1);<br><br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="泛型类派生子类"><a href="#泛型类派生子类" class="headerlink" title="泛型类派生子类"></a>泛型类派生子类</h3><p>1.子类也是泛型类，子类和父类的泛型类型一致</p><p>class ChildGeneric<T> extends Generic<T></p><p>2.子类不是泛型类，父类要明确泛型的数据类型</p><p>class ChildGeneric extends Generic<String></p><p>例一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">父类<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Parent</span> &lt;E&gt; &#123;<br><span class="hljs-keyword">private</span> E value;<br><span class="hljs-keyword">public</span> E <span class="hljs-title function_">getValue</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> value;<br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(E value)</span> &#123;<br><span class="hljs-built_in">this</span>.value=value;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">子类<br>    <span class="hljs-comment">//子类中可以泛型扩展，但必须要有一个泛型和父类中的一样</span><br>    <span class="hljs-comment">//泛型类派生子类，子类也是泛型类的情况时，子类的泛型标识要和父类一致</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChildFirst</span>&lt;T&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Parent</span>&lt;T&gt; &#123;<br>              <span class="hljs-meta">@Override</span><br>              <span class="hljs-keyword">public</span> T <span class="hljs-title function_">getValue</span><span class="hljs-params">()</span> &#123;<br>              <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.getValue();<br>              &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">测试<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span><br>&#123;<br>ChildFirst&lt;String&gt; childFirst=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChildFirst</span>&lt;String&gt;();<br>childFirst.setValue(<span class="hljs-string">&quot;abc&quot;</span>);<br>String value=childFirst.getValue();<br>System.out.println(value);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>例二</p><ul><li>&#96;&#96;&#96;java<br>&#x2F;*<br> 子类<ul><li>当泛型类派生自类的时候，如果子类不是泛型类那么父类要明确数据类型<br>*&#x2F;<br>public class ChildFirst extends Parent<String> {<br>      @Override<br>   public String getValue() {<br>       return super.getValue();<br>   }<br>}<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"> * 测试<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span><br>&#123;<br>ChildFirst childfirst=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChildFirst</span>();<br>childfirst.setValue(<span class="hljs-string">&quot;abc&quot;</span>);<br> String value1=childfirst.getValue();<br> System.out.println(value1);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h3><p> <strong>1.泛型接口的实现类不是泛型类，接口要明确数据类型</strong></p><p> 泛型接口</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">* <span class="hljs-comment">/*</span><br><span class="hljs-comment">   * 泛型接口</span><br><span class="hljs-comment">     */</span><br>     <span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Generator</span>&lt;T&gt; &#123;<br>     T <span class="hljs-title function_">getKey</span><span class="hljs-params">()</span>;<br>     &#125;<br><br></code></pre></td></tr></table></figure><p> 子类</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Apple</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Generator</span>&lt;<span class="hljs-title class_">String</span>&gt;&#123;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 实现泛型接口的类，不是泛型类，需要明确实现泛型接口的数据类型</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getKey</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello generic&quot;</span>;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p> 测试</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span><br>&#123;<br>            Apple apple=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Apple</span>();<br>            String key=apple.getKey();<br>            System.out.println(key);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>  <strong>2.实现类也是泛型类，实现类和接口的泛型类型要一致</strong></p><pre><code class="hljs">  /*子类</code></pre><ul><li><pre><code class="java"><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><br>* 泛型接口的实现类是一个泛型类，那么要保证实现接口的泛型类泛型标识包含泛型接口的泛型标识<br>  */<br>     <span class="hljs-comment">//实现类的泛型标识必须和接口的一样</span><br>     <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-symbol">Apple</span>&lt;<span class="hljs-symbol">T,<span class="hljs-symbol">E</span></span>&gt; <span class="hljs-symbol">implements</span> <span class="hljs-symbol">Generator</span>&lt;<span class="hljs-symbol">T</span>&gt;&#123;<br>      <span class="hljs-keyword">private</span> T key;<br>      <span class="hljs-keyword">private</span> E value;<br>     <span class="hljs-keyword">public</span> Apple(T key,E value)&#123;<br>     <span class="hljs-keyword">this</span>.key=key;<br>     <span class="hljs-keyword">this</span>.value=value;<br>     &#125;<br>     @Override<br>     <span class="hljs-keyword">public</span> T getKey() &#123;<br>     <span class="hljs-keyword">return</span> key;<br>     &#125;<br>     <span class="hljs-keyword">public</span> E getValue() &#123;<br>     <span class="hljs-keyword">return</span> value;<br>     &#125;<br><br>  &#125;<br><br></code></pre></td></tr></table></figure>  <figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>* ```<br>  <span class="hljs-comment">/*泛型类</span><br></code></pre></td></tr></table></figure></code></pre></li><li><p>泛型接口<br>*&#x2F;<br>public interface Generator<T> {<br>T getKey();<br>}</p></li></ul> <figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs arduino"> <br> 实现类<br><br>```java<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">String</span> []args)</span></span><br><span class="hljs-function"></span>&#123;<br>          Apple&lt;<span class="hljs-type">String</span>,Integer&gt; apple=<span class="hljs-keyword">new</span> Apple&lt;&gt;(<span class="hljs-string">&quot;abc&quot;</span>,<span class="hljs-number">100</span>);<br>          <span class="hljs-type">String</span> a=apple.<span class="hljs-built_in">getKey</span>();<br>          <span class="hljs-type">int</span> b=apple.<span class="hljs-built_in">getValue</span>();<br>          System.out.<span class="hljs-built_in">println</span>(a+b);<br>          <br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h3><figure class="highlight bnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bnf">修饰符 <span class="hljs-attribute">&lt;T,E,...&gt;</span> 返回值类型 方法名(形参列表) &#123;<br><br>方法体<br><br>&#125;<br></code></pre></td></tr></table></figure><p>泛型类</p><ul><li><p>&#96;&#96;&#96;java<br>import java.util.ArrayList;<br> import java.util.Random;</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ProductGetter</span> &lt;<span class="hljs-title">T</span>&gt; &#123;<br>Random random=<span class="hljs-keyword">new</span> Random();<br><span class="hljs-comment">//奖品</span><br><span class="hljs-keyword">private</span> T product;<br><span class="hljs-comment">//奖品池</span><br>ArrayList &lt;T&gt; list=<span class="hljs-keyword">new</span> ArrayList&lt;T&gt;();<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addProduct</span>(<span class="hljs-params">T t</span>)</span> &#123;<br>list.<span class="hljs-keyword">add</span>(t);<br>&#125;<br><span class="hljs-comment">//抽奖</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">getProduct</span>()</span> &#123;<span class="hljs-comment">//这都不是泛型方法，是用泛型的成员方法</span><br><span class="hljs-keyword">return</span> list.<span class="hljs-keyword">get</span>(random.nextInt(list.size()));<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * 定义泛型方法</span><br><span class="hljs-comment"> * 这里定义的就是一个泛型方法，有了&lt;E&gt;泛型标识，方法里就可以用这个泛型标识，具体类型由调用方法的时候来指定</span><br><span class="hljs-comment">   */</span><br>   <span class="hljs-keyword">public</span> &lt;E&gt; <span class="hljs-function">E <span class="hljs-title">getProduct</span>(<span class="hljs-params">ArrayList&lt;E&gt; list</span>)</span> &#123;<span class="hljs-comment">//这个泛型方法的类型是独立于泛型类的</span><br>   <span class="hljs-keyword">return</span> list.<span class="hljs-keyword">get</span>(random.nextInt(list.size()));<br>   &#125;<br>   &#125;<br><br></code></pre></td></tr></table></figure></li></ul><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span><br>&#123;<br>    ProductGetter&lt;Integer&gt; productGetter=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductGetter</span>&lt;&gt;();<br>    ArrayList&lt;String&gt; strList=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    strList.add(<span class="hljs-string">&quot;笔记本&quot;</span>);<br>    strList.add(<span class="hljs-string">&quot;手机&quot;</span>);<br>    <span class="hljs-comment">//这是对泛型方法的调用，类型是通过调用方法的时候来制定的，这个地方就是指定E类型为String</span><br>    String product1=productGetter.getProduct(strList);<br>System.out.println(product1);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> 注意问题：</p><p> 1.如果一个普通的成员方法用了类的这个泛型类型，是不能用static来修饰的</p><p> 2.如果是泛型方法可以支持静态</p><p><strong>静态类型的泛型方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * 静态类型的泛型方法，采用多个泛型类型</span><br><span class="hljs-comment">   */</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;E,T,K&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">printtype</span><span class="hljs-params">(E e,T t,K k)</span><br>   &#123;<br>   System.out.println(t.getClass());<br>   System.out.println(e.getClass());<br>   System.out.println(k.getClass());<br>   &#125;<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br>ProductGetter.printtype(<span class="hljs-number">100</span>,<span class="hljs-string">&quot;java&quot;</span>,<span class="hljs-literal">true</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>泛型方法与可变参数</strong></p><p>例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//因为参数的数目是可以变化的，所以可以形成数组</span><br><span class="hljs-comment">//泛型方法对可变参数的支持</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;E&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(E...e)</span> &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;e.length;i++) &#123;<br>System.out.println(e[i]);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br>ProductGetter.print(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：泛型方法能使方法独立于类而产生变化</p><p>如果static方法要使用泛型能力，就必须使其成为泛型方法</p><h3 id="类型通配符"><a href="#类型通配符" class="headerlink" title="类型通配符"></a>类型通配符</h3><p>方法参数使用类的泛型标识符时不能重载，因为标识符从根本上都是Object类</p><p>注意：1.类型通配符一般是使用“?”代替具体的类型实参</p><p>2.所以，类型通配符是类型实参，而不是类型形参</p><p><strong>通配符初体验</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span><br>&#123;<br><br>Box&lt;Number&gt; box1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Box</span>&lt;&gt;();<br>box1.setFirst(<span class="hljs-number">100</span>);<br>showBox(box1);<br><br>Box&lt;Integer&gt; box2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Box</span>&lt;&gt;();<br>box2.setFirst(<span class="hljs-number">200</span>);<br>showBox(box2);<br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showBox</span><span class="hljs-params">(Box&lt;?&gt;box)</span><span class="hljs-comment">//这个地方是问号就可以是任意类型的，都可以用这个showBox方法，但如果是Number类型的，即使是它的子类Integer也不能用因为标识符类型本质上都是一样的Object类所以不能进行方法重载</span><br>&#123;<br>Object first=box.getFirst();<br>System.out.println(first);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="通配符设置上限"><a href="#通配符设置上限" class="headerlink" title="通配符设置上限"></a>通配符设置上限</h3><p>语法</p><p>类&#x2F;接口&lt;? extends 实参类型&gt;</p><p>要求该泛型的类型，只能是实参类型，或者是实参类型的子类类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span><br>&#123;<br><br>Box&lt;Number&gt; box1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Box</span>&lt;&gt;();<br>box1.setFirst(<span class="hljs-number">100</span>);<br>showBox(box1);<br><br>Box&lt;Integer&gt; box2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Box</span>&lt;&gt;();<br>box2.setFirst(<span class="hljs-number">200</span>);<br>showBox(box2);<br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showBox</span><span class="hljs-params">(Box&lt;? extends Number&gt;box)</span><span class="hljs-comment">//这里意思就是最大接收的类型就是Number，如果单独是一个?的话就是最大是Object</span><br>&#123;<br>Number first=box.getFirst();<br>System.out.println(first);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>例子：</p><p>Cat是miniCat的父类，Animal是Cat的父类</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">miniCat</span> <span class="hljs-keyword"><span class="hljs-keyword">extends</span> <span class="hljs-type">Cat</span></span></span>&#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> void main(<span class="hljs-keyword">String</span>[] args)<br>&#123;<br>ArrayList&lt;Animal&gt; animals=<span class="hljs-keyword">new</span> <span class="hljs-type">ArrayList</span>&lt;&gt;();<br>ArrayList&lt;Cat&gt; cats=<span class="hljs-keyword">new</span> <span class="hljs-type">ArrayList</span>&lt;&gt;();<br>    ArrayList&lt;miniCat&gt; miniCats=<span class="hljs-keyword">new</span> <span class="hljs-type">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-comment">//showAnimal(animals);这个会报错因为下面的通配符上限是Cat，传递的集合类型只能是Cat或Cat的子类</span><br>    showAnimal(cats);<br>    showAnimal(miniCats);<br> <br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> void showAnimal(ArrayList&lt;? extends  Cat&gt; list)<br>&#123;<br><span class="hljs-comment">//这种用通配符来表述存储对象类型的集合是不能向其中添加元素的</span><br><span class="hljs-comment">/*list.add(new Cat());</span><br><span class="hljs-comment">list.add(new miniCat());</span><br><span class="hljs-comment">list.add(new Animal());*/</span><br><span class="hljs-keyword">for</span>(int i=<span class="hljs-number">0</span>;i&lt;list.size();i++) &#123;<br><span class="hljs-comment">//ArrayList通配符上限为Cat所以下面用Cat引用变量接受没有任何问题</span><br>Cat cat = list.<span class="hljs-keyword">get</span>(i);<span class="hljs-comment">//这个地方得到集合的类型，引用变量必须是最大的那一种 </span><br>System.out.println(cat);<br>&#125;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="类型通配符的下限"><a href="#类型通配符的下限" class="headerlink" title="类型通配符的下限"></a>类型通配符的下限</h3><p>类&#x2F;接口&lt;? super 实参类型&gt;</p><p>要求该泛型的类型，只能是实参类型，或实参类型的父类类型</p><p><strong>通配符下限初体验</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">miniCat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Cat</span>&#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>&#123;<br>ArrayList&lt;Animal&gt; animals=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>ArrayList&lt;Cat&gt; cats=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    ArrayList&lt;miniCat&gt; miniCats=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    showAnimal(animals);<br>    showAnimal(cats);<br>   <span class="hljs-comment">// showAnimal(miniCats);要求只能是Cat或者Cat的父类类型，所以这个地方报错</span><br> <br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 类型通配符的下限，要求集合只能是Cat或Cat的父类类型</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showAnimal</span><span class="hljs-params">(ArrayList&lt;? <span class="hljs-built_in">super</span> Cat&gt; list)</span><br>&#123;<br><span class="hljs-keyword">for</span>(Object o:list) &#123;<span class="hljs-comment">//当接受用下限通配符标识的集合元素的时候，用object，因为Object是所有类的父类</span><br>System.out.println(o);<br>&#125;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>TreeSet是通过自己定义的比较器来排序的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span><br>&#123;<br>         TreeSet&lt;Cat&gt; treeSet=<span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comprator2</span>());<span class="hljs-comment">//因为是comprator2所以是按照年龄大小来排序的</span><br>          <span class="hljs-comment">//TreeSet&lt;Cat&gt; treeSet=new TreeSet&lt;&gt;(new Comprator1());不会报错</span><br>        <span class="hljs-comment">//TreeSet&lt;Cat&gt; treeSet=new TreeSet&lt;&gt;(new Comprator3());会报错</span><br>        <span class="hljs-comment">//因为TreeSet的这个地方泛型是Cat它的构造方法也用到了泛型，只有是继承Cat或Cat子类标识Comparator接口的比较器才能够好用</span><br>        treeSet.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>(<span class="hljs-string">&quot;jerry&quot;</span>,<span class="hljs-number">20</span>));<br>         treeSet.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>(<span class="hljs-string">&quot;amy&quot;</span>,<span class="hljs-number">22</span>));<br>         treeSet.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>(<span class="hljs-string">&quot;frank&quot;</span>,<span class="hljs-number">23</span>));<br>         treeSet.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>(<span class="hljs-string">&quot;jim&quot;</span>,<span class="hljs-number">25</span>));<br>         <span class="hljs-keyword">for</span>(Cat cat:treeSet) &#123;<br>         System.out.println(cat);<br>         &#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Comprator1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparator</span>&lt;Animal&gt;&#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Animal o1, Animal o2)</span> &#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br><span class="hljs-keyword">return</span> o1.name.compareTo(o2.name);<br>&#125;<br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Comprator2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparator</span>&lt;Cat&gt;&#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Cat o1, Cat o2)</span> &#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br><span class="hljs-keyword">return</span> o1.age-o2.age;<br>&#125;<br><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Comprator3</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparator</span>&lt;miniCat&gt;&#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(miniCat o1, miniCat o2)</span> &#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br><span class="hljs-keyword">return</span> o1.level-o2.level;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">Treeset</span><span class="hljs-params">(Comparator &lt;? <span class="hljs-built_in">super</span> E&gt; comparator)</span>&#123;<br><br><br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="类型擦除"><a href="#类型擦除" class="headerlink" title="类型擦除"></a>类型擦除</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> []args</span>)<br>&#123;<br><span class="hljs-comment">//泛型类在创建对象的时候，来指定操作的具体的数据类型</span><br><span class="hljs-title class_">Generic</span>&lt;<span class="hljs-title class_">String</span>&gt; strGeneric=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Generic</span>&lt;&gt;(<span class="hljs-string">&quot;赵梓皓&quot;</span>);<br><span class="hljs-title class_">String</span> key1=strGeneric.<span class="hljs-title function_">getKey</span>();<br><span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;key1:&quot;</span>+key1);<br></code></pre></td></tr></table></figure><pre><code class="hljs">Generic&lt;Integer&gt; intGeneric =new Generic&lt;&gt;(123);   int key=intGeneric.getKey();   System.out.println(&quot;key:&quot;+key);  //泛型类在创建对象的时候，没有指定类型，将按照Object类型来操作   Generic generic =new Generic(&quot;ABC&quot;);   Object key3=generic.getKey();   System.out.println(&quot;key3:&quot;+key3);   //泛型类不支持基本数据类型  // Generic &lt;int&gt; generic2=new Generic &lt;int&gt;(100);   //同一泛型类，根据不同的数据类型创建的对象，本质上是同一类型，是Generic类型   System.out.println(intGeneric.getClass());   System.out.println(strGeneric.getClass());   System.out.println(intGeneric.getClass()==strGeneric.getClass());</code></pre><p>}</p><p>判断两个类型是否相同 最后是相同的</p><p>因为泛型只有在编译阶段存在，编译结束之后类型就擦除了，都是Object类</p><h3 id="泛型数组的创建"><a href="#泛型数组的创建" class="headerlink" title="泛型数组的创建"></a>泛型数组的创建</h3><p>可以声明带泛型的数组引用，但是不能直接创建带泛型的的数组对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span><br>&#123;<br>ArrayList&lt;String&gt;[] listArr=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>[<span class="hljs-number">5</span>];<span class="hljs-comment">//定义泛型数组的方式，操作的时候就是拿引用去操作</span><br>   ArrayList&lt;String&gt; strList=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>   strList.add(<span class="hljs-string">&quot;abc&quot;</span>);<br>   listArr[<span class="hljs-number">0</span>]=strList;<br>   String s=listArr[<span class="hljs-number">0</span>].get(<span class="hljs-number">0</span>);<br>   System.out.println(s);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以通过java.lang.reflect.Array的newInstance(Class<T>,int) 创建T[]数组</p><p>Fruit</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Main;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Array;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Fruit</span>&lt;T&gt; &#123;<br><br><span class="hljs-keyword">private</span> T[] array;<br><span class="hljs-keyword">public</span> T[] getArray() &#123;<br><span class="hljs-keyword">return</span> array;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setArray</span><span class="hljs-params">(T[] array)</span> &#123;<br><span class="hljs-built_in">this</span>.array = array;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Fruit</span><span class="hljs-params">(Class&lt;T&gt; clz,<span class="hljs-type">int</span> length)</span><br><br>&#123;<br>array=(T[])Array.newInstance(clz, length);<br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">put</span><span class="hljs-params">(<span class="hljs-type">int</span> index, T string)</span> &#123;<br>array[index]=string;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span><br>&#123;<br>Fruit&lt;String&gt; fruit=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Fruit</span>&lt;&gt;(String.class ,<span class="hljs-number">3</span>);<br>fruit.put(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;苹果&quot;</span>);<br>fruit.put(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;西瓜&quot;</span>);<br>fruit.put(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;香蕉&quot;</span>);<br><br><br>System.out.println(Arrays.toString(fruit.getArray()));<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>一个利用比较器以及string的compareTo的一个题</p><h1 id="java的File类"><a href="#java的File类" class="headerlink" title="java的File类"></a>java的File类</h1><p>java.io.File类</p><p>文件和目录路径的抽象表示形式</p><p>java把电脑中的文件和文件夹封装为了一个File类，我们可以使用File类对文件和文件夹进行操作</p><p>我们可以使用File类的方法</p><p>创建一个文件&#x2F;文件夹等等</p><p>File类是一个和系统无关的类，任何的操作系统都可以使用这个类中的方法</p><p>重点记住三个单词：file：文件    directory：文件夹&#x2F;目录    path：路径</p><p><strong>File类的静态属性</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">String pathSeparator=File.pathSeparator;<span class="hljs-comment">//路径分隔符，分割多个路径的，windows系统是分号，linux系统是冒号</span><br>System.out.println(pathSeparator);<br>String separator=File.separator;<br>System.out.println(separator);<span class="hljs-comment">//文件名称分隔符，windows系统是反斜杠\    linux系统是正斜杠/</span><br><span class="hljs-comment">//操作路径&quot;C:&quot;+File.separator+&quot;develop&quot;+File.separator+&quot;a&quot;+File.separator+&quot;a.txt&quot;</span><br><span class="hljs-comment">//将反斜杠或者正斜杠用File.separator代替，不写死</span><br></code></pre></td></tr></table></figure><p><strong>绝对路径与相对路径</strong></p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918551.png" alt="image-20220629161901489"></p><p><strong>构造方法</strong></p><ul><li><p>&#96;&#96;&#96;java<br>&#x2F;*<br>一</p><ul><li>File(String pathname) 通过将给定路径名字字符串转换为抽象路径来创建一个新的File实例</li><li>参数：</li><li>String pathname 字符串的路径名称</li><li>路径可以是文件结尾也可以是文件夹结尾</li><li>路径可以是相对路径，也可以是绝对路径</li><li>路径可以存在也可以不存在，创建File对象，只是把字符串封装为File对象，不考虑路径的真假情况</li><li>*&#x2F;<br>File f1&#x3D;new File(“D:\放乱七八糟\File.txt”);<br>System.out.println(f1);&#x2F;&#x2F;重写了object类里的toString方法输出路径  D:\放乱七八糟\File.txt</li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * ```</span><br><span class="hljs-comment">   * File(String parent,Stringchild)</span><br><span class="hljs-comment">   * 参数分为两部分，String parent父路径</span><br><span class="hljs-comment">   * String child 子路径</span><br><span class="hljs-comment">   * 好处：</span><br><span class="hljs-comment">   * 父路径和子路径可以单独书写，使用起来非常灵活，父路径和子路径都可以变化</span><br><span class="hljs-comment">     */</span><br>     <span class="hljs-keyword">File</span> f1=<span class="hljs-keyword">new</span> <span class="hljs-keyword">File</span>(<span class="hljs-string">&quot;c:\\&quot;</span>,<span class="hljs-string">&quot;a.txt&quot;</span>);<br>     System.out.<span class="hljs-keyword">println</span>(f1);<br>     <span class="hljs-keyword">File</span> f2=<span class="hljs-keyword">new</span> <span class="hljs-keyword">File</span>(<span class="hljs-string">&quot;d:\\&quot;</span>,<span class="hljs-string">&quot;a.txt&quot;</span>);<br>     System.out.<span class="hljs-keyword">println</span>(f2);<br></code></pre></td></tr></table></figure><p>   ​&#x2F;*</p><pre><code class="hljs">* ```  * File(File parent,String child)根据parent抽象路径名和child路径字符串创建一个新File实例  * 参数：把路径分为了两部分  * File parent：父路径  * String child：子路径  * 好处：  * 父路径和子路径可以单独书写，使用起来非常灵活，父路径和子路径都可以变化  * */        File parent=new File(&quot;c:\\&quot;);        File file=new File(parent,&quot;hello.java&quot;);        System.out.println(file);  <figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>         <br><br>## 常用方法<br><br>### 获取方法<br><br>public String getAbsolutePath()  :返回此File的绝对路径字符串，获取构造方法中的传递的路径，不管你写的是相对的还是绝对的都返回绝对路径字符串<br><br></code></pre></td></tr></table></figure></code></pre></li></ul><p>File f1&#x3D;new File(“C:\a.txt”);<br>System.out.println(f1.getAbsolutePath());<br>File f2&#x3D;new File(“a.txt”);<br>System.out.println(f2.getAbsolutePath());<br>结果:<br>C:\a.txt<br>D:\Java\12345\a.txt</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><br><span class="hljs-keyword">public</span> String getPath()将此<span class="hljs-keyword">File</span>转换为路径名字符串<br><br>```java<br><span class="hljs-keyword">File</span> f1=<span class="hljs-keyword">new</span> <span class="hljs-keyword">File</span>(<span class="hljs-string">&quot;C:\\a.txt&quot;</span>);<br>System.out.<span class="hljs-keyword">println</span>(f1.getPath());<br><span class="hljs-keyword">File</span> f2=<span class="hljs-keyword">new</span> <span class="hljs-keyword">File</span>(<span class="hljs-string">&quot;a.txt&quot;</span>);<br>System.out.<span class="hljs-keyword">println</span>(f2.getPath());<br>结果：<br>C:\a.txt<br>a.txt<br></code></pre></td></tr></table></figure><p>public String getName()返回由此File表示的文件或目录的名称</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">File f1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;C:\\a.txt&quot;</span>);<br>System.out.println(f1.getName());<br>File f2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;a.txt&quot;</span>);<br>System.out.println(f2.getName());<br>结果：a.txt<br>a.txt<br><br></code></pre></td></tr></table></figure><p>public long length() 获取的式构造方法指定的文件的大小，以字节为单位</p><p>注意：</p><p>文件夹是没有大小概念的，不能获取文件夹的大小，如果构造方法中给出的路径不存在，那么length方法返回零</p><p>文件夹没有大小概念，返回值也是零</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">File f1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\File.txt&quot;</span>);<br>System.out.println(f1.length());<br>File f2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;a.txt&quot;</span>);<br>System.out.println(f2.length());<br>结果：<br><span class="hljs-number">10</span><br><span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="判断功能的方法"><a href="#判断功能的方法" class="headerlink" title="判断功能的方法"></a>判断功能的方法</h3><p>public boolean exists()  ：此File表示的文件或目录是否实际存在</p><p>用于判断构造方法中的路径是否存在</p><p>   存在：true</p><p>   不存在：false</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">File f1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\File.txt&quot;</span>);<br>System.out.println(f1.exists());<br>结果：<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">File</span> f1=<span class="hljs-keyword">new</span> <span class="hljs-keyword">File</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\Fil.txt&quot;</span>);<br>System.out.<span class="hljs-keyword">println</span>(f1.exists());<br>结果：<span class="hljs-keyword">false</span><br></code></pre></td></tr></table></figure><p><strong>注意下面两个判断方法的路径必须是存在的如果不存在则都返回false</strong></p><p>public boolean isDirectory()  表示此File是否为目录</p><p>用于判断构造方法中给定的路径是否是以文件夹结尾</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">File</span> f1=<span class="hljs-keyword">new</span> <span class="hljs-keyword">File</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\File.txt&quot;</span>);<br>System.out.<span class="hljs-keyword">println</span>(f1.isDirectory());<br>结果:<span class="hljs-keyword">false</span><br></code></pre></td></tr></table></figure><p>publicboolean isFile()   </p><p>用于判断构造方法中给定的路径是否是以文件结尾</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">File f1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\File.txt&quot;</span>);<br>System.out.println(f1.isFile());<br>结果：<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">File f1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\Fil.txt&quot;</span>);<br>System.out.println(f1.isFile());<br>结果：<span class="hljs-literal">false</span>  因为路径不存在<br></code></pre></td></tr></table></figure><h3 id="创建删除功能的方法"><a href="#创建删除功能的方法" class="headerlink" title="创建删除功能的方法"></a>创建删除功能的方法</h3><p>public boolean createNewFile() :当且仅当具有该名称的文件尚不存在时，创建一个新的空文件</p><p>创建文件的路径和名称在构造方法中给出（构造方法的参数）</p><p>返回值：布尔值</p><p>true：文件不存在，创建文件，返回true</p><p>false：文件存在不会创建，返回false</p><p>注意;1.此方法之恩那个创建文件，不能创建文件夹所以创建文件的路径必须存在，否则会抛出异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">File f1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\Fil.txt&quot;</span>);<br><span class="hljs-keyword">try</span> &#123;<br>System.out.println(f1.createNewFile());<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>e.printStackTrace();<span class="hljs-comment">//createNewFile声明抛出了IOException，我们调用这个方法，就必须的处理这个异常，要么throws，要么trycatch如果调用方法的时候也throws就会交给jvm处理</span><br>&#125;<br></code></pre></td></tr></table></figure><p>如果路径不存在则会抛出IO异常</p><p>public boolean mkdir()  :创键单级空文件夹</p><p>public boolean mkdirs()   :创建单级空文件夹，也可以创建多级文件夹</p><p>创建文件夹的路径和名称在构造方法中给出（构造方法的参数）</p><p>返回值：布尔值</p><p>true：文件夹不存在，创建文件夹，返回true</p><p>false：文件夹存在不会创建，返回false，构造方法中给出的路径不存在返回false</p><p>注意;1.此方法只能创建文件夹，不能创建文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">File f1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\aaa\\bb&quot;</span>);<br>System.out.println(f1.mkdir());<span class="hljs-comment">//不能创建多级目录</span><br>File f2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\aaa\\bb&quot;</span>);<br>System.out.println(f1.mkdirs());<br>File f3=<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\ccc&quot;</span>);<br>System.out.println(f3.mkdir());<br>结果：<span class="hljs-literal">false</span><br><span class="hljs-literal">true</span><br><span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>public  boolean delete()    删除构造方法路径中给出的文件和文件夹</p><p>返回值也是一个布尔值</p><p>true：文件&#x2F;文件夹删除成功，返回true</p><p>false：文件夹中有内容，不会删除返回false，构造方法中的路径不存在返回false，文件不管里面有没有内容都会删除</p><p>注意：</p><p>delete方法是直接在硬盘删除文件&#x2F;文件夹，不走回收站，删除要谨慎</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">File</span> f2=<span class="hljs-keyword">new</span> <span class="hljs-keyword">File</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\aaa\\bb&quot;</span>);<br>System.out.<span class="hljs-keyword">println</span>(f2.<span class="hljs-keyword">delete</span>());<br><span class="hljs-keyword">File</span> f3=<span class="hljs-keyword">new</span> <span class="hljs-keyword">File</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\ccc&quot;</span>);<br>System.out.<span class="hljs-keyword">println</span>(f3.<span class="hljs-keyword">delete</span>());<br>结果：<span class="hljs-keyword">true</span><br><span class="hljs-keyword">true</span><br>删除路径的最后一个文件或者文件夹<br></code></pre></td></tr></table></figure><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">File</span> f2=<span class="hljs-keyword">new</span> <span class="hljs-keyword">File</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\aaa&quot;</span>);<br>System.out.<span class="hljs-keyword">println</span>(f2.<span class="hljs-keyword">delete</span>());<br>结果<span class="hljs-keyword">false</span><br>因为文件夹aaa中有内容<br></code></pre></td></tr></table></figure><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">File</span> f2=<span class="hljs-keyword">new</span> <span class="hljs-keyword">File</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\aaa\\新建文本文档.txt&quot;</span>);<br>System.out.<span class="hljs-keyword">println</span>(f2.<span class="hljs-keyword">delete</span>());<br>结果：<span class="hljs-keyword">true</span><br>就算txt文件中有内容也会被删除<br></code></pre></td></tr></table></figure><h3 id="目录的遍历功能"><a href="#目录的遍历功能" class="headerlink" title="目录的遍历功能"></a>目录的遍历功能</h3><p>public String[] list() ：返回一个String数组，表示该File目录中的所有子文件或目录（隐藏的也能获取到）</p><p>遍历构造方法中给出的目录，会获取目录中所有文件&#x2F;文件夹的名称，把获取到的多个名称存储到一个字符串String类型的数组中</p><p>public File[] listFiles(): 返回一个File数组，表示该File目录中所有的子文件或目录</p><p>遍历一个构造方法中给出的目录，会获取目录中所有个文件&#x2F;文件夹，把文件或文件夹封装为File对象，多个File对象存储到File数组里</p><p>注意：</p><p>list方法和listFiles方法遍历的是构造方法中给出的目录</p><p>如果构造方法中给出的目录的路径不存在，会抛出空指针异常</p><p>如果构造方法中给出的路径不是一个目录，也会抛出空指针异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">File f2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\放乱七八糟&quot;</span>);<br>String str[]=f2.list();<br><span class="hljs-keyword">for</span>(String filename:str) &#123;<br>System.out.println(filename);<br>&#125;<br>结果：eclipse.zip<br>Everything-<span class="hljs-number">1.4</span><span class="hljs-number">.1</span><span class="hljs-number">.1017</span>.x64-Setup.exe<br>Fil.txt<br>File.txt<br>java8中文说明文档<span class="hljs-number">321456</span><br>第五章.ppt<br></code></pre></td></tr></table></figure><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-built_in">File</span> <span class="hljs-variable">file</span><span class="hljs-operator">=</span><span class="hljs-variable">new</span> <span class="hljs-built_in">File</span><span class="hljs-punctuation">(</span><span class="hljs-string">&quot;D:\\放乱七八糟&quot;</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br><span class="hljs-built_in">File</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-variable">files</span><span class="hljs-operator">=</span><span class="hljs-variable">file</span><span class="hljs-operator">.</span><span class="hljs-variable">listFiles</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br><span class="hljs-variable">for</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">File</span> <span class="hljs-variable">f</span><span class="hljs-operator">:</span><span class="hljs-variable">files</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-variable">System</span><span class="hljs-operator">.</span><span class="hljs-variable">out</span><span class="hljs-operator">.</span><span class="hljs-variable">println</span><span class="hljs-punctuation">(</span><span class="hljs-variable">f</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br><span class="hljs-punctuation">&#125;</span><br>结果：<span class="hljs-built_in">D</span><span class="hljs-operator">:</span>\放乱七八糟\<span class="hljs-variable">eclipse</span><span class="hljs-operator">.</span><span class="hljs-variable">zip</span><br><span class="hljs-built_in">D</span><span class="hljs-operator">:</span>\放乱七八糟\<span class="hljs-variable">Everything</span><span class="hljs-operator">-</span><span class="hljs-number">1.4</span><span class="hljs-number">.1</span><span class="hljs-number">.1017</span><span class="hljs-operator">.</span><span class="hljs-variable">x64</span><span class="hljs-operator">-</span><span class="hljs-variable">Setup</span><span class="hljs-operator">.</span><span class="hljs-variable">exe</span><br><span class="hljs-built_in">D</span><span class="hljs-operator">:</span>\放乱七八糟\<span class="hljs-variable">Fil</span><span class="hljs-operator">.</span><span class="hljs-variable">txt</span><br><span class="hljs-built_in">D</span><span class="hljs-operator">:</span>\放乱七八糟\<span class="hljs-built_in">File</span><span class="hljs-operator">.</span><span class="hljs-variable">txt</span><br><span class="hljs-built_in">D</span><span class="hljs-operator">:</span>\放乱七八糟\<span class="hljs-variable">java8</span>中文说明文档<span class="hljs-number">321456</span><br><span class="hljs-built_in">D</span><span class="hljs-operator">:</span>\放乱七八糟\第五章<span class="hljs-operator">.</span><span class="hljs-variable">ppt</span><br></code></pre></td></tr></table></figure><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>递归的分类：1.直接递归和间接递归</p><p>直接递归：main(){</p><p>a()</p><p>}</p><p>a(){</p><p>a();自己调用自己</p><p>}</p><p>间接递归：b(){</p><p>c();}</p><p>c(){</p><p>b();}</p><p>注意事项：1.递归一定要有条件限定，保证递归能够停下来，否则会发生栈内存溢出</p><p>2.在递归中虽然有限定条件，但是递归次数不能太多，否则也会发生栈内存溢出</p><p>3.构造方法，禁止递归，编译错误，构造方法是创建对象时侯用的，一直递归会导致内存中有无数多个对象，直接编译报错</p><p><strong>递归地使用前提：当调用方法的时候，方法的主体不变，每次调用方法的参数不同，可以使用递归</strong></p><p><strong>为什么递归无限制会导致栈内存溢出</strong></p><p>a方法会在栈内存中一直调用a方法，就会导致栈内存中由无数多个a方法</p><p>方法太多了，超出栈内存的大小，就会导致内存溢出的错误</p><p>注意：</p><p>当一个方法调用其他方法时，被调用的方法没有执行完毕，当前方法就会一直等待低矮哦用的方法执行完毕才会继续执行</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918949.png" alt="image-20220629161813100"></p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">使用递归计算<span class="hljs-number">0</span>到<span class="hljs-built_in">n</span>之间的和<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br><span class="hljs-type">int</span> s=Sum(<span class="hljs-number">3</span>);<br>               System.out.println(s);<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">Sum</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br><span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">return</span> n+Sum(n-<span class="hljs-number">1</span>);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>递归计算阶乘</strong></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">String</span> []args)</span> </span>&#123;<br><span class="hljs-type">int</span> s=<span class="hljs-built_in">Sum</span>(<span class="hljs-number">7</span>);<br>           System.out.<span class="hljs-built_in">println</span>(s);<br><br>&#125;<br></code></pre></td></tr></table></figure><pre><code class="hljs">public static int Sum(int n) &#123;    if(n==1)        return 1;    return n*Sum(n-1);&#125;</code></pre><p><strong>递归打印多级目录</strong></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">遍历<span class="hljs-keyword">c</span>:\\<span class="hljs-keyword">abc</span>文件夹，及<span class="hljs-keyword">abc</span>文件夹的子文件夹以及子文件夹中所有文件<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span>&#123;<br>File file=<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;d:\\放乱七八糟&quot;</span>);<br>getAllFile(file);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getAllFile</span><span class="hljs-params">(File dir)</span> &#123;<br>    System.out.println(dir);<span class="hljs-comment">//打印被遍历的目录</span><br> File[]files=dir.listFiles();<br> <span class="hljs-keyword">for</span>(File f:files) &#123;<br> <span class="hljs-keyword">if</span>(f.isDirectory()) &#123;<br> getAllFile(f);<br> &#125;<br> <span class="hljs-keyword">else</span><br> &#123;<br> System.out.println(f);<br> &#125;<br> &#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h3><p>找出目录下文件中只有以.java为结尾的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span>&#123;<br>File file=<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\同步空间\\新建文件夹&quot;</span>);<br>getAllFile(file);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getAllFile</span><span class="hljs-params">(File dir)</span> &#123;<br>   <span class="hljs-comment">// System.out.println(dir);</span><br> File[]files=dir.listFiles();<br> <span class="hljs-keyword">for</span>(File f:files) &#123;<br> <span class="hljs-keyword">if</span>(f.isDirectory()) &#123;<br> getAllFile(f);<br> &#125;<br> <span class="hljs-keyword">else</span><br> &#123;<br> <span class="hljs-comment">/*</span><br><span class="hljs-comment">  * 只要.java结尾的文件</span><br><span class="hljs-comment">  * 把File对象f转换为字符串对象</span><br><span class="hljs-comment">  * String name=f.getName();</span><br><span class="hljs-comment">  * String path=f.getPath();</span><br><span class="hljs-comment">  * String s=f.toString();</span><br><span class="hljs-comment">  * System.out.println(f);</span><br><span class="hljs-comment">  */</span><br> <span class="hljs-comment">/*</span><br><span class="hljs-comment">  * 2.调用String类中的方法endswith判断字符串是否是以.java结尾</span><br><span class="hljs-comment">  * </span><br><span class="hljs-comment">  */</span><br> String s=f.toString();<br>             <span class="hljs-comment">//把字符串转换为小写</span><br>             <span class="hljs-comment">//s=s.toLowerCase();</span><br> <span class="hljs-type">boolean</span> b=s.endsWith(<span class="hljs-string">&quot;.java&quot;</span>);<br> <span class="hljs-keyword">if</span>(b) &#123;<br> System.out.println(f);<br> &#125;<br> &#125;<br> &#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>第二种方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(f.getName().toLowerCase().endsWith(<span class="hljs-string">&quot;.java&quot;</span>))<br><br>&#123;<br><br>System.out.println(f);<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>文件过滤器优化</strong></p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs delphi">需求：遍历某个文件夹，及其子文件夹，只要.java结尾的文件<br><br>我们可以使用过滤器来实现，在<span class="hljs-keyword">File</span>类中有两个和ListFiles重载的方法，方法的参数传递就是过滤器<br><br><span class="hljs-keyword">File</span>[] listFiles(FileFilter filter)<br><br>java.io.FileFilter接口：用于抽象路径名（<span class="hljs-keyword">File</span>对象）的过滤器<br><br>作用：用来过滤文件（<span class="hljs-keyword">File</span>对象）<br><br>抽象方法：用来过滤文件的方法<br>boolean accept(<span class="hljs-keyword">File</span> pathname)  测定指定抽象路径名是否应该包含在某一个路径名列表中<br>参数：<br>       <span class="hljs-keyword">File</span> pathname 使用listFiles方法遍历目录，得到的每一个文件对象<br> <span class="hljs-keyword">File</span>[] listFiles(FilenameFileter filter)<br> java.io.FilenameFilter接口：实现此接口的类实例可以用于过滤文件名<br>       作用：用于过滤文件名称<br>       抽象方法：用来过滤文件<br>       boolean accept(<span class="hljs-keyword">File</span> dir,<span class="hljs-keyword">String</span> <span class="hljs-keyword">name</span>)<br>              参数：<br>                    <span class="hljs-keyword">File</span> dir:构造方法中传递的被遍历的目录，也就是除了最后一个之外的<br>                    <span class="hljs-keyword">String</span> <span class="hljs-keyword">name</span>:使用ListFiles方法遍历目录，获取的每一个文件/文件夹的名称(也就是最后一个)<br>注意：两个过滤器接口是没有实现类的，需要我们自己写实现类，重写过滤的方法accept，在方法中自己定义过滤的规则<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-comment">//创建过滤器FileFilter的实现类，重写过滤方法accept，定义过滤规则</span><br><span class="hljs-comment">//如果accept返回false就不会把这个文件对象放到文件对象数组中</span><br><span class="hljs-comment">//如果accept返回true就可以把这个文件对象放到文件对象数组中</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">FileFilterimpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FileFilter</span>&#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(File pathname)</span> &#123;<br>        <span class="hljs-comment">//如果是文件夹就返回true，再下面检测出是文件夹会继续调用getAllFile方法</span><br><span class="hljs-keyword">if</span>(pathname.isDirectory()) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-keyword">return</span> pathname.getName().toLowerCase().endsWith(<span class="hljs-string">&quot;.md&quot;</span>);<span class="hljs-comment">//要到.md结尾的文件对象</span><br><br><br><br>&#125;<br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span>&#123;<br>File file=<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\同步空间\\新建文件夹&quot;</span>);<br>getAllFile(file);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getAllFile</span><span class="hljs-params">(File dir)</span> &#123;<br>   <span class="hljs-comment">// System.out.println(dir);</span><br> File[]files=dir.listFiles(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileFilterimpl</span>());<span class="hljs-comment">//传递过滤器对象</span><br> <span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   * listFiles()方法做了三件事</span><br><span class="hljs-comment">     * 1.listFiles方法会对构造方法中传递的目录进行遍历，获取目录中的每一个文件/文件夹--&gt;封装为File对象</span><br><span class="hljs-comment">       * 2.listFiles会调用参数传递过程中的过滤器的方法accept</span><br><span class="hljs-comment">       * 3.listFiles方法会把遍历得到的每一个File对象传递给accept方法的参数叫pathname</span><br><span class="hljs-comment">         */</span><br>          <span class="hljs-keyword">for</span>(File f:files) &#123;<br>          <span class="hljs-keyword">if</span>(f.isDirectory()) &#123;<br>          getAllFile(f);<br>          &#125;<br>          <span class="hljs-keyword">else</span><br>          &#123;<br>          System.out.println(f);<br>          &#125;<br>          &#125;<br>         &#125;<br>         &#125;<br><br><br></code></pre></td></tr></table></figure><p><strong>FileNameFilter过滤器的使用和Lambda优化程序</strong></p><p>当接口只有一个抽象方法的时候叫函数式接口此时可以用Lambda表达式来代替这个接口的实例化对像，要实现那一个抽象方法</p><p>匿名内部类是当这个接口的实例化对象只用一次时可以用来代替，要实现接口的所有抽象方法</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">String</span> []args)</span></span>&#123;<br><span class="hljs-built_in">File</span> file=<span class="hljs-keyword">new</span> <span class="hljs-built_in">File</span>(<span class="hljs-string">&quot;D:\\同步空间\\新建文件夹&quot;</span>);<br><span class="hljs-built_in">getAllFile</span>(file);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">getAllFile</span><span class="hljs-params">(<span class="hljs-built_in">File</span> dir)</span> </span>&#123;;<br> <span class="hljs-built_in">File</span>[]files=dir.<span class="hljs-built_in">listFiles</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">FilenameFilter</span>() &#123;<br></code></pre></td></tr></table></figure><pre><code class="hljs">    @Override    public boolean accept(File dir, String name) &#123;    return new File(dir,name).isDirectory()||name.toLowerCase().endsWith(&quot;.md&quot;);    &#125;      &#125;);//传递过滤器对象    for(File f:files) &#123;    if(f.isDirectory()) &#123;    getAllFile(f);    &#125;    else    &#123;    System.out.println(f);    &#125;    &#125;   &#125;   &#125;</code></pre><h1 id="java的IO"><a href="#java的IO" class="headerlink" title="java的IO"></a>java的IO</h1><h2 id="io概述"><a href="#io概述" class="headerlink" title="io概述"></a>io概述</h2><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918917.png" alt="image-20220630092834626"></p><h3 id="字符和Ascii码的转换问题"><a href="#字符和Ascii码的转换问题" class="headerlink" title="字符和Ascii码的转换问题"></a>字符和Ascii码的转换问题</h3><p>字符强转为(int)是获得它的Ascii码值</p><pre><code class="hljs">char a=&#39;a&#39;;int b=(int)a;System.out.println(b);结果：97</code></pre><p>ascii码值强转为char就是获得字符</p><pre><code class="hljs">    int a =97;char b=(char)a;System.out.println(b);结果：a</code></pre><p>将字符1转换为数字1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">char</span> a=<span class="hljs-string">&#x27;1&#x27;</span>;<br>System.out.println(a-<span class="hljs-string">&#x27;0&#x27;</span>);<br>结果：<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h2><p>一切文件数据在存储时，都是以二进制数字的形式保存，都一个一个的字节，那么传输时一样如此。所以，字节流可以传输任意文件数据。在操作流的时候，我们要时刻明确，无论使用什么样的流对象，底层传输的始终为二进制数据</p><p>在Ascii码中一个英文字符占用一个字节，一个汉字字符占用两个字节的空间</p><p>在unicode编码中，一个英文字符占用两个字节一个汉字字符也占用两个字节</p><p>UTF-8中，一个英文字符占用一个字节，一个汉字字符占用三个字节空间</p><h3 id="字节输出流（OutputStream和FileOutputStream介绍）"><a href="#字节输出流（OutputStream和FileOutputStream介绍）" class="headerlink" title="字节输出流（OutputStream和FileOutputStream介绍）"></a>字节输出流（OutputStream和FileOutputStream介绍）</h3><ul><li><p>&#96;&#96;&#96;java</p><ul><li>java.io.OutputStream 字节输出流 这个抽象类是表示字节输出流的所有类的超类</li><li>定义了一些子类共性的成员方法</li><li>public void close() :关于此输出流并释放与此流相关联的任何系统资源</li><li>public void flush():刷新此输出流并强制任何缓冲的输出字节被写出</li><li>public void write(byte[] b):将 b.length字节从指定的字节数组写入此输出流。</li><li>public void write(byte[] b, int off, int len):从指定的字节数组写入 len个字节，从偏移 off开始输出到此输出流。</li><li>pubic void write(int b):将指定的字节写入此输出流。 </li><li>java.io.FileOutputStream extends OutputStream</li><li>FileOutputStream:文件字节输出流</li><li>作用：把内存中的数据给写入到硬盘的文件中</li><li></li><li>构造方法：</li><li>FileOutputStream(File file)<br>创建文件输出流以写入由指定的 File对象表示的文件。<br> FileOutputStream(String name)<br> 创建文件输出流以指定的名称写入文件。<br>构造方法作用<br>1.创建一个FileOutputStream对象<br>2.会根据构造方法中传递的文件&#x2F;文件路径，创建一个空的文件<br>3.会把FileOutputStream对象指向创建好的文件<br> *&#x2F;</li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><br>​     **pubic <span class="hljs-keyword">void</span> <span class="hljs-keyword">write</span>(<span class="hljs-keyword">int</span> b)**<br><br>​            写入数据的原理（内存到硬盘）：<br><br>​            java程序--&gt;jvm(虚拟机)--&gt;os（操作系统）--&gt;os调用写数据的方法--&gt;把数据写入文件夹中<br><br>字节输出流的使用步骤（重点）<br><br>   <span class="hljs-number">1</span>.创建一个FileOutputStream对象，构造方法中传递写入数据的目的地<br><br>   <span class="hljs-number">2</span>.调用FileOutputStream对象中的方法<span class="hljs-keyword">write</span>，把数据写入到文件中<br><br>  <span class="hljs-number">3</span>.释放资源（流使用会占用一定的内存，使用完毕后把内存清空，提供程序效率）<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String[]args) <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-comment">//创建一个FileOutputStream对象，构造方法中传递写入数据的目的地</span><br>FileOutputStream fos=<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;D:\\放乱七八糟\\a.txt&quot;</span>);<br><span class="hljs-comment">//调用FileOutputStream对象中的方法write，把数据写入到文件中</span><br>fos.<span class="hljs-keyword">write</span>(<span class="hljs-number">97</span>);<span class="hljs-comment">//这个只能写入一个字节的大小的内容，97是这个字节对应的ASCII码值</span><br><span class="hljs-comment">//释放资源（流使用会占用一定的内存，使用完毕后把内存清空，提供程序效率）</span><br>fos.close();<br><br>&#125;<br><br>![image-<span class="hljs-number">20220630102639535</span>](https:<span class="hljs-comment">//zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918085.png)</span><br><br>原理就是：<span class="hljs-number">97</span>回先转换为二进制数储存在硬盘（文件）中，当用任何文本编辑器（记事本，notepad）再打开文件的时候，都会查询编码表，把字节转换为字符表示，<span class="hljs-number">0</span>-<span class="hljs-number">127</span>查询ASCII表        其他值：查询系统默认码表（中文windows系统GBK）<br><br>我的电脑记事本查询的是UTF-<span class="hljs-number">8</span><br><br> <br><br>**一次写多个字节的方法**<br><br>**<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-keyword">write</span>(<span class="hljs-keyword">byte</span>[] b):将 b.length字节从指定的字节数组写入此输出流。**<br><br>一次写多个字节： <br><br>​          如果写的第一个字节是正数（<span class="hljs-number">0</span>-<span class="hljs-number">127</span>），那么显示的时候会查询ASCII表<br><br>​          如果写入的第一个字节是负数，那第一个字节会和第二个字节，两个字节组成一个中文显示，查询系统默认码表（中文系统GBK）<br><br>第一个例子<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String[]args) <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-comment">//创建一个FileOutputStream对象，构造方法中传递写入数据的目的地</span><br>FileOutputStream fos=<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;D:\\放乱七八糟\\a.txt&quot;</span>);<br>    <span class="hljs-comment">//调用FileOutputStream对象中的方法write，把数据写入到文件中</span><br><span class="hljs-comment">//在文件中显示100，写入3个字节</span><br><span class="hljs-keyword">byte</span> []bytes= &#123;<span class="hljs-number">49</span>,<span class="hljs-number">48</span>,<span class="hljs-number">48</span>&#125;;<br>fos.<span class="hljs-keyword">write</span>(bytes);<br><span class="hljs-comment">//释放资源</span><br>fos.close();<br><br>&#125;<br><br>第二个例子<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String[]args) <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-comment">//创建一个FileOutputStream对象，构造方法中传递写入数据的目的地</span><br>FileOutputStream fos=<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;D:\\放乱七八糟\\a.txt&quot;</span>);<br>    <span class="hljs-comment">//调用FileOutputStream对象中的方法write，把数据写入到文件中</span><br><span class="hljs-comment">//在文件中显示100，写入3个字节</span><br><span class="hljs-keyword">byte</span> []bytes= &#123;-<span class="hljs-number">65</span>,-<span class="hljs-number">66</span>,-<span class="hljs-number">67</span>,<span class="hljs-number">68</span>,<span class="hljs-number">69</span>&#125;;<br>fos.<span class="hljs-keyword">write</span>(bytes);<br><span class="hljs-comment">//释放资源</span><br>fos.close();<br><br>&#125;<br>文件写入结果：<br>          烤紻E就是前两个加起来组成一个系统默认码，后两个是一个组成一个系统默认码，最后一个时Ascii码<br><br>**<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-keyword">write</span>(<span class="hljs-keyword">byte</span>[] b, <span class="hljs-keyword">int</span> off, <span class="hljs-keyword">int</span> len):从指定的字节数组写入 len个字节，从偏移 off开始输出到此输出流。**<br><br>把字节数组的一部分写入到文件中<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String[]args) <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-comment">//创建一个FileOutputStream对象，构造方法中传递写入数据的目的地</span><br>FileOutputStream fos=<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;D:\\放乱七八糟\\a.txt&quot;</span>);<br>    <span class="hljs-comment">//调用FileOutputStream对象中的方法write，把数据写入到文件中</span><br><span class="hljs-keyword">byte</span> []bytes= &#123;-<span class="hljs-number">65</span>,-<span class="hljs-number">66</span>,-<span class="hljs-number">67</span>,<span class="hljs-number">68</span>,<span class="hljs-number">69</span>&#125;;<br>fos.<span class="hljs-keyword">write</span>(bytes,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>);<span class="hljs-comment">//从字节数组的下标1开始写入三个字节</span><br><span class="hljs-comment">//释放资源</span><br>fos.close();<br><br>&#125;<br><br>写入字符的方法，可以使用String类方法把字符串，转换为字节数组，<span class="hljs-keyword">byte</span> []getBytes()         把字符串转换为字节数组<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String[]args) <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-comment">//创建一个FileOutputStream对象，构造方法中传递写入数据的目的地</span><br>FileOutputStream fos=<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;D:\\放乱七八糟\\a.txt&quot;</span>);<br>             <span class="hljs-keyword">byte</span> []bytes=<span class="hljs-string">&quot;你好&quot;</span>.getBytes();<br>             System.out.<span class="hljs-keyword">println</span>(Arrays.toString(bytes));<span class="hljs-comment">//结果[-60, -29, -70, -61]</span><br>             <span class="hljs-comment">//中文在eclipse中默认编码是GBK编码所以是一个中文两个字节</span><br>             <span class="hljs-comment">//  如果写入的第一个字节是负数，那第一个字节会和第二个字节，两个字节组成一个中文显示，查询系统默认码表（中文系统GBK）</span><br>             fos.<span class="hljs-keyword">write</span>(bytes);<br>             fos.close();<br><br>&#125;<br>文件写入结果：<br>          你好<br><br>**数据的追加写和换行写**<br><br>上面的方法都是将文件中原有的东西覆盖掉<br><br>下面是追加写,续写<br><br>FileOutputStream(String name,  <span class="hljs-keyword">boolean</span> <span class="hljs-keyword">append</span>)创建文件输出流以指定的名称写入文件。<br><br>FileOutputStream(<span class="hljs-keyword">File</span> <span class="hljs-keyword">file</span>,  <span class="hljs-keyword">boolean</span> <span class="hljs-keyword">append</span>)创建文件输出流以写入由指定的 <span class="hljs-keyword">File</span>对象表示的文件。<br><br>​       参数：<br><br>​                 String name <span class="hljs-keyword">File</span> <span class="hljs-keyword">file</span>：写入数据的目的地<br><br>​                 <span class="hljs-keyword">boolean</span> <span class="hljs-keyword">append</span> ：追加写开关  <span class="hljs-keyword">true</span> ：创建对象不会覆盖源文件，继续在文件的末尾追加写数据<br><br>​                                                                         <span class="hljs-keyword">false</span>：创建一个新文件，覆盖原文件，在新文件中重新写数据<br><br><span class="hljs-comment">//创建一个FileOutputStream对象，构造方法中传递写入数据的目的地</span><br>FileOutputStream fos=<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;D:\\放乱七八糟\\a.txt&quot;</span>,<span class="hljs-keyword">true</span>);<span class="hljs-comment">//追加写</span><br>fos.<span class="hljs-keyword">write</span>(<span class="hljs-string">&quot;你好&quot;</span>.getBytes());<br>fos.close();<br>源文件内容：你好<br>程序执行之后：你好你好<br><br>**换行**<br><br>写换行符号：windows   \r\n<br><br>​                       linux:/n<br><br>​                       mac:/r<br><br><span class="hljs-comment">//创建一个FileOutputStream对象，构造方法中传递写入数据的目的地</span><br>FileOutputStream fos=<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;D:\\放乱七八糟\\a.txt&quot;</span>,<span class="hljs-keyword">true</span>);<span class="hljs-comment">//追加写</span><br>     <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">10</span>;i++) &#123;<br>fos.<span class="hljs-keyword">write</span>(<span class="hljs-string">&quot;你好&quot;</span>.getBytes());<br>     fos.<span class="hljs-keyword">write</span>(<span class="hljs-string">&quot;\r\n&quot;</span>.getBytes());<br>     &#125;<br>fos.close();<br>文件添加结果：<br>你好<br>你好<br>你好<br>你好<br>你好<br>你好<br>你好<br>你好<br>你好<br><br><br><br>​<br><br>### 字节输入流（InputStream）<br><br>FileInputStream和InputStream的介绍<br><br>java.io.InputStream抽象类时表示字节输入流的所有类的超类，可以读取字节信息到内存中，它定义了字节输入流的基本共性功能方法<br><br>定义了所有子类的共性的方法：<br><br>​              <span class="hljs-keyword">int</span>  `<span class="hljs-keyword">read</span>()`  从输入流读取数据的下一个字节。返回读取的那一个字节的内容<br><br>​               <span class="hljs-keyword">int</span>  `<span class="hljs-keyword">read</span>(<span class="hljs-keyword">byte</span>[] b)`  从输入流读取一些字节数，并将它们存储到缓冲区 `b` 。返回读取的字节数，读取的内容储存在参数数组<br><br>​               <span class="hljs-keyword">void</span> `close()`  关闭此输入流并释放与流相关联的任何系统资源。<br><br>java.io.FileInputStream <span class="hljs-keyword">extends</span> InputStream<br><br>FileInputStream  :文件字节输入流<br><br>作用：把硬盘文件中的数据，读取到内存中使用<br><br><br><br>构造方法：`FileInputStream(String name)` <br><br>- - `FileInputStream(<span class="hljs-keyword">File</span> <span class="hljs-keyword">file</span>)` <br>  - 参数：读取文件的数据源<br>  - ​              String name是文件的路径<br>  - ​              <span class="hljs-keyword">File</span> <span class="hljs-keyword">file</span>就是一个文件对象<br>  - 构造方法的作用：<br>  - ​             <span class="hljs-number">1</span>.会创建一个FileInputStream对象<br>  - ​              <span class="hljs-number">2</span>.会把FileInputStream对象指定构造方法中要读取的文件<br><br>  <br><br>读取数据的原理（硬盘--&gt;内存）：<br><br>​          java程序--&gt;jvm--&gt;os--&gt;os读取数据的方法--&gt;读取文件<br><br>字节输入流的使用步骤：<br><br>​               <span class="hljs-number">1</span>.创建FileInputStream对象，构造方法中绑定要读取的数据源<br><br>​                <span class="hljs-number">2</span>.使用FileInputStream对象中的方法<span class="hljs-keyword">read</span>，读取文件<br><br>​                <span class="hljs-number">3</span>.释放资源<br><br>```java<br><span class="hljs-comment">//1.创建FileInputStream对象，构造方法中绑定要读取的数据源</span><br>FileInputStream fos=<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;D:\\放乱七八糟\\a.txt&quot;</span>);<br><span class="hljs-comment">//2.使用FileInputStream对象中的方法read，读取文件</span><br><span class="hljs-keyword">int</span> len=fos.<span class="hljs-keyword">read</span>();<span class="hljs-comment">//读取文件中的一个字节并返回，读取到文件末尾返回-1</span><br>     <span class="hljs-comment">//读取读入的那一个字节</span><br>System.out.<span class="hljs-keyword">println</span>(len);<br>len=fos.<span class="hljs-keyword">read</span>();<span class="hljs-comment">//每次read文件中的文件指针会向后移动一位</span><br>System.out.<span class="hljs-keyword">println</span>(len);<br>len=fos.<span class="hljs-keyword">read</span>();<br>System.out.<span class="hljs-keyword">println</span>(len);<br>len=fos.<span class="hljs-keyword">read</span>();<br>System.out.<span class="hljs-keyword">println</span>(len);<br>len=fos.<span class="hljs-keyword">read</span>();<br>System.out.<span class="hljs-keyword">println</span>(len);<br>len=fos.<span class="hljs-keyword">read</span>();<br>System.out.<span class="hljs-keyword">println</span>(len);<br>fos.close();<br><br></code></pre></td></tr></table></figure></li></ul><p>&#x2F;* 发现以上读取文件是一个重复的过程，所以可以使用循环优化，不知道文件中有多少字节，使用while循环，while循环结束条件，读取到-1时结束*&#x2F;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">FileInputStream fos=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\a.txt&quot;</span>);<br>       <span class="hljs-type">int</span> len=<span class="hljs-number">0</span>;<br>       <span class="hljs-keyword">while</span>((len=fos.read())!=-<span class="hljs-number">1</span>) &#123;<br>       System.out.println((<span class="hljs-type">char</span>)(len));<br>       &#125;<br>       fos.close();<br><br></code></pre></td></tr></table></figure><p>字节输入流一次读取一个字节的原理</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918568.png" alt="image-20220630172509475"></p><p>java程序–&gt;jvm–&gt;os–&gt;os读取数据的方法–&gt;读取文件</p><p>每次读取结束，文件下标就会向后移一个</p><p><strong>字节输入流一次读取多个字节</strong></p><p>方法的参数byte[]作用</p><p>​         起到缓冲的作用，存储每次读取到的多个字节</p><p>​         数组的长度一般定义为1024（1kb）或者是1024的整数倍</p><p>int的返回值是什么</p><p>​          每次读取到的有效字节个数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java">   <span class="hljs-type">int</span>  `read(<span class="hljs-type">byte</span>[] b)`  从输入流读取一些字节数，并将它们存储到缓冲区 `b` 。<br>       返回值是读入了多少个字节<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[]args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>FileInputStream fis=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\a.txt&quot;</span>);<br><span class="hljs-comment">//读取文件，指定读取多少字节</span><br><span class="hljs-type">byte</span> []bytes=<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">2</span>];<br><span class="hljs-type">int</span> len=fis.read(bytes);<br>System.out.println(len);<span class="hljs-comment">//2</span><br>System.out.println(Arrays.toString(bytes));<span class="hljs-comment">//65,66</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * String类的构造方法</span><br><span class="hljs-comment"> * String(byte[] bytes) </span><br><span class="hljs-comment"></span><br><span class="hljs-comment">通过使用平台的默认字符集解码指定的字节数组来构造新的 String 。</span><br><span class="hljs-comment">String(byte[] bytes, int offset, int length) </span><br><span class="hljs-comment">通过使用平台的默认字符集解码指定的字节子阵列来构造新的 String offset是开始的下标，length是长度。</span><br><span class="hljs-comment"> */</span><br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes));<span class="hljs-comment">//AB</span><br><br>len=fis.read(bytes);<br>System.out.println(len);<span class="hljs-comment">//2,返回的是读到的字节的个数，没读到返回-1</span><br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes));<span class="hljs-comment">//CD</span><br>len=fis.read(bytes);<br>System.out.println(len);<span class="hljs-comment">//1</span><br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes));<span class="hljs-comment">//ED</span><br>len=fis.read(bytes);<br>System.out.println(len);<span class="hljs-comment">//-1</span><br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes));<span class="hljs-comment">//ED</span><br>fis.close();<br><br>   <br></code></pre></td></tr></table></figure><pre><code class="hljs">&#125;</code></pre><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918538.png" alt="image-20220630194653667"></p><p>第三次读取时只读取到一个E，故len返回1，而且byte数组的第二个位置没有被重新覆盖掉所以剩下的东西还是D，所以第三次输出数组还是ED，第四次没有东西读，所以返回-1结束标记，数组里还是上次的东西DE</p><p>循环优化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[]args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>FileInputStream fis=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\a.txt&quot;</span>);<br><span class="hljs-comment">//读取文件，指定读取多少字节</span><br><span class="hljs-type">byte</span> []bytes=<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br><span class="hljs-type">int</span> len=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>((len=fis.read(bytes))!=-<span class="hljs-number">1</span>) &#123;<br><span class="hljs-comment">//String(byte[] bytes, int offset, int length) </span><br><span class="hljs-comment">//通过使用平台的默认字符集解码指定的字节子阵列来构造新的 String offset是开始的下标，length是长度。</span><br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes,<span class="hljs-number">0</span>,<span class="hljs-number">5</span>));<br>&#125;<br>fis.close();<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="字节流练习"><a href="#字节流练习" class="headerlink" title="字节流练习"></a>字节流练习</h3><p>复制文件</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String []args) <span class="hljs-keyword">throws</span> IOException &#123;<br>FileInputStream fis=<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;C:\\Users\\#赵梓皓&amp;\\Pictures\\Default.jpg&quot;</span>);<br>FileOutputStream fos=<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;D:\\放乱七八糟\\a.jpg&quot;</span>);<br><span class="hljs-keyword">int</span> len=<span class="hljs-number">0</span>;<br>读取之后再写入<br><span class="hljs-keyword">while</span>((len=fis.<span class="hljs-keyword">read</span>())!=-<span class="hljs-number">1</span>) &#123;<br>fos.<span class="hljs-keyword">write</span>(len);<br><br>&#125;<br>fos.close();<span class="hljs-comment">//先关写的</span><br>fis.close();<span class="hljs-comment">//后关闭读的，如果写完了，肯定读取完毕了</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>更高效率</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">FileInputStream fis=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;C:\\Users\\#赵梓皓&amp;\\Pictures\\Default.jpg&quot;</span>);<br>FileOutputStream fos=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\a.jpg&quot;</span>);<br><span class="hljs-type">int</span> len=<span class="hljs-number">0</span>;<br><span class="hljs-type">byte</span> []bytes=<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br><span class="hljs-keyword">while</span>((len=fis.read(bytes))!=-<span class="hljs-number">1</span>) &#123;<br>fos.write(bytes,<span class="hljs-number">0</span>,len);<br><br>&#125;<br>fos.close();<span class="hljs-comment">//先关写的</span><br>fis.close();<span class="hljs-comment">//后关闭读的，如果写完了，肯定读取完毕了</span><br><br>&#125;<br></code></pre></td></tr></table></figure><pre><code class="hljs">public static void main(String []args) throws IOException &#123;    long s=System.currentTimeMillis();    FileInputStream fis=new FileInputStream(&quot;C:\\Users\\#赵梓皓&amp;\\Pictures\\Default.jpg&quot;);    FileOutputStream fos=new FileOutputStream(&quot;D:\\放乱七八糟\\a.jpg&quot;);    int len=0;    byte []bytes=new byte[1024];    while((len=fis.read(bytes))!=-1) &#123;        fos.write(bytes,0,len);            &#125;    fos.close();//先关写的    fis.close();//后关闭读的，如果写完了，肯定读取完毕了    long e=System.currentTimeMillis();    System.out.println(&quot;复制文件共耗时&quot;+(e-s)+&quot;毫秒&quot;);&#125;</code></pre><h2 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h2><p>一个中文 </p><p>​            GBK:占用两个字节</p><p>​            UTF-8：占用3个字节</p><p>所以在从硬盘文件中读入中文时没有很好的办法读入中文</p><p>使用字节流读取中文文件会产生乱码</p><h3 id="字符输入流Reader和FileReader类"><a href="#字符输入流Reader和FileReader类" class="headerlink" title="字符输入流Reader和FileReader类"></a>字符输入流Reader和FileReader类</h3><p>Reader定义 的一些子类公用的方法,它是字符输入流最顶级的父类</p><ul><li><ul><li><code>int read()</code>  读一个字符并返回</li></ul></li><li><ul><li><code>int read(char[] cbuf)</code>  将字符读入数组  用来一次读取多个字符，返回读取的字符个数。</li><li>void close()   关闭流并释放与之相关联的任何系统资源。</li></ul></li></ul><p>java.io.FileReader extends InputStreamReader extends Reader</p><p>​       FileReader:文件字符输入流</p><p>​       作用：把硬盘文件中的数据以字符的方式读取到内存中</p><p>构造方法：</p><p>​                 1.<code>FileReader(String fileName)</code>  创建一个新的 <code>FileReader</code> ，给定要读取的文件的名称。</p><p>​                  2.<code>FileReader(File file)</code>  创建一个新的 <code>FileReader</code> ，给出 <code>File</code>读取。</p><p>作用：创建一个FileReader对象</p><p>​            会把FileReader对象指向要读取的文件</p><p>​     参数：String fileName和File file是数据来源</p><pre><code class="hljs">#### 读取字符数据（以及编码问题）</code></pre><p>一次读取一个字节</p><p><code>int read()</code>  读一个字符并返回   每次只读取一个字符无论是中文还是英文还是数字</p><pre><code class="hljs">public static void main(String []args) throws IOException &#123;    FileReader fis=new FileReader(&quot;D:\\放乱七八糟\\File.txt&quot;);    int len=0;    while((len=fis.read())!=-1) &#123;        System.out.println((char)len);    &#125;    fis.close();&#125;</code></pre><p>这里出现了一点小插曲，因为我的电脑记事本默认是UTF-8编码，但eclipse默认编码是GBK所以会出现错误</p><p>我把电脑记事本编码转换为ASNI也就是默认是windows中文默认的GBK编码然后就可以实现了</p><p><code>int read(char[] cbuf)</code>  将字符读入数组  用来一次读取多个字符，返回读取的字符个数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>FileReader fis=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\File.txt&quot;</span>);<br><span class="hljs-type">char</span>[] cs=<span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">1024</span>];<span class="hljs-comment">//存储读取到的多个字符</span><br><span class="hljs-type">int</span> len=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>((len=fis.read(cs))!=-<span class="hljs-number">1</span>) &#123;<br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(cs));<br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(cs,<span class="hljs-number">0</span>,len));<span class="hljs-comment">//0是开始的索引，len是转换的个数</span><br>&#125;<br>fis.close();<br>&#125;<br>读取文件的结果<br>    <span class="hljs-number">123</span>你好<br>    <span class="hljs-number">123</span>你好<br></code></pre></td></tr></table></figure><h3 id="字符输出流"><a href="#字符输出流" class="headerlink" title="字符输出流"></a>字符输出流</h3><p>Writer类和FileWriter类的介绍</p><p>Writer是字符输出流最顶层的父类</p><p>定义了一些共性的方法</p><ul><li><ul><li><code>void write(String str)</code>  写一个字符串</li></ul></li><li><ul><li><code>void write(String str,  int off, int len)</code>  写一个字符串的一部分。</li></ul></li><li><ul><li><code>void write(int c)</code>  写一个字符</li></ul></li><li><ul><li><code>void flush()</code>  刷新流</li></ul></li></ul><p>子类：FileWriter</p><p>java.io.FileWriter extends OutputStreamWriter extends Writer</p><p>FileWriter:文件字符输出流</p><p>作用：把内存中的字符数据写入到文件中</p><p>构造方法：</p><p>​         <code>FileWriter(File file)</code>  给一个File对象构造一个FileWriter对象。 </p><p>​         <code>FileWriter(String fileName)</code>  构造一个给定文件名的FileWriter对象。</p><p>​         参数：写入数据的目的地</p><p>​                 String fileName：文件的路径 </p><p>​                 File file：是一个文件</p><p>​      构造方法的作用：</p><p>​                   1.会创建一个FileWriter的对象</p><p>​                   2.会根据构造方法中传递的文件&#x2F;文件的路径，创建文件</p><p>​                   3.会把FileWriter对象指向创建好的文件</p><p><strong>写出单个字符到文件</strong>      </p><p>字符输出流的使用步骤：</p><p>​           1.创建FileWriter对象，构造方法中绑定要写入数据的目的地</p><p>​             2.使用FileWriter中的方法write，把数据写到内存缓冲区中（字符转换字节的过程）</p><p>​             3.使用FileWriter中的方法flush，把内存缓冲区中的数据，刷新到文件中</p><p>​            4.释放资源（会先把内存缓冲区的数据刷新到文件中）所以其实不用flush</p><p>如果没有调用flush或者close方法那么文件中将不会写入内容，因为write方法是把数据写到内存缓冲区</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>     <span class="hljs-comment">//1.创建FileWriter对象，构造方法中绑定要写入数据的目的地</span><br>     FileWriter fw=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\File.txt&quot;</span>);<br>     <span class="hljs-comment">//   2.使用FileWriter中的方法write，把数据写到内存缓冲区中（字符转换字节的过程）</span><br>     fw.write(<span class="hljs-number">97</span>);<br>     <span class="hljs-comment">//3 3.使用FileWriter中的方法flush，把内存缓冲区中的数据，刷新到文件中</span><br>     fw.flush();<br>     fw.close();<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>flush方法和close方法的区别</strong></p><p>flush：刷新缓冲区，流对象可以继续使用</p><p>close：先刷新缓冲区，然后通知系统释放资源，流对象不可以再被使用了</p><p><strong>字符输出流写数据的其他方法</strong></p><p>void write(char []cbuf)写入字符数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>FileWriter fw=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\File.txt&quot;</span>);<br><span class="hljs-type">char</span> []cs= &#123;<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>&#125;;<br>fw.write(cs);<br>fw.close();<br>&#125;<br></code></pre></td></tr></table></figure><p>void write(char []cbuf,int off,int len)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>FileWriter fw=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\File.txt&quot;</span>);<br><span class="hljs-type">char</span> []cs= &#123;<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>&#125;;<br>fw.write(cs,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>);<span class="hljs-comment">//从下标为零开始，读取两个字符</span><br>fw.close();<br>&#125;<br></code></pre></td></tr></table></figure><p>void write(String str)写入字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>FileWriter fw=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\File.txt&quot;</span>);<br>String a=<span class="hljs-string">&quot;你好&quot;</span>;<br>fw.write(a);<br>fw.close();<br>&#125;<br></code></pre></td></tr></table></figure><p>void write(String str,int off,int len)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>FileWriter fw=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\File.txt&quot;</span>);<br>String a=<span class="hljs-string">&quot;你好我是java程序员&quot;</span>;<br>fw.write(a,<span class="hljs-number">0</span>,<span class="hljs-number">4</span>);<span class="hljs-comment">//从下标为零然后读取四个字符</span><br>fw.close();<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>字符输出流写数据的续写和换行</strong></p><p>续写：</p><p>​          下面是追加写,续写</p><p>FileWriter(String name,  boolean append)创建文件输出流以指定的名称写入文件。</p><p>FileWriter(File file,  boolean append)创建文件输出流以写入由指定的 File对象表示的文件。</p><p>​       参数：</p><p>​                 String name File file：写入数据的目的地</p><p>​                 boolean append ：追加写开关  true ：创建对象不会覆盖源文件，继续在文件的末尾追加写数据</p><p>​                                                                         false：创建一个新文件，覆盖原文件，在新文件中重新写数据</p><p>换行：换行符号</p><p>​            windows：\r\n</p><p>​             Linux:&#x2F;n</p><p>​             mac:&#x2F;r</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">FileWriter fw=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\File.txt&quot;</span>,<span class="hljs-literal">true</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++) &#123;<br>fw.write(<span class="hljs-string">&quot;HelloWorld&quot;</span>+i+<span class="hljs-string">&quot;\r\n&quot;</span>);<br>&#125;<br>fw.close();<br>&#125;<br>文件内容：<br>    你好我是HelloWorld0<br>HelloWorld1<br>HelloWorld2<br>HelloWorld3<br>HelloWorld4<br>HelloWorld5<br>HelloWorld6<br>HelloWorld7<br>HelloWorld8<br>HelloWorld9<br><br></code></pre></td></tr></table></figure><h2 id="IO异常的处理"><a href="#IO异常的处理" class="headerlink" title="IO异常的处理"></a>IO异常的处理</h2><p>fw.close要放在finally中因为程序无论是否报错都得有这个流的关闭</p><p>同时fw.close也有异常，所以在fianally里要嵌套一个trycatch</p><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs wren"><span class="hljs-variable">public</span> <span class="hljs-keyword">static</span> <span class="hljs-variable">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">String</span> []<span class="hljs-params">args</span>) &#123;<br><span class="hljs-comment">//提高变量fw的作用域，让finally可以使用</span><br><span class="hljs-comment">//变量在定义的时候可以没有值，但是使用的时候必须有值</span><br><span class="hljs-comment">//如果下面new执行失败了，则fw没有值，fw.close()会报错，所以</span><br><span class="hljs-title class_">FileWriter</span> <span class="hljs-variable">fw</span><span class="hljs-operator">=</span><span class="hljs-literal">null</span>;<br><span class="hljs-title function_">try</span> &#123;<br><span class="hljs-comment">//可能会产出异常的代码</span><br> <span class="hljs-variable">fw</span><span class="hljs-operator">=</span><span class="hljs-variable">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;w:<span class="hljs-char escape_">\\</span>放乱七八糟<span class="hljs-char escape_">\\</span>File.txt&quot;</span>,<span class="hljs-literal">true</span>);<br><span class="hljs-keyword">for</span>(int <span class="hljs-variable">i</span><span class="hljs-operator">=</span><span class="hljs-number">0</span>;<span class="hljs-variable">i</span><span class="hljs-operator">&lt;</span><span class="hljs-number">10</span>;<span class="hljs-variable">i</span><span class="hljs-operator">+</span><span class="hljs-operator">+</span>) &#123;<br><span class="hljs-variable">fw</span>.<span class="hljs-property">write</span>(<span class="hljs-string">&quot;HelloWorld&quot;</span><span class="hljs-operator">+</span><span class="hljs-variable">i</span><span class="hljs-operator">+</span><span class="hljs-string">&quot;<span class="hljs-char escape_">\r</span><span class="hljs-char escape_">\n</span>&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-title function_">catch</span>(<span class="hljs-params">IOException</span> <span class="hljs-params">e</span>) &#123;<br><span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-property">println</span>(<span class="hljs-variable">e</span>);<br>&#125;<br><span class="hljs-title function_">finally</span> &#123;<br><span class="hljs-comment">//一定会指定的代码</span><br><span class="hljs-comment">//创建对象失败了，fw的默认值就是null，null是不能调用方法的，会抛出NullPointerException，需要增加一个判断，不是null再把资源释放</span><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">fw!</span><span class="hljs-operator">=</span><span class="hljs-literal">null</span>)&#123;<br><span class="hljs-title function_">try</span> &#123;<br><span class="hljs-comment">//fw.close方法声明抛出了IOException异常对象，所以我们就处理这个异常对象，要么throws要么trycatch</span><br><span class="hljs-variable">fw</span>.<span class="hljs-property">close</span>();<br>&#125; <span class="hljs-title function_">catch</span> (<span class="hljs-title class_">IOException</span> <span class="hljs-variable">e</span>) &#123;<br><span class="hljs-variable">e</span>.<span class="hljs-property">printStackTrace</span>();<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>JDK7新特性</strong></p><p>在try的后面可以增加一个()，在括号中可以定义流对象</p><p>那么这个流对象的作用域就在try中有效，就不用自己关闭流了</p><p>try中代码执行完毕，会自动把流对象释放，不再写finally</p><p>try(定义流对象;定义流对象…){</p><p>&#x2F;&#x2F;可能会产生异常的代码</p><p>}</p><p>catch(异常类变量 变量名){</p><p>异常处理的逻辑</p><p>}</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//try括号中的这个流只在try中有效，就不用自己关闭流了</span><br><span class="hljs-keyword">try</span> (FileWriter fw=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;d:\\放乱七八糟\\File.txt&quot;</span>,<span class="hljs-literal">true</span>);)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++) &#123;<br>fw.write(<span class="hljs-string">&quot;HelloWorld&quot;</span>+i+<span class="hljs-string">&quot;\r\n&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">catch</span>(IOException e) &#123;<br>System.out.println(e);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a>缓冲流</h2><p>缓冲流都是在基本的流对象基础之上创建来的，就像穿上铠甲的武士一样，相当于是对基本流对象的一种增强</p><p><strong>概述：</strong></p><p>缓冲流也叫做高效流，是对四个基本的FileXxx流的增强，所以也是四个流，按照数据类型分类：</p><p>字节缓冲流：BufferedInputStream，BufferedOutputStream</p><p>字符缓冲流：BufferedReader，BufferedWriter</p><p>缓冲流的基本原理是在创建流对象的时候，会创建一个内置的默认大小的缓冲区数组，通过缓冲区读写，减少系统IO次数，从而提高读写效率</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918850.png" alt="image-20220701111555045"></p><p>就是返回文件内容的时候，不是一个一个返回，是把所有的都整到一个缓冲区里然后全部一起以一个数组的形式返回</p><h3 id="字节缓冲输出流"><a href="#字节缓冲输出流" class="headerlink" title="字节缓冲输出流"></a>字节缓冲输出流</h3><p>java.io.BufferedOutputStream extends OutputStream</p><p>继承的父类的共性方法</p><p>OutputStream有的方法它都有</p><p>构造方法</p><ul><li><ul><li><code>BufferedOutputStream(OutputStream out)</code>  创建一个新的缓冲输出流，以将数据写入指定的底层输出流</li></ul></li><li><ul><li><code>BufferedOutputStream(OutputStream out, int size)</code>  创建一个新的缓冲输出流，以便以指定的缓冲区大小将数据写入指定的底层输出流。 </li><li>参数：OutputStream     就是一个字节输出流         我们可以传递FileOutputStream，缓冲流会给FileOutputStream增加一个缓冲区，提高FileOutputStream的的写入效率</li><li>int size：指定缓冲流内部缓冲区的大小，不指定就是默认的大小</li><li>使用步骤：</li><li>​        1.创建FileOutputStream对象，构造方法中绑定要输出的目的地</li><li>​          2.创建BufferedOutputStream对象，构造方法中传递FileOutputStream对象，提高FileOutputStream对象效率</li><li>​        3.使用BufferedOutputStream对象中的方法write，把数据写入到内部缓冲区中</li><li>​           4.使用BufferedOutputStream对象中方法flush，吧内部缓冲区的数据刷新到文件中</li><li>​            5.释放资源（会先调用flush方法刷新数据，所以第四步可以省略）</li><li></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-comment">// 1.创建FileOutputStream对象，构造方法中绑定要输出的目的地</span><br>FileOutputStream fos= <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\File.txt&quot;</span>);<br><span class="hljs-comment">//2.创建BufferedOutputStream对象，构造方法中传递FileOutputStream对象，提高FileOutputStream对象效率</span><br>BufferedOutputStream bos=<span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(fos);<br><span class="hljs-comment">//3.使用BufferedOutputStream对象中的方法write，把数据写入到内部缓冲区中</span><br>bos.write(<span class="hljs-string">&quot;我把数据写入到内部缓冲区中&quot;</span>.getBytes());<br><span class="hljs-comment">//4.使用BufferedOutputStream对象中方法flush，吧内部缓冲区的数据刷新到文件中</span><br>bos.flush();<br><span class="hljs-comment">//5.释放资源（会先调用flush方法刷新数据，所以第四步可以省略）</span><br>bos.close();<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="字节缓冲输入流"><a href="#字节缓冲输入流" class="headerlink" title="字节缓冲输入流"></a>字节缓冲输入流</h3><p>java.io.BufferedInputStream extends InputStream</p><p>BufferedInputStream:字节缓冲输入流</p><p>所有InputStream有的方法他都有</p><p>构造方法</p><ul><li><ul><li><code>BufferedInputStream(InputStream in)</code>  创建一个 <code>BufferedInputStream</code>并保存其参数，输入流 <code>in</code>  ，供以后使用。</li></ul></li><li><ul><li><code>BufferedInputStream(InputStream in, int size)</code>  创建 <code>BufferedInputStream</code>具有指定缓冲区大小，并保存其参数，输入流  <code>in</code> ，供以后使用</li></ul></li></ul><p>参数; </p><p>​           InputStream in:字节输入流</p><p>​                     我们可以传递FileInputStream，缓冲区会给FileInputStream增加一个缓冲区，提高FileInputStream的读取效率</p><p>使用步骤：</p><p>​         1.创建一个FileInputStream对象，构造方法中绑定要读取的数据源</p><p>​            2.创建BufferedInputStream对象，构造方法中传递FileInputStream对象，提高FileInputStream对象的读取效率</p><p>​          3.使用BufferedInputStream对象中的方法read()，读取文件</p><p>​           4.释放资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-comment">//1.创建一个FileInputStream对象，构造方法中绑定要读取的数据源</span><br>FileInputStream fis=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\File.txt&quot;</span>);<br><span class="hljs-comment">//2.创建BufferedInputStream对象，构造方法中传递FileInputStream对象，提高FileInputStream对象的读取效率</span><br>BufferedInputStream bis=<span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(fis);<br><span class="hljs-comment">//  3.使用BufferedInputStream对象中的方法read()，读取文件</span><br><span class="hljs-type">int</span> len=<span class="hljs-number">0</span>;<span class="hljs-comment">//记录每次读取到的字节</span><br><span class="hljs-keyword">while</span>((len=bis.read())!=-<span class="hljs-number">1</span>) &#123;<br>System.out.println(len);<br>&#125;<br>bis.close();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-comment">//1.创建一个FileInputStream对象，构造方法中绑定要读取的数据源</span><br>FileInputStream fis=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\File.txt&quot;</span>);<br><span class="hljs-comment">//2.创建BufferedInputStream对象，构造方法中传递FileInputStream对象，提高FileInputStream对象的读取效率</span><br>BufferedInputStream bis=<span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(fis);<br><span class="hljs-comment">//  3.使用BufferedInputStream对象中的方法read()，读取文件</span><br><span class="hljs-type">int</span> len=<span class="hljs-number">0</span>;<span class="hljs-comment">//记录每次读取的有效字节个数</span><br><span class="hljs-type">byte</span>[] bytes=<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br><span class="hljs-keyword">while</span>((len=bis.read(bytes))!=-<span class="hljs-number">1</span>) &#123;<span class="hljs-comment">//最后这个-1是不会返回给len的</span><br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes,<span class="hljs-number">0</span>,len));<br>&#125;<br>bis.close();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="用缓冲流来复制文件"><a href="#用缓冲流来复制文件" class="headerlink" title="用缓冲流来复制文件"></a>用缓冲流来复制文件</h3><p>速度变得更快，可见效率变得更高</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span>System.currentTimeMillis();<br>FileInputStream fis=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;C:\\Users\\#赵梓皓&amp;\\Pictures\\Default.jpg&quot;</span>);<br>BufferedInputStream bis=<span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(fis);<br>FileOutputStream fos=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\a.jpg&quot;</span>);<br>BufferedOutputStream bos=<span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(fos);<br><span class="hljs-type">int</span> len=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>((len=bis.read())!=-<span class="hljs-number">1</span>) &#123;<br>bos.write(len);<br>&#125;<br><br>bos.close();<br>bis.close();<br><span class="hljs-type">long</span> end1=System.currentTimeMillis();<br>System.out.println(<span class="hljs-string">&quot;耗时&quot;</span>+(end1-end)+<span class="hljs-string">&quot;毫秒&quot;</span>);<br><br>&#125;<br>耗时<span class="hljs-number">42</span>毫秒<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span>System.currentTimeMillis();<br>FileInputStream fis=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;C:\\Users\\#赵梓皓&amp;\\Pictures\\Default.jpg&quot;</span>);<br>BufferedInputStream bis=<span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(fis);<br>FileOutputStream fos=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\a.jpg&quot;</span>);<br>BufferedOutputStream bos=<span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(fos);<br><span class="hljs-type">int</span> len=<span class="hljs-number">0</span>;<br><span class="hljs-type">byte</span> []bytes=<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br><span class="hljs-keyword">while</span>((len=bis.read(bytes))!=-<span class="hljs-number">1</span>) &#123;<br>bos.write(bytes,<span class="hljs-number">0</span>,len);<br>&#125;<br><br>bos.close();<br>bis.close();<br><span class="hljs-type">long</span> end1=System.currentTimeMillis();<br>System.out.println(<span class="hljs-string">&quot;耗时&quot;</span>+(end1-end)+<span class="hljs-string">&quot;毫秒&quot;</span>);<br>&#125;<br>耗时<span class="hljs-number">4</span>毫秒<br></code></pre></td></tr></table></figure><h3 id="字符缓冲输出流"><a href="#字符缓冲输出流" class="headerlink" title="字符缓冲输出流"></a>字符缓冲输出流</h3><ul><li>&#96;&#96;&#96;<br>public class BufferedWriter<br>extends Writer<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><br>有继承自父类的共性成员方法，所有Writer的方法他都有<br><br>构造方法<br><br>- - <span class="hljs-constructor">`BufferedWriter(Writer <span class="hljs-params">out</span>)</span>`  创建使用默认大小的输出缓冲区的缓冲字符输出流<br><br>- - <span class="hljs-constructor">`BufferedWriter(Writer <span class="hljs-params">out</span>,  <span class="hljs-params">int</span> <span class="hljs-params">sz</span>)</span>`  创建一个新的缓冲字符输出流，使用给定大小的输出缓冲区<br><br>参数：<br><br>​           第一个参数是一个字符输出流<br><br>​                    我们可以传递FileWriter，缓冲流会给FileWriter增加一个缓冲区，提高FileWriter的写入效率<br><br>​      第二个参数 <span class="hljs-built_in">int</span> sz：指定缓冲区的大小，不写是默认大小<br><br>特有的成员方法<br><br>- - `void <span class="hljs-keyword">new</span><span class="hljs-constructor">Line()</span>`  写一行行分隔符。<br><br><br><br>方法和上面的都一样，便不再注释<br><br>```java<br>public static void main(String <span class="hljs-literal">[]</span>args) throws IOException &#123;<br>FileWriter fw=<span class="hljs-keyword">new</span> <span class="hljs-constructor">FileWriter(<span class="hljs-string">&quot;D:\\放乱七八糟\\File.txt&quot;</span>)</span>;<br>BufferedWriter bw=<span class="hljs-keyword">new</span> <span class="hljs-constructor">BufferedWriter(<span class="hljs-params">fw</span>)</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++) &#123;<br>bw.write(<span class="hljs-string">&quot;你好&quot;</span>);<br>bw.<span class="hljs-keyword">new</span><span class="hljs-constructor">Line()</span>;<span class="hljs-comment">//用来进行换行</span><br>&#125;<br>bw.flush<span class="hljs-literal">()</span>;<br>bw.close<span class="hljs-literal">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p><strong>BufferedReader字符缓冲输入流</strong></p><p>Java.io.BufferedReader extends Reader</p><p>继承自父类的共性成员方法</p><p>构造方法</p><ul><li><ul><li><code>BufferedReader(Reader in)</code>  创建使用默认大小的输入缓冲区的缓冲字符输入流。</li></ul></li><li><ul><li><code>BufferedReader(Reader in,  int sz)</code>  创建使用指定大小的输入缓冲区的缓冲字符输入流</li></ul></li></ul><p>参数： 字符输入流</p><p>​             我们可以传递FileReader，缓冲流会给FileReader增加一个缓冲区，提高FileReader的读取效率</p><p>特有的成员方法</p><ul><li><ul><li><code>String readLine()</code>  读一行文字。</li></ul></li></ul><p>​           行的终止符浩：通过下列字符之一即可认为某行已经终止：换行(‘\n’),回车(‘\r’),或回车后直接跟着换行(\r\n)</p><p>​        返回值：</p><p>​            包含该行内容的字符串，不包含任何终止符，如果已经达到里流末尾，返回null</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-built_in">String</span> []args) <span class="hljs-keyword">throws</span> IOException &#123;<br>FileReader fr=<span class="hljs-keyword">new </span><span class="hljs-class title_">FileReader</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\File.txt&quot;</span>);<br><span class="hljs-built_in">BufferedReader</span> br=<span class="hljs-keyword">new </span><span class="hljs-class title_">BufferedReader</span>(fr);<br><span class="hljs-built_in">String</span> <span class="hljs-built_in">line</span>;<br><span class="hljs-keyword">while</span>((<span class="hljs-built_in">line</span>=br.<span class="hljs-property">readLine</span>())!=<span class="hljs-literal">null</span>) &#123;<br>System.<span class="hljs-property">out</span>.<span class="hljs-property">println</span>(<span class="hljs-built_in">line</span>);<br>&#125;<br>br.<span class="hljs-property">close</span>();<br>&#125;<br>结果:<br>可以输出所有行<br></code></pre></td></tr></table></figure><h3 id="练习：文本排序（以及转义）"><a href="#练习：文本排序（以及转义）" class="headerlink" title="练习：文本排序（以及转义）"></a>练习：文本排序（以及转义）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>HashMap&lt;String,String&gt; hm=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String,String&gt;();<br>FileReader fr=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\File1.txt&quot;</span>);<br>FileWriter fw=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\File.txt&quot;</span>);<br>BufferedWriter bw=<span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(fw);<br>BufferedReader br=<span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(fr);<br>String line;<br><span class="hljs-keyword">while</span>((line=br.readLine())!=<span class="hljs-literal">null</span>) &#123;<br>String []str=line.split(<span class="hljs-string">&quot;\\.&quot;</span>);<span class="hljs-comment">//split用的是正则表达式.有特殊含义，所以用\转义，而java中\\才是\</span><br>    <span class="hljs-comment">//      \t,\n等有特殊含义所以java中字符串如果出现\会有歧义，所以用\\来吧\替换为一个普通字符，这个普通字符进了正则表达式中又可以把.转义，所以在java中使用正则表达式匹配“\”时就需要写成&quot;\\\\&quot;</span><br>    <span class="hljs-comment">//把切割好的序号和文本内容储存到HashMap集合中(key序号是有序的，会自动排序1，2，3，4)</span><br>hm.put(str[<span class="hljs-number">0</span>], str[<span class="hljs-number">1</span>]);<br>&#125;<br><span class="hljs-keyword">for</span>(String b:hm.keySet()) &#123;<br>String value=hm.get(b);<br>line=b+<span class="hljs-string">&quot;.&quot;</span>+value;<br>bw.write(line);<br>bw.newLine();<br>&#125;<br>bw.close();<br>br.close();<br><br>&#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>文件原内容</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">1.我是<br>2.我才不是<br>4.我真的不是<br>3.你不是<br></code></pre></td></tr></table></figure><p>文件变更以后</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">1.我是<br>2.我才不是<br>3.你不是<br>4.我真的不是<br></code></pre></td></tr></table></figure><p>插曲：我读取内容的文件是utf-8形式的，写入的文件是以gbk打开，所以出现乱码我把utf-8改为gbk就好了</p><h2 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h2><p>字符编码：</p><p>计算机中储存的信息都是用二进制表示的，而我们在屏幕上看到的数字英文标点符号汉字等字符是二进制转换之后的结果</p><p>按照某种规则，将字符储存到计算机中，成为编码，反之，将存储在计算机中的二进制数按照某种规则解析出来称为解码，比如说按照A规则存储，同样按照A规则解析，那么就能显示正确的文本符号，反之，按照A规则存储，按照B规则解析，就会出现乱码</p><p>编码：字符–》字节</p><p>解码：字节–》字符</p><p>字符编码：就是一套自然语言的字符与二进制数之间的对应规则。</p><p>编码表：生活中文字和计算机中二进制的对应规则</p><p>字符集：</p><p>Ascii码字符集–》Ascii码编码</p><p>GBK字符集–》GBK编码</p><p>Unicode字符集–》UTF8编码，UTF16编码，UTF32编码</p><h3 id="转换流原理"><a href="#转换流原理" class="headerlink" title="转换流原理"></a>转换流原理</h3><p>输入转换原理</p><p>用InputStreamReader</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918941.png" alt="image-20220701201821452"></p><p>FileReader底层还是FileInputStream将字节转换为字符时只能用IDE默认编码</p><p>而InputStreamReader可以指定字节转换为字符的编码形式</p><p>输出转换原理</p><p>用OutputStreamWriter</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918631.png" alt="image-20220701202244844"></p><p>FileWriter的底层实现还是FileOutputStream，只能将字符转换为IDE默认的编码的字节</p><p>如果用OutputStreamWriter  可以指定字符转字节的时候的编码格式</p><p><strong>编码引出的问题FileReader读取文件</strong></p><p>就是FileReader能读取编译器默认编码的文件，比如eclipse时GBK，IDEA是UTF-8</p><p>下面演示在eclipse用FileReader读取UTF-8</p><h3 id="OutputStreamWriter"><a href="#OutputStreamWriter" class="headerlink" title="OutputStreamWriter"></a>OutputStreamWriter</h3><ul><li>OutputStreamWriter是字符的桥梁流以字节流：向其写入的字符编码成使用指定的字节<a href="../../java/nio/charset/Charset.html"><code>charset</code></a> 。  它使用的字符集可以由名称指定，也可以被明确指定，或者可以接受平台的默认字符集。</li><li>java.io.BufferedWriter extends Writer</li><li>Writer中的方法都可以使用</li></ul><p>构造方法：</p><ul><li><ul><li><code>OutputStreamWriter(OutputStream out)</code>  创建一个使用默认字符编码的OutputStreamWriter</li></ul></li><li><ul><li><code>OutputStreamWriter(OutputStream out, String charsetName)</code>  创建一个使用命名字符集的OutputStreamWriter。</li></ul></li></ul><p>参数：OutputStream out：字节输出流，可以用来写转换之后的字节到文件中</p><p>​            String charsetName：指定的编码表的名称，不区分大小写，可以使utf-8&#x2F;UTF-8&#x2F;GBK&#x2F;</p><pre><code class="hljs">public static void main(String []args) throws IOException &#123;    //创建OutputStreamWriter对象，构造方法中传递字节输出流的指定的编码表名称    OutputStreamWriter osw=new OutputStreamWriter(new FileOutputStream(&quot;D:\\放乱七八糟\\File.txt&quot;),&quot;UTF-8&quot;);    //使用OutputStreamWriter对象中的方法write，把字符转换为字节存储缓冲区中（编码）    osw.write(&quot;你好&quot;);    //使用OutputStreamWriter对象中的flush，把内存缓冲区中的字节刷新到文件中（使用字节流写字节）    osw.flush();    //释放内存    osw.close();&#125;将你好写入了UTF-8编码显示的文件</code></pre><h3 id="InputStreamReader"><a href="#InputStreamReader" class="headerlink" title="InputStreamReader"></a>InputStreamReader</h3><p>java.io.InputStreamReader extends Reader</p><ul><li>InputStreamReader是从字节流到字符流的桥：它读取字节，并使用指定的<code>charset</code>将其解码为<a href="../../java/nio/charset/Charset.html">字符</a>  。 它使用的字符集可以由名称指定，也可以被明确指定，或者可以接受平台的默认字符集。</li><li>它由继承字父类的共性的成员方法</li><li>​       Reader有的方法它都有</li></ul><p>构造方法：</p><p>​          <code>InputStreamReader(InputStream in)</code>  创建一个使用默认字符集的InputStreamReader</p><p>​         <code>InputStreamReader(InputStream in, String charsetName)</code>  创建一个使用命名字符集的InputStreamReader</p><p>​          参数：</p><p>​                     InputStream in：字节输入流，用来读取文件中保存的字节</p><p>​                     String charsetName：字符表名称</p><pre><code class="hljs">           public static void main(String []args) throws IOException &#123;    //创建InputStreamWriter对象，构造方法中传递字节输入流和指定的编码表名称    InputStreamReader osw=new InputStreamReader(new FileInputStream(&quot;D:\\放乱七八糟\\File.txt&quot;),&quot;UTF-8&quot;);    //使用InputStreamWriter对象中的方法read()，把字符转换为字节存储缓冲区中（编码）    int len=0;        while((len=osw.read())!=-1) &#123;        System.out.println((char)len);    &#125;    //释放内存    osw.close();&#125;即是文件内容是UTF-8，也可以给他读入到内存中结果：你好</code></pre><p><strong>转换文件编码的练习</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>           InputStreamReader isr=<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\File.txt&quot;</span>),<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>           OutputStreamWriter osw=<span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\File1.txt&quot;</span>),<span class="hljs-string">&quot;GBK&quot;</span>);<br>           <span class="hljs-type">int</span> len=<span class="hljs-number">0</span>;<br>           <span class="hljs-keyword">while</span>((len=isr.read())!=-<span class="hljs-number">1</span>) &#123;<br>           osw.write(len);<br>           &#125;<br>           osw.close();<br>           isr.close();<br>&#125;<br>将UTF-<span class="hljs-number">8</span>的文件转换为GBK编码的文件<br></code></pre></td></tr></table></figure><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><p>ObjectOutputStream extends OutputStream</p><p>ObjectOutputStream：对象的序列化流</p><p>作用：把对象以流的形式写入到文件中保存</p><p>构造方法：  </p><p>​           <code>ObjectOutputStream(OutputStream out)</code>  创建一个写入指定的OutputStream的ObjectOutputStream。</p><p>​                     参数：</p><p>​                                     床第一个字节输出流</p><p>特有的成员方法：</p><p>​               <code>writeObject(Object obj)</code>  将指定的对象写入ObjectOutputStream。</p><p>使用步骤; </p><p>​                     1.创建ObjectOutputStream对象，构造方法中传递字节输出流</p><p>​                      2.使用ObjectOutputStream对象中的writeObject，把对象写入到文件中</p><p>​                        3.释放资源</p><p>类只有实现了Serializable接口才能被序列化或者反序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span>&#123;<br><br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> name;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br><span class="hljs-built_in">this</span>.name = name;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> age;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br><span class="hljs-built_in">this</span>.age = age;<br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Test</span><span class="hljs-params">()</span> &#123;<br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Test</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> age)</span> &#123;<br><span class="hljs-built_in">this</span>.name=name;<br><span class="hljs-built_in">this</span>.age=age;<br>&#125;<br><br><br><br><br>&#125;<br>文件内容以二进制字节来存储所以无法直接打开看<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br><br>ObjectOutputStream oos=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\File.txt&quot;</span>));<br>oos.writeObject(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>(<span class="hljs-string">&quot;小美女&quot;</span>,<span class="hljs-number">18</span>));<br>oos.close();<br>&#125;<br></code></pre></td></tr></table></figure><p>ObjectInputStream extends InputStream</p><p>ObjectInputStream :对象的反序列化流</p><p>作用：把文件中保存的对象以流的形式读取出来使用过</p><p>构造方法:</p><p>​                <code>ObjectInputStream(InputStream in)</code>  创建从指定的InputStream读取的ObjectInputStream</p><p>​                     参数：传入一个字节输入流</p><p>特有的成员方法：</p><p>​                <code>readObject()</code>  从ObjectInputStream读取一个对象。 </p><p>使用步骤：</p><p>1.创建ObjectInputStream对象，构造方法中传递字节输入流</p><p>2.使用ObjectInputStream对象中的方法readObject读取保存对象的文件</p><p>3.释放资源</p><p>4.使用读取出来的对象（打印）</p><p>readObject方法声明抛出了ClassNotFoundException（Class文件找不到异常）当不存在对象的class文件时抛出此异常</p><p>反序列化的前提：</p><p>​                  1.类必须实现Serializable接口</p><p>​                   2.必须存在类对应的class文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br><span class="hljs-comment">//1.创建ObjectInputStream对象，构造方法中传递字节输入流</span><br>ObjectInputStream ois=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D:\\放乱七八糟\\File.txt&quot;</span>));<br><span class="hljs-comment">//2.使用ObjectInputStream对象中的方法readObject读取保存对象的文件</span><br>Object o=ois.readObject();<span class="hljs-comment">//这里必须使用Object类型来接受</span><br>ois.close();<br><span class="hljs-comment">//4.使用读取出来的对象（打印）</span><br>System.out.println(o);<br>Test t=(Test)o;<br>System.out.println(t.getName()+t.getAge());<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>transient关键字</strong></p><p>static关键字:静态关键字</p><p>1.静态优先于非静态加载到内存中（静态优先于对象进入到内存中）</p><p>被static修饰的成员变量不能被序列化的，序列化的都是对象</p><p>private static int age</p><p>oos.writeObject(new Person(“小美女”,18));</p><p>Object o&#x3D;ois.readObject();</p><p>Person{name&#x3D;”小美女”,age&#x3D;0}</p><p>所以静态的不能够被序列化</p><p>transient关键字：瞬态关键字</p><p>​      被transient修饰的成员变量，不能被序列化</p><p>它的功能就是不让某个属性序列化，但是又没有静态的含义</p><h4 id="InvalidClassException异常"><a href="#InvalidClassException异常" class="headerlink" title="InvalidClassException异常"></a>InvalidClassException异常</h4><p>当分别一次序列化和反序列化之后是正常的，但现在你去改了那个序列化的类属性，然后没有对他序列化而是直接反序列化</p><p>就会报InvalidClassException</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918586.png" alt="image-20220702095302204"></p><p>就是当你改动了类之后你txt文件中的类的id和你class文件中的id不同就导致不能够反序列化成功</p><p>所以就在类中加一个private static final long serialVersionUID&#x3D;1L;</p><p>这样无论怎么改id都不会变了</p><h4 id="练习：序列化集合"><a href="#练习：序列化集合" class="headerlink" title="练习：序列化集合"></a>练习：序列化集合</h4><p>练习：序列化集合</p><p>​             当我们想在文件中保存多个对象的时候</p><p>​             可以把多个对象储存到一个集合中</p><p>​             对集合进行序列化和反序列化</p><p>分析：</p><p>​          1.定义一个存储Person对象的集合和ArrayList集合</p><p>​            2.往ArrayList集合中存储Person对象</p><p>​             3.创建一个序列化流ObjectOutputStream </p><p>​           4.使用ObjectOutputStream对象中的方法writeObject，对集合进行序列化</p><p>​           5.创建一个反序列化ObjectInputStream对象</p><p>​             6.使用ObjectInput中的方法readObject读取文件中保存的集合</p><p>​            7.把Object类型的集合转换为ArrayList类型</p><p>​          8，遍历这个ArrayList集合</p><p>​        9.释放资源</p><pre><code class="hljs">public static void main(String []args) throws IOException, ClassNotFoundException &#123;// 1.定义一个存储Person对象的集合和ArrayList集合    ArrayList&lt;Test&gt; list=new ArrayList&lt;Test&gt;();    //   2.往ArrayList集合中存储Person对象    list.add(new Test(&quot;张三&quot;,18));    list.add(new Test(&quot;例四&quot;,18));    list.add(new Test(&quot;赵武&quot;,18));    //3.创建一个序列化流ObjectOutputStream     ObjectOutputStream oos=new ObjectOutputStream(new FileOutputStream(&quot;D:\\放乱七八糟\\File.txt&quot;));    //4.使用ObjectOutputStream对象中的方法writeObject，对集合进行序列化    oos.writeObject(list);    // 5.创建一个反序列化ObjectInputStream对象    ObjectInputStream ois=new ObjectInputStream(new FileInputStream(&quot;D:\\放乱七八糟\\File.txt&quot;));    //     6.使用ObjectInput中的方法readObject读取文件中保存的集合    Object o=ois.readObject();    //7.把Object类型的集合转换为ArrayList类型    ArrayList&lt;Test&gt; list2=(ArrayList&lt;Test&gt;)o;    //8，遍历这个ArrayList集合    for(Test p:list2) &#123;        System.out.println(p);    &#125;    //  9.释放资源    ois.close();    oos.close();&#125;</code></pre><h2 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h2><h4 id="重定向标准输入输出"><a href="#重定向标准输入输出" class="headerlink" title="重定向标准输入输出"></a>重定向标准输入输出</h4><p>java.io.PrintStream</p><p>​        <code>PrintStream</code>为另一个输出流添加了功能，即能够方便地打印各种数据值的表示。</p><p>PrintStream特带你：</p><p>​      1.只负责数据的输出，不负责数据的读取</p><p>​       2.与其他输出流不同，PrintStream永远不会抛出IOException</p><p>​       3.有特有的方法，print，println方法</p><p>​                    void print(任意类型的值)</p><p>​                    void println(任意类型的值并换行)</p><p>构造方法：</p><p>​            <code>PrintStream(File file)</code>  输出的目的地是一个文件</p><p>​             <code>PrintStream(OutputStream out)</code>  输出的目的地是一个字节输出流</p><p>​           <code>PrintStream(String fileName)</code>  输出的目的地是一个文件路径</p><p>printStream extends OutputStream</p><p>继承自父类的成员方法</p><p>  注意：</p><p>​         如果使用继承自父类的write方法那么查看数据的时候会查询编码表</p><p>​          如果是用自己特有的方法print&#x2F;println方法写数据，写的数据原样输出</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs gradle">```java<br>用父类的方法会查询编码表<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String []args) <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>PrintStream ps=<span class="hljs-keyword">new</span> PrintStream(<span class="hljs-string">&quot;D:\\放乱七八糟\\File.txt&quot;</span>);<br>ps.<span class="hljs-keyword">write</span>(<span class="hljs-number">97</span>);<br>ps.close();<br>&#125;<br>文件：文件的内容是a<br>```<br><br>用自己的方法是原样输出<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String []args) <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br><br>PrintStream ps=<span class="hljs-keyword">new</span> PrintStream(<span class="hljs-string">&quot;D:\\放乱七八糟\\File.txt&quot;</span>);<br>ps.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;a&quot;</span>);<br>ps.<span class="hljs-keyword">println</span>(<span class="hljs-number">97</span>);<br>ps.<span class="hljs-keyword">println</span>(<span class="hljs-number">100</span>);<br>ps.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;我是&quot;</span>);<br>ps.close();<br>&#125;<br>文件内容是：a<br>              <span class="hljs-number">97</span><br>              <span class="hljs-number">100</span><br>              我是<br></code></pre></td></tr></table></figure><p>可以改变输出语句的目的地（打印流的流向）</p><p>输出语句：默认在控制台输出</p><p>使用System.setOut放法改变输出语句的目的为参数传递的打印流的目的地</p><p>​      static void setOut(printStream out)</p><p>​     <strong>重新分配”标准”输出流</strong></p><p><strong>下面这个是将System.out的输出重定向到文件输出而不是在屏幕上输出</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String []args</span>) throws IOException, ClassNotFoundException</span> &#123;<br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;我在控制台输出&quot;</span>);<br><br>PrintStream ps=<span class="hljs-keyword">new</span> PrintStream(<span class="hljs-string">&quot;D:\\放乱七八糟\\File.txt&quot;</span>);<br>System.setOut(ps);<span class="hljs-comment">//把输出语句的目的地改变为打印流的目的地</span><br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;我在打印流的目的地中输出&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>改变这个输出语句在流里输出</p><p>使用System的setIn()方法将系统标准输入重定向到该文件输入流，不会等待用户输入而是直接输出了文件的内容</p><h1 id="java的多线程详解"><a href="#java的多线程详解" class="headerlink" title="java的多线程详解"></a>java的多线程详解</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>多线程案例：一起开黑打王者荣耀，你给我发消息的时候我也能给你发消息</p><p><strong>多线程：</strong></p><p>可以实现一个并发操作，在一个程序中可以定义多个线程并同时运行它们，每个线程可以执行不同的任务。</p><p><strong>进程（Process）：</strong>在操作系统中运行的程序就是进程，比如你的qq播放器游戏IDE</p><p>进程则是执行程序的一次执行过程，它是一个动态的概念，是系统资源分配的单位</p><p><strong>线程(Thread)：</strong>一个进程可以有多个线程，如视频中同时听声音，看图像，看弹幕等等</p><p>进程可以包含多个线程，一个进程至少有一个Main线程，不然没有存在的意义</p><p>多线程和多任务的区别：<strong>多任务是针对操作系统而言的</strong>，代表操作系统可以同时执行的程序个数；<strong>多线程是针对一个程序而言的</strong>，代表一个程序可以同时执行的线程的个数，每个线程完成不同的任务。</p><p>在一个进程中，如果开辟了多个线程，线程的运行由调度器安排调度，调度器(cpu)是与操作系统紧密相关的，先后顺序是不能人为干预的</p><p>对同一份资源操作时，会存在资源抢夺的问题，需要加入并发控制（10000个人抢100张票必定有人抢不到）</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918083.png" alt="image-20220704100010536"></p><h2 id="继承Thread类"><a href="#继承Thread类" class="headerlink" title="继承Thread类"></a>继承Thread类</h2><ul><li>创建一个新的执行线程有两种方法。 一个是将一个类声明为<code>Thread</code>的子类。  这个子类应该重写<code>run</code>类的方法<code>Thread</code> 。  创建线程对象，调用start()方法启动线程</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">//run方法线程体</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">20</span>;i++) &#123;<br>System.out.println(<span class="hljs-string">&quot;我在看书&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br><span class="hljs-comment">//main线程主线程</span><br><span class="hljs-comment">//创建一个线程对象</span><br>Hello testThread=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hello</span>();<br><span class="hljs-comment">//调用start()方法开启线程</span><br>testThread.start();<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">20</span>;i++) &#123;<br>System.out.println(<span class="hljs-string">&quot;我在学习&quot;</span>);<br>&#125;<br>&#125;<br><br><br>&#125;<br>用start方法是开了一条新线程，两条线程同时执行（线程不一定立即执行,cpu调度安排），如果是调用run方法则就是先执行run方法再回到主线程执行<br></code></pre></td></tr></table></figure><p>注意：县城开启不一定立即执行，由cpu调度执行</p><p><strong>网图下载</strong></p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918689.png" alt="image-20220704095925383"></p><p>建立多个TestThread2对象，开辟多个线程，同时执行</p><h2 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h2><p>定义MyRunnable类实现Runnable接口</p><p>实现run()方法，编写线程执行体</p><p>创建线程对象，调用start()方法启动线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">//run方法线程体</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">20</span>;i++) &#123;<br>System.out.println(<span class="hljs-string">&quot;我在看书&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br>            <span class="hljs-comment">//创建一个runnable接口的实现类对象</span><br>Hello testThread3=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hello</span>();<br><span class="hljs-comment">//创建线程对象，通过线程对象来开启我们的线程，代理</span><br>Thread thread=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(testThread3);<br>thread.start();<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">20</span>;i++) &#123;<br>System.out.println(<span class="hljs-string">&quot;我在学习&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>小结</strong></p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918647.png" alt="image-20220704105709084"></p><p><strong>初始并发问题</strong></p><p>&#x2F;&#x2F;多个线程同时操作同一个对象</p><p>&#x2F;&#x2F;买火车票的例子</p><p>&#x2F;&#x2F;返现问题：多个线程操作同一个资源的情况下，线程不安全，数据紊乱，就是小明老师黄牛党都拿到了第十张票，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> ticketNums=<span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>    <span class="hljs-keyword">if</span>(ticketNums&lt;=<span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">try</span> &#123;<br>Thread.sleep(<span class="hljs-number">200</span>);<span class="hljs-comment">//模拟延时,是当前线程进入休息状态</span><br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br>    System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;--&gt;拿到了第&quot;</span>+ticketNums--+<span class="hljs-string">&quot;票&quot;</span>);<br>    <br><br>    &#125;<br>    &#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br>Hello ticket=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hello</span>();<br><span class="hljs-comment">//Thread后面的第二个参数是这个线程的名字</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(ticket,<span class="hljs-string">&quot;小明&quot;</span>).start();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(ticket,<span class="hljs-string">&quot;老师&quot;</span>).start();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(ticket,<span class="hljs-string">&quot;黄牛党&quot;</span>).start();<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="龟兔赛跑"><a href="#龟兔赛跑" class="headerlink" title="龟兔赛跑"></a>龟兔赛跑</h2><p>相当于乌龟和兔子是两条线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> hello;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br><span class="hljs-keyword">private</span> String winner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">100</span>;i++) &#123;<br><span class="hljs-comment">//模拟兔子休息</span><br><span class="hljs-keyword">if</span>(Thread.currentThread().getName().equals(<span class="hljs-string">&quot;兔子&quot;</span>)&amp;&amp;i%<span class="hljs-number">10</span>==<span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>Thread.sleep(<span class="hljs-number">2</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br><span class="hljs-comment">//判断比赛是否结束</span><br><span class="hljs-type">boolean</span> flag=gameOver(i);<br><span class="hljs-comment">//如果比赛结束了，就停止程序</span><br><span class="hljs-keyword">if</span>(flag) &#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;--&gt;跑了&quot;</span>+i+<span class="hljs-string">&quot;步&quot;</span>);<br><br><br><br>&#125;<br><br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">gameOver</span><span class="hljs-params">(<span class="hljs-type">int</span> step)</span> &#123;<br><span class="hljs-comment">//判断是否存在胜利者</span><br><span class="hljs-keyword">if</span>(winner!=<span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">if</span>(step&gt;=<span class="hljs-number">100</span>) &#123;<br>winner=Thread.currentThread().getName();<br>System.out.println(<span class="hljs-string">&quot;winner is&quot;</span>+winner);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br>Hello race=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hello</span>();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(race,<span class="hljs-string">&quot;兔子&quot;</span>).start();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(race,<span class="hljs-string">&quot;乌龟&quot;</span>).start();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="实现Callable接口"><a href="#实现Callable接口" class="headerlink" title="实现Callable接口"></a>实现Callable接口</h2><p>好处：1.可以定义返回值       2.可以抛出异常</p><p>t1就是实现Callable接口的类的实例化对象</p><p>要重写call方法，可以自己设定它的返回值和哪个Collable接口的泛型类型一致</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918369.png" alt="image-20220704144914060"></p><h2 id="静态代理模式"><a href="#静态代理模式" class="headerlink" title="静态代理模式"></a>静态代理模式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> hello;<br><span class="hljs-comment">//静态代理模式：</span><br><span class="hljs-comment">//真实对象和代理对象都要实现同一个接口</span><br><span class="hljs-comment">//代理对象要代理真实角色</span><br><span class="hljs-comment">//好处：</span><br>        <span class="hljs-comment">//代理对象可以做很多真实对象做不了的事情</span><br>        <span class="hljs-comment">//真实对象专注做自己的事情</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br>WeddingCompany weddingCompany=<span class="hljs-keyword">new</span> <span class="hljs-title class_">WeddingCompany</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">You</span>());<span class="hljs-comment">//我来、把自己给婚庆公司</span><br>weddingCompany.HappyMarry();<span class="hljs-comment">//婚庆公司代理我结婚，没有通过我直接去调用结婚的方法</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Marry</span>&#123;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">HappyMarry</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">You</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Marry</span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">HappyMarry</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;我要结婚了&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-comment">//婚庆公司代理我去结婚，还是我去结婚</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">WeddingCompany</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Marry</span>&#123;<br><span class="hljs-comment">//这个地方是一个真实的结婚的角色</span><br><span class="hljs-keyword">private</span> Marry target;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">WeddingCompany</span><span class="hljs-params">(Marry target)</span> &#123;<br><span class="hljs-built_in">this</span>.target=target;<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">HappyMarry</span><span class="hljs-params">()</span> &#123;<br>before();<br>        <span class="hljs-built_in">this</span>.target.HappyMarry();<span class="hljs-comment">//这就是真实对象</span><br>        after();<br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;结婚之后，收尾款&quot;</span>);<br><br><br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;结婚之前，布置现场&quot;</span>);<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>类比到多线程：new Thread(()-&gt;System.out.println(“我爱你”)).start();</p><p>Thread类代理Runnable接口那个真实对象</p><h2 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h2><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918130.png" alt="image-20220704153420537"></p><p>new是创建状态             dead是死亡状态</p><h2 id="停止线程"><a href="#停止线程" class="headerlink" title="停止线程"></a>停止线程</h2><p>不推荐使用jdk提供的stop()  destroy()方法</p><p>推荐线程自己停下来</p><p>建议使用一个标志位进行终止变量 当flag&#x3D;false，则终止线程运行</p><p>&#x2F;&#x2F;测试stop<br>&#x2F;&#x2F;1.建议线程正常停止—》利用次数，不建议死循环<br>&#x2F;&#x2F;2.建议使用标志位–&gt;设置一个标志位<br>&#x2F;&#x2F;3.不要使用stop或者destroy等果实或者JDK不建议使用的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br><br><span class="hljs-comment">//1设置一个标识位</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> flag=<span class="hljs-literal">true</span>;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(flag) &#123;<br>System.out.println(<span class="hljs-string">&quot;run    thread&quot;</span>+i++);<br>&#125;<br><br>&#125;<br><span class="hljs-comment">//2.设置一个公开的方法停止线程</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stop</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-built_in">this</span>.flag=<span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br>Hello teststop=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hello</span>();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(teststop).start();<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">1000</span>;i++) &#123;<br>System.out.println(<span class="hljs-string">&quot;main&quot;</span>+i);<br><span class="hljs-keyword">if</span>(i==<span class="hljs-number">900</span>) &#123;<br><span class="hljs-comment">//调用stop方法切换标志位，让线程停止</span><br>teststop.stop();<br>System.out.println(<span class="hljs-string">&quot;线程该停止了&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="线程休眠（sleep）"><a href="#线程休眠（sleep）" class="headerlink" title="线程休眠（sleep）"></a>线程休眠（sleep）</h2><p>sleep指定当前线程阻塞的毫秒数</p><p>sleep存在异常InterruptedException</p><p>sleep时间达到后线程进入就绪状态</p><p>sleep可以模拟网络延迟，倒计时等</p><p>每一个对象都有一个锁，sleep不会释放锁</p><p><strong>&#x2F;&#x2F;模拟网络延时，放大问题的发生性</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> ticketNums=<span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>    <span class="hljs-keyword">if</span>(ticketNums&lt;=<span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">try</span> &#123;<br>Thread.sleep(<span class="hljs-number">200</span>);<span class="hljs-comment">//模拟延时,是当前线程进入休息状态</span><br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br>    System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;--&gt;拿到了第&quot;</span>+ticketNums--+<span class="hljs-string">&quot;票&quot;</span>);<br>    <br><br>    &#125;<br>    &#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br>Hello ticket=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hello</span>();<br><span class="hljs-comment">//Thread后面的第二个参数是这个线程的名字</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(ticket,<span class="hljs-string">&quot;小明&quot;</span>).start();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(ticket,<span class="hljs-string">&quot;老师&quot;</span>).start();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(ticket,<span class="hljs-string">&quot;黄牛党&quot;</span>).start();<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>模拟倒计时</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tenDown</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException&#123;<br><span class="hljs-type">int</span> num=<span class="hljs-number">10</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>Thread.sleep(<span class="hljs-number">1000</span>);<br>System.out.println(num--);<br><span class="hljs-keyword">if</span>(num&lt;=<span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br><br><br><span class="hljs-keyword">try</span> &#123;<br>tenDown();<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>获取当前系统时间</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span>&#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br>      Date startTime=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(System.currentTimeMillis());<span class="hljs-comment">//获取当前的时间Mon Jul 04 16:40:30 CST 2022</span><br>      <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>Thread.sleep(<span class="hljs-number">1000</span>);<br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;HH:mm:ss&quot;</span>).format(startTime));<span class="hljs-comment">//16:40:30</span><br>startTime=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(System.currentTimeMillis());<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>      <br>      &#125;<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="礼让线程"><a href="#礼让线程" class="headerlink" title="礼让线程"></a>礼让线程</h2><p>礼让线程(yield)：让当前正在执行的线程暂停，但不阻塞</p><p>将线程从运行状态转为就绪状态</p><p>让cpu重新调度，礼让不一定成功，看CPU心情</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public <span class="hljs-keyword">class</span> Hello&#123;<br><br>public static void main(String <span class="hljs-literal">[]</span>args) &#123;<br>Myyield e=<span class="hljs-keyword">new</span> <span class="hljs-constructor">Myyield()</span>;<br><span class="hljs-keyword">new</span> <span class="hljs-constructor">Thread(<span class="hljs-params">e</span>,<span class="hljs-string">&quot;a&quot;</span>)</span>.start<span class="hljs-literal">()</span>;<br><span class="hljs-keyword">new</span> <span class="hljs-constructor">Thread(<span class="hljs-params">e</span>,<span class="hljs-string">&quot;b&quot;</span>)</span>.start<span class="hljs-literal">()</span>;<br><br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> Myyield implements Runnable&#123;<br><br>@Override<br>public void run<span class="hljs-literal">()</span> &#123;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>current<span class="hljs-constructor">Thread()</span>.get<span class="hljs-constructor">Name()</span>+<span class="hljs-string">&quot;线程开始执行&quot;</span>);<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>yield<span class="hljs-literal">()</span>;<span class="hljs-comment">//礼让</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>current<span class="hljs-constructor">Thread()</span>.get<span class="hljs-constructor">Name()</span>+<span class="hljs-string">&quot;线程停止执行&quot;</span>);<br><br>&#125;<br><br>&#125;<br>结果：a线程开始执行<br>     b线程开始执行<br>     a线程停止执行<br>     b线程停止执行<br></code></pre></td></tr></table></figure><h2 id="线程强制执行（join）"><a href="#线程强制执行（join）" class="headerlink" title="线程强制执行（join）"></a>线程强制执行（join）</h2><p>join合并线程，待此线程执行完成之后再执行其他线程，其他线程阻塞</p><p>可以想象成插队</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">1000</span>;i++) &#123;<br>System.out.println(<span class="hljs-string">&quot;线程vip来了&quot;</span>);<br>&#125;<br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br><span class="hljs-comment">//启动我们的线程</span><br>Hello testjoin=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hello</span>();<br>Thread a=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(testjoin);<br>a.start();<br><span class="hljs-comment">//主线程</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">500</span>;i++) &#123;<br><span class="hljs-keyword">if</span>(i==<span class="hljs-number">200</span>) &#123;<br>a.join();<span class="hljs-comment">//强制让run方法线程执行完毕再执行主线程</span><br>&#125;<br>System.out.println(<span class="hljs-string">&quot;main&quot;</span>+i);<br>&#125;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="观测线程状态"><a href="#观测线程状态" class="headerlink" title="观测线程状态"></a>观测线程状态</h2><ul><li><ul><li><a href="../../java/lang/Thread.State.html#NEW"><code>NEW</code></a><br>尚未启动的线程处于此状态。 </li><li><a href="../../java/lang/Thread.State.html#RUNNABLE"><code>RUNNABLE</code></a><br>在Java虚拟机中执行的线程处于此状态。 </li><li><a href="../../java/lang/Thread.State.html#BLOCKED"><code>BLOCKED</code></a><br>被阻塞等待监视器锁定的线程处于此状态。 </li><li><a href="../../java/lang/Thread.State.html#WAITING"><code>WAITING</code></a><br>正在等待另一个线程执行特定动作的线程处于此状态。 </li><li><a href="../../java/lang/Thread.State.html#TIMED_WAITING"><code>TIMED_WAITING</code></a><br>正在等待另一个线程执行动作达到指定等待时间的线程处于此状态。 </li><li><a href="../../java/lang/Thread.State.html#TERMINATED"><code>TERMINATED</code></a><br>已退出的线程处于此状态</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>Thread thread=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>Thread.sleep(<span class="hljs-number">1000</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;abc&quot;</span>);<br><br>&#125;);<br><br>           <span class="hljs-comment">//观察状态</span><br>Thread.State state=thread.getState();<br>            System.out.println(state);<span class="hljs-comment">//NEW</span><br>        <span class="hljs-comment">//观察启动后</span><br>            thread.start();<br>            state=thread.getState();<br>            <span class="hljs-keyword">while</span>(state!=Thread.State.TERMINATED) &#123;<br>            Thread.sleep(<span class="hljs-number">100</span>);<br>            state=thread.getState();<br>            System.out.println(state);<br>            &#125;<br>&#125;<br><br>&#125;<br>死亡之后的线程不能够被重新启动，一个线程不能够启动两次<br></code></pre></td></tr></table></figure><h2 id="线程的优先级"><a href="#线程的优先级" class="headerlink" title="线程的优先级"></a>线程的优先级</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>System.out.println(Thread.currentThread().getPriority());<span class="hljs-comment">//主线程默认优先级</span><br>MyPriority myPriority=<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyPriority</span>();<br>Thread t1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(myPriority,<span class="hljs-string">&quot;1&quot;</span>);<br>Thread t2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(myPriority,<span class="hljs-string">&quot;2&quot;</span>);<br>Thread t3=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(myPriority,<span class="hljs-string">&quot;3&quot;</span>);<br>Thread t4=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(myPriority,<span class="hljs-string">&quot;4&quot;</span>);<br>Thread t5=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(myPriority,<span class="hljs-string">&quot;5&quot;</span>);<br>Thread t6=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(myPriority,<span class="hljs-string">&quot;6&quot;</span>);<br><span class="hljs-comment">//先设置优先级，再启动</span><br>t1.start();<br>t2.setPriority(<span class="hljs-number">1</span>);<br>t2.start();<br>t3.setPriority(<span class="hljs-number">4</span>);<br>t3.start();<br>t4.setPriority(Thread.MAX_PRIORITY);<br>t4.start();<br><span class="hljs-comment">//设置优先级大于10小于0会报错</span><br><span class="hljs-comment">/*t5.setPriority(-1);</span><br><span class="hljs-comment">t5.start();</span><br><span class="hljs-comment">t6.setPriority(11);</span><br><span class="hljs-comment">t6.start();*/</span><br><br>&#125;<br><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyPriority</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;--&gt;&quot;</span>+Thread.currentThread().getPriority());<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>优先级低只是意味着获得调度的概率低，并不是优先级低就不会被调用了，这都是看cpu的调度</p><p>优先级低的执行，优先级高的在等待，这个就会造成性能倒置</p><h2 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h2><p>线程分为用户线程（main）和守护线程（gc）</p><p>虚拟机必须确保用户线程执行完毕</p><p>虚拟机不用等待守护线程执行完毕</p><p>如，后台记录操作日志，监控内存，垃圾回收等待</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>   <span class="hljs-type">God</span> <span class="hljs-variable">god</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">God</span>();<br>   You you=<span class="hljs-keyword">new</span> <span class="hljs-title class_">You</span>();<br>   <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(god);<br>   thread.setDaemon(<span class="hljs-literal">true</span>);<span class="hljs-comment">//默认是false表示是用户线程,正常的线程都是用户线程</span><br>   thread.start();<span class="hljs-comment">//上帝守护线程启动，这个线程不停止程序也会在用户线程执行完毕时停止,这时守护线程也就停止了</span><br>   <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(you).start();<span class="hljs-comment">//你  用户线程启动</span><br><br>&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">God</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;上帝健康快乐地活着&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">You</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">36000</span>;i++) &#123;<br>System.out.println(<span class="hljs-string">&quot;我健康快乐的活着&quot;</span>);<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;goodbyeworld&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h2><p>多个线程操作同一个资源</p><p>并发：同一个对象被多个线程同时操作</p><p>保证线程安全要有队列而且要有锁，线程同步需要队列加锁</p><p>锁就相当于排队上厕所的时候，你进去把门关上防止后面的人进来，等你解决完了下一个人才能够进来</p><p>关键词：synchronized    当一个线程获得对象的排它锁，独占资源，其他线程必须等待</p><p>存在问题：1.一个线程持有锁会导致其他所有需要此锁的线程挂起</p><p>​                     2.在多线竞争下，加锁释放锁会导致比较多的上下文切换和调度延时，引起性能问题</p><p>​                    3.如果一个优先级高的线程等待一个优先级低的线程释放锁，会导致优先级倒置，引起性能问题</p><p><strong>不安全的买票</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">//不安全的买票</span><br><span class="hljs-comment">//可能三个人都抢到同一个第十张票</span><br><span class="hljs-comment">//出现负数，就是他们都认为有一张票，当他们买完之后有人拿到的就是负的</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br>buyticket station=<span class="hljs-keyword">new</span> <span class="hljs-title class_">buyticket</span>();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(station,<span class="hljs-string">&quot;小明&quot;</span>).start();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(station,<span class="hljs-string">&quot;小红&quot;</span>).start();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(station,<span class="hljs-string">&quot;小蓝&quot;</span>).start();<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">buyticket</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br><span class="hljs-comment">//票</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> ticketNum=<span class="hljs-number">10</span>;<br><span class="hljs-type">boolean</span> flag=<span class="hljs-literal">true</span>;<span class="hljs-comment">//外部停止方式</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">//买票</span><br><span class="hljs-keyword">while</span>(flag) &#123;<br><br><br><span class="hljs-keyword">try</span> &#123;<br>buy();<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br>&#125;<br><br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buy</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br><span class="hljs-comment">//判断是否有票</span><br><span class="hljs-keyword">if</span>(ticketNum&lt;=<span class="hljs-number">0</span>) &#123;<br>flag=<span class="hljs-literal">false</span>;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-comment">//模拟延时</span><br>Thread.sleep(<span class="hljs-number">100</span>);<br><span class="hljs-comment">//买票</span><br>System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;拿到&quot;</span>+ticketNum--);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>银行取钱不安全</strong></p><p>最后钱会变成负数，总共100，你想取50你对象想去100，你俩看到的都是余额100块，所以会造成余额为负数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br><span class="hljs-comment">//账户</span><br>Account account=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Account</span>(<span class="hljs-number">100</span>,<span class="hljs-string">&quot;结婚基金&quot;</span>);<br><br><br>Drawing you=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Drawing</span>(account,<span class="hljs-number">50</span>,<span class="hljs-string">&quot;你&quot;</span>);<br>Drawing girl=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Drawing</span>(account,<span class="hljs-number">100</span>,<span class="hljs-string">&quot;她&quot;</span>);<span class="hljs-comment">//第三个参数传入的是这个线程的名字</span><br>you.start();<br>girl.start();<br>&#125;<br><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Account</span>&#123;<br><span class="hljs-type">int</span> money;<span class="hljs-comment">//金额</span><br>String name;<span class="hljs-comment">//卡名</span><br>Account account;<span class="hljs-comment">//账户</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Account</span><span class="hljs-params">(<span class="hljs-type">int</span> money, String name)</span> &#123;<br><span class="hljs-built_in">super</span>();<br><span class="hljs-built_in">this</span>.money = money;<br><span class="hljs-built_in">this</span>.name = name;<br>&#125;<br><br><br><br>&#125;<br><span class="hljs-comment">//银行：模拟取款</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Drawing</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br><span class="hljs-comment">//取了多少钱</span><br><span class="hljs-type">int</span> drawingMoney;<br><span class="hljs-comment">//现在手里有多少钱</span><br><span class="hljs-type">int</span>  nowMoney;<br>Account account ;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Drawing</span><span class="hljs-params">(Account account, <span class="hljs-type">int</span> drawingMoney, String name)</span> &#123;<br><span class="hljs-built_in">super</span>(name);<span class="hljs-comment">//这个线程的名字</span><br><span class="hljs-built_in">this</span>.account = account;<br><span class="hljs-built_in">this</span>.drawingMoney = drawingMoney;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">//判断有没有钱</span><br><span class="hljs-keyword">if</span>(account.money-drawingMoney&lt;<span class="hljs-number">0</span>) &#123;<br>System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;钱不够取不到&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">try</span> &#123;<br>Thread.sleep(<span class="hljs-number">3000</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br><span class="hljs-comment">//卡内金额=金额-你取的钱</span><br>account.money=account.money-drawingMoney;<br><span class="hljs-comment">//你手里的钱</span><br>nowMoney=nowMoney+drawingMoney;<br><br>System.out.println(account.name+<span class="hljs-string">&quot;余额为:&quot;</span>+account.money);<br><span class="hljs-comment">//Thread.currentThread().getName()=this.getName()</span><br>System.out.println(<span class="hljs-built_in">this</span>.getName()+<span class="hljs-string">&quot;手里的钱:&quot;</span>+nowMoney);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>ArrayList集合线程不安全</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br>List&lt;String&gt; lise=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10000</span>;i++) &#123;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>lise.add(Thread.currentThread().getName());<br>&#125;).start();<br>&#125;<br><span class="hljs-keyword">try</span> &#123;<br>Thread.sleep(<span class="hljs-number">3000</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br>System.out.println(lise.size());<br><br><br>&#125;<br><br>&#125;<br>结果：<span class="hljs-number">9992</span><br>    可能会有两个元素同时占同一个坑位<br></code></pre></td></tr></table></figure><p>线程同步的修改</p><p>使用synchronized修饰那个会出现线程问题的方法</p><p>这个买票的例子就是一个对象所以在buy方法前面加一个synchronized就可以</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">//不安全的买票</span><br><span class="hljs-comment">//可能三个人都抢到同一个第十张票</span><br><span class="hljs-comment">//出现负数，就是他们都认为有一张票，当他们买完之后有人拿到的就是负的</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br>buyticket station=<span class="hljs-keyword">new</span> <span class="hljs-title class_">buyticket</span>();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(station,<span class="hljs-string">&quot;小明&quot;</span>).start();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(station,<span class="hljs-string">&quot;小红&quot;</span>).start();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(station,<span class="hljs-string">&quot;小蓝&quot;</span>).start();<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">buyticket</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br><span class="hljs-comment">//票</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> ticketNum=<span class="hljs-number">10</span>;<br><span class="hljs-type">boolean</span> flag=<span class="hljs-literal">true</span>;<span class="hljs-comment">//外部停止方式</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">//买票</span><br><span class="hljs-keyword">while</span>(flag) &#123;<br><br><br><span class="hljs-keyword">try</span> &#123;<br>buy();<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br>&#125;<br><br>&#125;<br><span class="hljs-comment">//synchronized同步方法，锁的是this，会一个一个进来</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buy</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br><span class="hljs-comment">//判断是否有票</span><br><span class="hljs-keyword">if</span>(ticketNum&lt;=<span class="hljs-number">0</span>) &#123;<br>flag=<span class="hljs-literal">false</span>;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-comment">//模拟延时</span><br>Thread.sleep(<span class="hljs-number">100</span>);<br><span class="hljs-comment">//买票</span><br>System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;拿到&quot;</span>+ticketNum--);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>下面这个取钱的如果按照上面那个一样在run方法前面加synchronized还是会出现负的余额，因为它是两个对象</p><p>这个就要用同步块   synchronized (Obj){}</p><p>obj称之为同步监视器</p><p>同步监视器的执行过程</p><p>1.第一个线程访问，锁定同步监视器，执行器中的代码</p><p>2.第二个·线程访问，发现同步监视器被锁定，无法继续访问</p><p>3.第一个线程访问完毕，解锁同步监视器</p><p>4.第二个线程访问，发现同步监视器没有锁，然后锁定并访问</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String []args)</span> </span>&#123;<br><span class="hljs-comment">//账户</span><br>Account account=<span class="hljs-keyword">new</span> Account(<span class="hljs-number">100</span>,<span class="hljs-string">&quot;结婚基金&quot;</span>);<br><br><br>Drawing you=<span class="hljs-keyword">new</span> Drawing(account,<span class="hljs-number">50</span>,<span class="hljs-string">&quot;你&quot;</span>);<br>Drawing girl=<span class="hljs-keyword">new</span> Drawing(account,<span class="hljs-number">100</span>,<span class="hljs-string">&quot;她&quot;</span>);<span class="hljs-comment">//第三个参数传入的是这个线程的名字</span><br>you.start();<br>girl.start();<br>&#125;<br><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Account</span></span>&#123;<br><span class="hljs-keyword">int</span> money;<span class="hljs-comment">//金额</span><br>String name;<span class="hljs-comment">//卡名</span><br>Account account;<span class="hljs-comment">//账户</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Account</span><span class="hljs-params">(<span class="hljs-keyword">int</span> money, String name)</span> </span>&#123;<br><span class="hljs-keyword">super</span>();<br><span class="hljs-keyword">this</span>.money = money;<br><span class="hljs-keyword">this</span>.name = name;<br>&#125;<br><br><br><br>&#125;<br><span class="hljs-comment">//银行：模拟取款</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Drawing</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span></span>&#123;<br><span class="hljs-comment">//取了多少钱</span><br><span class="hljs-keyword">int</span> drawingMoney;<br><span class="hljs-comment">//现在手里有多少钱</span><br><span class="hljs-keyword">int</span>  nowMoney;<br>Account account ;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Drawing</span><span class="hljs-params">(Account account, <span class="hljs-keyword">int</span> drawingMoney, String name)</span> </span>&#123;<br><span class="hljs-keyword">super</span>(name);<span class="hljs-comment">//这个线程的名字</span><br><span class="hljs-keyword">this</span>.account = account;<br><span class="hljs-keyword">this</span>.drawingMoney = drawingMoney;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//判断有没有钱</span><br><span class="hljs-keyword">synchronized</span>(account) &#123;<span class="hljs-comment">//这里面是就是需要排队使用的资源，也就是account对象</span><br><span class="hljs-keyword">if</span>(account.money-drawingMoney&lt;<span class="hljs-number">0</span>) &#123;<br>System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;钱不够取不到&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">try</span> &#123;<br>Thread.sleep(<span class="hljs-number">3000</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br><span class="hljs-comment">//卡内金额=金额-你取的钱</span><br>account.money=account.money-drawingMoney;<br><span class="hljs-comment">//你手里的钱</span><br>nowMoney=nowMoney+drawingMoney;<br><br>System.out.println(account.name+<span class="hljs-string">&quot;余额为:&quot;</span>+account.money);<br><span class="hljs-comment">//Thread.currentThread().getName()=this.getName()</span><br>System.out.println(<span class="hljs-keyword">this</span>.getName()+<span class="hljs-string">&quot;手里的钱:&quot;</span>+nowMoney);<br>&#125;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>下面这个和上面那个一样，锁住的是lise集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br>List&lt;String&gt; lise=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10000</span>;i++) &#123;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br><span class="hljs-keyword">synchronized</span>(lise) &#123;<br>lise.add(Thread.currentThread().getName());<br>&#125;<br>&#125;).start();<br>&#125;<br><span class="hljs-keyword">try</span> &#123;<br>Thread.sleep(<span class="hljs-number">3000</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br>System.out.println(lise.size());<br><br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>放在synchronized块里面的是可能会出现问题的代码</p><h2 id="一个线程安全的集合"><a href="#一个线程安全的集合" class="headerlink" title="一个线程安全的集合"></a>一个线程安全的集合</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.concurrent.CopyOnWriteArrayList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br>CopyOnWriteArrayList&lt;String&gt; list=<span class="hljs-keyword">new</span> <span class="hljs-title class_">CopyOnWriteArrayList</span>&lt;String&gt;();<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">1000</span>;i++) &#123;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>list.add(Thread.currentThread().getName());<br>&#125;).start();<br>&#125;<br>System.out.println(list.size());<br><br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><p>多个线程各自占有一些共享资源，并且互相等待其他线程占有的资源才能运行，而导致两个或者多个线程都在等待对方释放资源，都停止执行的情形，某一个同步块同时拥有两个以上的锁时，就可能会发生死锁的问题</p><p>&#x2F;&#x2F;死锁：多个线程互相抱着对方需要的资源，然后形成僵持</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br>MakeUp  g1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">MakeUp</span>(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;灰姑娘&quot;</span>);<br>MakeUp  g2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">MakeUp</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;白雪公主&quot;</span>);<br><br><br>g1.start();<br>g2.start();<br>&#125;<br><br>&#125;<br><br><span class="hljs-comment">//口红</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Lipstick</span>&#123;<br><br>&#125;<br><br><span class="hljs-comment">//镜子</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Mirror</span>&#123;<br><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MakeUp</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br><span class="hljs-comment">//需要的资源只有一份，用static保证只有一份</span><br><span class="hljs-keyword">static</span> Lipstick lipstick=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Lipstick</span>();<br><span class="hljs-keyword">static</span> Mirror mirror=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Mirror</span>();<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">MakeUp</span><span class="hljs-params">(<span class="hljs-type">int</span> choice,String girlname)</span> &#123;<br><span class="hljs-built_in">this</span>.choice=choice;<br><span class="hljs-built_in">this</span>.girlname=girlname;<br>&#125;<br><span class="hljs-type">int</span> choice;<span class="hljs-comment">//选择</span><br>String girlname;<span class="hljs-comment">//使用化妆品的人</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">try</span> &#123;<br>makeup();<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br>&#125;<br><span class="hljs-comment">//化妆，互相持有对方的锁，就是需要拿到对方的资源</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">makeup</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br><span class="hljs-keyword">if</span>(choice==<span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">synchronized</span>(lipstick) &#123;<br>System.out.println(<span class="hljs-built_in">this</span>.girlname+<span class="hljs-string">&quot;获得口红的锁&quot;</span>);<br>Thread.sleep(<span class="hljs-number">1000</span>);<br><br><br><span class="hljs-keyword">synchronized</span>(mirror) &#123;<span class="hljs-comment">//一秒钟之后获得镜子</span><br>System.out.println(<span class="hljs-built_in">this</span>.girlname+<span class="hljs-string">&quot;获得镜子的锁&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">synchronized</span>(mirror) &#123;<br>System.out.println(<span class="hljs-built_in">this</span>.girlname+<span class="hljs-string">&quot;获得镜子的锁&quot;</span>);<br>Thread.sleep(<span class="hljs-number">1000</span>);<br><br><span class="hljs-keyword">synchronized</span>(lipstick) &#123;<span class="hljs-comment">//一秒钟之后获得镜子</span><br>System.out.println(<span class="hljs-built_in">this</span>.girlname+<span class="hljs-string">&quot;获得口红的锁&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br><br><br>​<br><br>&#125;<br><br>&#125;<br>结果：<br>    白雪公主获得镜子的锁<br>灰姑娘获得口红的锁<br>    这样之后他们还想要对方的东西，所以程序就卡死了<br></code></pre></td></tr></table></figure><p>解决方法</p><p>变成两个锁，不是一个锁在另一个锁里面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.concurrent.CopyOnWriteArrayList;<br><br><span class="hljs-comment">//死锁：多个线程互相抱着对方需要的资源，然后形成僵持</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br>MakeUp  g1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">MakeUp</span>(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;灰姑娘&quot;</span>);<br>MakeUp  g2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">MakeUp</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;白雪公主&quot;</span>);<br><br><br>g1.start();<br>g2.start();<br>&#125;<br><br>&#125;<br><br><span class="hljs-comment">//口红</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Lipstick</span>&#123;<br><br>&#125;<br><br><span class="hljs-comment">//镜子</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Mirror</span>&#123;<br><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MakeUp</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br><span class="hljs-comment">//需要的资源只有一份，用static保证只有一份</span><br><span class="hljs-keyword">static</span> Lipstick lipstick=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Lipstick</span>();<br><span class="hljs-keyword">static</span> Mirror mirror=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Mirror</span>();<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">MakeUp</span><span class="hljs-params">(<span class="hljs-type">int</span> choice,String girlname)</span> &#123;<br><span class="hljs-built_in">this</span>.choice=choice;<br><span class="hljs-built_in">this</span>.girlname=girlname;<br>&#125;<br><span class="hljs-type">int</span> choice;<span class="hljs-comment">//选择</span><br>String girlname;<span class="hljs-comment">//使用化妆品的人</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">try</span> &#123;<br>makeup();<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br>&#125;<br><span class="hljs-comment">//化妆，互相持有对方的锁，就是需要拿到对方的资源</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">makeup</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br><span class="hljs-keyword">if</span>(choice==<span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">synchronized</span>(lipstick) &#123;<br>System.out.println(<span class="hljs-built_in">this</span>.girlname+<span class="hljs-string">&quot;获得口红的锁&quot;</span>);<br>Thread.sleep(<span class="hljs-number">1000</span>);<br><br>&#125;<br><br><span class="hljs-keyword">synchronized</span>(mirror) &#123;<span class="hljs-comment">//一秒钟之后获得镜子</span><br>System.out.println(<span class="hljs-built_in">this</span>.girlname+<span class="hljs-string">&quot;获得镜子的锁&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">synchronized</span>(mirror) &#123;<br>System.out.println(<span class="hljs-built_in">this</span>.girlname+<span class="hljs-string">&quot;获得镜子的锁&quot;</span>);<br>Thread.sleep(<span class="hljs-number">1000</span>);<br><br>&#125;<br><span class="hljs-keyword">synchronized</span>(lipstick) &#123;<span class="hljs-comment">//一秒钟之后获得镜子</span><br>System.out.println(<span class="hljs-built_in">this</span>.girlname+<span class="hljs-string">&quot;获得口红的锁&quot;</span>);<br>&#125;<br>&#125;<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>产生死锁的条件：1.互斥条件：一个资源每次只能被一个进程使用</p><p>2，请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放</p><p>3.不剥夺条件：进程已获得的资源，在未使用完之前，不能强行剥夺</p><p>4.循环等待条件：若干进程之间形成一种头尾相接的循环等待资源关闭</p><p>破坏上面的一个条件就可以避免死锁的发生</p><h2 id="Lock锁"><a href="#Lock锁" class="headerlink" title="Lock锁"></a>Lock锁</h2><p>控制多个线程对共享资源进行访问的工具</p><p>ReentrantLock类实现了Lock</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs csharp">import java.util.concurrent.locks.ReentrantLock;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Main</span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String args[]</span>)</span> &#123;<br>testlock testlock1=<span class="hljs-keyword">new</span> testlock();<br><span class="hljs-keyword">new</span> Thread(testlock1,<span class="hljs-string">&quot;小蓝&quot;</span>).start();<br><span class="hljs-keyword">new</span> Thread(testlock1,<span class="hljs-string">&quot;小红&quot;</span>).start();<br><span class="hljs-keyword">new</span> Thread(testlock1,<span class="hljs-string">&quot;小明&quot;</span>).start();<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title">testlock</span> <span class="hljs-title">implements</span> <span class="hljs-title">Runnable</span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> ticketnums=<span class="hljs-number">10</span>;<br><span class="hljs-comment">//定义lock锁</span><br><span class="hljs-keyword">private</span> final ReentrantLock <span class="hljs-keyword">lock</span>=<span class="hljs-keyword">new</span> ReentrantLock();<br>@Override<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span>()</span> &#123;<br><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">lock</span>.<span class="hljs-keyword">lock</span>();<span class="hljs-comment">//加锁</span><br><span class="hljs-keyword">if</span>(ticketnums&gt;<span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>Thread.sleep(<span class="hljs-number">1000</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br>System.<span class="hljs-keyword">out</span>.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;拿到了第&quot;</span>+ticketnums--+<span class="hljs-string">&quot;票&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">finally</span>&#123;<br><span class="hljs-comment">//解锁</span><br><span class="hljs-keyword">lock</span>.unlock();<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>加锁和解锁最好是在try和finally里面，而且try中是可能会出现问题的代码</p><h2 id="线程协作"><a href="#线程协作" class="headerlink" title="线程协作"></a>线程协作</h2><p>线程通信：这是一个线程同步问题，生产者和消费者共享同一个资源，并且生产者和消费者之间相互依赖，互为条件</p><p>对于生产者，没有生产产品之前，要通知消费者等待，有了产品之后，马上通知消费者消费</p><p>对于消费者，在消费之后，要通知生产者结束消费，需要生产新的产品以供消费</p><p>在生产者消费者问题中，仅有synchronized是不够的</p><p>​                synchronized可阻止并发更新同一个共享资源，实现了同步</p><p>​                synchronized不能用来实现不同线程之间的消息传递</p><p>通过一个标志来判断什么时候应该等待，什么时候应该唤醒</p><p>notifyAll方法是唤醒线程只能唤醒wait等待的线程</p><p>wait方法是让该线程等待</p><h3 id="管程法"><a href="#管程法" class="headerlink" title="管程法"></a>管程法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantLock;<br><br><span class="hljs-comment">//测试：生产者消费者模型，利用缓冲区来解决：管程法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br>SynContainer container=<span class="hljs-keyword">new</span> <span class="hljs-title class_">SynContainer</span>();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Productor</span>(container).start();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Consumer</span>(container).start();<br><br><br><br>&#125;<br>&#125;<br><br><span class="hljs-comment">//生产者</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Productor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>SynContainer container;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Productor</span><span class="hljs-params">(SynContainer container)</span> &#123;<br><span class="hljs-built_in">this</span>.container=container;<br>&#125;<br><span class="hljs-comment">//生产</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">100</span>;i++) &#123;<br>    System.out.println(<span class="hljs-string">&quot;生产了&quot;</span>+i+<span class="hljs-string">&quot;只鸡&quot;</span>);<br>    container.push(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Chicken</span>(i));<br>    &#125;<br>&#125;<br><br>&#125;<br><br><span class="hljs-comment">//消费者</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Consumer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>SynContainer container;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Consumer</span><span class="hljs-params">(SynContainer container)</span> &#123;<br><span class="hljs-built_in">this</span>.container=container;<br>&#125;<br><span class="hljs-comment">//消费</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">100</span>;i++) &#123;<br>    System.out.println(<span class="hljs-string">&quot;消费了--&gt;&quot;</span>+container.pop().id+<span class="hljs-string">&quot;只鸡&quot;</span>);<br>    &#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//产品</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Chicken</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> id;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Chicken</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br><span class="hljs-built_in">this</span>.id=id;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//缓冲区</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SynContainer</span>&#123;<br><span class="hljs-comment">//需要一个容器大小</span><br>Chicken[] chickens=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Chicken</span>[<span class="hljs-number">10</span>];<br><span class="hljs-comment">//容器计数器</span><br><span class="hljs-type">int</span> count=<span class="hljs-number">0</span>;<br><span class="hljs-comment">//生产者放入产品</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">push</span><span class="hljs-params">(Chicken chicken)</span> &#123;<br><span class="hljs-comment">//如果容器满了就要等待消费者消费</span><br><span class="hljs-keyword">if</span>(count==chickens.length) &#123;<br><span class="hljs-comment">//通知生产者消费，生产等待</span><br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-built_in">this</span>.wait();<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br>&#125;<br><span class="hljs-comment">//如果没有满，我们就需要放入产品</span><br>chickens[count]=chicken;<br>count++;<br><br><br><span class="hljs-comment">//可以通知消费者消费了</span><br><span class="hljs-built_in">this</span>.notifyAll();<br>&#125;<br><br><span class="hljs-comment">//消费者消费产品</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> Chicken <span class="hljs-title function_">pop</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">//判断是否能消费</span><br><span class="hljs-keyword">if</span>(count==<span class="hljs-number">0</span>) &#123;<br>       <span class="hljs-comment">//等待生产者生产，消费者等待</span><br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-built_in">this</span>.wait();<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br>&#125;<br><span class="hljs-comment">//如果可以消费</span><br>count--;<br>Chicken chicken=chickens[count];<br><br><span class="hljs-comment">//吃完了，通知生产者生产</span><br><span class="hljs-built_in">this</span>.notifyAll();<br><span class="hljs-keyword">return</span> chicken;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="信号灯法"><a href="#信号灯法" class="headerlink" title="信号灯法"></a>信号灯法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantLock;<br><br><span class="hljs-comment">//测试：生产者消费者模型，信号灯法，标志位解决</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br>TV tv=<span class="hljs-keyword">new</span> <span class="hljs-title class_">TV</span>();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Player</span>(tv).start();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Watcher</span>(tv).start();<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//生产者-&gt;演员</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Player</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>TV tv;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Player</span><span class="hljs-params">(TV tv)</span> &#123;<br><span class="hljs-built_in">this</span>.tv=tv;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">20</span>;i++) &#123;<br><span class="hljs-keyword">if</span>(i%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>) &#123;<br><span class="hljs-built_in">this</span>.tv.play(<span class="hljs-string">&quot;快乐大本营播放中&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">this</span>.tv.play(<span class="hljs-string">&quot;抖音:记录美好生活&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//消费者-&gt;观众</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Watcher</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>TV tv;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Watcher</span><span class="hljs-params">(TV tv)</span> &#123;<br><span class="hljs-built_in">this</span>.tv=tv;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">20</span>;i++) &#123;<br><span class="hljs-built_in">this</span>.tv.watch();<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//产品-&gt;节目</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TV</span>&#123;<br><span class="hljs-comment">//演员表演，观众等待  t</span><br><span class="hljs-comment">//观众观看，演员等待  f</span><br>String voice;<span class="hljs-comment">//表演的节目</span><br><span class="hljs-type">boolean</span> flag=<span class="hljs-literal">true</span>;<br><br><br><span class="hljs-comment">//表演</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">play</span><span class="hljs-params">(String voice)</span> &#123;<br><span class="hljs-keyword">if</span>(!flag) &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-built_in">this</span>.wait();<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;演员表演了&quot;</span>+voice);<br><span class="hljs-comment">//通知观众观看</span><br><span class="hljs-built_in">this</span>.notifyAll();<span class="hljs-comment">//通知唤醒</span><br><span class="hljs-built_in">this</span>.voice=voice;<br><span class="hljs-built_in">this</span>.flag=!<span class="hljs-built_in">this</span>.flag;<br>&#125;<br><span class="hljs-comment">//观看</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">watch</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">if</span>(flag) &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-built_in">this</span>.wait();<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;观看了&quot;</span>+voice);<br><span class="hljs-comment">//通知演员要表演了</span><br><span class="hljs-built_in">this</span>.notifyAll();<br><span class="hljs-built_in">this</span>.flag=!<span class="hljs-built_in">this</span>.flag;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><h1 id="java反射"><a href="#java反射" class="headerlink" title="java反射"></a>java反射</h1><p>1.Reflection是被视为动态语言的关键，反射机制允许程序在执行期借助于Reflection API取得任何类的内部信息，并能直接操作任意对象的内部属性和方法</p><p>2.加载完类之后，在堆内存中的方法区就产生了一个Class类型的对象，这个对象就包含了完整的类的结构信息，我们可以通过这个对象看到类的结构，这个对象就像一个面镜子，透过这个镜子看到类的结构，所以我们形象的称之为，反射</p><p>动态语言和静态语言的区别就是动态语言在运行时代码可以根据某些条件改变自身结构</p><p>java之所以成为准动态语言是因为有反射机制</p><p>正常方式：引入需要的包类名称 —》通过new实例化对象–》取得实例化对象</p><p>反射方式：实例化对象–》getClass()方法–》得到完整的包类名称</p><h2 id="反射的功能"><a href="#反射的功能" class="headerlink" title="反射的功能"></a>反射的功能</h2><p><strong>反射的功能</strong></p><p><strong>反射相关的API</strong></p><p>java.lang.Class:代表一个类</p><p>java.lang.reflect.Method:代表类的方法</p><p>java.lang.reflect.Field:代表类的成员变量</p><p>java.lang.reflect.Constructor:代表类的构造器</p><h2 id="一个反射的演示"><a href="#一个反射的演示" class="headerlink" title="一个反射的演示"></a>一个反射的演示</h2><p>Person类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><span class="hljs-keyword">private</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name=name;<br>&#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;你好，我是一个人&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">showNation</span><span class="hljs-params">(String nation)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;我的国籍是&quot;</span>+nation);<br>        <span class="hljs-keyword">return</span> nation;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>ReflectionTest</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReflectionTest</span> &#123;<br>    <span class="hljs-comment">//反射之前，对于Person操作</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//创建Person类的对象</span><br>        Person p1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;Tom&quot;</span>,<span class="hljs-number">12</span>);<br>        <span class="hljs-comment">//通过对象，调用其内部属性方法</span><br>        p1.age=<span class="hljs-number">10</span>;<br>        System.out.println(p1.toString());<br>        p1.show();<br>    &#125;<br>    <span class="hljs-comment">//在Person类外部不能通过person对象调用内部私有结构</span><br>    <span class="hljs-comment">//比如name。showNation()以及私有的构造器</span><br><br>    <span class="hljs-comment">//反射之后，对于Person的操作，做的是和上面一样的事</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException, NoSuchFieldException &#123;<br>        <span class="hljs-comment">//获取一个Class类的实例对象</span><br>        Class clazz=Person.class;<br>        <span class="hljs-comment">//1.通过反射，创建Person类的对象</span><br>           <span class="hljs-comment">//获取构造器</span><br>           Constructor cons=clazz.getConstructor(String.class,<span class="hljs-type">int</span>.class);<br>           <span class="hljs-comment">//创建实例</span><br>           Object obj=cons.newInstance(<span class="hljs-string">&quot;Tom&quot;</span>,<span class="hljs-number">12</span>);<br>           Person p=(Person)obj;<br>           System.out.println(p.toString());<br><br>           <span class="hljs-comment">//2.通过反射，调用对象的指定属性方法</span><br>        Field age=clazz.getDeclaredField(<span class="hljs-string">&quot;age&quot;</span>);<br>        age.set(p,<span class="hljs-number">10</span>);<br>        System.out.println(p.toString());<br>        <span class="hljs-comment">//调用空参的show方法</span><br>        Method show=clazz.getDeclaredMethod(<span class="hljs-string">&quot;show&quot;</span>);<br>        show.invoke(p);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>疑问：通过直接new的方式或反射的方式都可以调用公共的结构，开发中到底用哪个</p><p>建议：用直接new的方式</p><p>疑问：什么时候用反射的方式</p><p>反射的特性是动态性，比如在编译的时候你无法确定到底是要实例化哪个类就是要用这种反射的方式</p><h2 id="关于Class类理解"><a href="#关于Class类理解" class="headerlink" title="关于Class类理解"></a>关于Class类理解</h2><p>1.类的加载过程</p><p>   程序经过javac.exe命令以后，会生成一个或多个字节码文件（.class结尾）</p><p>   接着我们使用java.exe命令对某个字节码文件进行解释运行，相当于将某个字节码文件加载到内存中，此过程就称为类的加载，加载到内存中的类，我们就称为运行时类，此运行时类，就作为Class的一个实例</p><p>2.换句话说，Class的实例就对应的一个运行时类</p><p>3.加载<strong>到内存中的运行时类，会缓存一定的时间，在此时间之内，我们可以通过不同的方式来获取此运行时类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取大的class实例的方式</span><br> <span class="hljs-meta">@Test</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>     <span class="hljs-comment">//方式一</span><br>     <span class="hljs-comment">//加上泛型之后就避免了你后面进行强转</span><br>     Class&lt;Person&gt; clazz1=Person.class;<br>     System.out.println(clazz1);<br>     <span class="hljs-comment">//方式二:通过运行时类的对象</span><br>     Person p1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>     Class clazz2=p1.getClass();<br>     System.out.println(clazz2);<br><br>     <span class="hljs-comment">//方式三：调用Class的静态方法，forName(String classPath)</span><br>     <span class="hljs-comment">//这个路径就是看以src为基准，这种文件直接在src下就直接用文件名，如果底下还有包，就要加上包名</span><br>     Class clazz3=Class.forName(<span class="hljs-string">&quot;Person&quot;</span>);<br>     System.out.println(clazz3);<br>     System.out.println(clazz1==clazz2);<br>     System.out.println(clazz2==clazz3);<br><br>     <span class="hljs-comment">//方式四</span><br>     <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> ReflectionTest.class.getClassLoader();<br>     Class clazz4=classLoader.loadClass(<span class="hljs-string">&quot;Person&quot;</span>);<br>     System.out.println(clazz1==clazz4);<br> &#125;<br></code></pre></td></tr></table></figure><p>其他可以有Class实例的类型</p><p>哪些类型可以有Class对象？ </p><p>（1）class： 外部类，成员(成员内部类，静态内部类)，局部内部类，匿名内部类 </p><p>（2）interface：接口 （3）[]：数组 （4）enum：枚举 （5）annotation：注解@interface </p><p>（6）primitive type：基本数据类型 （7）void</p><h2 id="理解类的加载过程"><a href="#理解类的加载过程" class="headerlink" title="理解类的加载过程"></a>理解类的加载过程</h2><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918675.png" alt="image-20220927113944650"></p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918542.png" alt="image-20220927115032333"></p><p><strong>在类的加载过程中就已经执行了静态代码块，构建对象才调用实例代码块和构造方法，且实例代码块比构造方法早</strong></p><p><strong>子类加载时，先加载子类的父类，也就是父类的静态代码块先执行再是子类的静态代码块</strong></p><p><strong>子类实例化时，先是父类的实例代码块和构造器再是子类的实例代码块和构造器</strong></p><h2 id="ClassLoader"><a href="#ClassLoader" class="headerlink" title="ClassLoader"></a>ClassLoader</h2><p>类加载器作用：</p><p>将class文件字节码内容加载到内存中，并将这些静态数据转换成方 法区的运行时数据结构，然后在堆中生成一个代表这个类的java.lang.Class对象，作为 方法区中类数据的访问入口。</p><p>类缓存：标准的JavaSE类加载器可以按要求查找类，但一旦某个类被加载到类加载器 中，它将维持加载（缓存）一段时间。不过JVM垃圾回收机制可以回收这些Class对象。</p><p><img src="https://zhao1129.oss-cn-qingdao.aliyuncs.com/img/202209291918280.png" alt="image-20220927121211719"></p><p>读取文件的时候，把这个Transparent native-to-ascii conversion勾上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClassLoaderTest</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// 1.获取一个系统类加载器</span><br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> ClassLoaderTest.class.getClassLoader();<br>        System.out.println(classLoader);<br><br>        <span class="hljs-comment">//调用系统类加载器的getParent()：获取扩展类加载器</span><br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader1</span> <span class="hljs-operator">=</span> classLoader.getParent();<br>        System.out.println(classLoader1);<br>        <span class="hljs-comment">//调用扩展类加载器的getParent()：无法获取引导类加载器</span><br>        <span class="hljs-comment">//引导类加载器主要负责加载java的核心类库，无法加载自定义类的。</span><br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader2</span> <span class="hljs-operator">=</span> classLoader1.getParent();<br>        System.out.println(classLoader2);<br><br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader3</span> <span class="hljs-operator">=</span> String.class.getClassLoader();<br>        System.out.println(classLoader3);<br>    &#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    Properties 用来读取配置文件</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Properties pros=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        <span class="hljs-comment">//读取配置文件的方式一</span><br>        <span class="hljs-comment">//此时的文件默认在当前的module下</span><br>        FileInputStream fis=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;./jdbc.properties&quot;</span>);<br>        <span class="hljs-comment">//FileInputStream fis=new FileInputStream(&quot;src\\jdbc1.properties&quot;);</span><br>        System.out.println(fis);<br>        <span class="hljs-comment">//pros.load(fis);</span><br>        <span class="hljs-comment">//读取配置文件的方式二，使用ClassLoader</span><br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> ClassLoaderTest.class.getClassLoader();<br>        <span class="hljs-comment">//这个方法直接是映射到src下的文件</span><br>        <span class="hljs-comment">//在java中路径字符串中/和\\都是一样的</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> classLoader.getResourceAsStream(<span class="hljs-string">&quot;jdbc1.properties&quot;</span>);<br>        pros.load(resource);<br>        String user=pros.getProperty(<span class="hljs-string">&quot;user&quot;</span>);<br>        String password=pros.getProperty(<span class="hljs-string">&quot;password&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;user=&quot;</span>+user+<span class="hljs-string">&quot;password=&quot;</span>+password);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="java项目中的路径问题"><a href="#java项目中的路径问题" class="headerlink" title="java项目中的路径问题"></a>java项目中的路径问题</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">File</span> <span class="hljs-keyword">file</span>=<span class="hljs-keyword">new</span> <span class="hljs-keyword">File</span>(<span class="hljs-string">&quot;/&quot;</span>);<br>System.out.<span class="hljs-keyword">println</span>(<span class="hljs-keyword">file</span>.getAbsolutePath());<br><span class="hljs-comment">//D:\</span><br><span class="hljs-keyword">File</span> file1=<span class="hljs-keyword">new</span> <span class="hljs-keyword">File</span>(<span class="hljs-string">&quot;.&quot;</span>);<br>System.out.<span class="hljs-keyword">println</span>(file1.getAbsolutePath());<br>D:\IDEAjava工程\javaSE\javareflect\.<br></code></pre></td></tr></table></figure><p>&#x2F;代表的是盘符</p><p>.代表的是工程目录下的</p><p>使用FileInputStream fis&#x3D;new FileInputStream(“jdbc.properties”);</p><p>所以这个jdbc.properties也可以是.&#x2F;jdbc.properties</p><p>默认就是项目路径下，而不是src路径下，也可以用    全部的整个路径比如D:\IDEAjava工程\javaSE\javareflect\jdbc.properties</p><p>InputStream resource &#x3D; classLoader.getResourceAsStream(“jdbc1.properties”);方法就是映射到scr目录下</p><p>一般就不用相对路径了，用不明白</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livescript">而且idea中路径字符串中<span class="hljs-string">\\和/是同样的效果</span><br></code></pre></td></tr></table></figure><h2 id="创建运行时类的对象和体会动态"><a href="#创建运行时类的对象和体会动态" class="headerlink" title="创建运行时类的对象和体会动态"></a>创建运行时类的对象和体会动态</h2><p>加载到内存中的类我们就把它叫做运行时类</p><p>test1时创建运行时类的对象</p><p>test2是体会反射的动态性，就是在编译时不能确定创建哪个类对象，运行时才确定创建对象的类型          </p><p>并且方法有参数别用@test</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 通过反射创建对应的运行时类的对象</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NewInstanceTest</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IllegalAccessException, InstantiationException &#123;<br>        <span class="hljs-comment">//用了泛型之后后面就不用强转了</span><br>        Class&lt;Person&gt; clazz=Person.class;<br>        <span class="hljs-comment">//newInstance();调用子方法创建对应的运行时类的对象</span><br>        <span class="hljs-comment">//其实内部还是调用了Person的空参构造器，</span><br>        <span class="hljs-comment">//所以这个方法要求1.类必须有空参构造器</span><br>        <span class="hljs-comment">// 2.这个空参构造器的权限不是私有。通常为public</span><br><br>        <span class="hljs-comment">//在javabean中要求提供一个public的空参构造其，原因：</span><br>        <span class="hljs-comment">//1.便于通过反射，创建运行时类的对象</span><br>        <span class="hljs-comment">//2.便于子类继承此运行时类时，默认调用super(),保证父类有空参构造器</span><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> clazz.newInstance();<br>        System.out.println(obj);<br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span> num=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>().nextInt(<span class="hljs-number">3</span>);<span class="hljs-comment">//0.1.2</span><br>String path=<span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">switch</span>(num) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>        path = <span class="hljs-string">&quot;java.util.Date&quot;</span>;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>        path = <span class="hljs-string">&quot;java.lang.Object&quot;</span>;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>        path = <span class="hljs-string">&quot;Person&quot;</span>;<br>        <span class="hljs-keyword">break</span>;<br>&#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> getInstance(path);<br>            System.out.println(obj);<br>        &#125;<br>        <span class="hljs-keyword">catch</span>(Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br><br>&#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建一个指定类的对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> classPath  指定类的全类名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throwsException</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getInstance</span><span class="hljs-params">(String classPath)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        Class clazz=Class.forName(classPath);<br>        <span class="hljs-keyword">return</span> clazz.newInstance();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="提供结构丰富的Person类"><a href="#提供结构丰富的Person类" class="headerlink" title="提供结构丰富的Person类"></a>提供结构丰富的Person类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.java;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Creature</span>&lt;String&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span>&lt;String&gt;,MyInterface&#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> score;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span>&#123;<br><br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name=name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> age)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name=name;<br>        <span class="hljs-built_in">this</span>.age=age;<br>    &#125;<br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">show</span><span class="hljs-params">(String nation)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;我的国际时&quot;</span>+nation);<br>        <span class="hljs-keyword">return</span> nation;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">display</span><span class="hljs-params">(String interests)</span>&#123;<br>        <span class="hljs-keyword">return</span> interests;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(String o)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">info</span><span class="hljs-params">()</span> &#123;<br>     System.out.println(<span class="hljs-string">&quot;我是一个人&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="获取运行时类的属性结构及其内部结构"><a href="#获取运行时类的属性结构及其内部结构" class="headerlink" title="获取运行时类的属性结构及其内部结构"></a>获取运行时类的属性结构及其内部结构</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.java1;<br><br><span class="hljs-keyword">import</span> com.atguigu.java.Person;<br><span class="hljs-keyword">import</span> com.sun.deploy.util.SystemUtils;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Modifier;<br><span class="hljs-keyword">import</span> java.util.Locale;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">获取运行时类的属性结构</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FieldTest</span> &#123;<br><span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>    Class clazz= Person.class;<br>    <span class="hljs-comment">//获取属性结构</span><br>    <span class="hljs-comment">//getFields():获取当前运行时类及其父类中声明为public访问权限的属性</span><br>    Field[] fields = clazz.getFields();<br>    <span class="hljs-keyword">for</span> (Field f : fields) &#123;<br>        System.out.println(f);<br>    &#125;<br>System.out.println(<span class="hljs-string">&quot;******************&quot;</span>);<br>    <span class="hljs-comment">//getDeclaredFields():获取当前运行时类当中的所有属性</span><br>    Field[] declaredFields = clazz.getDeclaredFields();<br>    <span class="hljs-keyword">for</span> (Field f : declaredFields) &#123;<br>        System.out.println(f);<br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">//每一个属性的具体的部分也是可以拿到的</span><br><span class="hljs-comment">//权限，修饰符，数据类型，变量名，变量值</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span>&#123;<br>    Class clazz=Person.class;<br>        Field[] declaredFields = clazz.getDeclaredFields();<br>        <span class="hljs-keyword">for</span> (Field f : declaredFields) &#123;<br>        <span class="hljs-comment">//1.权限修饰符</span><br>            <span class="hljs-comment">//这个地方获取的是一个表示访问类型的数字</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">modifier</span> <span class="hljs-operator">=</span>f.getModifiers();<br>            <span class="hljs-comment">//这个地方是将访问类型的数字转换成访问类型的文字,空白是默认类型</span><br>            System.out.println(Modifier.toString(modifier));<br>            <span class="hljs-comment">//2.数据类型</span><br>               Class type=f.getType();<span class="hljs-comment">//type获得的是一个类型</span><br>               System.out.println(type.getName());<span class="hljs-comment">//这样是获得type的全名</span><br>            <span class="hljs-comment">//3.变量名</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> f.getName();<br>            System.out.println(name);<br><br>        &#125;<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="获取运行时类的方法结构和内部结构"><a href="#获取运行时类的方法结构和内部结构" class="headerlink" title="获取运行时类的方法结构和内部结构"></a>获取运行时类的方法结构和内部结构</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.java1;<br><br><span class="hljs-keyword">import</span> com.atguigu.java.Person;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.lang.reflect.Modifier;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">获取运行时类的方法结构</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MethodTest</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Person.class;<br>        <span class="hljs-comment">//getMethods:获取当前运行时类及其所有父类中声明为public权限的方法</span><br>        Method[] methods = clazz.getMethods();<br>        <span class="hljs-keyword">for</span> (Method m : methods) &#123;<br>            System.out.println(m);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;****************************&quot;</span>);<br>        <span class="hljs-comment">//获取当前运行时类中声明的所有方法，不包含父类中声明的</span><br>        Method[] declaredMethods = clazz.getDeclaredMethods();<br>        <span class="hljs-keyword">for</span> (Method m : declaredMethods) &#123;<br>            System.out.println(m);<br>        &#125;<br><br><br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    @注解</span><br><span class="hljs-comment">    权限修饰符，返回值类型，方法名（参数类型 形参名1，...）throws Exception()&#123;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Person.class;<br>        Method[] methods = clazz.getDeclaredMethods();<br>        <span class="hljs-keyword">for</span> (Method m : methods) &#123;<br>            <span class="hljs-comment">//获取权限修饰符</span><br>            System.out.println(Modifier.toString(m.getModifiers()));<br><br>            <span class="hljs-comment">//获取方法的返回值类型</span><br>            System.out.println(m.getReturnType().getName());<br><br>            <span class="hljs-comment">//获取方法名</span><br>            System.out.println(m.getName());<br>            System.out.println(<span class="hljs-string">&quot;(&quot;</span>);<br><br>            <span class="hljs-comment">//获取形参列表</span><br>            Class[] parameterTypes = m.getParameterTypes();<br>            <span class="hljs-keyword">if</span> (!(parameterTypes != <span class="hljs-literal">null</span> &amp;&amp; parameterTypes.length == <span class="hljs-number">0</span>)) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; parameterTypes.length; i++) &#123;<br>                    <span class="hljs-keyword">if</span> (i == parameterTypes.length - <span class="hljs-number">1</span>) &#123;<br>                        System.out.println(parameterTypes[i].getName() + <span class="hljs-string">&quot; args_&quot;</span> + i);<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                    System.out.println(parameterTypes[i].getName() + <span class="hljs-string">&quot; args_&quot;</span> + i + <span class="hljs-string">&quot;,&quot;</span>);<br><br>                &#125;<br>                System.out.println(<span class="hljs-string">&quot;)&quot;</span>);<br>            &#125;<br>            <span class="hljs-comment">//获取抛出的异常</span><br>            Class[] exceptionTypes = m.getExceptionTypes();<br>            <span class="hljs-keyword">if</span> (exceptionTypes.length &gt; <span class="hljs-number">0</span>) &#123;<br>                System.out.print(<span class="hljs-string">&quot;throws&quot;</span>);<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; exceptionTypes.length; i++) &#123;<br>                    <span class="hljs-keyword">if</span> (i == exceptionTypes.length - <span class="hljs-number">1</span>) &#123;<br>                        System.out.println(exceptionTypes[i].getName());<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                    System.out.println(exceptionTypes[i].getName() + <span class="hljs-string">&quot;,&quot;</span>);<br>                &#125;<br><br><br>            &#125;<br><br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="获取运行时类的构造器结构"><a href="#获取运行时类的构造器结构" class="headerlink" title="获取运行时类的构造器结构"></a>获取运行时类的构造器结构</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">package</span> com.atguigu.java1;<br><br><span class="hljs-keyword">import</span> com.atguigu.java.Person;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OtherTest</span> &#123;<br><span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> void test1()&#123;<br>    Class clazz= Person.<span class="hljs-keyword">class</span>;<br>    <span class="hljs-comment">//getConstructors获取当前运行时类中声明为public的构造器</span><br>    Constructor[] constructors = clazz.getConstructors();<br>    <span class="hljs-keyword">for</span> (Constructor <span class="hljs-keyword">constructor</span> : constructors) &#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">constructor</span>);<br>    &#125;<br>    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;***********************&quot;</span>);<br>    <span class="hljs-comment">//getDeclaredMethods获取当前运行时类中声明的所有的构造器</span><br>    Constructor[] declaredMethods = clazz.getDeclaredConstructors();<br>    <span class="hljs-keyword">for</span> (Constructor declaredMethod : declaredMethods) &#123;<br>        System.<span class="hljs-keyword">out</span>.println(declaredMethod);<br>    &#125;<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="获取运行时类的父类和泛型"><a href="#获取运行时类的父类和泛型" class="headerlink" title="获取运行时类的父类和泛型"></a>获取运行时类的父类和泛型</h2><p><strong>ParameterizedType是Type的子接口</strong></p><p><strong>Type是Class的父接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java">   <span class="hljs-comment">/*</span><br><span class="hljs-comment">    获取运行时类的父类</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Person.class;<br><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">superclass</span> <span class="hljs-operator">=</span> clazz.getSuperclass();<br>        System.out.println(superclass);<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    获取运行时类的带泛型的父类</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Person.class;<br><br>        <span class="hljs-type">Type</span> <span class="hljs-variable">genericSuperclass</span> <span class="hljs-operator">=</span> clazz.getGenericSuperclass();<br>        System.out.println(genericSuperclass);<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    获取运行时类的带泛型的父类的泛型</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    代码：逻辑性代码  vs 功能性代码</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test4</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Person.class;<br><br>        <span class="hljs-type">Type</span> <span class="hljs-variable">genericSuperclass</span> <span class="hljs-operator">=</span> clazz.getGenericSuperclass();<br>        <span class="hljs-comment">//ParameterizedType是Type的子接口</span><br>        <span class="hljs-comment">//Type是Class的父接口，就像是List和ArrayList的关系</span><br>        <span class="hljs-type">ParameterizedType</span> <span class="hljs-variable">paramType</span> <span class="hljs-operator">=</span> (ParameterizedType) genericSuperclass;<br>        <span class="hljs-comment">//获取泛型类型</span><br>        Type[] actualTypeArguments = paramType.getActualTypeArguments();<br><span class="hljs-comment">//        System.out.println(actualTypeArguments[0].getTypeName());</span><br>        <span class="hljs-comment">//将Type类型强转为class，然后再用getName，只有Type才有getTypename方法</span><br>        System.out.println(((Class)actualTypeArguments[<span class="hljs-number">0</span>]).getName());<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    获取运行时类实现的接口</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test5</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Person.class;<br><br>        Class[] interfaces = clazz.getInterfaces();<br>        <span class="hljs-keyword">for</span>(Class c : interfaces)&#123;<br>            System.out.println(c);<br>        &#125;<br><br>        System.out.println();<br>        <span class="hljs-comment">//获取运行时类的父类实现的接口</span><br>        Class[] interfaces1 = clazz.getSuperclass().getInterfaces();<br>        <span class="hljs-keyword">for</span>(Class c : interfaces1)&#123;<br>            System.out.println(c);<br>        &#125;<br><br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="获取运行时类实现的接口，所在的包，注解"><a href="#获取运行时类实现的接口，所在的包，注解" class="headerlink" title="获取运行时类实现的接口，所在的包，注解"></a>获取运行时类实现的接口，所在的包，注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">获取运行时类实现的接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test5</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Person.class;<br><br>    Class[] interfaces = clazz.getInterfaces();<br>    <span class="hljs-keyword">for</span>(Class c : interfaces)&#123;<br>        System.out.println(c);<br>    &#125;<br><br>    System.out.println();<br>    <span class="hljs-comment">//获取运行时类的父类实现的接口</span><br>    Class[] interfaces1 = clazz.getSuperclass().getInterfaces();<br>    <span class="hljs-keyword">for</span>(Class c : interfaces1)&#123;<br>        System.out.println(c);<br>    &#125;<br><br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    获取运行时类所在的包</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test6</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Person.class;<br><br>    <span class="hljs-type">Package</span> <span class="hljs-variable">pack</span> <span class="hljs-operator">=</span> clazz.getPackage();<br>    System.out.println(pack);<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    获取运行时类声明的注解</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test7</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Person.class;<br><br>    Annotation[] annotations = clazz.getAnnotations();<br>    <span class="hljs-keyword">for</span>(Annotation annos : annotations)&#123;<br>        System.out.println(annos);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="调用运行时类的指定结构"><a href="#调用运行时类的指定结构" class="headerlink" title="调用运行时类的指定结构"></a>调用运行时类的指定结构</h2><p>指定结构主要指的是属性和方法构造器</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
